void sub_1E06A9E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;

  if (*(char *)(v25 - 73) < 0)
    operator delete(*(void **)(v25 - 96));
  _Unwind_Resume(exception_object);
}

double MIL::Util::stod(std::string *a1, unint64_t a2, uint64_t a3)
{
  unint64_t size;
  int v7;
  std::string *v8;
  int v9;
  const char *v10;
  double v11;
  BOOL v12;
  std::string::size_type v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  void *v18;
  void *exception;
  uint64_t v20;
  void *v21;
  void *v22[3];
  __int128 v23;
  void *v24[3];
  __int128 v25;
  __int128 v26;
  char *v27;

  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    if (size <= 1)
      goto LABEL_9;
    v8 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v7 = *(unsigned __int8 *)(a1->__r_.__value_.__r.__words[0] + size - 1);
  }
  else
  {
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (size <= 1)
      goto LABEL_9;
    v7 = a1->__r_.__value_.__s.__data_[size - 1];
    v8 = a1;
  }
  if (v7 == 102)
  {
    v9 = v8->__r_.__value_.__s.__data_[size - 2];
    if ((v9 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x400) != 0)
      return MIL::Util::stof(a1, a2, a3);
  }
LABEL_9:
  *__error() = 0;
  v27 = 0;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = (const char *)a1;
  else
    v10 = (const char *)a1->__r_.__value_.__r.__words[0];
  v11 = strtod_l(v10, &v27, 0);
  if (*__error() == 34)
  {
    if (v11 > 2.22507386e-308 || (v11 != 0.0 ? (v12 = v11 < -2.22507386e-308) : (v12 = 1), v12))
    {
      exception = __cxa_allocate_exception(0x48uLL);
      v20 = a3;
      v21 = exception;
      MIL::TextLocationFromScannerLocation(a2, v20, &v25);
      v26 = v25;
      v25 = 0uLL;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is out of range for type double", (const void **)&a1->__r_.__value_.__l.__data_, v24);
      MIL::ParseError::ParseError((uint64_t)v21, &v26, (uint64_t)v24, 400);
    }
  }
  if (*__error() && *__error() != 34)
    goto LABEL_28;
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v14 = (v13 & 0x80u) == 0 ? (uint64_t)a1 : a1->__r_.__value_.__r.__words[0];
  if ((v13 & 0x80u) != 0)
    v13 = a1->__r_.__value_.__l.__size_;
  if (v27 != (char *)(v14 + v13))
  {
LABEL_28:
    v16 = __cxa_allocate_exception(0x48uLL);
    v17 = a3;
    v18 = v16;
    MIL::TextLocationFromScannerLocation(a2, v17, &v25);
    v23 = v25;
    v25 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not a valid double", (const void **)&a1->__r_.__value_.__l.__data_, v22);
    MIL::ParseError::ParseError((uint64_t)v18, &v23, (uint64_t)v22, 203);
  }
  return v11;
}

void sub_1E06AA148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  void *v25;
  char v26;
  uint64_t v27;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 80);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if ((v26 & 1) != 0)
    __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::stoi(const std::string *a1, int __base)
{
  return std::stoi(a1, 0, __base);
}

uint64_t MIL::Util::stoui8(std::string *a1, int a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  void *exception;
  uint64_t v9;
  void *v10;
  void *v11[3];
  __int128 v12;
  __int128 v13;

  LODWORD(result) = MIL::Util::stoi(a1, a2);
  if (result >= 0x100)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v9 = a4;
    v10 = exception;
    MIL::TextLocationFromScannerLocation(a3, v9, &v12);
    v13 = v12;
    v12 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not in the range of uint 8", (const void **)&a1->__r_.__value_.__l.__data_, v11);
    MIL::ParseError::ParseError((uint64_t)v10, &v13, (uint64_t)v11, 400);
  }
  return result;
}

void sub_1E06AA46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  int v19;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v19)
    __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::stoll(const std::string *a1, int __base)
{
  return std::stoll(a1, 0, __base);
}

unint64_t MIL::Util::stoull(std::string *__str, int __base, unint64_t a3, uint64_t a4)
{
  std::string *v7;
  void *exception;
  uint64_t v10;
  void *v11;
  void *v12[3];
  __int128 v13;
  __int128 v14;

  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = __str;
  else
    v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v7->__r_.__value_.__s.__data_[0] == 45)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v10 = a4;
    v11 = exception;
    MIL::TextLocationFromScannerLocation(a3, v10, &v13);
    v14 = v13;
    v13 = 0uLL;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not in the range of uint64_t", (const void **)&__str->__r_.__value_.__l.__data_, v12);
    MIL::ParseError::ParseError((uint64_t)v11, &v14, (uint64_t)v12, 400);
  }
  return std::stoull(__str, 0, __base);
}

void sub_1E06AA784(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, __int128 a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __break(1u);
}

void sub_1E06AA8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  int v25;
  void *v26;
  uint64_t v27;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 80);
  if (v25)
    __cxa_free_exception(v26);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1E06AA940()
{
  JUMPOUT(0x1E06AA948);
}

uint64_t MIL::Util::ValidateIsIdentifier(unint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t result;
  void *exception;
  uint64_t v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  __int128 v14;
  __int128 v15;
  _QWORD v16[4];
  uint64_t v17;

  MIL::Scanner::Make(a2, &v17);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v17 + 16))(v16);
  if (MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v16) != 54)
  {
    exception = __cxa_allocate_exception(0x70uLL);
    v9 = a4;
    v10 = exception;
    MIL::TextLocationFromScannerLocation(a1, v9, &v14);
    v15 = v14;
    v14 = 0uLL;
    MIL::Scanner::Token::Token(v13, (uint64_t)v16);
    v11 = *a3;
    v12 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    MIL::UnexpectedTokenTypeError::UnexpectedTokenTypeError(v10, &v15, 54, v13, &v11);
  }
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v16);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E06AAA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (v23)
    __cxa_free_exception(v22);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)(v24 - 72));
  v26 = *(_QWORD *)(v24 - 40);
  *(_QWORD *)(v24 - 40) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::ValidateIsIdentifier(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  uint64_t result;
  __int128 *v6;
  void *exception;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[4];
  uint64_t v16;

  MIL::Scanner::Make(a2, &v16);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v16 + 16))(v15);
  if (MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v15) != 54)
  {
    v6 = a3;
    exception = __cxa_allocate_exception(0x70uLL);
    v8 = a1[1];
    v14[0] = *a1;
    v14[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    MIL::Scanner::Token::Token(v13, (uint64_t)v15);
    v11 = *v6;
    v12 = *((_QWORD *)v6 + 2);
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = 0;
    MIL::UnexpectedTokenTypeError::UnexpectedTokenTypeError(exception, v14, 54, v13, &v11);
  }
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v15);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1E06AAC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;

  if (a14 < 0)
    operator delete(__p);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (v22)
    __cxa_free_exception(v21);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&a21);
  v25 = *(_QWORD *)(v23 - 40);
  *(_QWORD *)(v23 - 40) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1E06AACEC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1EA9999F8;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_1E06AAE5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = a1->__end_;
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (std::__node<char> *)operator new();
        v16 = a1->__end_;
        v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1EA999B70;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1EA999BB8;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v18;
  int v20;
  BOOL v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            marked_count = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v23.__traits_);
            memset(&v23.__flags_, 0, 40);
            v23.__flags_ = this->__flags_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v23, v3 + 3, a3);
            v13 = v23.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v23, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_31:
            v3 = v12 + 1;
            std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v23.__start_);
            std::locale::~locale(&v23.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = first;
    *(_BYTE *)(v14 + 16) = v15;
    end->__first_ = (std::__node<char> *)v14;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v21);
    v3 += 2;
  }
  return v3;
}

void sub_1E06AB76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  int *p_open_count;
  unsigned __int8 *v12;
  unsigned int marked_count;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, a2, a3);
      if (v6 != 123)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      if (v6 != 63)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    }
LABEL_29:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
    }
    --*p_open_count;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (std::__node<char> *)operator new();
    end = this->__end_;
    first = end->__first_;
    v7->__vftable = (std::__node<char>_vtbl *)&unk_1EA999C90;
    v7[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v7;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  char v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_64;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_64;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_64;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_64;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u)
      goto LABEL_64;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_1E06AC524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_1E06AC728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1E06ACD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1E06ACE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1EA99A0C8;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1EA99A0C8;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, char *a5, unsigned __int32 __m)
{
  __int16 v6;
  std::string::value_type *i;
  std::__wrap_iter<const char *>::iterator_type v11;
  std::string::value_type *v12;
  unsigned __int8 *v13;
  std::string::value_type *v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v17;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v18;

  v6 = __m;
  i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v18, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  memset(&v17.__match_.__prefix_, 0, 17);
  memset(&v17.__match_.__suffix_, 0, 17);
  v17.__match_.__ready_ = 0;
  v17.__match_.__position_start_.__i_ = 0;
  memset(&v17.__match_, 0, 41);
  memset(&v17, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::string::push_back(a1, *i++);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
    {
      if ((v6 & 0x200) == 0)
      {
        v14 = (std::string::value_type *)v18.__match_.__prefix_.first.__i_;
        v15 = v18.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)&v18.__match_, a1, (unsigned __int8 *)a5, v13, v6);
      v12 = (std::string::value_type *)v18.__match_.__suffix_.first.__i_;
      v11 = v18.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0)
        break;
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v18);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (v17.__match_.__matches_.__begin_)
  {
    v17.__match_.__matches_.__end_ = v17.__match_.__matches_.__begin_;
    operator delete(v17.__match_.__matches_.__begin_);
  }
  if (v18.__match_.__matches_.__begin_)
  {
    v18.__match_.__matches_.__end_ = v18.__match_.__matches_.__begin_;
    operator delete(v18.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1E06AD7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

std::string *std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  unsigned __int8 *v6;
  int v9;
  unsigned __int8 *v10;
  int v12;
  std::string::value_type *v13;
  std::string::value_type *v14;
  std::string::value_type v15;
  std::string::value_type *v16;
  std::string::value_type *v17;
  std::string::value_type v18;
  std::string::value_type *v19;
  std::string::value_type *v20;
  std::string::value_type v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  std::string::value_type *v27;
  std::string::value_type *v28;
  std::string::value_type v29;
  int v30;
  std::string::value_type *v31;
  std::string::value_type *v32;
  std::string::value_type v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  std::string::value_type *v37;
  std::string::value_type *v38;
  std::string::value_type v39;

  v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4)
      return this;
    while (1)
    {
      v30 = *v6;
      if (v30 == 92)
      {
        v34 = v6 + 1;
        if (v6 + 1 != a4)
        {
          v30 = *v34;
          if ((v30 - 48) <= 9u)
          {
            v35 = (v30 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v35)
              v36 = (uint64_t)(a1 + 3);
            else
              v36 = (uint64_t)&(*a1)[3 * v35];
            v37 = *(std::string::value_type **)v36;
            v38 = *(std::string::value_type **)(v36 + 8);
            while (v37 != v38)
            {
              v39 = *v37++;
              std::string::push_back(this, v39);
            }
            goto LABEL_55;
          }
          ++v6;
        }
      }
      else if (v30 == 38)
      {
        v31 = **a1;
        v32 = (*a1)[1];
        while (v31 != v32)
        {
          v33 = *v31++;
          std::string::push_back(this, v33);
        }
        goto LABEL_54;
      }
      std::string::push_back(this, v30);
LABEL_54:
      v34 = v6;
LABEL_55:
      v6 = v34 + 1;
      if (v34 + 1 == a4)
        return this;
    }
  }
  if (a3 != a4)
  {
    do
    {
      v9 = *v6;
      v10 = v6 + 1;
      if (v9 == 36 && v10 != a4)
      {
        v12 = (char)*v10;
        v9 = *v10;
        if (v12 > 38)
        {
          if (v12 == 39)
          {
            v19 = (std::string::value_type *)a1[9];
            v20 = (std::string::value_type *)a1[10];
            while (v19 != v20)
            {
              v21 = *v19++;
              std::string::push_back(this, v21);
            }
            goto LABEL_10;
          }
          if (v12 == 96)
          {
            v16 = (std::string::value_type *)a1[6];
            v17 = (std::string::value_type *)a1[7];
            while (v16 != v17)
            {
              v18 = *v16++;
              std::string::push_back(this, v18);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v12 == 36)
            goto LABEL_9;
          if (v12 == 38)
          {
            v13 = **a1;
            v14 = (*a1)[1];
            while (v13 != v14)
            {
              v15 = *v13++;
              std::string::push_back(this, v15);
            }
            goto LABEL_10;
          }
        }
        if ((v9 - 48) <= 9)
        {
          v22 = *v10 - 48;
          if (v6 + 2 != a4)
          {
            v23 = v6[2];
            v24 = v23 - 48;
            v25 = v23 + 10 * (int)v22 - 48;
            if (v24 > 9)
            {
              v10 = v6 + 1;
            }
            else
            {
              v22 = v25;
              v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v22)
            v26 = (uint64_t)(a1 + 3);
          else
            v26 = (uint64_t)&(*a1)[3 * (int)v22];
          v27 = *(std::string::value_type **)v26;
          v28 = *(std::string::value_type **)(v26 + 8);
          while (v27 != v28)
          {
            v29 = *v27++;
            std::string::push_back(this, v29);
          }
          goto LABEL_10;
        }
        LOBYTE(v9) = 36;
      }
      v10 = v6;
LABEL_9:
      std::string::push_back(this, v9);
LABEL_10:
      v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  char *v7;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  char *v9;
  char v10;
  char *v11;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v12;
  char v13;
  std::match_results<const char *> __p;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (char *)p_unmatched->second.__i_;
  if (p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (char *)this->__end_.__i_;
    pregex = this->__pregex_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, &__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v9, (uint64_t *)&__p, (flags & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  v11 = (char *)this->__end_.__i_;
  if (v11 == v7)
    goto LABEL_14;
  v12 = this->__pregex_;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, &__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const char *>> *)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1E06ADC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  __int16 v5;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::match_results<const char *> __p;

  v5 = __m;
  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = __m;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = &this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (char *)__a.__i_, (char *)__b.__i_, &__p, __m);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(&p_match->__matches_, (uint64_t)__a.__i_, (std::sub_match<std::__wrap_iter<const char *>> *)__b.__i_, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return this;
}

void sub_1E06ADD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void **v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1E06ADEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Validation::Constraints::Constraints(_QWORD *this)
{
  *this = off_1EA99EAF8;
  return this;
}

_QWORD *MIL::Validation::PossibleStringValuesConstraints::PossibleStringValuesConstraints(_QWORD *this)
{
  *this = off_1EA99EB20;
  return this;
}

_QWORD *MIL::Validation::PossibleStringValuesConstraints::Make@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = off_1EA99EC70;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *a1 = result;
  return result;
}

_QWORD *MIL::Validation::TensorDTypeConstraints::TensorDTypeConstraints(_QWORD *this)
{
  *this = off_1EA99EB50;
  return this;
}

_QWORD *MIL::Validation::TensorDTypeConstraints::Make@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = off_1EA99ECB8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *a1 = result;
  return result;
}

_QWORD *MIL::Validation::TensorRankValueConstraints::TensorRankValueConstraints(_QWORD *this)
{
  *this = off_1EA99EB88;
  return this;
}

_QWORD *MIL::Validation::TensorRankValueConstraints::Make@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = off_1EA99ED68;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *a1 = result;
  return result;
}

_QWORD *MIL::Validation::TensorSymbolicShapeConstraints::TensorSymbolicShapeConstraints(_QWORD *this)
{
  *this = off_1EA99EBC0;
  return this;
}

double MIL::Validation::TensorSymbolicShapeConstraints::Make@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = operator new();
  *(_QWORD *)v3 = off_1EA99EDB8;
  result = 0.0;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_QWORD *)(v3 + 72) = 0;
  *a1 = v3;
  return result;
}

void `anonymous namespace'::PossibleStringValuesConstraintsImpl::~PossibleStringValuesConstraintsImpl(_anonymous_namespace_::PossibleStringValuesConstraintsImpl *this)
{
  void **v1;

  *(_QWORD *)this = off_1EA99EC70;
  v1 = (void **)((char *)this + 8);
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1EA99EC70;
  v2 = (void **)((char *)this + 8);
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1E0C023A0](this, 0xA1C4030951706);
}

void `anonymous namespace'::PossibleStringValuesConstraintsImpl::Check(_anonymous_namespace_::PossibleStringValuesConstraintsImpl *this@<X0>, MIL::IRTensorValueType **a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  const MIL::IROperation **v4;
  const MIL::IROperation **v5;
  const MIL::IROperation *v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 *v10;
  const MIL::IROperation *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  _QWORD *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  char v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::string *v40;
  std::string *v41;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::string *v55;
  __int128 v56;
  unint64_t *v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *v62;
  __int128 v63;
  unint64_t *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string v68;
  std::string v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *v72[2];
  std::string::size_type v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void *v76[2];
  std::string::size_type v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void *__p[2];
  unsigned __int8 v84;
  std::string v85;
  void *v86;
  char v87;
  uint64_t v88;
  std::string v89;

  v5 = (const MIL::IROperation **)*((_QWORD *)this + 1);
  v4 = (const MIL::IROperation **)*((_QWORD *)this + 2);
  if (v5 == v4)
  {
LABEL_70:
    MIL::ValidationResult::ValidationResult(a3);
    return;
  }
  v66 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v67 = *MEMORY[0x1E0DE4F60];
  v65 = MEMORY[0x1E0DE4FB8] + 16;
  while (1)
  {
    v7 = *v5;
    v80 = 0;
    if (!MIL::ValidationResult::IsGood(a3))
      return;
    MIL::ValidationResult::~ValidationResult(a3);
    if (v80)
      break;
LABEL_60:
    v5 += 8;
    if (v5 == v4)
      goto LABEL_70;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v80 + 88))(v80) != 3)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
    v43 = (std::__shared_weak_count *)LocationPtr[1];
    v78 = *LocationPtr;
    v79 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v5 + 48))(&v85);
    v46 = std::string::append(&v85, " is not a string tensor.");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v77 = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)v76 = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a3, &v78, 319, v76);
    if (SHIBYTE(v77) < 0)
      operator delete(v76[0]);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v48 = v79;
    if (!v79)
      return;
    v49 = (unint64_t *)&v79->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
LABEL_106:
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    return;
  }
  if (!(*(uint64_t (**)(const MIL::IROperation *, MIL::IRTensorValueType **))(*(_QWORD *)*v5 + 32))(*v5, a2))
  {
    v51 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
    v52 = (std::__shared_weak_count *)v51[1];
    v74 = *v51;
    v75 = v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v5 + 48))(&v85);
    v55 = std::string::append(&v85, " has no value.");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v73 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)v72 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a3, &v74, 319, v72);
    if (SHIBYTE(v73) < 0)
      operator delete(v72[0]);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v48 = v75;
    if (!v75)
      return;
    v57 = (unint64_t *)&v75->__shared_owners_;
    do
      v50 = __ldaxr(v57);
    while (__stlxr(v50 - 1, v57));
    goto LABEL_106;
  }
  v8 = MIL::IRValue::TryGetScalar<std::string>();
  if (v8)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      v68.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v9;
    }
    if (!*((_BYTE *)v5 + 56))
    {
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = (std::string *)((char *)&v68 + HIBYTE(v68.__r_.__value_.__r.__words[2]));
      else
        v40 = (std::string *)(v68.__r_.__value_.__r.__words[0] + v68.__r_.__value_.__l.__size_);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v68;
      else
        v41 = (std::string *)v68.__r_.__value_.__r.__words[0];
      while (v41 != v40)
      {
        v41->__r_.__value_.__s.__data_[0] = __tolower(v41->__r_.__value_.__s.__data_[0]);
        v41 = (std::string *)((char *)v41 + 1);
      }
    }
    v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v5 + 2, (unsigned __int8 *)&v68);
    if (!v10)
    {
      v11 = *v5;
      v12 = (uint64_t *)v5[4];
      memset(&v89, 0, sizeof(v89));
      v13 = 0;
      if (v12)
      {
        v14 = v12;
        do
        {
          ++v13;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v89, v12, 0, v13);
      v15 = 126
          - 2
          * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89.__r_.__value_.__l.__size_ - v89.__r_.__value_.__r.__words[0]) >> 3));
      if (v89.__r_.__value_.__l.__size_ == v89.__r_.__value_.__r.__words[0])
        v16 = 0;
      else
        v16 = v15;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v89.__r_.__value_.__l.__data_, (const void **)v89.__r_.__value_.__l.__size_, (uint64_t)__p, v16, 1);
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v85);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Unexpected value for ", 21);
      (*(void (**)(void **__return_ptr, const MIL::IROperation *))(*(_QWORD *)v11 + 48))(__p, v11);
      if ((v84 & 0x80u) == 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if ((v84 & 0x80u) == 0)
        v19 = v84;
      else
        v19 = (uint64_t)__p[1];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" \"", 2);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v68;
      else
        v22 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        size = v68.__r_.__value_.__l.__size_;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\" not in (", 10);
      if ((char)v84 < 0)
        operator delete(__p[0]);
      v26 = v89.__r_.__value_.__l.__size_;
      v25 = v89.__r_.__value_.__r.__words[0];
      if (v89.__r_.__value_.__r.__words[0] != v89.__r_.__value_.__l.__size_)
      {
        v27 = 1;
        do
        {
          if ((v27 & 1) == 0)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)", ", 2);
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"\"", 1);
          v29 = *(char *)(v25 + 23);
          if (v29 >= 0)
            v30 = v25;
          else
            v30 = *(_QWORD *)v25;
          if (v29 >= 0)
            v31 = *(unsigned __int8 *)(v25 + 23);
          else
            v31 = *(_QWORD *)(v25 + 8);
          v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
          LOBYTE(__p[0]) = 34;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)__p, 1);
          v27 = 0;
          v25 += 24;
        }
        while (v25 != v26);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)").", 2);
      v33 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
      v34 = (std::__shared_weak_count *)v33[1];
      v81 = *v33;
      v82 = v34;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(a3, &v81, 319, __p);
      if ((char)v84 < 0)
        operator delete(__p[0]);
      v37 = v82;
      if (v82)
      {
        v38 = (unint64_t *)&v82->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v85.__r_.__value_.__r.__words[0] = v67;
      *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + *(_QWORD *)(v67 - 24)) = v66;
      v85.__r_.__value_.__l.__size_ = v65;
      if (v87 < 0)
        operator delete(v86);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1E0C022F8](&v88);
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (!v10)
      return;
    goto LABEL_60;
  }
  v58 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
  v59 = (std::__shared_weak_count *)v58[1];
  v70 = *v58;
  v71 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v5 + 48))(&v89);
  v62 = std::string::insert(&v89, 0, "String value missing for ");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v85.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v85, 46);
  v69 = v85;
  memset(&v85, 0, sizeof(v85));
  MIL::ValidationResult::ValidationResult(a3, &v70, 319, &v69);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  v48 = v71;
  if (v71)
  {
    v64 = (unint64_t *)&v71->__shared_owners_;
    do
      v50 = __ldaxr(v64);
    while (__stlxr(v50 - 1, v64));
    goto LABEL_106;
  }
}

void sub_1E06AE7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a27 < 0)
    operator delete(__p);
  if (a63 < 0)
    operator delete(a58);
  if (*(char *)(v63 - 89) < 0)
    operator delete(*(void **)(v63 - 112));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::PossibleStringValuesConstraintsImpl::Add(uint64_t *a1, uint64_t a2, uint64_t *a3, char a4)
{
  unint64_t v7;
  uint64_t result;
  uint64_t i;
  std::string *v11;
  std::string *p_p;
  unint64_t v13;
  uint64_t v14;
  std::string __p;
  _OWORD v16[2];
  int v17;
  char v18;

  v18 = a4;
  if ((a4 & 1) != 0)
  {
    v7 = a1[2];
    if (v7 >= a1[3])
    {
      result = std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__emplace_back_slow_path<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL &>(a1 + 1, a2, a3, &v18);
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v7 + 16, a3);
      *(_BYTE *)(v7 + 56) = a4;
      result = v7 + 64;
    }
    a1[2] = result;
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    v17 = 1065353216;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>((uint64_t)v16, (unint64_t)(float)(unint64_t)a3[3]);
    for (i = a3[2]; i; i = *(_QWORD *)i)
    {
      if (*(char *)(i + 39) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
      else
        __p = *(std::string *)(i + 16);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
      else
        v11 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      while (p_p != v11)
      {
        p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
        p_p = (std::string *)((char *)p_p + 1);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v16, (unsigned __int8 *)&__p, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v13 = a1[2];
    if (v13 >= a1[3])
    {
      v14 = std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__emplace_back_slow_path<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL &>(a1 + 1, a2, (uint64_t *)v16, &v18);
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v13 + 16, (uint64_t *)v16);
      *(_BYTE *)(v13 + 56) = v18;
      v14 = v13 + 64;
    }
    a1[2] = v14;
    return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
  }
  return result;
}

void sub_1E06AEB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 64;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4 - 48);
      result = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void `anonymous namespace'::GetTargetTensorType(_anonymous_namespace_ *this@<X0>, const MIL::IRTensorValueType **a2@<X1>, const MIL::IROperation *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  unint64_t *v26;
  void *__p[2];
  std::string::size_type v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v9 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a3 + 24))(a3);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    if (v10)
    {
      *(_QWORD *)this = v10;
LABEL_5:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
    v12 = (std::__shared_weak_count *)LocationPtr[1];
    v29 = *LocationPtr;
    v30 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a3 + 48))(&v32, a3);
    v15 = std::string::append(&v32, " is not a tensor.");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v28 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a4, &v29, 319, __p);
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_29:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    if ((*(unsigned int (**)(const MIL::IROperation *))(*(_QWORD *)a3 + 16))(a3))
      goto LABEL_5;
    v20 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
    v21 = (std::__shared_weak_count *)v20[1];
    v34 = *v20;
    v35 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a3 + 48))(&v31, a3);
    v24 = std::string::insert(&v31, 0, "Could not find type of ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v32, 46);
    v33 = v32;
    memset(&v32, 0, sizeof(v32));
    MIL::ValidationResult::ValidationResult(a4, &v34, 319, &v33);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v17 = v35;
    if (v35)
    {
      v26 = (unint64_t *)&v35->__shared_owners_;
      do
        v19 = __ldaxr(v26);
      while (__stlxr(v19 - 1, v26));
      goto LABEL_29;
    }
  }
}

void sub_1E06AEE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 48);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(std::string *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1E06AEF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string*>(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *this)
{
  std::string *v4;
  uint64_t *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v6[2], v6[3]);
        v4 = v12;
      }
      else
      {
        v7 = *((_OWORD *)v6 + 1);
        v4->__r_.__value_.__r.__words[2] = v6[4];
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (uint64_t *)*v6;
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1E06AEFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_1E06AF268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__emplace_back_slow_path<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL &>(uint64_t *a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[5];

  v5 = *a1;
  v6 = (a1[1] - *a1) >> 6;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 58)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = a1[2] - v5;
  if (v12 >> 5 > v7)
    v7 = v12 >> 5;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFC0)
    v13 = 0x3FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  v18[4] = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(v11, v13);
  else
    v14 = 0;
  v15 = &v14[64 * v6];
  v18[0] = v14;
  v18[1] = v15;
  v18[3] = &v14[64 * v13];
  *(_OWORD *)v15 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v15 + 16), a3);
  v15[56] = *a4;
  v18[2] = v15 + 64;
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1E06AF374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_OWORD *)(v9 - 64);
      v9 -= 64;
      *(_OWORD *)(v7 - 64) = v10;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v7 - 48, (uint64_t *)(v9 + 16));
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(v9 + 56);
      v7 = *((_QWORD *)&v16 + 1) - 64;
      *((_QWORD *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 16);
    result = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v1);
    v1 += 64;
  }
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::unordered_set<std::string>,BOOL>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(v4 + 16) = v2 - 64;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 - 48);
      result = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v5);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void `anonymous namespace'::TensorDTypeConstraintsImpl::~TensorDTypeConstraintsImpl(_anonymous_namespace_::TensorDTypeConstraintsImpl *this)
{
  void **v1;

  *(_QWORD *)this = off_1EA99ECB8;
  v1 = (void **)((char *)this + 8);
  std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1EA99ECB8;
  v2 = (void **)((char *)this + 8);
  std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1E0C023A0](this, 0xA1C4030951706);
}

uint64_t `anonymous namespace'::TensorDTypeConstraintsImpl::Check@<X0>(_anonymous_namespace_::TensorDTypeConstraintsImpl *this@<X0>, MIL::IRValueType **a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const MIL::IROperation *v8;
  void *v9;
  uint64_t v10;
  int DataType;
  void *v12;
  MIL::IRTensorBufferValueType *v13;
  void *v14;
  MIL::IRCircularBufferValueType *v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  std::vector<std::string>::pointer end;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  std::string *data;
  std::string::size_type size;
  std::string *v52;
  std::string *v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  void *v80;
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void *v84[2];
  unsigned __int8 v85;
  void *__p[2];
  std::string::size_type v87;
  void *v88;
  char v89;
  uint64_t v90;
  std::vector<std::string> v91;
  void *v92;
  char v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  int v96;
  void *v97;
  _BYTE v98[32];
  int v99;
  std::__split_buffer<std::string> __v;
  void *v101;
  char v102;
  _BYTE v103[159];
  char v104[17];

  memset(v98, 0, sizeof(v98));
  v99 = 1065353216;
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if (v4 == v5)
  {
LABEL_13:
    MIL::ValidationResult::ValidationResult(a3);
    return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v98);
  }
  while (1)
  {
    v8 = *(const MIL::IROperation **)v4;
    v97 = 0;
    if (!MIL::ValidationResult::IsGood(a3))
      return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v98);
    MIL::ValidationResult::~ValidationResult(a3);
    v9 = v97;
    if (v97)
      break;
LABEL_12:
    v4 += 40;
    if (v4 == v5)
      goto LABEL_13;
  }
  v96 = 0;
  v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v97 + 24))(v97);
  if (v10)
  {
    DataType = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  }
  else
  {
    v12 = MIL::IRValueType::TryCastAsMemoryLayoutType(v9);
    v13 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v12);
    if (v13)
    {
      DataType = MIL::IRTensorBufferValueType::GetDataType(v13);
    }
    else
    {
      v14 = MIL::IRValueType::TryCastAsMemoryLayoutType(v9);
      v15 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(v14);
      if (!v15)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__v);
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"A pixel buffer is unexpected in '", 33);
        v66 = (*((uint64_t (**)(MIL::IRValueType **))*a2 + 8))(a2);
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
        v68 = *(char *)(v67 + 23);
        if (v68 >= 0)
          v69 = v67;
        else
          v69 = *(_QWORD *)v67;
        if (v68 >= 0)
          v70 = *(unsigned __int8 *)(v67 + 23);
        else
          v70 = *(_QWORD *)(v67 + 8);
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, v69, v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)".", 1);
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
        v73 = (std::__shared_weak_count *)LocationPtr[1];
        v94 = *LocationPtr;
        v95 = v73;
        if (v73)
        {
          p_shared_owners = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldxr(p_shared_owners);
          while (__stxr(v75 + 1, p_shared_owners));
        }
        std::stringbuf::str();
        MIL::ValidationResult::ValidationResult(a3, &v94, 319, &v92);
        if (v93 < 0)
          operator delete(v92);
        v76 = v95;
        if (v95)
        {
          v77 = (unint64_t *)&v95->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)*MEMORY[0x1E0DE4F60];
        *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_
                                                     + __v.__first_[-1].__r_.__value_.__r.__words[0]) = *(std::__split_buffer<std::string>::pointer *)(MEMORY[0x1E0DE4F60] + 24);
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
        if (v102 < 0)
          operator delete(v101);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](v103);
        return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v98);
      }
      DataType = MIL::IRCircularBufferValueType::GetDataType(v15);
    }
  }
  v96 = DataType;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)(v4 + 16);
  __p[0] = &v96;
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<MIL::IRDataType&>>((uint64_t)v98, (unsigned __int8 *)(v4 + 16), (uint64_t)&std::piecewise_construct, (__int128 **)&__v, (_DWORD **)__p);
  if (v17 || *((_DWORD *)v16 + 10) == v96)
    goto LABEL_12;
  memset(&v91, 0, sizeof(v91));
  v19 = *((_QWORD *)this + 1);
  v20 = *((_QWORD *)this + 2);
  if (v19 != v20)
  {
    while (1)
    {
      v21 = *(unsigned __int8 *)(v19 + 39);
      if ((v21 & 0x80u) == 0)
        v22 = *(unsigned __int8 *)(v19 + 39);
      else
        v22 = *(_QWORD *)(v19 + 24);
      v23 = *(unsigned __int8 *)(v4 + 39);
      v24 = (char)v23;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(v4 + 24);
      if (v22 != v23)
        goto LABEL_45;
      v25 = v24 >= 0 ? (unsigned __int8 *)(v4 + 16) : *(unsigned __int8 **)(v4 + 16);
      if ((v21 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)(v19 + 16), v25, *(_QWORD *)(v19 + 24)))
        goto LABEL_32;
LABEL_45:
      v19 += 40;
      if (v19 == v20)
        goto LABEL_46;
    }
    if (*(_BYTE *)(v19 + 39))
    {
      v26 = 0;
      while (*(unsigned __int8 *)(v19 + v26 + 16) == v25[v26])
      {
        if (v21 == ++v26)
          goto LABEL_32;
      }
      goto LABEL_45;
    }
LABEL_32:
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v19 + 48))(__p);
    end = v91.__end_;
    if (v91.__end_ >= v91.__end_cap_.__value_)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) > v30)
        v30 = 0x5555555555555556 * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_cap_.__value_ - (char *)v91.__begin_) >> 3) >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v30;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v91.__end_cap_;
      if (v31)
        v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v91.__end_cap_, v31);
      else
        v32 = 0;
      v33 = v32 + v29;
      __v.__first_ = v32;
      __v.__begin_ = v33;
      __v.__end_cap_.__value_ = &v32[v31];
      v34 = *(_OWORD *)__p;
      v33->__r_.__value_.__r.__words[2] = v87;
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
      __p[1] = 0;
      v87 = 0;
      __p[0] = 0;
      __v.__end_ = v33 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v91, &__v);
      v35 = v91.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v91.__end_ = v35;
      if (SHIBYTE(v87) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v28 = *(_OWORD *)__p;
      v91.__end_->__r_.__value_.__r.__words[2] = v87;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v28;
      v91.__end_ = end + 1;
    }
    goto LABEL_45;
  }
LABEL_46:
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"In '", 4);
  v37 = (*((uint64_t (**)(MIL::IRValueType **))*a2 + 8))(a2);
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  v39 = *(char *)(v38 + 23);
  if (v39 >= 0)
    v40 = v38;
  else
    v40 = *(_QWORD *)v38;
  if (v39 >= 0)
    v41 = *(unsigned __int8 *)(v38 + 23);
  else
    v41 = *(_QWORD *)(v38 + 8);
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v40, v41);
  v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' operations, tensors", 21);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__v);
  if (v91.__end_ != v91.__begin_)
  {
    v43 = 0;
    v44 = 0;
    v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
    do
    {
      if (v44)
      {
        v46 = v45 - 1;
        if (v44 == v46)
          v47 = ", and ";
        else
          v47 = ", ";
        if (v44 == v46)
          v48 = 6;
        else
          v48 = 2;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)v47, v48);
      }
      else
      {
        v104[0] = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)v104, 1);
      }
      v49 = SHIBYTE(v91.__begin_[v43].__r_.__value_.__r.__words[2]);
      if (v49 >= 0)
        data = &v91.__begin_[v43];
      else
        data = (std::string *)v91.__begin_[v43].__r_.__value_.__l.__data_;
      if (v49 >= 0)
        size = HIBYTE(v91.__begin_[v43].__r_.__value_.__r.__words[2]);
      else
        size = v91.__begin_[v43].__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)data, size);
      ++v44;
      v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v91.__end_ - (char *)v91.__begin_) >> 3);
      ++v43;
    }
    while (v44 < v45);
  }
  std::stringbuf::str();
  v52 = (std::string *)*MEMORY[0x1E0DE4F60];
  __v.__first_ = v52;
  v53 = *(std::string **)(MEMORY[0x1E0DE4F60] + 24);
  *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + v52[-1].__r_.__value_.__r.__words[0]) = v53;
  v54 = MEMORY[0x1E0DE4FB8];
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
  if (v102 < 0)
    operator delete(v101);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](v103);
  if ((v85 & 0x80u) == 0)
    v55 = v84;
  else
    v55 = (void **)v84[0];
  if ((v85 & 0x80u) == 0)
    v56 = v85;
  else
    v56 = (uint64_t)v84[1];
  v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v55, v56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" must have the same data type.", 30);
  if ((char)v85 < 0)
    operator delete(v84[0]);
  v58 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
  v59 = (std::__shared_weak_count *)v58[1];
  v82 = *v58;
  v83 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a3, &v82, 319, &v80);
  if (v81 < 0)
    operator delete(v80);
  v62 = v83;
  if (v83)
  {
    v63 = (unint64_t *)&v83->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  __p[0] = v52;
  *(void **)((char *)__p + v52[-1].__r_.__value_.__r.__words[0]) = v53;
  __p[1] = (void *)(v54 + 16);
  if (v89 < 0)
    operator delete(v88);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](&v90);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v91;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v98);
}

void sub_1E06AFDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t a70;

  if (a59 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::ostringstream::~ostringstream((uint64_t)&a70);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::TensorDTypeConstraintsImpl::Add(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  void *__p[2];
  uint64_t v10;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *a3;
  v8 = v3;
  *(_OWORD *)__p = v4;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::emplace_back<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>((uint64_t *)(a1 + 8), (uint64_t)&v8);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1E06AFF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::TensorDTypeConstraintsImpl::AddParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  *(_OWORD *)v13 = *(_OWORD *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v13, 0, &v15);
  v16 = v15;
  if (v15)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v15;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  }
  else
  {
    v5 = 0;
  }
  v17 = v5;
  v15 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v12 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)a1 + 24))(a1, &v16, __p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v7 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_1E06B00AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  v23 = *(_QWORD *)(v21 - 40);
  *(_QWORD *)(v21 - 40) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  return std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a2);
}

uint64_t std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](a1);
}

void `anonymous namespace'::GetTargetTensorOrMemoryLayoutType(_anonymous_namespace_ *this@<X0>, const MIL::IRValueType **a2@<X1>, const MIL::IROperation *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::string *v25;
  __int128 v26;
  unint64_t *v27;
  void *v28[2];
  std::string::size_type v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string v32;
  std::string v33;
  std::string __p;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v9 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a3 + 24))(a3);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    if (v11 || (v11 = MIL::IRValueType::TryCastAsMemoryLayoutType(v10)) != 0)
    {
      *(_QWORD *)this = v11;
LABEL_6:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
    v22 = (std::__shared_weak_count *)LocationPtr[1];
    v30 = *LocationPtr;
    v31 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a3 + 48))(&v33, a3);
    v25 = std::string::append(&v33, " is not a tensor.");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v29 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)v28 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a4, &v30, 319, v28);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v18 = v31;
    if (v31)
    {
      v27 = (unint64_t *)&v31->__shared_owners_;
      do
        v20 = __ldaxr(v27);
      while (__stlxr(v20 - 1, v27));
LABEL_30:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    if ((*(unsigned int (**)(const MIL::IROperation *))(*(_QWORD *)a3 + 16))(a3))
      goto LABEL_6;
    v12 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
    v13 = (std::__shared_weak_count *)v12[1];
    v35 = *v12;
    v36 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(_QWORD *)a3 + 48))(&v32, a3);
    v16 = std::string::insert(&v32, 0, "Could not find type of ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v33, 46);
    __p = v33;
    memset(&v33, 0, sizeof(v33));
    MIL::ValidationResult::ValidationResult(a4, &v35, 319, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    v18 = v36;
    if (v36)
    {
      v19 = (unint64_t *)&v36->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      goto LABEL_30;
    }
  }
}

void sub_1E06B0458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::IRDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<MIL::IRDataType&>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4, _DWORD **a5)
{
  unint64_t v5;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[3];

  v10 = (_QWORD *)(a1 + 24);
  v11 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v5 = v11;
      if (v11 >= v13)
        v5 = v11 % v13;
    }
    else
    {
      v5 = (v13 - 1) & v11;
    }
    v16 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v5);
    if (v16)
    {
      for (i = *v16; i; i = *(unsigned __int8 **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v18 == v12)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v5)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::IRDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRDataType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<MIL::IRDataType&>>(a1, v12, a4, a5, (uint64_t)v28);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v5 = v12 % v13;
      else
        v5 = v12;
    }
    else
    {
      v5 = (v13 - 1) & v12;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13)
          v26 %= v13;
      }
      else
      {
        v26 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  ++*v10;
  return i;
}

void sub_1E06B0760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::IRDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRDataType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<MIL::IRDataType&>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, _DWORD **a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *v11;
  __int128 *v12;
  _DWORD *v13;
  __int128 v14;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  v11 = (std::string *)(v10 + 16);
  v12 = *a3;
  v13 = *a4;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
  }
  else
  {
    v14 = *v12;
    *((_QWORD *)v10 + 4) = *((_QWORD *)v12 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
  }
  *((_DWORD *)v10 + 10) = *v13;
  *(_BYTE *)(a5 + 16) = 1;
}

void sub_1E06B0824(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::emplace_back<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  void *v18[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = *(v4 - 1);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v18[4] = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const>>((uint64_t)v4, v13);
    else
      v14 = 0;
    v15 = &v14[40 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[40 * v13];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 32);
    *((_OWORD *)v15 + 1) = v16;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v18[2] = v15 + 40;
    std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__swap_out_circular_buffer(a1, v18);
    v9 = a1[1];
    std::__split_buffer<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::~__split_buffer(v18);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v8 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return v9 - 40;
}

void sub_1E06B0980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7 - 40;
    do
    {
      v9 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)v8 = v9;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v10 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *((_QWORD *)&v16 + 1) = v8;
      v8 -= 40;
      v7 -= 40;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 40;
      result = std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100](v4, v1 - 40);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void `anonymous namespace'::TensorRankValueConstraintsImpl::~TensorRankValueConstraintsImpl(_anonymous_namespace_::TensorRankValueConstraintsImpl *this)
{
  void **v1;

  *(_QWORD *)this = off_1EA99ED68;
  v1 = (void **)((char *)this + 8);
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1EA99ED68;
  v2 = (void **)((char *)this + 8);
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1E0C023A0](this, 0xA1C4030951706);
}

void `anonymous namespace'::TensorRankValueConstraintsImpl::Check(_anonymous_namespace_::TensorRankValueConstraintsImpl *this@<X0>, MIL::IRTensorValueType **a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type v19;
  void *v20;
  std::string::const_iterator v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::string __p;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  MIL::IRTensorValueType *v47;

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  if (v4 != v5)
  {
    while (1)
    {
      v47 = 0;
      if (!MIL::ValidationResult::IsGood(a3))
        return;
      MIL::ValidationResult::~ValidationResult(a3);
      if (v47)
      {
        v7 = MIL::IRTensorValueType::Rank(v47);
        v8 = v7;
        if (*(_QWORD *)(v4 + 16) > v7 || v7 > *(_QWORD *)(v4 + 24))
          break;
      }
      v4 += 32;
      if (v4 == v5)
        goto LABEL_7;
    }
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v4 + 48))(&v43);
    v9 = std::string::append(&v43, " has invalid rank ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v42, v8);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v42;
    else
      v11 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      size = v42.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v44, (const std::string::value_type *)v11, size);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, ", expected ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v17 = *(_QWORD *)(v4 + 16);
    if (v17 == *(_QWORD *)(v4 + 24))
    {
      std::to_string(&v45, v17);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v45;
      else
        v18 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v19 = v45.__r_.__value_.__l.__size_;
      std::string::append(&v46, (const std::string::value_type *)v18, v19);
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_59;
      v20 = (void *)v45.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::to_string(&v41, v17);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v41;
      else
        v21.__i_ = (std::__wrap_iter<const char *>::iterator_type)v41.__r_.__value_.__r.__words[0];
      std::string::insert(&v41, v21, 91);
      v42 = v41;
      memset(&v41, 0, sizeof(v41));
      v22 = std::string::append(&v42, ", ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, *(_QWORD *)(v4 + 24));
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v40;
      else
        v24 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        v25 = v40.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v43, (const std::string::value_type *)v24, v25);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::string::push_back(&v44, 93);
      v45 = v44;
      memset(&v44, 0, sizeof(v44));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v45;
      else
        v28 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v29 = v45.__r_.__value_.__l.__size_;
      std::string::append(&v46, (const std::string::value_type *)v28, v29);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_59;
      v20 = (void *)v41.__r_.__value_.__r.__words[0];
    }
    operator delete(v20);
LABEL_59:
    std::string::push_back(&v46, 46);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
    v31 = (std::__shared_weak_count *)LocationPtr[1];
    v38 = *LocationPtr;
    v39 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(p_shared_owners);
      while (__stxr(v33 + 1, p_shared_owners));
    }
    __p = v46;
    memset(&v46, 0, sizeof(v46));
    MIL::ValidationResult::ValidationResult(a3, &v38, 319, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v34 = v39;
    if (v39)
    {
      v35 = (unint64_t *)&v39->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    return;
  }
LABEL_7:
  MIL::ValidationResult::ValidationResult(a3);
}

void sub_1E06B10C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  if (*(char *)(v42 - 121) < 0)
    operator delete(*(void **)(v42 - 144));
  if (a23 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
    operator delete(a24);
  if (*(char *)(v42 - 57) < 0)
    operator delete(*(void **)(v42 - 80));
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::TensorRankValueConstraintsImpl::Add(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v6, a3, a3);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1E06B1294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t `anonymous namespace'::TensorRankValueConstraintsImpl::Add(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a4;
  v6 = a3;
  return std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long &,long long &>((_QWORD *)(a1 + 8), a2, &v6, &v5);
}

void std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long &,long long &>(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  _QWORD v20[5];

  v10 = a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  v11 = *(_QWORD *)(v8 - 8);
  if (v11 >= v10)
  {
    v13 = (uint64_t)(v11 - *a1) >> 5;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 59)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = v9 - *a1;
    if (v15 >> 4 > v14)
      v14 = v15 >> 4;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    v20[4] = v8;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v8, v16);
    else
      v17 = 0;
    v18 = &v17[32 * v13];
    v20[0] = v17;
    v20[1] = v18;
    v20[3] = &v17[32 * v16];
    *(_OWORD *)v18 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v18 + 2) = *a3;
    *((_QWORD *)v18 + 3) = *a4;
    v20[2] = v18 + 32;
    std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::__swap_out_circular_buffer(a1, v20);
    v12 = a1[1];
    std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v11 + 16) = *a3;
    *(_QWORD *)(v11 + 24) = *a4;
    v12 = v11 + 32;
    a1[1] = v11 + 32;
  }
  a1[1] = v12;
  return v12 - 32;
}

void sub_1E06B1464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *((_OWORD *)v2 - 2);
    v2 -= 4;
    *(_OWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *v2 = 0;
    v2[1] = 0;
    *(_QWORD *)(v4 + 16) = v2[2];
    *(_QWORD *)(v4 + 24) = v2[3];
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,long long,long long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void `anonymous namespace'::TensorSymbolicShapeConstraintsImpl::~TensorSymbolicShapeConstraintsImpl(_anonymous_namespace_::TensorSymbolicShapeConstraintsImpl *this)
{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_1EA99EDB8;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 56);
  std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 32);
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = off_1EA99EDB8;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 56);
  std::vector<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 32);
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1E0C023A0](this, 0xA1C405040A028);
}

uint64_t `anonymous namespace'::TensorSymbolicShapeConstraintsImpl::Check@<X0>(_anonymous_namespace_::TensorSymbolicShapeConstraintsImpl *this@<X0>, MIL::IRValueType **a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  const MIL::IROperation **v5;
  const MIL::IROperation **v6;
  void *v7;
  const MIL::IROperation *v8;
  const MIL::IRValueType *v9;
  unsigned __int8 *v10;
  char v11;
  int v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t LocationPtr;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const MIL::IROperation **v26;
  const MIL::IROperation **v27;
  void *v28;
  const MIL::IROperation *v29;
  const MIL::IRValueType *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  char v34;
  int v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  void **v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const MIL::IROperation **v64;
  const MIL::IROperation **v65;
  const MIL::IROperation *v66;
  const MIL::IRValueType *v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  void **v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  void *v93;
  char *v94;
  int64_t v95;
  unint64_t v96;
  int64_t v97;
  unint64_t v98;
  char *v99;
  int64_t v100;
  unint64_t v101;
  int64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  const MIL::IROperation *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  char v110;
  void **v111;
  unint64_t v112;
  uint64_t *v113;
  void *v114;
  void *v115;
  void *v116;
  _QWORD *v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  void *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  void *v138;
  uint64_t v139;
  _QWORD *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unsigned __int8 *v145;
  char v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD **v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  MIL::ValidationResult *v162;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  void *v168;
  void *v169;
  void *v170;
  _OWORD v172[2];
  int v173;
  _OWORD v174[2];
  int v175;
  void *v176[2];
  char v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  void *__p[2];
  uint64_t v181;
  char v182;
  _anonymous_namespace_::TensorSymbolicShapeConstraintsImpl *v183[2];
  char v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  _BYTE *v190;
  _anonymous_namespace_::TensorSymbolicShapeConstraintsImpl *v191;
  void *v192;
  std::__shared_weak_count *v193;
  unsigned __int8 v194;
  _anonymous_namespace_::TensorSymbolicShapeConstraintsImpl *v195;
  std::__shared_weak_count *v196;
  unsigned __int8 v197;
  void *v198;
  std::__shared_weak_count *v199;
  unsigned __int8 v200;
  void *v201[2];
  _QWORD v202[7];
  void *v203;
  char v204;
  _BYTE v205[152];
  void **v206;
  _QWORD *v207;
  uint64_t v208;
  char v209[9];

  memset(v174, 0, sizeof(v174));
  v175 = 1065353216;
  memset(v172, 0, sizeof(v172));
  v173 = 1065353216;
  v5 = (const MIL::IROperation **)*((_QWORD *)this + 7);
  v6 = (const MIL::IROperation **)*((_QWORD *)this + 8);
  if (v5 == v6)
  {
LABEL_36:
    MIL::ValidationResult::ValidationResult(a3);
  }
  else
  {
    v7 = (void *)*MEMORY[0x1E0DE4F60];
    v169 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    v165 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    while (1)
    {
      v8 = *v5;
      v195 = 0;
      if (!MIL::ValidationResult::IsGood(a3))
        break;
      MIL::ValidationResult::~ValidationResult(a3);
      if (v195)
      {
        v192 = (void *)v188;
        if ((v188 & 0x8000000000000000) != 0)
        {
          v12 = 3;
        }
        else
        {
          v201[0] = v5 + 2;
          __p[0] = &v192;
          v10 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<long long &>>((uint64_t)v174, (unsigned __int8 *)v5 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v201, (_QWORD **)__p);
          if (v11 || *((void **)v10 + 5) == v192)
          {
            v12 = 0;
          }
          else
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v201);
            v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Tensor ", 7);
            (*(void (**)(void **__return_ptr))(*(_QWORD *)*v5 + 48))(__p);
            if (v181 >= 0)
              v14 = __p;
            else
              v14 = (void **)__p[0];
            if (v181 >= 0)
              v15 = HIBYTE(v181);
            else
              v15 = (uint64_t)__p[1];
            v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" has unexpected rank ", 21);
            v17 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; expected ", 11);
            v18 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(v183[0]) = 46;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v183, 1);
            if (SHIBYTE(v181) < 0)
              operator delete(__p[0]);
            LocationPtr = MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
            v20 = *(std::__shared_weak_count **)(LocationPtr + 8);
            v198 = *(void **)LocationPtr;
            v199 = v20;
            if (v20)
            {
              p_shared_owners = (unint64_t *)&v20->__shared_owners_;
              do
                v22 = __ldxr(p_shared_owners);
              while (__stxr(v22 + 1, p_shared_owners));
            }
            std::stringbuf::str();
            MIL::ValidationResult::ValidationResult(a3, &v198, 319, &v206);
            if (SHIBYTE(v208) < 0)
              operator delete(v206);
            v23 = v199;
            if (v199)
            {
              v24 = (unint64_t *)&v199->__shared_owners_;
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            v201[0] = v7;
            *(void **)((char *)v201 + *((_QWORD *)v7 - 3)) = v169;
            v201[1] = v165;
            if (v204 < 0)
              operator delete(v203);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1E0C022F8](v205);
            v12 = 1;
          }
        }
        if (v189)
        {
          v190 = v189;
          operator delete(v189);
        }
        if (v12 != 3 && v12)
          break;
      }
      v5 += 5;
      if (v5 == v6)
        goto LABEL_36;
    }
  }
  if (MIL::ValidationResult::IsGood(a3))
  {
    MIL::ValidationResult::~ValidationResult(a3);
    v27 = (const MIL::IROperation **)*((_QWORD *)this + 1);
    v26 = (const MIL::IROperation **)*((_QWORD *)this + 2);
    if (v27 != v26)
    {
      v28 = (void *)*MEMORY[0x1E0DE4F60];
      v170 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v167 = MEMORY[0x1E0DE4FB8] + 16;
      while (1)
      {
        v29 = *v27;
        v183[0] = 0;
        if (!MIL::ValidationResult::IsGood(a3))
          goto LABEL_98;
        MIL::ValidationResult::~ValidationResult(a3);
        if (v183[0])
          break;
LABEL_96:
        v27 += 6;
        if (v27 == v26)
          goto LABEL_97;
      }
      if ((v188 & 0x8000000000000000) != 0)
      {
        v35 = 3;
      }
      else
      {
        v31 = (uint64_t)v27[5];
        if (v31 < 0 && (v31 += v188, v31 < 0))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v201);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Tensor ", 7);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v27 + 48))(__p);
          if (v181 >= 0)
            v37 = __p;
          else
            v37 = (void **)__p[0];
          if (v181 >= 0)
            v38 = HIBYTE(v181);
          else
            v38 = (uint64_t)__p[1];
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" has a constraint on dimension ", 31);
          v40 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", which is out of bounds for given tensor of rank ", 50);
          v41 = (_QWORD *)std::ostream::operator<<();
          LOBYTE(v176[0]) = 46;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v176, 1);
          if (SHIBYTE(v181) < 0)
            operator delete(__p[0]);
          v42 = MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
          v43 = *(std::__shared_weak_count **)(v42 + 8);
          v195 = *(_anonymous_namespace_::TensorSymbolicShapeConstraintsImpl **)v42;
          v196 = v43;
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          std::stringbuf::str();
          MIL::ValidationResult::ValidationResult(a3, &v195, 319, &v206);
          if (SHIBYTE(v208) < 0)
            operator delete(v206);
          v46 = v196;
          if (v196)
          {
            v47 = (unint64_t *)&v196->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v201[0] = v28;
          *(void **)((char *)v201 + *((_QWORD *)v28 - 3)) = v170;
          v49 = (void *)v167;
        }
        else
        {
          if (v31 >= (unint64_t)((v190 - (_BYTE *)v189) >> 3))
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v189 + v31) + 16))(*((_QWORD *)v189 + v31));
          if (!v32
            || (v176[0] = 0,
                v176[0] = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32),
                v201[0] = v27 + 2,
                __p[0] = v176,
                v33 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<long long &>>((uint64_t)v174, (unsigned __int8 *)v27 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v201, (_QWORD **)__p), v34)|| *((void **)v33 + 5) == v176[0])
          {
            v35 = 0;
            goto LABEL_92;
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v201);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Dimension ", 10);
          v50 = (_QWORD *)std::ostream::operator<<();
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" of tensor ", 11);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v27 + 48))(__p);
          if (v181 >= 0)
            v52 = __p;
          else
            v52 = (void **)__p[0];
          if (v181 >= 0)
            v53 = HIBYTE(v181);
          else
            v53 = (uint64_t)__p[1];
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" has unexpected length ", 23);
          v55 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"; expected ", 11);
          v56 = (_QWORD *)std::ostream::operator<<();
          LOBYTE(v185) = 46;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)&v185, 1);
          if (SHIBYTE(v181) < 0)
            operator delete(__p[0]);
          v57 = MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
          v58 = *(std::__shared_weak_count **)(v57 + 8);
          v192 = *(void **)v57;
          v193 = v58;
          if (v58)
          {
            v59 = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          std::stringbuf::str();
          MIL::ValidationResult::ValidationResult(a3, &v192, 319, &v198);
          if ((char)v200 < 0)
            operator delete(v198);
          v61 = v193;
          if (v193)
          {
            v62 = (unint64_t *)&v193->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v201[0] = v28;
          *(void **)((char *)v201 + *((_QWORD *)v28 - 3)) = v170;
          v49 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
        }
        v201[1] = v49;
        if (v204 < 0)
          operator delete(v203);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](v205);
        v35 = 1;
      }
LABEL_92:
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      if (v35 != 3 && v35)
        goto LABEL_98;
      goto LABEL_96;
    }
LABEL_97:
    MIL::ValidationResult::ValidationResult(a3);
LABEL_98:
    if (MIL::ValidationResult::IsGood(a3))
    {
      MIL::ValidationResult::~ValidationResult(a3);
      v65 = (const MIL::IROperation **)*((_QWORD *)this + 4);
      v64 = (const MIL::IROperation **)*((_QWORD *)this + 5);
      if (v65 != v64)
      {
        v166 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
        v168 = (void *)*MEMORY[0x1E0DE4F60];
        v164 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
        while (1)
        {
          v66 = *v65;
          v191 = 0;
          if (!MIL::ValidationResult::IsGood(a3))
            goto LABEL_272;
          MIL::ValidationResult::~ValidationResult(a3);
          if (v191)
            break;
LABEL_270:
          v65 += 7;
          if (v65 == v64)
            goto LABEL_271;
        }
        if ((v188 & 0x8000000000000000) != 0)
        {
          v84 = 3;
          goto LABEL_266;
        }
        v68 = (unint64_t)v65[5];
        v69 = (char *)v65[6] + v188;
        v187 = (uint64_t)&v69[-v68 + 1];
        if ((uint64_t)&v69[-v68] <= -2)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v201);
          v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Tensor ", 7);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v65 + 48))(__p);
          if (v181 >= 0)
            v71 = __p;
          else
            v71 = (void **)__p[0];
          if (v181 >= 0)
            v72 = HIBYTE(v181);
          else
            v72 = (uint64_t)__p[1];
          v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" has a constraint on dimension [", 32);
          v74 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)", ", 2);
          v75 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"] which is out of bounds for given tensor of rank ", 50);
          v76 = (_QWORD *)std::ostream::operator<<();
          LOBYTE(v206) = 46;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)&v206, 1);
          if (SHIBYTE(v181) < 0)
            operator delete(__p[0]);
          v77 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
          v78 = (std::__shared_weak_count *)v77[1];
          v185 = *v77;
          v186 = v78;
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          std::stringbuf::str();
          MIL::ValidationResult::ValidationResult(a3, &v185, 319, v183);
          if (v184 < 0)
            operator delete(v183[0]);
          v81 = v186;
          if (v186)
          {
            v82 = (unint64_t *)&v186->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          v201[0] = v168;
          *(void **)((char *)v201 + *((_QWORD *)v168 - 3)) = v166;
          v201[1] = v164;
          if (v204 < 0)
            operator delete(v203);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1E0C022F8](v205);
          v84 = 1;
          goto LABEL_266;
        }
        v201[0] = 0;
        v201[1] = 0;
        v202[0] = 0;
        std::vector<unsigned long long>::reserve(v201, (unint64_t)&v69[-v68 + 1]);
        if ((uint64_t)v69 < (uint64_t)v68)
        {
          v85 = 0;
LABEL_168:
          *(_OWORD *)__p = *(_OWORD *)v201;
          v181 = v202[0];
          v182 = v85;
          if (v85)
          {
            v84 = 3;
            goto LABEL_264;
          }
          v107 = *v65;
          v108 = MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
          v201[0] = v65 + 2;
          v206 = __p;
          v109 = std::__hash_table<std::__hash_value_type<std::string,std::vector<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::vector<long long>&>>((uint64_t)v172, (unsigned __int8 *)v65 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v201, (uint64_t *)&v206);
          if (v110)
          {
            MIL::ValidationResult::ValidationResult(a3);
          }
          else
          {
            v206 = 0;
            v207 = 0;
            v208 = 0;
            std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&v206, *((const void **)v109 + 5), *((_QWORD *)v109 + 6), (uint64_t)(*((_QWORD *)v109 + 6) - *((_QWORD *)v109 + 5)) >> 3);
            v111 = v206;
            v112 = (void **)v207 - v206;
            v113 = (uint64_t *)__p[0];
            if (v112 == ((char *)__p[1] - (char *)__p[0]) >> 3)
            {
              if (v207 != v206)
              {
                if (v112 <= 1)
                  v112 = 1;
                do
                {
                  v114 = *v111;
                  v116 = (void *)*v113++;
                  v115 = v116;
                  if (*v111 == (void *)-1)
                  {
                    v114 = v115;
                  }
                  else if (v114 != v115)
                  {
                    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v201);
                    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Variadic dimension in tensor ", 29);
                    (*(void (**)(void **__return_ptr, const MIL::IROperation *))(*(_QWORD *)v107 + 48))(&v198, v107);
                    if ((v200 & 0x80u) == 0)
                      v130 = &v198;
                    else
                      v130 = v198;
                    if ((v200 & 0x80u) == 0)
                      v131 = v200;
                    else
                      v131 = (uint64_t)v199;
                    v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v130, v131);
                    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)" has unexpected shape ", 22);
                    if ((v197 & 0x80u) == 0)
                      v134 = &v195;
                    else
                      v134 = v195;
                    if ((v197 & 0x80u) == 0)
                      v135 = v197;
                    else
                      v135 = (uint64_t)v196;
                    v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v134, v135);
                    v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"; expected ",
                             11);
                    if ((v194 & 0x80u) == 0)
                      v138 = &v192;
                    else
                      v138 = v192;
                    if ((v194 & 0x80u) == 0)
                      v139 = v194;
                    else
                      v139 = (uint64_t)v193;
                    v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v138, v139);
                    v209[0] = 46;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)v209, 1);
                    if ((char)v194 < 0)
                      operator delete(v192);
                    if ((char)v197 < 0)
                      operator delete(v195);
                    if ((char)v200 < 0)
                      operator delete(v198);
                    v141 = *(std::__shared_weak_count **)(v108 + 8);
                    v195 = *(_anonymous_namespace_::TensorSymbolicShapeConstraintsImpl **)v108;
                    v196 = v141;
                    if (v141)
                    {
                      v142 = (unint64_t *)&v141->__shared_owners_;
                      do
                        v143 = __ldxr(v142);
                      while (__stxr(v143 + 1, v142));
                    }
                    std::stringbuf::str();
                    MIL::ValidationResult::ValidationResult(a3, &v195, 319, &v198);
                    if ((char)v200 < 0)
                      operator delete(v198);
                    v126 = v196;
                    if (v196)
                    {
                      v144 = (unint64_t *)&v196->__shared_owners_;
                      do
                        v128 = __ldaxr(v144);
                      while (__stlxr(v128 - 1, v144));
LABEL_198:
                      if (!v128)
                      {
                        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                        std::__shared_weak_count::__release_weak(v126);
                      }
                    }
                    goto LABEL_233;
                  }
                  *v111++ = v114;
                  --v112;
                }
                while (v112);
              }
              MIL::ValidationResult::ValidationResult(a3);
            }
            else
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v201);
              v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Variadic dimension in tensor ", 29);
              (*(void (**)(void **__return_ptr, const MIL::IROperation *))(*(_QWORD *)v107 + 48))(&v198, v107);
              if ((v200 & 0x80u) == 0)
                v118 = &v198;
              else
                v118 = v198;
              if ((v200 & 0x80u) == 0)
                v119 = v200;
              else
                v119 = (uint64_t)v199;
              v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)v118, v119);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)" has unexpected length ", 23);
              v121 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"; expected ",
                11);
              v122 = (_QWORD *)std::ostream::operator<<();
              LOBYTE(v195) = 46;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)&v195, 1);
              if ((char)v200 < 0)
                operator delete(v198);
              v123 = *(std::__shared_weak_count **)(v108 + 8);
              v195 = *(_anonymous_namespace_::TensorSymbolicShapeConstraintsImpl **)v108;
              v196 = v123;
              if (v123)
              {
                v124 = (unint64_t *)&v123->__shared_owners_;
                do
                  v125 = __ldxr(v124);
                while (__stxr(v125 + 1, v124));
              }
              std::stringbuf::str();
              MIL::ValidationResult::ValidationResult(a3, &v195, 319, &v198);
              if ((char)v200 < 0)
                operator delete(v198);
              v126 = v196;
              if (v196)
              {
                v127 = (unint64_t *)&v196->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                goto LABEL_198;
              }
LABEL_233:
              v201[0] = v168;
              *(void **)((char *)v201 + *((_QWORD *)v168 - 3)) = v166;
              v201[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
              if (v204 < 0)
                operator delete(v203);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x1E0C022F8](v205);
            }
            if (v206)
            {
              v207 = v206;
              operator delete(v206);
            }
          }
          if (MIL::ValidationResult::IsGood(a3))
          {
            MIL::ValidationResult::~ValidationResult(a3);
            v201[0] = v65 + 2;
            v206 = (void **)&v187;
            v145 = std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<long long &>>((uint64_t)v174, (unsigned __int8 *)v65 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)v201, &v206);
            if (v146 || *((_QWORD *)v145 + 5) == v187)
            {
              v84 = 0;
              goto LABEL_264;
            }
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v201);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)"Variadic dimension at [", 23);
            v147 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)", ", 2);
            v148 = (_QWORD *)std::ostream::operator<<();
            v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"] of tensor ", 12);
            (*(void (**)(void ***__return_ptr))(*(_QWORD *)*v65 + 48))(&v206);
            if (v208 >= 0)
              v150 = &v206;
            else
              v150 = (_QWORD **)v206;
            if (v208 >= 0)
              v151 = HIBYTE(v208);
            else
              v151 = (uint64_t)v207;
            v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)v150, v151);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)" have unexpected length ", 24);
            v153 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"; expected ", 11);
            v154 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(v198) = 46;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)&v198, 1);
            if (SHIBYTE(v208) < 0)
              operator delete(v206);
            v155 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a2);
            v156 = (std::__shared_weak_count *)v155[1];
            v178 = *v155;
            v179 = v156;
            if (v156)
            {
              v157 = (unint64_t *)&v156->__shared_owners_;
              do
                v158 = __ldxr(v157);
              while (__stxr(v158 + 1, v157));
            }
            std::stringbuf::str();
            MIL::ValidationResult::ValidationResult(a3, &v178, 319, v176);
            if (v177 < 0)
              operator delete(v176[0]);
            v159 = v179;
            if (v179)
            {
              v160 = (unint64_t *)&v179->__shared_owners_;
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
            v201[0] = v168;
            *(void **)((char *)v201 + *((_QWORD *)v168 - 3)) = v166;
            v201[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
            if (v204 < 0)
              operator delete(v203);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1E0C022F8](v205);
          }
          v84 = 1;
LABEL_264:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_266:
          if (v189)
          {
            v190 = v189;
            operator delete(v189);
          }
          if (v84 != 3 && v84)
            goto LABEL_272;
          goto LABEL_270;
        }
        v85 = 0;
        while (1)
        {
          if (v68 >= (v190 - (_BYTE *)v189) >> 3)
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          v86 = *((_QWORD *)v189 + v68);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 32))(v86) & 1) == 0)
            break;
          v85 = 1;
LABEL_166:
          if (v68++ == (_QWORD)v69)
            goto LABEL_168;
        }
        v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86);
        if (v87)
        {
          v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 48))(v87);
          v89 = v88;
          v90 = (char *)v201[1];
          if (v201[1] < (void *)v202[0])
          {
            *(_QWORD *)v201[1] = v88;
            v91 = v90 + 8;
LABEL_138:
            v93 = v91;
LABEL_165:
            v201[1] = v93;
            goto LABEL_166;
          }
          v94 = (char *)v201[0];
          v95 = ((char *)v201[1] - (char *)v201[0]) >> 3;
          v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v97 = v202[0] - (unint64_t)v201[0];
          if ((uint64_t)(v202[0] - (unint64_t)v201[0]) >> 2 > v96)
            v96 = v97 >> 2;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
            v98 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v98 = v96;
          if (v98)
          {
            v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v202, v98);
            v94 = (char *)v201[0];
            v90 = (char *)v201[1];
          }
          else
          {
            v99 = 0;
          }
          v103 = &v99[8 * v95];
          *(_QWORD *)v103 = v89;
          v93 = v103 + 8;
          while (v90 != v94)
          {
            v104 = *((_QWORD *)v90 - 1);
            v90 -= 8;
            *((_QWORD *)v103 - 1) = v104;
            v103 -= 8;
          }
        }
        else
        {
          v92 = (char *)v201[1];
          if (v201[1] < (void *)v202[0])
          {
            *(_QWORD *)v201[1] = -1;
            v91 = v92 + 8;
            goto LABEL_138;
          }
          v94 = (char *)v201[0];
          v100 = ((char *)v201[1] - (char *)v201[0]) >> 3;
          v101 = v100 + 1;
          if ((unint64_t)(v100 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v102 = v202[0] - (unint64_t)v201[0];
          if ((uint64_t)(v202[0] - (unint64_t)v201[0]) >> 2 > v101)
            v101 = v102 >> 2;
          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
            v98 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v98 = v101;
          if (v98)
          {
            v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v202, v98);
            v94 = (char *)v201[0];
            v92 = (char *)v201[1];
          }
          else
          {
            v99 = 0;
          }
          v103 = &v99[8 * v100];
          *(_QWORD *)v103 = -1;
          v93 = v103 + 8;
          while (v92 != v94)
          {
            v105 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            *((_QWORD *)v103 - 1) = v105;
            v103 -= 8;
          }
        }
        v201[0] = v103;
        v201[1] = v93;
        v202[0] = &v99[8 * v98];
        if (v94)
          operator delete(v94);
        goto LABEL_165;
      }
LABEL_271:
      MIL::ValidationResult::ValidationResult(a3);
LABEL_272:
      if (MIL::ValidationResult::IsGood(a3))
      {
        MIL::ValidationResult::~ValidationResult(a3);
        MIL::ValidationResult::ValidationResult(v162);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)v172);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v174);
}

void sub_1E06B28D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60)
{
  uint64_t v60;
  void *v62;

  if (a59 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::ostringstream::~ostringstream((uint64_t)&a60);
  v62 = *(void **)(v60 - 120);
  if (v62)
  {
    *(_QWORD *)(v60 - 112) = v62;
    operator delete(v62);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)&a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TensorSymbolicShapeConstraintsImpl::AddDimension(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;

  v5 = a3;
  return std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long &>((uint64_t *)(a1 + 8), a2, a4, &v5);
}

uint64_t `anonymous namespace'::TensorSymbolicShapeConstraintsImpl::AddDimension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  std::logic_error *exception;
  uint64_t v7;
  uint64_t v8;

  v7 = a4;
  v8 = a3;
  if (a3 < 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "startIndex must be non-negative.");
    goto LABEL_6;
  }
  if ((a4 & 0x8000000000000000) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "endIndex must be negative.");
LABEL_6:
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long &,long long &>((uint64_t *)(a1 + 32), a2, a5, &v8, &v7);
}

void sub_1E06B2C6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::TensorSymbolicShapeConstraintsImpl::AddRank(uint64_t a1, uint64_t a2, __int128 *a3)
{
  return std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>((uint64_t *)(a1 + 56), a2, a3);
}

void std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *`anonymous namespace'::TensorSymbolicShapeConstraintsImpl::GetRankAndShape@<X0>(_anonymous_namespace_::TensorSymbolicShapeConstraintsImpl *this@<X0>, const MIL::IRValueType *a2@<X1>, uint64_t *a3@<X8>)
{
  MIL::IRTensorValueType *v5;
  MIL::IRTensorValueType *v6;
  uint64_t Rank;
  uint64_t Shape;
  void *v9;
  MIL::IRPixelBufferValueType *v10;
  MIL::IRPixelBufferValueType *v11;
  void *v12;
  MIL::IRTensorBufferValueType *v13;
  MIL::IRTensorBufferValueType *v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v20;
  MIL::IRCircularBufferValueType *v21;
  MIL::IRCircularBufferValueType *v22;
  uint64_t v23;

  v5 = (MIL::IRTensorValueType *)(*(uint64_t (**)(_anonymous_namespace_::TensorSymbolicShapeConstraintsImpl *, const MIL::IRValueType *))(*(_QWORD *)this + 24))(this, a2);
  if (v5)
  {
    v6 = v5;
    Rank = MIL::IRTensorValueType::Rank(v5);
    Shape = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v6 + 96))(v6);
LABEL_7:
    *a3 = Rank;
    goto LABEL_8;
  }
  v9 = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  v10 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v9);
  if (v10)
  {
    v11 = v10;
    Rank = MIL::IRPixelBufferValueType::GetRank(v10);
    Shape = MIL::IRPixelBufferValueType::GetShape(v11);
    goto LABEL_7;
  }
  v12 = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  v13 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v12);
  if (v13)
  {
    v14 = v13;
    Rank = MIL::IRTensorBufferValueType::GetRank(v13);
    Shape = MIL::IRTensorBufferValueType::GetShape(v14);
    goto LABEL_7;
  }
  v20 = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  v21 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(v20);
  if (!v21)
  {
    *a3 = -1;
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    v18 = a3 + 1;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    return std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v18, v15, v16, v17);
  }
  v22 = v21;
  v23 = MIL::IRCircularBufferValueType::GetRank(v21);
  Shape = MIL::IRCircularBufferValueType::GetShape(v22);
  *a3 = v23;
LABEL_8:
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  v15 = *(const void **)Shape;
  v16 = *(_QWORD *)(Shape + 8);
  v17 = (v16 - *(_QWORD *)Shape) >> 3;
  v18 = a3 + 1;
  return std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v18, v15, v16, v17);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<long long &>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4, _QWORD **a5)
{
  unint64_t v5;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[3];

  v10 = (_QWORD *)(a1 + 24);
  v11 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v5 = v11;
      if (v11 >= v13)
        v5 = v11 % v13;
    }
    else
    {
      v5 = (v13 - 1) & v11;
    }
    v16 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v5);
    if (v16)
    {
      for (i = *v16; i; i = *(unsigned __int8 **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v18 == v12)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v5)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<long long &>>(a1, v12, a4, a5, (uint64_t)v28);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v5 = v12 % v13;
      else
        v5 = v12;
    }
    else
    {
      v5 = (v13 - 1) & v12;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13)
          v26 %= v13;
      }
      else
      {
        v26 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  ++*v10;
  return i;
}

void sub_1E06B3114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,long long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<long long &>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, _QWORD **a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 *v12;
  _QWORD *v13;
  __int128 v14;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = (std::string *)(v10 + 2);
  v12 = *a3;
  v13 = *a4;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
  }
  else
  {
    v14 = *v12;
    v10[4] = *((_QWORD *)v12 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
  }
  v10[5] = *v13;
  *(_BYTE *)(a5 + 16) = 1;
}

void sub_1E06B31D8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::FormatShape(_QWORD *a1)
{
  unint64_t v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;
  char v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  v7 = 91;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
  if (a1[1] != *a1)
  {
    v2 = 0;
    do
    {
      if (v2)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", ", 2);
      std::ostream::operator<<();
      ++v2;
    }
    while (v2 < (uint64_t)(a1[1] - *a1) >> 3);
  }
  v7 = 93;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1E0C022F8](&v6);
}

void sub_1E06B3324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::vector<long long>&>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4, uint64_t *a5)
{
  unint64_t v5;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[3];

  v10 = (_QWORD *)(a1 + 24);
  v11 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = v14.u32[0];
    if (v14.u32[0] > 1uLL)
    {
      v5 = v11;
      if (v11 >= v13)
        v5 = v11 % v13;
    }
    else
    {
      v5 = (v13 - 1) & v11;
    }
    v16 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v5);
    if (v16)
    {
      for (i = *v16; i; i = *(unsigned __int8 **)i)
      {
        v18 = *((_QWORD *)i + 1);
        if (v18 == v12)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v15 > 1)
          {
            if (v18 >= v13)
              v18 %= v13;
          }
          else
          {
            v18 &= v13 - 1;
          }
          if (v18 != v5)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::vector<long long>&>>(a1, v12, a4, a5, (uint64_t)v28);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v13 || (float)(v20 * (float)v13) < v19)
  {
    v21 = 1;
    if (v13 >= 3)
      v21 = (v13 & (v13 - 1)) != 0;
    v22 = v21 | (2 * v13);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    v13 = *(_QWORD *)(a1 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
        v5 = v12 % v13;
      else
        v5 = v12;
    }
    else
    {
      v5 = (v13 - 1) & v12;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a1 + 16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v26 >= v13)
          v26 %= v13;
      }
      else
      {
        v26 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v10;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_1E06B35BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<long long>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::vector<long long>&>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<std::string const,std::vector<long long>>::pair[abi:ne180100]<std::string const&,std::vector<long long>&>((std::string *)(v10 + 16), *a3, *a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1E06B3638(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<long long>>::pair[abi:ne180100]<std::string const&,std::vector<long long>&>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  return this;
}

void sub_1E06B36BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06B3734(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long &>(uint64_t *a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  void *v22[5];

  v10 = a1[2];
  v8 = a1 + 2;
  v9 = v10;
  v11 = *(v8 - 1);
  if (v11 >= v10)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a1) >> 4);
    v15 = v14 + 1;
    if (v14 + 1 > 0x555555555555555)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 4);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x2AAAAAAAAAAAAAALL)
      v17 = 0x555555555555555;
    else
      v17 = v15;
    v22[4] = v8;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)v8, v17);
    else
      v18 = 0;
    v19 = &v18[48 * v14];
    v22[0] = v18;
    v22[1] = v19;
    v22[3] = &v18[48 * v17];
    *(_OWORD *)v19 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v20 = *a3;
    *((_QWORD *)v19 + 4) = *((_QWORD *)a3 + 2);
    *((_OWORD *)v19 + 1) = v20;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)v19 + 5) = *a4;
    v22[2] = v19 + 48;
    std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::__swap_out_circular_buffer(a1, v22);
    v13 = a1[1];
    std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::~__split_buffer(v22);
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v12 = *a3;
    *(_QWORD *)(v11 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(v11 + 16) = v12;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(v11 + 40) = *a4;
    v13 = v11 + 48;
    a1[1] = v11 + 48;
  }
  a1[1] = v13;
  return v13 - 48;
}

void sub_1E06B38B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      *(_OWORD *)(a7 + v7 - 48) = *(_OWORD *)(a3 + v7 - 48);
      v9 = a7 + v7 - 48;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      v10 = *(_OWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(a3 + v7 - 16);
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(a3 + v7 - 8);
      *((_QWORD *)&v16 + 1) = v9;
      v7 -= 48;
    }
    while (a3 + v7 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 48;
      result = std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100](v4, v1 - 48);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long &,long long &>(uint64_t *a1, uint64_t a2, __int128 *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  void *v24[5];

  v12 = a1[2];
  v10 = a1 + 2;
  v11 = v12;
  v13 = *(v10 - 1);
  if (v13 >= v12)
  {
    v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - *a1) >> 3);
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) > 0x492492492492492)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - *a1) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x249249249249249)
      v19 = 0x492492492492492;
    else
      v19 = v17;
    v24[4] = v10;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>>((uint64_t)v10, v19);
    else
      v20 = 0;
    v21 = &v20[56 * v16];
    v24[0] = v20;
    v24[1] = v21;
    v24[3] = &v20[56 * v19];
    *(_OWORD *)v21 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v22 = *a3;
    *((_QWORD *)v21 + 4) = *((_QWORD *)a3 + 2);
    *((_OWORD *)v21 + 1) = v22;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)v21 + 5) = *a4;
    *((_QWORD *)v21 + 6) = *a5;
    v24[2] = v21 + 56;
    std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::__swap_out_circular_buffer(a1, v24);
    v15 = a1[1];
    std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::~__split_buffer(v24);
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v14 = *a3;
    *(_QWORD *)(v13 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(v13 + 16) = v14;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(v13 + 40) = *a4;
    *(_QWORD *)(v13 + 48) = *a5;
    v15 = v13 + 56;
    a1[1] = v13 + 56;
  }
  a1[1] = v15;
  return v15 - 56;
}

void sub_1E06B3C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      *(_OWORD *)(a7 + v7 - 56) = *(_OWORD *)(a3 + v7 - 56);
      v9 = a7 + v7 - 56;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      v10 = *(_OWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(a3 + v7 - 24);
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v9 + 40) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 + 48) = *(_QWORD *)(a3 + v7 - 8);
      *((_QWORD *)&v16 + 1) = v9;
      v7 -= 56;
    }
    while (a3 + v7 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string,long long,long long>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 56;
      result = std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::destroy[abi:ne180100](v4, v1 - 56);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::emplace_back<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void *v20[5];

  v8 = a1[2];
  v6 = a1 + 2;
  v7 = v8;
  v9 = *(v6 - 1);
  if (v9 >= v8)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    v20[4] = v6;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription> const>>((uint64_t)v6, v15);
    else
      v16 = 0;
    v17 = &v16[40 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[40 * v15];
    *(_OWORD *)v17 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v18 = *a3;
    *((_QWORD *)v17 + 4) = *((_QWORD *)a3 + 2);
    *((_OWORD *)v17 + 1) = v18;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v20[2] = v17 + 40;
    std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__swap_out_circular_buffer(a1, v20);
    v11 = a1[1];
    std::__split_buffer<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::~__split_buffer(v20);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v10 = *a3;
    *(_QWORD *)(v9 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(v9 + 16) = v10;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v11 = v9 + 40;
    a1[1] = v9 + 40;
  }
  a1[1] = v11;
  return v11 - 40;
}

void sub_1E06B4048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7 - 40;
    do
    {
      v9 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)v8 = v9;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v10 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *((_QWORD *)&v16 + 1) = v8;
      v8 -= 40;
      v7 -= 40;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::tuple<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>>,std::reverse_iterator<std::pair<std::shared_ptr<MIL::Validation::ConstraintTarget const>,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

_QWORD *MIL::Validation::ConstraintTarget::ConstraintTarget(_QWORD *this)
{
  *this = off_1EA99EE10;
  return this;
}

_QWORD *MIL::Validation::OpParameterConstraintTarget::OpParameterConstraintTarget(_QWORD *this)
{
  *this = off_1EA99EE58;
  return this;
}

uint64_t MIL::Validation::OpParameterConstraintTarget::Make@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = operator new();
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 8) = *(_QWORD *)a1;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 23) = *(_QWORD *)(a1 + 15);
  LOBYTE(v7) = *(_BYTE *)(a1 + 23);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)result = off_1EA99EF88;
  *(_BYTE *)(result + 31) = v7;
  *(_DWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 36) = a2;
  *a3 = result;
  return result;
}

uint64_t MIL::Validation::OpParameterConstraintTarget::Make@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  result = operator new();
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 8) = *(_QWORD *)a1;
  *(_QWORD *)(result + 16) = v9;
  *(_QWORD *)(result + 23) = *(_QWORD *)(a1 + 15);
  LOBYTE(v9) = *(_BYTE *)(a1 + 23);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)result = off_1EA99EF88;
  *(_BYTE *)(result + 31) = v9;
  *(_DWORD *)(result + 32) = a2;
  *(_BYTE *)(result + 36) = a3;
  *a4 = result;
  return result;
}

_QWORD *MIL::Validation::OpOutputConstraintTarget::OpOutputConstraintTarget(_QWORD *this)
{
  *this = off_1EA99EEA0;
  return this;
}

uint64_t MIL::Validation::OpOutputConstraintTarget::Make@<X0>(MIL::Validation::OpOutputConstraintTarget *this@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_1EA99EFE8;
  *(_QWORD *)(result + 8) = this;
  *(_BYTE *)(result + 16) = a2;
  *a3 = result;
  return result;
}

_QWORD *MIL::Validation::OpAttributeConstraintTarget::OpAttributeConstraintTarget(_QWORD *this)
{
  *this = off_1EA99EEE8;
  return this;
}

uint64_t MIL::Validation::OpAttributeConstraintTarget::Make@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = operator new();
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 8) = *(_QWORD *)a1;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 23) = *(_QWORD *)(a1 + 15);
  LOBYTE(v7) = *(_BYTE *)(a1 + 23);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)result = off_1EA99F048;
  *(_BYTE *)(result + 31) = v7;
  *(_BYTE *)(result + 32) = a2;
  *a3 = result;
  return result;
}

void `anonymous namespace'::OpParameterConstraintTargetImpl::~OpParameterConstraintTargetImpl(void **this)
{
  *this = off_1EA99EF88;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1EA99EF88;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1E0C023A0);
}

uint64_t `anonymous namespace'::OpParameterConstraintTargetImpl::IsOptional(_anonymous_namespace_::OpParameterConstraintTargetImpl *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t `anonymous namespace'::OpParameterConstraintTargetImpl::TryGetType(_anonymous_namespace_::OpParameterConstraintTargetImpl *this, const MIL::IROperation *a2)
{
  uint64_t ParameterType;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 40))(&v10);
  if (v10)
    ParameterType = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  else
    ParameterType = MIL::IROperation::TryGetParameterType(a2, (uint64_t)this + 8, *((unsigned int *)this + 8));
  v5 = ParameterType;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1E06B4518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::OpParameterConstraintTargetImpl::TryGetValue(_anonymous_namespace_::OpParameterConstraintTargetImpl *this, const MIL::IROperation *a2)
{
  return MIL::IROperation::TryGetParameterValue(a2, (uint64_t)this + 8, *((unsigned int *)this + 8));
}

void `anonymous namespace'::OpParameterConstraintTargetImpl::TryGetValueSharedPtr(_anonymous_namespace_::OpParameterConstraintTargetImpl *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t *a3@<X8>)
{
  MIL::IROperation::TryGetParameterValueSharedPtr(a2, (uint64_t)this + 8, *((unsigned int *)this + 8), a3);
}

void `anonymous namespace'::OpParameterConstraintTargetImpl::ToString(_anonymous_namespace_::OpParameterConstraintTargetImpl *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string __p;
  std::string v9;
  std::string v10;
  std::string v11;

  std::operator+<char>();
  std::string::push_back(&v9, 91);
  v10 = v9;
  memset(&v9, 0, sizeof(v9));
  std::to_string(&__p, *((_DWORD *)this + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v10, (const std::string::value_type *)p_p, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v11, 93);
  *a2 = v11;
  memset(&v11, 0, sizeof(v11));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1E06B4650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::OpOutputConstraintTargetImpl::~OpOutputConstraintTargetImpl(_anonymous_namespace_::OpOutputConstraintTargetImpl *this)
{
  JUMPOUT(0x1E0C023A0);
}

uint64_t `anonymous namespace'::OpOutputConstraintTargetImpl::IsOptional(_anonymous_namespace_::OpOutputConstraintTargetImpl *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t `anonymous namespace'::OpOutputConstraintTargetImpl::TryGetType(_anonymous_namespace_::OpOutputConstraintTargetImpl *this, const MIL::IROperation *a2)
{
  uint64_t OutputType;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 40))(&v10);
  if (v10)
    OutputType = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  else
    OutputType = MIL::IROperation::TryGetOutputType(a2, *((_QWORD *)this + 1));
  v5 = OutputType;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1E06B4770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::OpOutputConstraintTargetImpl::TryGetValue(_anonymous_namespace_::OpOutputConstraintTargetImpl *this, const MIL::IROperation *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 40))(&v7);
  v2 = v8;
  if (!v8)
    return v7;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  if (v8->__shared_owners_)
    v4 = v7;
  else
    v4 = 0;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return v4;
}

void `anonymous namespace'::OpOutputConstraintTargetImpl::TryGetValueSharedPtr(_anonymous_namespace_::OpOutputConstraintTargetImpl *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];
  void **v12;

  v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 64))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6))
  {
    v7 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, const MIL::IROperation *))(*(_QWORD *)v7 + 248))(v11, v7, a2);
    v8 = *(_OWORD *)(v11[0] + 16 * *((_QWORD *)this + 1));
    *(_OWORD *)a3 = v8;
    if (*((_QWORD *)&v8 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v12 = (void **)v11;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v12);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void `anonymous namespace'::OpOutputConstraintTargetImpl::ToString(_anonymous_namespace_::OpOutputConstraintTargetImpl *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  std::to_string(&v4, *((_QWORD *)this + 1));
  v3 = std::string::insert(&v4, 0, "output at index ");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1E06B4930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::OpAttributeConstraintTargetImpl::~OpAttributeConstraintTargetImpl(void **this)
{
  *this = off_1EA99F048;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1EA99F048;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1E0C023A0);
}

uint64_t `anonymous namespace'::OpAttributeConstraintTargetImpl::IsOptional(_anonymous_namespace_::OpAttributeConstraintTargetImpl *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t `anonymous namespace'::OpAttributeConstraintTargetImpl::TryGetType(_anonymous_namespace_::OpAttributeConstraintTargetImpl *this, const MIL::IROperation *a2)
{
  uint64_t ParameterType;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 40))(&v10);
  if (v10)
    ParameterType = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  else
    ParameterType = MIL::IROperation::TryGetParameterType(a2, (uint64_t)this + 8, 0);
  v5 = ParameterType;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1E06B4A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::OpAttributeConstraintTargetImpl::TryGetValue(_anonymous_namespace_::OpAttributeConstraintTargetImpl *this, const MIL::IROperation *a2)
{
  return MIL::IRObject::TryGetAttribute((uint64_t)a2, (unsigned __int8 *)this + 8);
}

unsigned __int8 *`anonymous namespace'::OpAttributeConstraintTargetImpl::TryGetValueSharedPtr@<X0>(_anonymous_namespace_::OpAttributeConstraintTargetImpl *this@<X0>, const MIL::IROperation *a2@<X1>, _QWORD *a3@<X8>)
{
  return MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)a2, (unsigned __int8 *)this + 8, a3);
}

uint64_t `anonymous namespace'::OpAttributeConstraintTargetImpl::ToString(_anonymous_namespace_::OpAttributeConstraintTargetImpl *this)
{
  return std::operator+<char>();
}

void MIL::Validation::VerifyInputTensorDimAtGivenAxis(MIL::IRObject *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v9;
  MIL::IRTensorValueType *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  std::string::value_type *v37;
  std::string::size_type v38;
  int v39;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  _DWORD v60[2];

  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(a1);
  v9 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v9
    && (v10 = (MIL::IRTensorValueType *)v9, (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9))
    && (v11 = (MIL::IRTensorValueType::Rank(v10) & (a2 >> 63)) + a2,
        v12 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v10 + 96))(v10),
        v11 < (uint64_t)(v12[1] - *v12) >> 3)
    && (v13 = v12, (v14 = *(_QWORD *)(*v12 + 8 * v11)) != 0)
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14)
    && (v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v13 + 8 * v11) + 16))(*(_QWORD *)(*v13 + 8 * v11)),
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15),
        v16 != a3))
  {
    v17 = v16;
    std::operator+<char>();
    v18 = std::string::append(&v53, "', the value of dimension at axis ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v52, a2);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v52;
    else
      v20 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    else
      size = v52.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v54, (const std::string::value_type *)v20, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v55, " must be ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v51, a3);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v51;
    else
      v26 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      v27 = v51.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v56, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v57, " but it is ");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v50, v17);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v50;
    else
      v32 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    else
      v33 = v50.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v58, (const std::string::value_type *)v32, v33);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v59, " instead");
    v37 = (std::string::value_type *)v36->__r_.__value_.__r.__words[0];
    v38 = v36->__r_.__value_.__l.__size_;
    v60[0] = v36->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v60 + 3) = *(_DWORD *)((char *)&v36->__r_.__value_.__r.__words[2] + 3);
    v39 = SHIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v41 = (std::__shared_weak_count *)LocationPtr[1];
    v48 = *LocationPtr;
    v49 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(p_shared_owners);
      while (__stxr(v43 + 1, p_shared_owners));
    }
    if (v39 < 0)
    {
      std::string::__init_copy_ctor_external(&v47, v37, v38);
    }
    else
    {
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      v47.__r_.__value_.__l.__size_ = v38;
      LODWORD(v47.__r_.__value_.__r.__words[2]) = v60[0];
      *(_DWORD *)((char *)&v47.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v60 + 3);
      *((_BYTE *)&v47.__r_.__value_.__s + 23) = v39;
    }
    MIL::ValidationResult::ValidationResult(a4, &v48, 315, &v47);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v44 = v49;
    if (v49)
    {
      v45 = (unint64_t *)&v49->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v39 < 0)
      operator delete(v37);
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a4);
  }
}

void sub_1E06B4EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  int v55;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v55 < 0)
    operator delete(v54);
  _Unwind_Resume(a1);
}

void sub_1E06B4FDC()
{
  JUMPOUT(0x1E06B4FB4);
}

void sub_1E06B4FE4()
{
  JUMPOUT(0x1E06B4FC4);
}

void MIL::Validation::VerifyOutputShapeMatchesInput(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t ParameterType;
  uint64_t v5;
  uint64_t OutputType;
  uint64_t v7;
  BOOL v8;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  __int128 v27;
  unint64_t *v28;
  void *v29[2];
  std::string::size_type v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  void *__p[2];
  std::string::size_type v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  ParameterType = MIL::IROperation::GetParameterType(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 24))(ParameterType);
  OutputType = MIL::IROperation::GetOutputType(a1, 0);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType);
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v10 = (std::__shared_weak_count *)LocationPtr[1];
    v36 = *LocationPtr;
    v37 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    std::operator+<char>();
    v13 = std::string::append(&v33, " and output must both be tensors");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v35 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v36, 313, __p);
    if (SHIBYTE(v35) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v15 = v37;
    if (v37)
    {
      v16 = (unint64_t *)&v37->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      goto LABEL_29;
    }
  }
  else
  {
    v18 = v7;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18);
    v21 = *(_QWORD *)(v19 + 8) - *(_QWORD *)v19;
    if (v21 == *(_QWORD *)(v20 + 8) - *(_QWORD *)v20 && !memcmp(*(const void **)v19, *(const void **)v20, v21))
    {
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
    v22 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v23 = (std::__shared_weak_count *)v22[1];
    v31 = *v22;
    v32 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    std::operator+<char>();
    v26 = std::string::append(&v33, " shape should match output shape");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v30 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)v29 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a2, &v31, 313, v29);
    if (SHIBYTE(v30) < 0)
      operator delete(v29[0]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v15 = v32;
    if (v32)
    {
      v28 = (unint64_t *)&v32->__shared_owners_;
      do
        v17 = __ldaxr(v28);
      while (__stlxr(v17 - 1, v28));
LABEL_29:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1E06B5254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL MIL::Validation::TypeShapeAndDataTypeMatch(MIL::Validation *this, const MIL::IRValueType *a2, const MIL::IRValueType *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v13;
  std::runtime_error *exception;

  if (this == a2)
    return 1;
  if (MIL::IRValueType::TryCastAsMemoryLayoutType(this) || MIL::IRValueType::TryCastAsMemoryLayoutType(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "TypeShapeAndDataTypeMatch currently only supports tensors.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v5 = (*(uint64_t (**)(MIL::Validation *))(*(_QWORD *)this + 24))(this);
  v6 = (*(uint64_t (**)(const MIL::IRValueType *))(*(_QWORD *)a2 + 24))(a2);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  v8 = v6;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
  v11 = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
  if (v11 != *(_QWORD *)(v10 + 8) - *(_QWORD *)v10 || memcmp(*(const void **)v9, *(const void **)v10, v11))
    return 0;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  return v13 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
}

void sub_1E06B5400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Validation::VerifyDimSizeIsNumChannels(MIL::IRValueType *a1@<X0>, MIL::IRValueType *a2@<X1>, uint64_t a3@<X2>, MIL::IRObject *a4@<X4>, int a5@<W5>, MIL::ValidationResult *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::string *v41;
  __int128 v42;
  unint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  int v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  void *v71[2];
  std::string::size_type v72;
  _QWORD v73[2];
  std::string v74;
  std::string v75;
  void *v76[2];
  std::string::size_type v77;
  _QWORD v78[2];
  void *__p[2];
  std::string::size_type v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::string v83;
  __int128 v84;
  std::string::size_type v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string v88;
  __int128 v89;
  std::string::size_type v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  char *v93;
  char *v94;
  uint64_t v95;

  v11 = MIL::IRValueType::AsTensorType(a1);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  v94 = 0;
  v95 = 0;
  v93 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v93, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
  if ((unint64_t)(v94 - v93) <= 0x17)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a4);
    v14 = (std::__shared_weak_count *)LocationPtr[1];
    v91 = *LocationPtr;
    v92 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    std::operator+<char>();
    v17 = std::string::append(&v88, " should be at least rank 3");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v90 = v17->__r_.__value_.__r.__words[2];
    v89 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a6, &v91, 315, &v89);
    if (SHIBYTE(v90) < 0)
      operator delete((void *)v89);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    v19 = v92;
    if (v92)
    {
      v20 = (unint64_t *)&v92->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_84;
  }
  v22 = MIL::IRValueType::AsTensorType(a2);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 96))(v22);
  memset(&v88, 0, sizeof(v88));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v88, *(const void **)v23, *(_QWORD *)(v23 + 8), (uint64_t)(*(_QWORD *)(v23 + 8) - *(_QWORD *)v23) >> 3);
  if (v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0] != 8)
  {
    v28 = (uint64_t *)MIL::IRObject::GetLocationPtr(a4);
    v29 = (std::__shared_weak_count *)v28[1];
    v86 = *v28;
    v87 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::operator+<char>();
    v32 = std::string::append(&v83, " should be rank 1");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v85 = v32->__r_.__value_.__r.__words[2];
    v84 = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a6, &v86, 315, &v84);
    if (SHIBYTE(v85) < 0)
      operator delete((void *)v84);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    v34 = v87;
    if (!v87)
      goto LABEL_82;
    v35 = (unint64_t *)&v87->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
LABEL_41:
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    goto LABEL_82;
  }
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v88.__r_.__value_.__l.__data_ + 16))(*(_QWORD *)v88.__r_.__value_.__l.__data_);
  if (!v24)
  {
    v37 = (uint64_t *)MIL::IRObject::GetLocationPtr(a4);
    v38 = (std::__shared_weak_count *)v37[1];
    v81 = *v37;
    v82 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::operator+<char>();
    v41 = std::string::append(&v83, "' shape: dimension 0 should be known at compilation");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v80 = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a6, &v81, 315, __p);
    if (SHIBYTE(v80) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    v34 = v82;
    if (!v82)
      goto LABEL_82;
    v43 = (unint64_t *)&v82->__shared_owners_;
    do
      v36 = __ldaxr(v43);
    while (__stlxr(v36 - 1, v43));
    goto LABEL_41;
  }
  v25 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v93 + 1) + 16))(*((_QWORD **)v93 + 1));
  v26 = v25;
  if (!v25)
    goto LABEL_19;
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25))
    goto LABEL_19;
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26);
  if (v27 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24))
    goto LABEL_19;
  if (a5)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24) == 1)
    {
LABEL_19:
      MIL::ValidationResult::ValidationResult(a6);
      goto LABEL_82;
    }
    v44 = (_QWORD *)MIL::IRObject::GetLocationPtr(a4);
    v45 = v44[1];
    v78[0] = *v44;
    v78[1] = v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::operator+<char>();
    v48 = std::string::append(&v74, "' shape: dimension 0 should be either 1 or equal ");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = std::string::append(&v75, "to the size of the number of channels (the size of dimension 1) of input ");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = *(char *)(a3 + 23);
    if (v52 >= 0)
      v53 = (const std::string::value_type *)a3;
    else
      v53 = *(const std::string::value_type **)a3;
    if (v52 >= 0)
      v54 = *(unsigned __int8 *)(a3 + 23);
    else
      v54 = *(_QWORD *)(a3 + 8);
    v55 = std::string::append(&v83, v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v77 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)v76 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a6, v78, 315, v76);
    if (SHIBYTE(v77) < 0)
      operator delete(v76[0]);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    v57 = v78;
  }
  else
  {
    v58 = (_QWORD *)MIL::IRObject::GetLocationPtr(a4);
    v59 = v58[1];
    v73[0] = *v58;
    v73[1] = v59;
    if (v59)
    {
      v60 = (unint64_t *)(v59 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    std::operator+<char>();
    v62 = std::string::append(&v74, "' shape: dimension 0 should be equal ");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v75, "to the size of the number of channels (the size of dimension 1) of input ");
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v66 = *(char *)(a3 + 23);
    if (v66 >= 0)
      v67 = (const std::string::value_type *)a3;
    else
      v67 = *(const std::string::value_type **)a3;
    if (v66 >= 0)
      v68 = *(unsigned __int8 *)(a3 + 23);
    else
      v68 = *(_QWORD *)(a3 + 8);
    v69 = std::string::append(&v83, v67, v68);
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v72 = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)v71 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a6, v73, 315, v71);
    if (SHIBYTE(v72) < 0)
      operator delete(v71[0]);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    v57 = v73;
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v57);
LABEL_82:
  if (v88.__r_.__value_.__r.__words[0])
  {
    v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
    operator delete(v88.__r_.__value_.__l.__data_);
  }
LABEL_84:
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
}

void sub_1E06B5A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  void *v55;
  void *v56;

  if (a35 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  v55 = *(void **)(v53 - 152);
  if (v55)
  {
    *(_QWORD *)(v53 - 144) = v55;
    operator delete(v55);
  }
  v56 = *(void **)(v53 - 88);
  if (v56)
  {
    *(_QWORD *)(v53 - 80) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(a1);
}

BOOL MIL::Validation::HasUniqueElementsInAxes(MIL::Validation *this, const MIL::IRTensorValue *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t Data;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;

  v2 = (int)a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 1065353216;
  v4 = (uint64_t *)MIL::IRValue::AsTensor(this);
  Data = MIL::IRTensorValue::GetDataView<int>(v4);
  if (v6)
  {
    v7 = (int *)Data;
    v8 = 4 * v6;
    do
    {
      v13 = (v2 & (*v7 >> 31)) + *v7;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v14, &v13, &v13);
      ++v7;
      v8 -= 4;
    }
    while (v8);
  }
  v9 = *((_QWORD *)&v15 + 1);
  v10 = (*(uint64_t (**)(MIL::Validation *))(*(_QWORD *)this + 32))(this);
  v11 = v9 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v14);
  return v11;
}

void sub_1E06B5CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL MIL::Validation::IsAxisValidForRank(MIL::Validation *this, int a2)
{
  return (int)this < a2 && -a2 <= (int)this;
}

void MIL::Validation::OpToTypeInferenceParams(MIL::IRObject *a1@<X0>, uint64_t a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  MIL::IRTypedArgument *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  __int128 v38;
  int64x2_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  __int128 v54;
  int64x2_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  char *v69;
  __int128 v70;
  int64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  _QWORD *v85;
  _QWORD *v86;
  BOOL v87;
  uint64_t *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::string *v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  unint64_t *v109;
  _QWORD *v112;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  std::string::size_type v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  __int128 v124;
  void *__p[2];
  char v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void *v129[2];
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::string v133;
  uint64_t v134;
  unsigned __int8 *v135;

  v3 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 160))(a1);
  v4 = (_QWORD *)*v3;
  v112 = v3 + 1;
  if ((_QWORD *)*v3 == v3 + 1)
    goto LABEL_94;
  v5 = (char *)a1 + 64;
  while (2)
  {
    if (*((char *)v4 + 55) < 0)
    {
      if (!v4[5])
        goto LABEL_120;
    }
    else if (!*((_BYTE *)v4 + 55))
    {
LABEL_120:
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v106 = (std::__shared_weak_count *)LocationPtr[1];
      v131 = *LocationPtr;
      v132 = v106;
      if (v106)
      {
        p_shared_owners = (unint64_t *)&v106->__shared_owners_;
        do
          v108 = __ldxr(p_shared_owners);
        while (__stxr(v108 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v129, "Operation parameter names must be non-empty.");
      MIL::ValidationResult::ValidationResult(a3, &v131, 316, v129);
      if (v130 < 0)
        operator delete(v129[0]);
      v92 = v132;
      if (v132)
      {
        v109 = (unint64_t *)&v132->__shared_owners_;
        do
          v94 = __ldaxr(v109);
        while (__stlxr(v94 - 1, v109));
LABEL_128:
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      return;
    }
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 4);
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v4 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v133);
    std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)(v6 + 40), 0, 0, 0);
    v8 = (_QWORD *)v4[7];
    v7 = (_QWORD *)v4[8];
    while (v8 != v7)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8);
      if (v9)
      {
        v10 = v9;
        if (*(char *)(v9 + 23) < 0)
        {
          if (!*(_QWORD *)(v9 + 8))
          {
LABEL_95:
            v88 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            v89 = (std::__shared_weak_count *)v88[1];
            v127 = *v88;
            v128 = v89;
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldxr(v90);
              while (__stxr(v91 + 1, v90));
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "Operation argument names must be non-empty.");
            MIL::ValidationResult::ValidationResult(a3, &v127, 301, __p);
            if (v126 < 0)
              operator delete(__p[0]);
            v92 = v128;
            if (v128)
            {
              v93 = (unint64_t *)&v128->__shared_owners_;
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              goto LABEL_128;
            }
            return;
          }
        }
        else if (!*(_BYTE *)(v9 + 23))
        {
          goto LABEL_95;
        }
        (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(&v124, v5, v9, 1);
        if ((_QWORD)v124)
        {
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 4);
          v15 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v4 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v133);
          v120 = v124;
          v124 = 0uLL;
          MIL::IRTypedArgument::Make((uint64_t *)&v120, &v121);
          v16 = v121;
          v122 = v121;
          if (v121)
          {
            v17 = (_QWORD *)operator new();
            v18 = v121;
            *v17 = &unk_1EA994910;
            v17[1] = 0;
            v17[2] = 0;
            v17[3] = v18;
          }
          else
          {
            v17 = 0;
          }
          v123 = v17;
          v121 = 0;
          v24 = *((_QWORD *)v15 + 7);
          v25 = (_QWORD *)*((_QWORD *)v15 + 6);
          if ((unint64_t)v25 >= v24)
          {
            v27 = *((_QWORD *)v15 + 5);
            v28 = ((uint64_t)v25 - v27) >> 4;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v30 = v24 - v27;
            if (v30 >> 3 > v29)
              v29 = v30 >> 3;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
              v31 = 0xFFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            v135 = v15 + 56;
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v15 + 56), v31);
            v34 = &v32[16 * v28];
            *(_QWORD *)v34 = v16;
            *((_QWORD *)v34 + 1) = v17;
            v122 = 0;
            v123 = 0;
            v36 = (_QWORD *)*((_QWORD *)v15 + 5);
            v35 = (_QWORD *)*((_QWORD *)v15 + 6);
            if (v35 == v36)
            {
              v39 = vdupq_n_s64((unint64_t)v35);
              v37 = &v32[16 * v28];
            }
            else
            {
              v37 = &v32[16 * v28];
              do
              {
                v38 = *((_OWORD *)v35 - 1);
                v35 -= 2;
                *((_OWORD *)v37 - 1) = v38;
                v37 -= 16;
                *v35 = 0;
                v35[1] = 0;
              }
              while (v35 != v36);
              v39 = *(int64x2_t *)(v15 + 40);
            }
            v26 = v34 + 16;
            *((_QWORD *)v15 + 5) = v37;
            *((_QWORD *)v15 + 6) = v34 + 16;
            *(int64x2_t *)&v133.__r_.__value_.__r.__words[1] = v39;
            v72 = *((_QWORD *)v15 + 7);
            *((_QWORD *)v15 + 7) = &v32[16 * v33];
            v134 = v72;
            v133.__r_.__value_.__r.__words[0] = v39.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v133);
          }
          else
          {
            *v25 = v16;
            v25[1] = v17;
            v26 = v25 + 2;
            v122 = 0;
            v123 = 0;
          }
          *((_QWORD *)v15 + 6) = v26;
          v73 = v121;
          v121 = 0;
          if (v73)
            (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
          v74 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
          if (*((_QWORD *)&v120 + 1))
          {
            v75 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
        }
        else
        {
          v19 = (MIL::IRTypedArgument *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v10, 1);
          if (!v19)
          {
            v95 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            v96 = (std::__shared_weak_count *)v95[1];
            v118 = *v95;
            v119 = v96;
            if (v96)
            {
              v97 = (unint64_t *)&v96->__shared_owners_;
              do
                v98 = __ldxr(v97);
              while (__stxr(v98 + 1, v97));
            }
            std::operator+<char>();
            v99 = std::string::append(&v133, "' used as operation input.");
            v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
            v117 = v99->__r_.__value_.__r.__words[2];
            *(_OWORD *)v116 = v100;
            v99->__r_.__value_.__l.__size_ = 0;
            v99->__r_.__value_.__r.__words[2] = 0;
            v99->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(a3, &v118, 305, v116);
            if (SHIBYTE(v117) < 0)
              operator delete(v116[0]);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v133.__r_.__value_.__l.__data_);
            v101 = v119;
            if (v119)
            {
              v102 = (unint64_t *)&v119->__shared_owners_;
              do
                v103 = __ldaxr(v102);
              while (__stlxr(v103 - 1, v102));
              if (!v103)
              {
                ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                std::__shared_weak_count::__release_weak(v101);
              }
            }
            v92 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
            if (*((_QWORD *)&v124 + 1))
            {
              v104 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
              do
                v94 = __ldaxr(v104);
              while (__stlxr(v94 - 1, v104));
              goto LABEL_128;
            }
            return;
          }
          v133.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 4);
          v20 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v4 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v133);
          MIL::IRTypedArgument::Make(v19, &v121);
          v21 = v121;
          v122 = v121;
          if (v121)
          {
            v22 = (_QWORD *)operator new();
            v23 = v121;
            *v22 = &unk_1EA994910;
            v22[1] = 0;
            v22[2] = 0;
            v22[3] = v23;
          }
          else
          {
            v22 = 0;
          }
          v123 = v22;
          v121 = 0;
          v56 = *((_QWORD *)v20 + 7);
          v57 = (_QWORD *)*((_QWORD *)v20 + 6);
          if ((unint64_t)v57 >= v56)
          {
            v59 = *((_QWORD *)v20 + 5);
            v60 = ((uint64_t)v57 - v59) >> 4;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 60)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v62 = v56 - v59;
            if (v62 >> 3 > v61)
              v61 = v62 >> 3;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
              v63 = 0xFFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            v135 = v20 + 56;
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 56), v63);
            v66 = &v64[16 * v60];
            *(_QWORD *)v66 = v21;
            *((_QWORD *)v66 + 1) = v22;
            v122 = 0;
            v123 = 0;
            v68 = (_QWORD *)*((_QWORD *)v20 + 5);
            v67 = (_QWORD *)*((_QWORD *)v20 + 6);
            if (v67 == v68)
            {
              v71 = vdupq_n_s64((unint64_t)v67);
              v69 = &v64[16 * v60];
            }
            else
            {
              v69 = &v64[16 * v60];
              do
              {
                v70 = *((_OWORD *)v67 - 1);
                v67 -= 2;
                *((_OWORD *)v69 - 1) = v70;
                v69 -= 16;
                *v67 = 0;
                v67[1] = 0;
              }
              while (v67 != v68);
              v71 = *(int64x2_t *)(v20 + 40);
            }
            v58 = v66 + 16;
            *((_QWORD *)v20 + 5) = v69;
            *((_QWORD *)v20 + 6) = v66 + 16;
            *(int64x2_t *)&v133.__r_.__value_.__r.__words[1] = v71;
            v82 = *((_QWORD *)v20 + 7);
            *((_QWORD *)v20 + 7) = &v64[16 * v65];
            v134 = v82;
            v133.__r_.__value_.__r.__words[0] = v71.i64[0];
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v133);
          }
          else
          {
            *v57 = v21;
            v57[1] = v22;
            v58 = v57 + 2;
          }
          *((_QWORD *)v20 + 6) = v58;
          v83 = v121;
          v121 = 0;
          if (v83)
            (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
        }
        v79 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
        if (*((_QWORD *)&v124 + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
          do
            v81 = __ldaxr(v84);
          while (__stlxr(v81 - 1, v84));
          goto LABEL_85;
        }
      }
      else
      {
        v133.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 4);
        v11 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)v4 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v133);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v8 + 48))(&v114);
        MIL::IRTypedArgument::Make(&v114, &v122);
        v12 = v122;
        *(_QWORD *)&v124 = v122;
        if (v122)
        {
          v13 = (_QWORD *)operator new();
          v14 = v122;
          *v13 = &unk_1EA994910;
          v13[1] = 0;
          v13[2] = 0;
          v13[3] = v14;
        }
        else
        {
          v13 = 0;
        }
        *((_QWORD *)&v124 + 1) = v13;
        v122 = 0;
        v40 = *((_QWORD *)v11 + 7);
        v41 = (_QWORD *)*((_QWORD *)v11 + 6);
        if ((unint64_t)v41 >= v40)
        {
          v43 = *((_QWORD *)v11 + 5);
          v44 = ((uint64_t)v41 - v43) >> 4;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 60)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v46 = v40 - v43;
          if (v46 >> 3 > v45)
            v45 = v46 >> 3;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
            v47 = 0xFFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          v135 = v11 + 56;
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v11 + 56), v47);
          v50 = &v48[16 * v44];
          *(_QWORD *)v50 = v12;
          *((_QWORD *)v50 + 1) = v13;
          v124 = 0uLL;
          v52 = (_QWORD *)*((_QWORD *)v11 + 5);
          v51 = (_QWORD *)*((_QWORD *)v11 + 6);
          if (v51 == v52)
          {
            v55 = vdupq_n_s64((unint64_t)v51);
            v53 = &v48[16 * v44];
          }
          else
          {
            v53 = &v48[16 * v44];
            do
            {
              v54 = *((_OWORD *)v51 - 1);
              v51 -= 2;
              *((_OWORD *)v53 - 1) = v54;
              v53 -= 16;
              *v51 = 0;
              v51[1] = 0;
            }
            while (v51 != v52);
            v55 = *(int64x2_t *)(v11 + 40);
          }
          v42 = v50 + 16;
          *((_QWORD *)v11 + 5) = v53;
          *((_QWORD *)v11 + 6) = v50 + 16;
          *(int64x2_t *)&v133.__r_.__value_.__r.__words[1] = v55;
          v77 = *((_QWORD *)v11 + 7);
          *((_QWORD *)v11 + 7) = &v48[16 * v49];
          v134 = v77;
          v133.__r_.__value_.__r.__words[0] = v55.i64[0];
          std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v133);
        }
        else
        {
          *v41 = v12;
          v41[1] = v13;
          v42 = v41 + 2;
          v124 = 0uLL;
        }
        *((_QWORD *)v11 + 6) = v42;
        v78 = v122;
        v122 = 0;
        if (v78)
          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
        v79 = v115;
        if (v115)
        {
          v80 = (unint64_t *)&v115->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
LABEL_85:
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
      v8 += 2;
    }
    v85 = (_QWORD *)v4[1];
    if (v85)
    {
      do
      {
        v86 = v85;
        v85 = (_QWORD *)*v85;
      }
      while (v85);
    }
    else
    {
      do
      {
        v86 = (_QWORD *)v4[2];
        v87 = *v86 == (_QWORD)v4;
        v4 = v86;
      }
      while (!v87);
    }
    v4 = v86;
    if (v86 != v112)
      continue;
    break;
  }
LABEL_94:
  MIL::ValidationResult::ValidationResult(a3);
}

void sub_1E06B65B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 153) < 0)
    operator delete(*(void **)(v40 - 176));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v40 - 152);
  _Unwind_Resume(a1);
}

BOOL MIL::Validation::IsZeroOutOfRangeForReshape(_QWORD *a1, MIL::IRTensorValueType *this)
{
  uint64_t v2;
  int v3;

  v2 = 4 * a1[1];
  while (v2)
  {
    v3 = *(_DWORD *)(*a1 - 4 + v2);
    v2 -= 4;
    if (!v3)
      return MIL::IRTensorValueType::Rank(this) < (v2 + 4) >> 2;
  }
  return 0;
}

BOOL MIL::Validation::VariadicTensorsDTypesMatch(MIL::IRObject *a1, uint64_t a2)
{
  MIL::IRValueType *ParameterType;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  MIL::IRValueType *v14;
  uint64_t v15;
  int v16;

  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(a1);
  v5 = MIL::IRValueType::AsTensorType(ParameterType);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  v7 = (*(uint64_t (**)(MIL::IRObject *, uint64_t))(*(_QWORD *)a1 + 152))(a1, a2);
  if (v7 < 2)
    return 1;
  v9 = v7;
  v10 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(a1);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11) != v6)
    return 0;
  v12 = 2;
  do
  {
    v13 = v12;
    if (v9 == v12)
      break;
    v14 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(a1);
    v15 = MIL::IRValueType::AsTensorType(v14);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
    v12 = v13 + 1;
  }
  while (v16 == v6);
  return v13 >= v9;
}

uint64_t MIL::Validation::IsEqualConstShape(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  if (v3 - *a1 != a2[1] - *a2)
    return 0;
  if (v3 == v2)
    return 1;
  v6 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v6) + 16))(*(_QWORD *)(v2 + 8 * v6));
    if (!result)
      break;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v6) + 16))(*(_QWORD *)(*a2 + 8 * v6));
    if (!result)
      break;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 8 * v6) + 16))(*(_QWORD *)(*a1 + 8 * v6));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v6) + 16))(*(_QWORD *)(*a2 + 8 * v6));
    if (v9 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10))
      return 0;
    ++v6;
    v2 = *a1;
    if (v6 >= (a1[1] - *a1) >> 3)
      return 1;
  }
  return result;
}

void MIL::Validation::ValidateBaseArgReductionCommon(MIL::Validation *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  _BOOL4 IsParameterSet;
  _BOOL4 v6;
  MIL::IRValueType *OutputType;
  uint64_t v8;
  int v9;
  MIL::IRValue *ParameterValue;
  const void *v11;
  int v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  BOOL v21;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v23;
  int v24;
  const void *v25;
  int v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  void *v50[2];
  std::string::size_type v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *__p[2];
  char v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::string v58;
  std::string v59;

  std::string::basic_string[abi:ne180100]<0>(&v59, "output_dtype");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v59.__r_.__value_.__l.__data_);
  v6 = IsParameterSet;
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!IsParameterSet)
      goto LABEL_21;
LABEL_5:
    OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
    v8 = MIL::IRValueType::AsTensorType(OutputType);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
    std::string::basic_string[abi:ne180100]<0>(&v58, "output_dtype");
    ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
    v11 = (const void *)MIL::IRValue::AsTensor(ParameterValue);
    MIL::IRValue::GetScalar<std::string>(v11, &v59);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v12 = MIL::StringToIRDataType((const void **)&v59.__r_.__value_.__l.__data_, 0);
    if (v12 != v9)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v14 = (std::__shared_weak_count *)LocationPtr[1];
      v56 = *LocationPtr;
      v57 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype, if set, must match the datatype of the output");
      MIL::ValidationResult::ValidationResult(a2, &v56, 315, __p);
      if (v55 < 0)
        operator delete(__p[0]);
      v17 = v57;
      if (v57)
      {
        v18 = (unint64_t *)&v57->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (v12 != v9)
      return;
    goto LABEL_21;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if (v6)
    goto LABEL_5;
LABEL_21:
  std::string::basic_string[abi:ne180100]<0>(&v59, "axis");
  v20 = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&v59.__r_.__value_.__l.__data_);
  v21 = v20;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v59.__r_.__value_.__l.__data_);
    if (!v21)
    {
LABEL_32:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!v20)
  {
    goto LABEL_32;
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v23 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v23 + 104))(v23) & 1) == 0)
    goto LABEL_32;
  v24 = MIL::IRTensorValueType::Rank(v23);
  std::string::basic_string[abi:ne180100]<0>(&v59, "axis");
  v25 = (const void *)MIL::IROperation::GetParameterValue(this);
  v26 = MIL::IRValue::GetScalar<int>(v25);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v26 < v24 && v26 >= -v24)
    goto LABEL_32;
  v27 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v28 = (std::__shared_weak_count *)v27[1];
  v52 = *v27;
  v53 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  (*(void (**)(MIL::Validation *))(*(_QWORD *)this + 56))(this);
  std::operator+<char>();
  v31 = std::string::append(&v48, ", 'axis' must be within range (-x_rank - 1, x_rank) (exclusive). Provided axis: ");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v47, v26);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v47;
  else
    v33 = (std::string *)v47.__r_.__value_.__r.__words[0];
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  else
    size = v47.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v49, (const std::string::value_type *)v33, size);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v58, "for input with rank: ");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v46, v24);
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v46;
  else
    v39 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
  else
    v40 = v46.__r_.__value_.__l.__size_;
  v41 = std::string::append(&v59, (const std::string::value_type *)v39, v40);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v51 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)v50 = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a2, &v52, 315, v50);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v43 = v53;
  if (v53)
  {
    v44 = (unint64_t *)&v53->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1E06B6DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (a40 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v48 - 57) < 0)
    operator delete(*(void **)(v48 - 80));
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void MIL::Validation::GetIntTensorValueCasted(MIL::Validation *this@<X0>, const MIL::IRTensorValue *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t Data;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  _QWORD *v25;
  char *v26;
  unsigned __int16 *v27;
  int v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _QWORD *v41;
  char *v42;
  int *v43;
  int v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  _QWORD *v58;
  char *v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int16 *v72;
  _QWORD *v73;
  char *v74;
  __int16 *v75;
  int v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  std::runtime_error *exception;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (*(uint64_t (**)(MIL::Validation *, const MIL::IRTensorValue *))(*(_QWORD *)this + 32))(this, a2);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 9u:
      Data = MIL::IRTensorValue::GetDataView<signed char>((uint64_t *)this);
      if (v7)
      {
        v8 = (char *)Data;
        v9 = (char *)(Data + v7);
        v10 = a3 + 2;
        v11 = a3[1];
        do
        {
          v12 = *v8;
          if ((unint64_t)v11 >= *v10)
          {
            v14 = *a3;
            v15 = (v11 - *a3) >> 2;
            v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v17 = *v10 - (_QWORD)v14;
            if (v17 >> 1 > v16)
              v16 = v17 >> 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
              v18 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
            {
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v18);
              v14 = *a3;
              v11 = a3[1];
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[4 * v15];
            *(_DWORD *)v20 = v12;
            v13 = v20 + 4;
            while (v11 != v14)
            {
              v21 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v20 - 1) = v21;
              v20 -= 4;
            }
            *a3 = v20;
            a3[1] = v13;
            a3[2] = &v19[4 * v18];
            if (v14)
              operator delete(v14);
          }
          else
          {
            *(_DWORD *)v11 = v12;
            v13 = v11 + 4;
          }
          a3[1] = v13;
          ++v8;
          v11 = v13;
        }
        while (v8 != v9);
      }
      break;
    case 0xAu:
      v70 = MIL::IRTensorValue::GetDataView<short>((uint64_t *)this);
      if (v71)
      {
        v72 = (__int16 *)v70;
        v73 = a3 + 2;
        v74 = a3[1];
        v75 = (__int16 *)(v70 + 2 * v71);
        do
        {
          v76 = *v72;
          if ((unint64_t)v74 >= *v73)
          {
            v78 = *a3;
            v79 = (v74 - *a3) >> 2;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v81 = *v73 - (_QWORD)v78;
            if (v81 >> 1 > v80)
              v80 = v81 >> 1;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
              v82 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (v82)
            {
              v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v82);
              v78 = *a3;
              v74 = a3[1];
            }
            else
            {
              v83 = 0;
            }
            v84 = &v83[4 * v79];
            *(_DWORD *)v84 = v76;
            v77 = v84 + 4;
            while (v74 != v78)
            {
              v85 = *((_DWORD *)v74 - 1);
              v74 -= 4;
              *((_DWORD *)v84 - 1) = v85;
              v84 -= 4;
            }
            *a3 = v84;
            a3[1] = v77;
            a3[2] = &v83[4 * v82];
            if (v78)
              operator delete(v78);
          }
          else
          {
            *(_DWORD *)v74 = v76;
            v77 = v74 + 4;
          }
          a3[1] = v77;
          ++v72;
          v74 = v77;
        }
        while (v72 != v75);
      }
      break;
    case 0xBu:
      v38 = MIL::IRTensorValue::GetDataView<int>((uint64_t *)this);
      if (v39)
      {
        v40 = (int *)v38;
        v41 = a3 + 2;
        v42 = a3[1];
        v43 = (int *)(v38 + 4 * v39);
        do
        {
          v44 = *v40;
          if ((unint64_t)v42 >= *v41)
          {
            v46 = *a3;
            v47 = (v42 - *a3) >> 2;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v49 = *v41 - (_QWORD)v46;
            if (v49 >> 1 > v48)
              v48 = v49 >> 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
              v50 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v50);
              v46 = *a3;
              v42 = a3[1];
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[4 * v47];
            *(_DWORD *)v52 = v44;
            v45 = v52 + 4;
            while (v42 != v46)
            {
              v53 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v52 - 1) = v53;
              v52 -= 4;
            }
            *a3 = v52;
            a3[1] = v45;
            a3[2] = &v51[4 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(_DWORD *)v42 = v44;
            v45 = v42 + 4;
          }
          a3[1] = v45;
          ++v40;
          v42 = v45;
        }
        while (v40 != v43);
      }
      break;
    case 0xEu:
      v54 = MIL::IRTensorValue::GetDataView<unsigned char>(this);
      if (v55)
      {
        v56 = (unsigned __int8 *)v54;
        v57 = (unsigned __int8 *)(v54 + v55);
        v58 = a3 + 2;
        v59 = a3[1];
        do
        {
          v60 = *v56;
          if ((unint64_t)v59 >= *v58)
          {
            v62 = *a3;
            v63 = (v59 - *a3) >> 2;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v65 = *v58 - (_QWORD)v62;
            if (v65 >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v66);
              v62 = *a3;
              v59 = a3[1];
            }
            else
            {
              v67 = 0;
            }
            v68 = &v67[4 * v63];
            *(_DWORD *)v68 = v60;
            v61 = v68 + 4;
            while (v59 != v62)
            {
              v69 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *((_DWORD *)v68 - 1) = v69;
              v68 -= 4;
            }
            *a3 = v68;
            a3[1] = v61;
            a3[2] = &v67[4 * v66];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *(_DWORD *)v59 = v60;
            v61 = v59 + 4;
          }
          a3[1] = v61;
          ++v56;
          v59 = v61;
        }
        while (v56 != v57);
      }
      break;
    case 0xFu:
      v22 = MIL::IRTensorValue::GetDataView<unsigned short>((uint64_t *)this);
      if (v23)
      {
        v24 = (unsigned __int16 *)v22;
        v25 = a3 + 2;
        v26 = a3[1];
        v27 = (unsigned __int16 *)(v22 + 2 * v23);
        do
        {
          v28 = *v24;
          if ((unint64_t)v26 >= *v25)
          {
            v30 = *a3;
            v31 = (v26 - *a3) >> 2;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v33 = *v25 - (_QWORD)v30;
            if (v33 >> 1 > v32)
              v32 = v33 >> 1;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
              v34 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v34);
              v30 = *a3;
              v26 = a3[1];
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[4 * v31];
            *(_DWORD *)v36 = v28;
            v29 = v36 + 4;
            while (v26 != v30)
            {
              v37 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v36 - 1) = v37;
              v36 -= 4;
            }
            *a3 = v36;
            a3[1] = v29;
            a3[2] = &v35[4 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_DWORD *)v26 = v28;
            v29 = v26 + 4;
          }
          a3[1] = v29;
          ++v24;
          v26 = v29;
        }
        while (v24 != v27);
      }
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported shape cast to int32_t.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1E06B73E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Validation::ValidateViaTypeInference@<X0>(MIL::Validation *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  MIL::MILContext **v4;
  MIL::MILContext *v5;
  MIL::MILContext *v6;
  MIL::MILContext *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  MIL::IRValueType *ParameterType;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  MIL::IRTypedArgument *v18;
  unsigned __int8 *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  __int128 v53;
  int64x2_t v54;
  uint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  MIL::MILContext *v65;
  MIL::MILContext *v66;
  BOOL v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t v70;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  char *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t i;
  MIL *v81;
  const MIL::IRValueType *OutputType;
  const MIL::IRValueType *v83;
  MIL *v84;
  const MIL::IRValueType *v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  void **v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  MIL::MILContext *v129;
  void *v130;
  char v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void *__p;
  char v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  _OWORD v138[2];
  unsigned __int8 *v139;
  void *v140;
  char v141;
  _BYTE v142[160];
  void **v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void *v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153;
  std::__shared_weak_count *v154;
  _BYTE v155[32];
  int v156;
  void **v157[3];

  memset(v155, 0, sizeof(v155));
  v156 = 1065353216;
  v4 = (MIL::MILContext **)(*(uint64_t (**)(MIL::Validation *, const MIL::IROperation *))(*(_QWORD *)this
                                                                                                  + 160))(this, a2);
  v7 = *v4;
  v5 = (MIL::MILContext *)(v4 + 1);
  v6 = v7;
  if (v7 != v5)
  {
    v129 = v5;
    do
    {
      *(_QWORD *)&v138[0] = (char *)v6 + 32;
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v155, (unsigned __int8 *)v6 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)v138);
      std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)(v8 + 40), 0, 0, 0);
      if (*((_QWORD *)v6 + 8) != *((_QWORD *)v6 + 7))
      {
        v9 = 0;
        do
        {
          MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v6 + 32, v9, (uint64_t *)&v148);
          ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
          v11 = MIL::IRValueType::AsTensorType(ParameterType);
          if (v148)
          {
            *(_QWORD *)&v138[0] = (char *)v6 + 32;
            v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v155, (unsigned __int8 *)v6 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)v138);
            v153 = v148;
            v154 = v149;
            if (v149)
            {
              p_shared_owners = (unint64_t *)&v149->__shared_owners_;
              do
                v14 = __ldxr(p_shared_owners);
              while (__stxr(v14 + 1, p_shared_owners));
            }
            MIL::IRTypedArgument::Make((uint64_t *)&v153, &v151);
            v15 = v151;
            v143 = (void **)v151;
            if (v151)
            {
              v16 = (_QWORD *)operator new();
              v17 = v151;
              *v16 = &unk_1EA994910;
              v16[1] = 0;
              v16[2] = 0;
              v16[3] = v17;
            }
            else
            {
              v16 = 0;
            }
            v144 = v16;
            v151 = 0;
            v23 = *((_QWORD *)v12 + 7);
            v24 = (_QWORD *)*((_QWORD *)v12 + 6);
            if ((unint64_t)v24 >= v23)
            {
              v26 = *((_QWORD *)v12 + 5);
              v27 = ((uint64_t)v24 - v26) >> 4;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 60)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v29 = v23 - v26;
              if (v29 >> 3 > v28)
                v28 = v29 >> 3;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
                v30 = 0xFFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              v139 = v12 + 56;
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v12 + 56), v30);
              v33 = &v31[16 * v27];
              *(_QWORD *)v33 = v15;
              *((_QWORD *)v33 + 1) = v16;
              v143 = 0;
              v144 = 0;
              v35 = (_QWORD *)*((_QWORD *)v12 + 5);
              v34 = (_QWORD *)*((_QWORD *)v12 + 6);
              if (v34 == v35)
              {
                v38 = vdupq_n_s64((unint64_t)v34);
                v36 = &v31[16 * v27];
              }
              else
              {
                v36 = &v31[16 * v27];
                do
                {
                  v37 = *((_OWORD *)v34 - 1);
                  v34 -= 2;
                  *((_OWORD *)v36 - 1) = v37;
                  v36 -= 16;
                  *v34 = 0;
                  v34[1] = 0;
                }
                while (v34 != v35);
                v38 = *(int64x2_t *)(v12 + 40);
              }
              v25 = v33 + 16;
              *((_QWORD *)v12 + 5) = v36;
              *((_QWORD *)v12 + 6) = v33 + 16;
              *(int64x2_t *)((char *)v138 + 8) = v38;
              v55 = *((_QWORD *)v12 + 7);
              *((_QWORD *)v12 + 7) = &v31[16 * v32];
              *((_QWORD *)&v138[1] + 1) = v55;
              *(_QWORD *)&v138[0] = v38.i64[0];
              std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v138);
            }
            else
            {
              *v24 = v15;
              v24[1] = v16;
              v25 = v24 + 2;
              v143 = 0;
              v144 = 0;
            }
            *((_QWORD *)v12 + 6) = v25;
            v56 = v151;
            v151 = 0;
            if (v56)
              (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
            v57 = v154;
            if (v154)
            {
              v58 = (unint64_t *)&v154->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
          }
          else
          {
            v18 = (MIL::IRTypedArgument *)v11;
            *(_QWORD *)&v138[0] = (char *)v6 + 32;
            v19 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v155, (unsigned __int8 *)v6 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)v138);
            MIL::IRTypedArgument::Make(v18, &v151);
            v20 = v151;
            v143 = (void **)v151;
            if (v151)
            {
              v21 = (_QWORD *)operator new();
              v22 = v151;
              *v21 = &unk_1EA994910;
              v21[1] = 0;
              v21[2] = 0;
              v21[3] = v22;
            }
            else
            {
              v21 = 0;
            }
            v144 = v21;
            v151 = 0;
            v39 = *((_QWORD *)v19 + 7);
            v40 = (_QWORD *)*((_QWORD *)v19 + 6);
            if ((unint64_t)v40 >= v39)
            {
              v42 = *((_QWORD *)v19 + 5);
              v43 = ((uint64_t)v40 - v42) >> 4;
              v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 60)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v45 = v39 - v42;
              if (v45 >> 3 > v44)
                v44 = v45 >> 3;
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
                v46 = 0xFFFFFFFFFFFFFFFLL;
              else
                v46 = v44;
              v139 = v19 + 56;
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v19 + 56), v46);
              v49 = &v47[16 * v43];
              *(_QWORD *)v49 = v20;
              *((_QWORD *)v49 + 1) = v21;
              v143 = 0;
              v144 = 0;
              v51 = (_QWORD *)*((_QWORD *)v19 + 5);
              v50 = (_QWORD *)*((_QWORD *)v19 + 6);
              if (v50 == v51)
              {
                v54 = vdupq_n_s64((unint64_t)v50);
                v52 = &v47[16 * v43];
              }
              else
              {
                v52 = &v47[16 * v43];
                do
                {
                  v53 = *((_OWORD *)v50 - 1);
                  v50 -= 2;
                  *((_OWORD *)v52 - 1) = v53;
                  v52 -= 16;
                  *v50 = 0;
                  v50[1] = 0;
                }
                while (v50 != v51);
                v54 = *(int64x2_t *)(v19 + 40);
              }
              v41 = v49 + 16;
              *((_QWORD *)v19 + 5) = v52;
              *((_QWORD *)v19 + 6) = v49 + 16;
              *(int64x2_t *)((char *)v138 + 8) = v54;
              v60 = *((_QWORD *)v19 + 7);
              *((_QWORD *)v19 + 7) = &v47[16 * v48];
              *((_QWORD *)&v138[1] + 1) = v60;
              *(_QWORD *)&v138[0] = v54.i64[0];
              std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)v138);
            }
            else
            {
              *v40 = v20;
              v40[1] = v21;
              v41 = v40 + 2;
            }
            *((_QWORD *)v19 + 6) = v41;
            v61 = v151;
            v151 = 0;
            if (v61)
              (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
          }
          v62 = v149;
          if (v149)
          {
            v63 = (unint64_t *)&v149->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          ++v9;
        }
        while (v9 < (uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 4);
      }
      v65 = (MIL::MILContext *)*((_QWORD *)v6 + 1);
      if (v65)
      {
        do
        {
          v66 = v65;
          v65 = *(MIL::MILContext **)v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          v66 = (MIL::MILContext *)*((_QWORD *)v6 + 2);
          v67 = *(_QWORD *)v66 == (_QWORD)v6;
          v6 = v66;
        }
        while (!v67);
      }
      v6 = v66;
    }
    while (v66 != v129);
  }
  MIL::MILContext::Make(v138);
  v151 = *(void **)&v138[0];
  if (*(_QWORD *)&v138[0])
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = *(std::__shared_weak_count_vtbl **)&v138[0];
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F0A8;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v152 = v68;
  v70 = (*(uint64_t (**)(MIL::Validation *))(*(_QWORD *)this + 64))(this);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v72 = (std::__shared_weak_count *)LocationPtr[1];
  v146 = *LocationPtr;
  v147 = v72;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  memset(v138, 0, sizeof(v138));
  LODWORD(v139) = 1065353216;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, void **, uint64_t *, _BYTE *, _OWORD *, void ***))(*(_QWORD *)v70 + 192))(&v148, v70, &v151, &v146, v155, v138, &v143);
  v76 = (char *)v148;
  v75 = v149;
  v149 = 0;
  v150 = 0;
  v148 = 0;
  v157[0] = (void **)&v143;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v157);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v138);
  v77 = v147;
  if (v147)
  {
    v78 = (unint64_t *)&v147->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if ((*(uint64_t (**)(MIL::Validation *))(*(_QWORD *)this + 192))(this) == ((char *)v75 - v76) >> 3)
  {
    for (i = 0; ; ++i)
    {
      if (i >= (*(uint64_t (**)(MIL::Validation *))(*(_QWORD *)this + 192))(this))
      {
        MIL::ValidationResult::ValidationResult(a3);
        goto LABEL_101;
      }
      v81 = *(MIL **)&v76[8 * i];
      OutputType = (const MIL::IRValueType *)MIL::IROperation::GetOutputType(this, i);
      if ((MIL::IsEqualOrStrongerType(v81, OutputType, v83) & 1) == 0)
      {
        v84 = (MIL *)MIL::IROperation::GetOutputType(this, i);
        if ((MIL::IsEqualOrStrongerType(v84, *(const MIL::IRValueType **)&v76[8 * i], v85) & 1) == 0)
          break;
      }
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v138);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"Output '", 8);
    v101 = (_QWORD *)std::ostream::operator<<();
    v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"' has unexpected type '", 23);
    v103 = (*(uint64_t (**)(MIL::Validation *))(*(_QWORD *)this + 56))(this);
    v104 = *(char *)(v103 + 23);
    if (v104 >= 0)
      v105 = v103;
    else
      v105 = *(_QWORD *)v103;
    if (v104 >= 0)
      v106 = *(unsigned __int8 *)(v103 + 23);
    else
      v106 = *(_QWORD *)(v103 + 8);
    v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, v105, v106);
    v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"'. Expected ", 12);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)&v76[8 * i] + 56))(&v148);
    if (v150 >= 0)
      v109 = &v148;
    else
      v109 = (void **)v148;
    if (v150 >= 0)
      v110 = HIBYTE(v150);
    else
      v110 = (uint64_t)v149;
    v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v109, v110);
    v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"; got ", 6);
    v113 = MIL::IROperation::GetOutputType(this, i);
    (*(void (**)(void ***__return_ptr))(*(_QWORD *)v113 + 56))(&v143);
    if (v145 >= 0)
      v114 = (void **)&v143;
    else
      v114 = v143;
    if (v145 >= 0)
      v115 = HIBYTE(v145);
    else
      v115 = (uint64_t)v144;
    v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)v114, v115);
    LOBYTE(v157[0]) = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v157, 1);
    if (SHIBYTE(v145) < 0)
      operator delete(v143);
    if (SHIBYTE(v150) < 0)
      operator delete(v148);
    v117 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v118 = (std::__shared_weak_count *)v117[1];
    v132 = *v117;
    v133 = v118;
    if (v118)
    {
      v119 = (unint64_t *)&v118->__shared_owners_;
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
    std::stringbuf::str();
    MIL::ValidationResult::ValidationResult(a3, &v132, 313, &v130);
    if (v131 < 0)
      operator delete(v130);
    v121 = v133;
    if (v133)
    {
      v122 = (unint64_t *)&v133->__shared_owners_;
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    *(_QWORD *)&v138[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v138 + *(_QWORD *)(*(_QWORD *)&v138[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&v138[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (v141 < 0)
      operator delete(v140);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1E0C022F8](v142);
    goto LABEL_138;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v138);
  v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"For operation of type ", 22);
  v87 = (*(uint64_t (**)(MIL::Validation *))(*(_QWORD *)this + 56))(this);
  v88 = *(char *)(v87 + 23);
  if (v88 >= 0)
    v89 = v87;
  else
    v89 = *(_QWORD *)v87;
  if (v88 >= 0)
    v90 = *(unsigned __int8 *)(v87 + 23);
  else
    v90 = *(_QWORD *)(v87 + 8);
  v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, v89, v90);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" number of outputs unexpectedly doesn't match. Got ", 51);
  (*(void (**)(MIL::Validation *))(*(_QWORD *)this + 192))(this);
  v92 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)". Expected ", 11);
  v93 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v148) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)&v148, 1);
  v94 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v95 = (std::__shared_weak_count *)v94[1];
  v136 = *v94;
  v137 = v95;
  if (v95)
  {
    v96 = (unint64_t *)&v95->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a3, &v136, 310, &__p);
  if (v135 < 0)
    operator delete(__p);
  v98 = v137;
  if (v137)
  {
    v99 = (unint64_t *)&v137->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  *(_QWORD *)&v138[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v138 + *(_QWORD *)(*(_QWORD *)&v138[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v138[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (v141 < 0)
    operator delete(v140);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](v142);
LABEL_101:
  if (v76)
LABEL_138:
    operator delete(v76);
  v124 = v152;
  if (v152)
  {
    v125 = (unint64_t *)&v152->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v155);
}

void sub_1E06B7EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  void *v36;
  uint64_t v37;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::ostringstream::~ostringstream((uint64_t)&a36);
  operator delete(v36);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37 - 176);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v37 - 144);
  _Unwind_Resume(a1);
}

BOOL MIL::Validation::CanBroadcastShapes(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t i;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *__p;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::vector<MIL::IRDimension const*>>::reserve((uint64_t *)&v23, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = 0;
    do
    {
      if (v4 <= (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3)
        v4 = (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3;
      __p = 0;
      v21 = 0;
      v22 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3);
      v5 = v21 - 8;
      if (__p != v21 && v5 > __p)
      {
        v7 = (char *)__p + 8;
        do
        {
          v8 = *((_QWORD *)v7 - 1);
          *((_QWORD *)v7 - 1) = *(_QWORD *)v5;
          *(_QWORD *)v5 = v8;
          v5 -= 8;
          v9 = v7 >= v5;
          v7 += 8;
        }
        while (!v9);
      }
      std::vector<std::vector<MIL::IRDimension const*>>::push_back[abi:ne180100]((uint64_t *)&v23, (uint64_t)&__p);
      if (__p)
      {
        v21 = (char *)__p;
        operator delete(__p);
      }
      v2 += 24;
    }
    while (v2 != v3);
    if (v4)
    {
      v10 = 0;
      for (i = 0; i != v4; v10 = i >= v4)
      {
        v12 = v23;
        v13 = v24;
        if (v23 != v24)
        {
          v14 = 1;
          do
          {
            if (i < (uint64_t)(v12[1] - *v12) >> 3)
            {
              v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v12 + 8 * i) + 16))(*(_QWORD *)(*v12 + 8 * i));
              if (v15)
              {
                v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15);
                if (v16 != 1 && v14 != 1 && v16 != v14)
                  goto LABEL_35;
                if (v16 > v14)
                  v14 = v16;
              }
            }
            v12 += 3;
          }
          while (v12 != v13);
        }
        ++i;
      }
    }
  }
  v10 = 1;
LABEL_35:
  __p = &v23;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v10;
}

void sub_1E06B83B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  __p = &a12;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MIL::IRDimension const*>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<MIL::IRDimension const*>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1E06B8494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MIL::IRDimension const*>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<MIL::IRDimension const*>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1E06B85D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1E06B87E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t std::vector<std::vector<MIL::IRDimension const*>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRDimension const*>>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRDimension const*>>,std::reverse_iterator<std::vector<MIL::IRDimension const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void MIL::IRProgramValidator::Validate(MIL::IRProgramValidator *this@<X0>, const MIL::IRProgram *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t **v5;
  uint64_t *v6;
  MIL::IRObject *Function;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  MIL::IROpset *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 *v35;
  __int128 v36;
  uint64_t v37;
  std::string::size_type *v38;
  std::string::size_type v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *size;
  unint64_t *v43;
  unint64_t v44;
  std::string::size_type *v45;
  std::string::size_type v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  std::string::size_type *v50;
  std::string::size_type v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string *v59;
  __int128 v60;
  unint64_t *v61;
  std::string::size_type *v62;
  std::string::size_type v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string *v71;
  __int128 v72;
  unint64_t *v73;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string v81[2];
  int v82;
  void *__p;
  std::__shared_weak_count *v84;
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string v88;
  __int128 v89;
  std::string::size_type v90;
  int v91;

  v5 = *(uint64_t ***)((*(uint64_t (**)(MIL::IRProgramValidator *, const MIL::IRProgram *))(*(_QWORD *)this + 72))(this, a2)+ 16);
  if (!v5)
  {
LABEL_121:
    MIL::ValidationResult::ValidationResult(a3);
    return;
  }
  while (1)
  {
    v6 = (uint64_t *)*((unsigned __int8 *)v5 + 39);
    if ((char)v6 < 0)
      v6 = v5[3];
    if (v6)
    {
      Function = (MIL::IRObject *)MIL::IRProgram::GetFunction((uint64_t)this);
      v8 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)Function + 128))(Function);
      v10 = v8 + 1;
      v9 = (_QWORD *)*v8;
      if ((_QWORD *)*v8 == v8 + 1)
      {
LABEL_18:
        (*(void (**)(__int128 *__return_ptr, MIL::IRObject *))(*(_QWORD *)Function + 160))(&v89, Function);
        v14 = v89;
        v15 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)Function + 40))(Function);
        v16 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15);
        v18 = *v16;
        v17 = v16[1];
        if ((_QWORD)v89)
        {
          *((_QWORD *)&v89 + 1) = v89;
          operator delete((void *)v89);
        }
        if ((uint64_t)(*((_QWORD *)&v14 + 1) - v14) >> 3 == 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3))
        {
          v19 = (*(uint64_t (**)(MIL::IRProgramValidator *))(*(_QWORD *)this + 40))(this);
          v20 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)Function + 32))(Function);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v20))
          {
            v21 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)Function + 112))(Function);
            v23 = v21 + 1;
            v22 = (_QWORD *)*v21;
            if ((_QWORD *)*v21 == v21 + 1)
            {
LABEL_30:
              (*(void (**)(__int128 *__return_ptr, MIL::IRObject *))(*(_QWORD *)Function + 160))(&v89, Function);
              if (*((_QWORD *)&v89 + 1) == (_QWORD)v89)
              {
LABEL_43:
                MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v81);
              }
              else
              {
                v29 = 0;
                v30 = 0;
                v31 = (unint64_t)((uint64_t)(*((_QWORD *)&v89 + 1) - v89) >> 3) <= 1
                    ? 1
                    : (uint64_t)(*((_QWORD *)&v89 + 1) - v89) >> 3;
                while (1)
                {
                  if (v30 >= (uint64_t)(*((_QWORD *)&v89 + 1) - v89) >> 3)
                    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                  v32 = *(_QWORD *)(v89 + 8 * v30);
                  v33 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)Function + 40))(Function);
                  v34 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 88))(v33);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34[1] - *v34) >> 3) <= v30)
                    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                  v35 = (__int128 *)(*v34 + v29);
                  if (*((char *)v35 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
                  }
                  else
                  {
                    v36 = *v35;
                    v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
                    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v36;
                  }
                  v37 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)Function + 40))(Function);
                  if (v32 != (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)(v37 + 64) + 16))(v37 + 64, &v88, 1))break;
                  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v88.__r_.__value_.__l.__data_);
                  ++v30;
                  v29 += 24;
                  if (v31 == v30)
                    goto LABEL_43;
                }
                LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(Function);
                v75 = (std::__shared_weak_count *)LocationPtr[1];
                v86 = *LocationPtr;
                v87 = v75;
                if (v75)
                {
                  p_shared_owners = (unint64_t *)&v75->__shared_owners_;
                  do
                    v77 = __ldxr(p_shared_owners);
                  while (__stxr(v77 + 1, p_shared_owners));
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, "A function must return the same types as its block.");
                MIL::ValidationResult::ValidationResult(v81, &v86, 201, &__p);
                if (v85 < 0)
                  operator delete(__p);
                v78 = v87;
                if (v87)
                {
                  v79 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                  }
                }
                if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v88.__r_.__value_.__l.__data_);
              }
              if ((_QWORD)v89)
              {
                *((_QWORD *)&v89 + 1) = v89;
                operator delete((void *)v89);
              }
            }
            else
            {
              while (1)
              {
                v24 = (*(uint64_t (**)(MIL::IRProgramValidator *))(*(_QWORD *)this + 40))(this);
                v25 = (MIL::IROpset *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 16))(v24, v22 + 4);
                v26 = (*(uint64_t (**)(MIL::IRProgramValidator *))(*(_QWORD *)this + 40))(this);
                MIL::IROpset::GetReversedOperatorNamesMap(v25, (uint64_t)&v88);
                std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v88);
                if (((*(uint64_t (**)(__int128 *))(v89 + 16))(&v89) & 1) == 0)
                  break;
                MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v89);
                v27 = (_QWORD *)v22[1];
                if (v27)
                {
                  do
                  {
                    v28 = v27;
                    v27 = (_QWORD *)*v27;
                  }
                  while (v27);
                }
                else
                {
                  do
                  {
                    v28 = (_QWORD *)v22[2];
                    v13 = *v28 == (_QWORD)v22;
                    v22 = v28;
                  }
                  while (!v13);
                }
                v22 = v28;
                if (v28 == v23)
                  goto LABEL_30;
              }
              MIL::MILResult::MILResult(v81, (uint64_t)&v89);
              v81[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
              v82 = v91;
              MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v89);
            }
          }
          else
          {
            v67 = MIL::IRObject::GetLocationPtr(Function);
            v68 = *(std::__shared_weak_count **)(v67 + 8);
            __p = *(void **)v67;
            v84 = v68;
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldxr(v69);
              while (__stxr(v70 + 1, v69));
            }
            (*(void (**)(MIL::IRObject *))(*(_QWORD *)Function + 32))(Function);
            std::operator+<char>();
            v71 = std::string::append(&v88, "' not in context.");
            v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v90 = v71->__r_.__value_.__r.__words[2];
            v89 = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(v81, &__p, 204, &v89);
            if (SHIBYTE(v90) < 0)
              operator delete((void *)v89);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88.__r_.__value_.__l.__data_);
            size = v84;
            if (v84)
            {
              v73 = (unint64_t *)&v84->__shared_owners_;
              do
                v44 = __ldaxr(v73);
              while (__stlxr(v44 - 1, v73));
LABEL_101:
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
        }
        else
        {
          v45 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(Function);
          v46 = v45[1];
          v88.__r_.__value_.__r.__words[0] = *v45;
          v88.__r_.__value_.__l.__size_ = v46;
          if (v46)
          {
            v47 = (unint64_t *)(v46 + 8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          std::string::basic_string[abi:ne180100]<0>(&v89, "A function must return the same number of values as its block.");
          MIL::ValidationResult::ValidationResult(v81, &v88, 200, &v89);
          if (SHIBYTE(v90) < 0)
            operator delete((void *)v89);
          size = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
          if (v88.__r_.__value_.__l.__size_)
          {
            v49 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
            do
              v44 = __ldaxr(v49);
            while (__stlxr(v44 - 1, v49));
            goto LABEL_101;
          }
        }
      }
      else
      {
        while (1)
        {
          if (*((char *)v9 + 55) < 0)
          {
            if (!v9[5])
            {
LABEL_62:
              v50 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(Function);
              v51 = v50[1];
              v88.__r_.__value_.__r.__words[0] = *v50;
              v88.__r_.__value_.__l.__size_ = v51;
              if (v51)
              {
                v52 = (unint64_t *)(v51 + 8);
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              std::string::basic_string[abi:ne180100]<0>(&v89, "Function parameter names must be non-empty.");
              MIL::ValidationResult::ValidationResult(v81, &v88, 206, &v89);
              if (SHIBYTE(v90) < 0)
                operator delete((void *)v89);
              size = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
              if (v88.__r_.__value_.__l.__size_)
              {
                v54 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
                do
                  v44 = __ldaxr(v54);
                while (__stlxr(v44 - 1, v54));
                goto LABEL_101;
              }
              goto LABEL_103;
            }
          }
          else if (!*((_BYTE *)v9 + 55))
          {
            goto LABEL_62;
          }
          if ((*(uint64_t (**)(char *, _QWORD *, uint64_t))(*((_QWORD *)this + 8) + 24))((char *)this + 64, v9 + 4, 1))
          {
            break;
          }
          if (!v9[7])
          {
            v62 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(Function);
            v63 = v62[1];
            v88.__r_.__value_.__r.__words[0] = *v62;
            v88.__r_.__value_.__l.__size_ = v63;
            if (v63)
            {
              v64 = (unint64_t *)(v63 + 8);
              do
                v65 = __ldxr(v64);
              while (__stxr(v65 + 1, v64));
            }
            std::string::basic_string[abi:ne180100]<0>(&v89, "Function parameter types must be non-null.");
            MIL::ValidationResult::ValidationResult(v81, &v88, 208, &v89);
            if (SHIBYTE(v90) < 0)
              operator delete((void *)v89);
            size = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
            if (v88.__r_.__value_.__l.__size_)
            {
              v66 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
              do
                v44 = __ldaxr(v66);
              while (__stlxr(v44 - 1, v66));
              goto LABEL_101;
            }
            goto LABEL_103;
          }
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v9[2];
              v13 = *v12 == (_QWORD)v9;
              v9 = v12;
            }
            while (!v13);
          }
          v9 = v12;
          if (v12 == v10)
            goto LABEL_18;
        }
        v55 = MIL::IRObject::GetLocationPtr(Function);
        v56 = *(std::__shared_weak_count **)(v55 + 8);
        __p = *(void **)v55;
        v84 = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        std::operator+<char>();
        v59 = std::string::append(&v88, "' shadows an earlier declaration.");
        v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
        v90 = v59->__r_.__value_.__r.__words[2];
        v89 = v60;
        v59->__r_.__value_.__l.__size_ = 0;
        v59->__r_.__value_.__r.__words[2] = 0;
        v59->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(v81, &__p, 207, &v89);
        if (SHIBYTE(v90) < 0)
          operator delete((void *)v89);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        size = v84;
        if (v84)
        {
          v61 = (unint64_t *)&v84->__shared_owners_;
          do
            v44 = __ldaxr(v61);
          while (__stlxr(v44 - 1, v61));
          goto LABEL_101;
        }
      }
    }
    else
    {
      v38 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
      v39 = v38[1];
      v88.__r_.__value_.__r.__words[0] = *v38;
      v88.__r_.__value_.__l.__size_ = v39;
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      std::string::basic_string[abi:ne180100]<0>(&v89, "Function names must be non-empty.");
      MIL::ValidationResult::ValidationResult(v81, &v88, 202, &v89);
      if (SHIBYTE(v90) < 0)
        operator delete((void *)v89);
      size = (std::__shared_weak_count *)v88.__r_.__value_.__l.__size_;
      if (v88.__r_.__value_.__l.__size_)
      {
        v43 = (unint64_t *)(v88.__r_.__value_.__l.__size_ + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        goto LABEL_101;
      }
    }
LABEL_103:
    if (((*(uint64_t (**)(std::string *))(v81[0].__r_.__value_.__r.__words[0] + 16))(v81) & 1) == 0)
      break;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v81);
    v5 = (uint64_t **)*v5;
    if (!v5)
      goto LABEL_121;
  }
  MIL::MILResult::MILResult((std::string *)a3, (uint64_t)v81);
  *(_QWORD *)a3 = &off_1EA99F170;
  *((_DWORD *)a3 + 12) = v82;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v81);
}

void sub_1E06B9254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void *v33;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (a31 < 0)
    operator delete(a26);
  v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(_QWORD *)(v31 - 136) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

void `anonymous namespace'::ValidateBlock(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, MIL::IRObject *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  MIL::IRNamedValueType **v11;
  MIL::IRNamedValueType **v12;
  uint64_t Name;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  MIL::IRObject ****v18;
  MIL::IRObject **v19;
  MIL::IRObject **v20;
  MIL::IRObject *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type size;
  std::string::size_type i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const void *v30;
  std::string::size_type v31;
  _BYTE *p_dst;
  std::string::size_type *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  std::string *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type *v42;
  std::string::size_type v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string::size_type *v57;
  std::string::size_type v58;
  unint64_t *v59;
  unint64_t v60;
  std::string *v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t Operator;
  uint64_t *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::string *v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  size_t v77;
  const void *v78;
  void **v79;
  uint64_t v80;
  MIL::IROpset *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  std::string *v84;
  uint64_t v85;
  uint64_t v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  unint64_t *v93;
  uint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  size_t v102;
  const void *v103;
  void **v104;
  uint64_t v105;
  uint64_t v106;
  const std::string::value_type *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  unint64_t *v113;
  std::string::size_type v114;
  BOOL v115;
  std::string::size_type v117;
  uint64_t v118;
  _QWORD *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  _QWORD *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  _QWORD **v128;
  _QWORD *v129;
  _QWORD *v130;
  std::string::size_type *v131;
  std::string::size_type v132;
  unint64_t *v133;
  unint64_t v134;
  std::string *v135;
  __int128 v136;
  unint64_t *v137;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v139;
  unint64_t *p_shared_owners;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::string *v149;
  __int128 v150;
  unint64_t *v151;
  uint64_t *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  uint64_t *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::string *v161;
  __int128 v162;
  unint64_t *v163;
  std::string *v164;
  std::string v167[2];
  int v168;
  void *v169[2];
  std::string::size_type v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  __int128 v177;
  std::string::size_type v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  uint64_t v183;
  std::__shared_weak_count *v184;
  std::string __p[2];
  int v186;
  void **v187;
  size_t v188;
  int64_t v189;
  std::string v190;
  std::string v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  std::string v194;
  std::string __dst;

  v8 = (char *)a4 + 64;
  v9 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)a4 + 8) + 72))((uint64_t)a4 + 64);
  v10 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a4 + 40))(a4);
  v11 = *(MIL::IRNamedValueType ***)v10;
  v12 = *(MIL::IRNamedValueType ***)(v10 + 8);
  while (v11 != v12)
  {
    Name = MIL::IRNamedValueType::GetName(*v11);
    v14 = *(unsigned __int8 *)(Name + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(Name + 8);
    if (!v14)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a4);
      v139 = (std::__shared_weak_count *)LocationPtr[1];
      v183 = *LocationPtr;
      v184 = v139;
      if (v139)
      {
        p_shared_owners = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldxr(p_shared_owners);
        while (__stxr(v141 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v181, "Block parameter names must be non-empty.");
      MIL::ValidationResult::ValidationResult(a5, &v183, 105, v181);
      if (v182 < 0)
        operator delete(v181[0]);
      v142 = v184;
      if (v184)
      {
        v143 = (unint64_t *)&v184->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        goto LABEL_246;
      }
      return;
    }
    if (v9 && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, Name, 1))
    {
      v145 = (uint64_t *)MIL::IRObject::GetLocationPtr(a4);
      v146 = (std::__shared_weak_count *)v145[1];
      v179 = *v145;
      v180 = v146;
      if (v146)
      {
        v147 = (unint64_t *)&v146->__shared_owners_;
        do
          v148 = __ldxr(v147);
        while (__stxr(v148 + 1, v147));
      }
      std::operator+<char>();
      v149 = std::string::append(__p, "' shadows an earlier declaration.");
      v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
      v178 = v149->__r_.__value_.__r.__words[2];
      v177 = v150;
      v149->__r_.__value_.__l.__size_ = 0;
      v149->__r_.__value_.__r.__words[2] = 0;
      v149->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a5, &v179, 106, &v177);
      if (SHIBYTE(v178) < 0)
        operator delete((void *)v177);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v142 = v180;
      if (v180)
      {
        v151 = (unint64_t *)&v180->__shared_owners_;
        do
          v144 = __ldaxr(v151);
        while (__stlxr(v144 - 1, v151));
        goto LABEL_246;
      }
      return;
    }
    v11 += 2;
  }
  v15 = (uint64_t *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a4 + 88))(a4);
  v17 = *v15;
  v16 = v15[1];
  while (1)
  {
    if (v17 == v16)
    {
      v18 = (MIL::IRObject ****)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a4 + 56))(a4);
      v20 = **v18;
      v19 = (*v18)[1];
      if (v20 == v19)
      {
LABEL_215:
        MIL::ValidationResult::ValidationResult(a5);
        return;
      }
      while (1)
      {
        v21 = *v20;
        v22 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)*v20 + 104))(*v20);
        v23 = v22 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v22 + 64) + 72))(v22 + 64) : 0;
        (*(void (**)(std::string *__return_ptr, MIL::IRObject *))(*(_QWORD *)v21 + 200))(__p, v21);
        size = __p[0].__r_.__value_.__l.__size_;
        for (i = __p[0].__r_.__value_.__r.__words[0]; i != size; i += 24)
        {
          if (v23
            && (*(uint64_t (**)(uint64_t, std::string::size_type, uint64_t))(*(_QWORD *)v23 + 24))(v23, i, 1))
          {
            v42 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(v21);
            v43 = v42[1];
            v191.__r_.__value_.__r.__words[0] = *v42;
            v191.__r_.__value_.__l.__size_ = v43;
            if (v43)
            {
              v44 = (unint64_t *)(v43 + 8);
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            std::operator+<char>();
            v46 = std::string::append(&v194, "' shadows an earlier declaration.");
            v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(v167, &v191, 312, &__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            v48 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
            if (v191.__r_.__value_.__l.__size_)
            {
              v49 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v194.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v194);
            goto LABEL_192;
          }
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
        v26 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 72))(v21);
        if (v26)
          break;
        v33 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(v21);
        v34 = v33[1];
        v194.__r_.__value_.__r.__words[0] = *v33;
        v194.__r_.__value_.__l.__size_ = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        (*(void (**)(MIL::IRObject *))(*(_QWORD *)v21 + 56))(v21);
        std::operator+<char>();
        v37 = std::string::append(&__dst, " does not exist in this context.");
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(v167, &v194, 309, __p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v39 = (std::__shared_weak_count *)v194.__r_.__value_.__l.__size_;
        if (v194.__r_.__value_.__l.__size_)
        {
          v40 = (unint64_t *)(v194.__r_.__value_.__l.__size_ + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
LABEL_192:
        if (((*(uint64_t (**)(std::string *))(v167[0].__r_.__value_.__r.__words[0] + 16))(v167) & 1) == 0)
        {
          v164 = MIL::MILResult::MILResult((std::string *)a5, (uint64_t)v167);
          v164->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
          LODWORD(v164[2].__r_.__value_.__l.__data_) = v168;
          MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v167);
          return;
        }
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v167);
        v20 += 2;
        if (v20 == v19)
          goto LABEL_215;
      }
      v27 = v26;
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v30 = (const void *)v28;
      v31 = v29;
      if (v29 >= 0x17)
      {
        v51 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v51 = v29 | 7;
        v52 = v51 + 1;
        p_dst = operator new(v51 + 1);
        __dst.__r_.__value_.__l.__size_ = v31;
        __dst.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29;
        p_dst = &__dst;
        if (!v29)
        {
LABEL_60:
          p_dst[v31] = 0;
          if ((*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 232))(v21))
          {
            v53 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 232))(v21);
            v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
            MEMORY[0x1E0C0201C](&__dst, v54, v55);
            v56 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 16))(a1, &__dst);
            if (v56 != (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 232))(v21))
            {
              v57 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(v21);
              v58 = v57[1];
              v191.__r_.__value_.__r.__words[0] = *v57;
              v191.__r_.__value_.__l.__size_ = v58;
              if (v58)
              {
                v59 = (unint64_t *)(v58 + 8);
                do
                  v60 = __ldxr(v59);
                while (__stxr(v60 + 1, v59));
              }
              std::operator+<char>();
              v61 = std::string::append(&v194, " does not exist in this context.");
              v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
              __p[0].__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v62;
              v61->__r_.__value_.__l.__size_ = 0;
              v61->__r_.__value_.__r.__words[2] = 0;
              v61->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationResult::ValidationResult(v167, &v191, 309, __p);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v194.__r_.__value_.__l.__data_);
              v63 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
              if (!v191.__r_.__value_.__l.__size_)
                goto LABEL_190;
              v64 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
LABEL_146:
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
LABEL_190:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              goto LABEL_192;
            }
            v80 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 232))(v21);
            v81 = (MIL::IROpset *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 232))(v21);
            MIL::IROpset::GetReversedOperatorNamesMap(v81, (uint64_t)__p);
            v82 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
            v83 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(__p, v82);
            if (v83)
              Operator = MIL::IROpset::TryGetOperator(v80, v83 + 40);
            else
              Operator = 0;
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
            if (!Operator)
            {
LABEL_116:
              v94 = (uint64_t *)MIL::IRObject::GetLocationPtr(v21);
              v95 = (std::__shared_weak_count *)v94[1];
              v192 = *v94;
              v193 = v95;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldxr(v96);
                while (__stxr(v97 + 1, v96));
              }
              (*(void (**)(MIL::IRObject *))(*(_QWORD *)v21 + 56))(v21);
              std::operator+<char>();
              v98 = std::string::append(&v190, " does not exist in opset ");
              v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
              v191.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v99;
              v98->__r_.__value_.__l.__size_ = 0;
              v98->__r_.__value_.__r.__words[2] = 0;
              v98->__r_.__value_.__r.__words[0] = 0;
              v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
              v102 = v101;
              if (v101 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v103 = (const void *)v100;
              if (v101 >= 0x17)
              {
                v105 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v101 | 7) != 0x17)
                  v105 = v101 | 7;
                v106 = v105 + 1;
                v104 = (void **)operator new(v105 + 1);
                v188 = v102;
                v189 = v106 | 0x8000000000000000;
                v187 = v104;
              }
              else
              {
                HIBYTE(v189) = v101;
                v104 = (void **)&v187;
                if (!v101)
                  goto LABEL_127;
              }
              memmove(v104, v103, v102);
LABEL_127:
              *((_BYTE *)v104 + v102) = 0;
              if (v189 >= 0)
                v107 = (const std::string::value_type *)&v187;
              else
                v107 = (const std::string::value_type *)v187;
              if (v189 >= 0)
                v108 = HIBYTE(v189);
              else
                v108 = v188;
              v109 = std::string::append(&v191, v107, v108);
              v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
              v194.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v110;
              v109->__r_.__value_.__l.__size_ = 0;
              v109->__r_.__value_.__r.__words[2] = 0;
              v109->__r_.__value_.__r.__words[0] = 0;
              v111 = std::string::append(&v194, ".");
              v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
              __p[0].__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v112;
              v111->__r_.__value_.__l.__size_ = 0;
              v111->__r_.__value_.__r.__words[2] = 0;
              v111->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationResult::ValidationResult(v167, &v192, 309, __p);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v194.__r_.__value_.__l.__data_);
              if (SHIBYTE(v189) < 0)
                operator delete(v187);
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v191.__r_.__value_.__l.__data_);
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v190.__r_.__value_.__l.__data_);
              v63 = v193;
              if (!v193)
                goto LABEL_190;
              v113 = (unint64_t *)&v193->__shared_owners_;
              do
                v65 = __ldaxr(v113);
              while (__stlxr(v65 - 1, v113));
              goto LABEL_146;
            }
          }
          else
          {
            v66 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
            v67 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v66);
            if (!v67)
              goto LABEL_116;
            Operator = MIL::IROpset::TryGetOperator(a2, v67 + 40);
            if (!Operator)
              goto LABEL_116;
          }
          if (v27 != Operator)
          {
            v69 = (uint64_t *)MIL::IRObject::GetLocationPtr(v21);
            v70 = (std::__shared_weak_count *)v69[1];
            v192 = *v69;
            v193 = v70;
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            (*(void (**)(MIL::IRObject *))(*(_QWORD *)v21 + 56))(v21);
            std::operator+<char>();
            v73 = std::string::append(&v190, ") referenced by this operation does not match the operator defined by expected opset ");
            v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
            v191.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v74;
            v73->__r_.__value_.__l.__size_ = 0;
            v73->__r_.__value_.__r.__words[2] = 0;
            v73->__r_.__value_.__r.__words[0] = 0;
            v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
            v77 = v76;
            if (v76 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v78 = (const void *)v75;
            if (v76 >= 0x17)
            {
              v85 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v76 | 7) != 0x17)
                v85 = v76 | 7;
              v86 = v85 + 1;
              v79 = (void **)operator new(v85 + 1);
              v188 = v77;
              v189 = v86 | 0x8000000000000000;
              v187 = v79;
            }
            else
            {
              HIBYTE(v189) = v76;
              v79 = (void **)&v187;
              if (!v76)
                goto LABEL_94;
            }
            memmove(v79, v78, v77);
LABEL_94:
            *((_BYTE *)v79 + v77) = 0;
            if (v189 >= 0)
              v87 = (const std::string::value_type *)&v187;
            else
              v87 = (const std::string::value_type *)v187;
            if (v189 >= 0)
              v88 = HIBYTE(v189);
            else
              v88 = v188;
            v89 = std::string::append(&v191, v87, v88);
            v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            v194.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            v91 = std::string::append(&v194, ". Is it an operator of the same name described by a different opset?");
            v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
            __p[0].__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v92;
            v91->__r_.__value_.__l.__size_ = 0;
            v91->__r_.__value_.__r.__words[2] = 0;
            v91->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(v167, &v192, 309, __p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v194.__r_.__value_.__l.__data_);
            if (SHIBYTE(v189) < 0)
              operator delete(v187);
            if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v191.__r_.__value_.__l.__data_);
            if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v190.__r_.__value_.__l.__data_);
            v63 = v193;
            if (!v193)
              goto LABEL_190;
            v93 = (unint64_t *)&v193->__shared_owners_;
            do
              v65 = __ldaxr(v93);
            while (__stlxr(v65 - 1, v93));
            goto LABEL_146;
          }
          if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27))
          {
LABEL_182:
            (*(void (**)(std::string *__return_ptr, uint64_t, MIL::IRObject *))(*(_QWORD *)v27 + 96))(__p, v27, v21);
            if (((*(uint64_t (**)(std::string *))(__p[0].__r_.__value_.__r.__words[0] + 16))(__p) & 1) != 0)
            {
              MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
              v128 = (_QWORD **)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 208))(v21);
              v129 = (_QWORD *)**v128;
              v130 = (_QWORD *)(*v128)[1];
              while (v129 != v130)
              {
                if (((*(uint64_t (**)(std::string *))(__p[0].__r_.__value_.__r.__words[0] + 16))(__p) & 1) == 0)
                  goto LABEL_189;
                MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
                v129 += 2;
              }
              MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v167);
            }
            else
            {
LABEL_189:
              MIL::MILResult::MILResult(v167, (uint64_t)__p);
              v167[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
              v168 = v186;
              MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
            }
            goto LABEL_190;
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v114 = __dst.__r_.__value_.__l.__size_;
            if (__dst.__r_.__value_.__l.__size_ == 5)
            {
              v115 = *(_DWORD *)__dst.__r_.__value_.__l.__data_ == 829648745
                  && *(_BYTE *)(__dst.__r_.__value_.__r.__words[0] + 4) == 53;
              if (v115)
                goto LABEL_182;
              if (*(_DWORD *)__dst.__r_.__value_.__l.__data_ == 829648745
                && *(_BYTE *)(__dst.__r_.__value_.__r.__words[0] + 4) == 54)
              {
                goto LABEL_182;
              }
              v114 = __dst.__r_.__value_.__l.__size_;
            }
            if (v114 != 11)
              goto LABEL_174;
            v84 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) == 5)
            {
              if (LODWORD(__dst.__r_.__value_.__l.__data_) == 829648745 && __dst.__r_.__value_.__s.__data_[4] == 53)
                goto LABEL_182;
              if (LODWORD(__dst.__r_.__value_.__l.__data_) == 829648745 && __dst.__r_.__value_.__s.__data_[4] == 54)
                goto LABEL_182;
              goto LABEL_174;
            }
            if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) != 11)
            {
LABEL_174:
              v122 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v21 + 160))(v21);
              v124 = (unsigned __int8 *)(v122 + 1);
              v123 = (unsigned __int8 *)*v122;
              if ((_QWORD *)*v122 != v122 + 1)
              {
                while (1)
                {
                  v125 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 64))(v27);
                  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v125, v123 + 32))break;
                  v126 = (unsigned __int8 *)*((_QWORD *)v123 + 1);
                  if (v126)
                  {
                    do
                    {
                      v127 = v126;
                      v126 = *(unsigned __int8 **)v126;
                    }
                    while (v126);
                  }
                  else
                  {
                    do
                    {
                      v127 = (unsigned __int8 *)*((_QWORD *)v123 + 2);
                      v115 = *(_QWORD *)v127 == (_QWORD)v123;
                      v123 = v127;
                    }
                    while (!v115);
                  }
                  v123 = v127;
                  if (v127 == v124)
                    goto LABEL_182;
                }
                v131 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(v21);
                v132 = v131[1];
                v191.__r_.__value_.__r.__words[0] = *v131;
                v191.__r_.__value_.__l.__size_ = v132;
                if (v132)
                {
                  v133 = (unint64_t *)(v132 + 8);
                  do
                    v134 = __ldxr(v133);
                  while (__stxr(v134 + 1, v133));
                }
                std::operator+<char>();
                v135 = std::string::append(&v194, "'.");
                v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
                __p[0].__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v136;
                v135->__r_.__value_.__l.__size_ = 0;
                v135->__r_.__value_.__r.__words[2] = 0;
                v135->__r_.__value_.__r.__words[0] = 0;
                MIL::ValidationResult::ValidationResult(v167, &v191, 315, __p);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v194.__r_.__value_.__l.__data_);
                v63 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
                if (!v191.__r_.__value_.__l.__size_)
                  goto LABEL_190;
                v137 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
                do
                  v65 = __ldaxr(v137);
                while (__stlxr(v65 - 1, v137));
                goto LABEL_146;
              }
              goto LABEL_182;
            }
            v84 = &__dst;
          }
          v117 = v84->__r_.__value_.__r.__words[0];
          v118 = *(std::string::size_type *)((char *)v84->__r_.__value_.__r.__words + 3);
          if (v117 == 0x72745F3631736F69 && v118 == 0x6E696172745F3631)
            goto LABEL_182;
          goto LABEL_174;
        }
      }
      memmove(p_dst, v30, v31);
      goto LABEL_60;
    }
    if (*(char *)(v17 + 23) < 0)
      break;
    if (!*(_BYTE *)(v17 + 23))
      goto LABEL_227;
LABEL_15:
    if (!(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v17, 1))
    {
      v157 = (uint64_t *)MIL::IRObject::GetLocationPtr(a4);
      v158 = (std::__shared_weak_count *)v157[1];
      v171 = *v157;
      v172 = v158;
      if (v158)
      {
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      std::operator+<char>();
      v161 = std::string::append(__p, "' used as block output.");
      v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
      v170 = v161->__r_.__value_.__r.__words[2];
      *(_OWORD *)v169 = v162;
      v161->__r_.__value_.__l.__size_ = 0;
      v161->__r_.__value_.__r.__words[2] = 0;
      v161->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a5, &v171, 104, v169);
      if (SHIBYTE(v170) < 0)
        operator delete(v169[0]);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v142 = v172;
      if (v172)
      {
        v163 = (unint64_t *)&v172->__shared_owners_;
        do
          v144 = __ldaxr(v163);
        while (__stlxr(v144 - 1, v163));
LABEL_246:
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      return;
    }
    v17 += 24;
  }
  if (*(_QWORD *)(v17 + 8))
    goto LABEL_15;
LABEL_227:
  v152 = (uint64_t *)MIL::IRObject::GetLocationPtr(a4);
  v153 = (std::__shared_weak_count *)v152[1];
  v175 = *v152;
  v176 = v153;
  if (v153)
  {
    v154 = (unint64_t *)&v153->__shared_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
  }
  std::string::basic_string[abi:ne180100]<0>(v173, "Block output names must be non-empty.");
  MIL::ValidationResult::ValidationResult(a5, &v175, 101, v173);
  if (v174 < 0)
    operator delete(v173[0]);
  v142 = v176;
  if (v176)
  {
    v156 = (unint64_t *)&v176->__shared_owners_;
    do
      v144 = __ldaxr(v156);
    while (__stlxr(v144 - 1, v156));
    goto LABEL_246;
  }
}

void sub_1E06BA3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (a56 < 0)
    operator delete(__p);
  if (*(char *)(v56 - 137) < 0)
    operator delete(*(void **)(v56 - 160));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v56 - 208);
  if (*(char *)(v56 - 105) < 0)
    operator delete(*(void **)(v56 - 128));
  _Unwind_Resume(a1);
}

uint64_t MIL::ValidationError::ValidationError(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  _BYTE v12[56];

  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::ValidationResult::ValidationResult(v12, &v11, a4, __p);
  MIL::ValidationError::ValidationError(a1, (uint64_t)v12);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v12);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  _BYTE v12[56];

  v11 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v10 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  MIL::ValidationResult::ValidationResult(v12, &v11, a4, __p);
  MIL::ValidationError::ValidationError(a1, (uint64_t)v12);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v12);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_1E06BA750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a19);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::ValidationError::ValidationError(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string __p;

  MIL::MILResult::GetMessageWithLocation((const std::string::value_type **)a2, &__p);
  MIL::MILErrorWithResult::MILErrorWithResult((std::runtime_error *)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1EA99F108;
  *(_QWORD *)(a1 + 16) = off_1EA99BF68;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 16) = &off_1EA99F170;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
  return a1;
}

void sub_1E06BA830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1E06BA90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a19);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::ValidationError::GetReason(MIL::ValidationError *this)
{
  return MIL::ValidationResult::GetReason((MIL::ValidationError *)((char *)this + 16));
}

uint64_t MIL::ValidationError::GetResult(MIL::ValidationError *this)
{
  return (uint64_t)this + 16;
}

uint64_t MIL::ValidationError::GetValidationResult(MIL::ValidationError *this)
{
  return (uint64_t)this + 16;
}

void MIL::ValidationResult::~ValidationResult(void **this)
{
  MIL::MILResult::~MILResult(this);
  JUMPOUT(0x1E0C023A0);
}

MIL::MILResult *MIL::ValidationResult::ValidationResult(MIL::ValidationResult *this)
{
  MIL::MILResult *result;

  result = MIL::MILResult::MILResult(this);
  *(_QWORD *)result = &off_1EA99F170;
  *((_DWORD *)result + 12) = 2;
  return result;
}

{
  MIL::MILResult *result;

  result = MIL::MILResult::MILResult(this);
  *(_QWORD *)result = &off_1EA99F170;
  *((_DWORD *)result + 12) = 2;
  return result;
}

uint64_t MIL::ValidationResult::ValidationResult(uint64_t a1, __int128 *a2, int a3, uint64_t a4)
{
  __n128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  uint64_t v12;
  __int128 v13;

  v13 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)__p = *(_OWORD *)a4;
  v12 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v6 = MIL::MILResult::MILResult(a1, (uint64_t)&v13, (__n128 *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_1EA99F170;
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

void sub_1E06BAAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::ValidationResult::GetReason(MIL::ValidationResult *this)
{
  return *((unsigned int *)this + 12);
}

BOOL MIL::ValidationResult::IsGood(MIL::ValidationResult *this)
{
  return *((_DWORD *)this + 12) == 2;
}

BOOL MIL::MathOps::LogicalNotOp(MIL::MathOps *this)
{
  return (_DWORD)this == 0;
}

BOOL MIL::MathOps::LogicalAndOp(MIL::MathOps *this, int a2)
{
  return (_DWORD)this == 1 && a2 == 1;
}

BOOL MIL::MathOps::LogicalOrOp(MIL::MathOps *this, int a2)
{
  return (_DWORD)this == 1 || a2 == 1;
}

BOOL MIL::MathOps::LogicalXorOp(MIL::MathOps *this, int a2)
{
  return ((_DWORD)this != 1 || a2 != 1) && (a2 | this) != 0;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<float>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<float>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<float>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<float>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<float>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<float>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<float>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<float>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<float>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<float>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<float>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<float>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06BB5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<float>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<MIL::Fp16>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<MIL::Fp16>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<MIL::Fp16>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06BC178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<MIL::Bf16>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<MIL::Bf16>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<MIL::Bf16>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06BCD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<int>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<int>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<int>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<int>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<int>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<int>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<int>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<int>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<int>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<int>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<int>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<int>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06BD8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<int>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<BOOL>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<BOOL>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<BOOL>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<BOOL>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<BOOL>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<BOOL>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<BOOL>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<BOOL>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<BOOL>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<BOOL>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<BOOL>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<BOOL>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06BE4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<signed char>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<signed char>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<signed char>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<signed char>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<signed char>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<signed char>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<signed char>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<signed char>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<signed char>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<signed char>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<signed char>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<signed char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06BF058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<signed char>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<unsigned char>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<unsigned char>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<unsigned char>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06BFC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<unsigned short>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<unsigned short>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<unsigned short>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06C07C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInferenceUtils::GetCastedTensor<short>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  int v99;
  std::string *v100;
  std::string::size_type size;
  _QWORD *v102;
  std::logic_error *exception;
  _QWORD v104[33];
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;

  v4 = MIL::ValueInference::Tensor<short>::Tensor((uint64_t)a2);
  v5 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)*a1 + 32))(*a1, v4);
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
  {
    case 2u:
      v6 = (std::__shared_weak_count *)a1[1];
      v113 = *a1;
      v114 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v113, (uint64_t)v104);
      v9 = v114;
      if (v114)
      {
        v10 = (unint64_t *)&v114->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::Cast<short>(v104, (uint64_t)&v121);
      v12 = (void *)a2[1];
      if (v12)
      {
        a2[2] = v12;
        operator delete(v12);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v13 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v13)
      {
        a2[5] = v13;
        operator delete(v13);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v14 = v124;
      v15 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v14;
      a2[7] = v15;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<BOOL>::~Tensor(v104);
      break;
    case 4u:
      v77 = (std::__shared_weak_count *)a1[1];
      v117 = *a1;
      v118 = v77;
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v117, (uint64_t)v104);
      v80 = v118;
      if (v118)
      {
        v81 = (unint64_t *)&v118->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::Cast<short>(v104, (uint64_t)&v121);
      v83 = (void *)a2[1];
      if (v83)
      {
        a2[2] = v83;
        operator delete(v83);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v84 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v84)
      {
        a2[5] = v84;
        operator delete(v84);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v85 = v124;
      v86 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v85;
      a2[7] = v86;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v104);
      break;
    case 5u:
      v47 = (std::__shared_weak_count *)a1[1];
      v126 = *a1;
      v127 = v47;
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v126, (uint64_t)v104);
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      MIL::ValueInference::Tensor<float>::Cast<short>(v104, (uint64_t)&v121);
      v53 = (void *)a2[1];
      if (v53)
      {
        a2[2] = v53;
        operator delete(v53);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v54 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v54)
      {
        a2[5] = v54;
        operator delete(v54);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v55 = v124;
      v56 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v55;
      a2[7] = v56;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<float>::~Tensor(v104);
      break;
    case 7u:
      v67 = (std::__shared_weak_count *)a1[1];
      v119 = *a1;
      v120 = v67;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(&v119, (uint64_t)v104);
      v70 = v120;
      if (v120)
      {
        v71 = (unint64_t *)&v120->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::Cast<short>(v104, (uint64_t)&v121);
      v73 = (void *)a2[1];
      if (v73)
      {
        a2[2] = v73;
        operator delete(v73);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v74 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v74)
      {
        a2[5] = v74;
        operator delete(v74);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v75 = v124;
      v76 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v75;
      a2[7] = v76;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v104);
      break;
    case 9u:
      v27 = (std::__shared_weak_count *)a1[1];
      v111 = *a1;
      v112 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(&v111, (uint64_t)v104);
      v30 = v112;
      if (v112)
      {
        v31 = (unint64_t *)&v112->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      MIL::ValueInference::Tensor<signed char>::Cast<short>(v104, (uint64_t)&v121);
      v33 = (void *)a2[1];
      if (v33)
      {
        a2[2] = v33;
        operator delete(v33);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v34 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v34)
      {
        a2[5] = v34;
        operator delete(v34);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v35 = v124;
      v36 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v35;
      a2[7] = v36;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<signed char>::~Tensor(v104);
      break;
    case 0xAu:
      v37 = (std::__shared_weak_count *)a1[1];
      v105 = *a1;
      v106 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      MIL::ValueInference::Tensor<short>::FromIRTensorValue(&v105, (uint64_t)v104);
      v40 = v106;
      if (v106)
      {
        v41 = (unint64_t *)&v106->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      MIL::ValueInference::Tensor<short>::Cast<short>(v104, (uint64_t)&v121);
      v43 = (void *)a2[1];
      if (v43)
      {
        a2[2] = v43;
        operator delete(v43);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v44 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v44)
      {
        a2[5] = v44;
        operator delete(v44);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v45 = v124;
      v46 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v45;
      a2[7] = v46;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<short>::~Tensor(v104);
      break;
    case 0xBu:
      v87 = (std::__shared_weak_count *)a1[1];
      v115 = *a1;
      v116 = v87;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v115, (uint64_t)v104);
      v90 = v116;
      if (v116)
      {
        v91 = (unint64_t *)&v116->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      MIL::ValueInference::Tensor<int>::Cast<short>(v104, (uint64_t)&v121);
      v93 = (void *)a2[1];
      if (v93)
      {
        a2[2] = v93;
        operator delete(v93);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v94 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v94)
      {
        a2[5] = v94;
        operator delete(v94);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v95 = v124;
      v96 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v95;
      a2[7] = v96;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<int>::~Tensor(v104);
      break;
    case 0xEu:
      v57 = (std::__shared_weak_count *)a1[1];
      v109 = *a1;
      v110 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(&v109, (uint64_t)v104);
      v60 = v110;
      if (v110)
      {
        v61 = (unint64_t *)&v110->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::Cast<short>(v104, (uint64_t)&v121);
      v63 = (void *)a2[1];
      if (v63)
      {
        a2[2] = v63;
        operator delete(v63);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v64 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v64)
      {
        a2[5] = v64;
        operator delete(v64);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v65 = v124;
      v66 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v65;
      a2[7] = v66;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned char>::~Tensor(v104);
      break;
    case 0xFu:
      v17 = (std::__shared_weak_count *)a1[1];
      v107 = *a1;
      v108 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(&v107, (uint64_t)v104);
      v20 = v108;
      if (v108)
      {
        v21 = (unint64_t *)&v108->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::Cast<short>(v104, (uint64_t)&v121);
      v23 = (void *)a2[1];
      if (v23)
      {
        a2[2] = v23;
        operator delete(v23);
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
      }
      v24 = (void *)a2[4];
      *(_OWORD *)(a2 + 1) = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      a2[3] = v122;
      v122 = 0;
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      if (v24)
      {
        a2[5] = v24;
        operator delete(v24);
        a2[4] = 0;
        a2[5] = 0;
        a2[6] = 0;
      }
      *((_OWORD *)a2 + 2) = v123;
      v25 = v124;
      v26 = v125;
      v124 = 0;
      v123 = 0uLL;
      a2[6] = v25;
      a2[7] = v26;
      MIL::ValueInference::Tensor<short>::~Tensor(&v121);
      result = MIL::ValueInference::Tensor<unsigned short>::~Tensor(v104);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v104);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"Unsupported Datatype ", 21);
      v98 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 88))(v98);
      MIL::IRDataTypeToString(v99, &v121);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v121;
      else
        v100 = (std::string *)v121.__r_.__value_.__r.__words[0];
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
      else
        size = v121.__r_.__value_.__l.__size_;
      v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v100, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)".", 1);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v121.__r_.__value_.__l.__data_);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v121);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06C1380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void *v3;
  int v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v5 - 105) < 0)
  {
    operator delete(*(void **)(v5 - 128));
    if ((v4 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)va);
      MIL::ValueInference::Tensor<short>::~Tensor(v2);
      _Unwind_Resume(a1);
    }
  }
  else if (!v4)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v3);
  goto LABEL_6;
}

_QWORD *MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F1B8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::ValueInference::Tensor<int>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F1E8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<int>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<int>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::ValueInference::Tensor<BOOL>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F218;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<BOOL>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<BOOL>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::ValueInference::Tensor<unsigned short>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F248;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<unsigned short>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<unsigned short>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::ValueInference::Tensor<short>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F278;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<short>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<short>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

void MIL::ValueInference::Tensor<float>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 2);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C17B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (float *)a1[4];
  v7 = (float *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (float *)a1[4];
  v7 = (float *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (float *)a1[4];
  v7 = (float *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (float *)a1[4];
  v7 = (float *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  float *v6;
  float *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (float *)a1[4];
  v7 = (float *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 2);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (int *)a1[4];
  v7 = (int *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (int *)a1[4];
  v7 = (int *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (int *)a1[4];
  v7 = (int *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (int *)a1[4];
  v7 = (int *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C1F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (int *)a1[4];
  v7 = (int *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C203C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, v6, v7, v7 - (_QWORD)v6);
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C20FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C21C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C24C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, v6, v7, v7 - (_QWORD)v6);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 1);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>((char *)&__p, v6, v7, (v7 - v6) >> 1);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  __int16 *v6;
  __int16 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (__int16 *)a1[4];
  v7 = (__int16 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C27CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  __int16 *v6;
  __int16 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (__int16 *)a1[4];
  v7 = (__int16 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  __int16 *v6;
  __int16 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (__int16 *)a1[4];
  v7 = (__int16 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>((char *)&__p, v6, v7, (v7 - v6) >> 1);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 1);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&__p, v6, v7, (v7 - v6) >> 1);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int16 *)a1[4];
  v7 = (unsigned __int16 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int16 *)a1[4];
  v7 = (unsigned __int16 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  __int16 *v6;
  __int16 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (__int16 *)a1[4];
  v7 = (__int16 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>((char *)&__p, v6, v7, (v7 - v6) >> 1);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(&__p, v6, v7, v7 - (_QWORD)v6);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C2F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C3030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C30F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C31B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C3270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C3330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, v6, v7, v7 - (_QWORD)v6);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C33F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C34B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C3570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C3630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (unsigned __int8 *)a1[4];
  v7 = (unsigned __int8 *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C36F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (char *)a1[4];
  v7 = (char *)a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>((char *)&__p, v6, v7, v7 - v6);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06C37B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float Float;
  float v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  int v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<float>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7));
      v9 = Float;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v12 = (void *)__p.n128_u64[0];
        v13 = (uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = v21 - __p.n128_u64[0];
        if ((uint64_t)(v21 - __p.n128_u64[0]) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v21, v16);
          v10 = __p.n128_u64[1];
          v12 = (void *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = (float *)&v17[4 * v13];
        *v18 = v9;
        v11 = (unint64_t)(v18 + 1);
        while ((void *)v10 != v12)
        {
          v19 = *(_DWORD *)(v10 - 4);
          v10 -= 4;
          *((_DWORD *)v18-- - 1) = v19;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v11;
        v21 = (unint64_t)&v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(float *)__p.n128_u64[1] = Float;
        v11 = v10 + 4;
      }
      __p.n128_u64[1] = v11;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06C397C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int Float;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  std::vector<unsigned int>::pointer begin;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  std::vector<unsigned int> __p;
  __n128 v20;
  uint64_t v21;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v21 = 0;
  v20 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v20, v4, v5, (v5 - (uint64_t)v4) >> 3);
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::reserve(&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7));
      end = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        begin = __p.__begin_;
        v12 = __p.__end_ - __p.__begin_;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
        if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v15);
          begin = __p.__begin_;
          end = __p.__end_;
        }
        else
        {
          v16 = 0;
        }
        v17 = (unsigned int *)&v16[4 * v12];
        *v17 = Float;
        v10 = v17 + 1;
        while (end != begin)
        {
          v18 = *--end;
          *--v17 = v18;
        }
        __p.__begin_ = v17;
        __p.__end_ = v10;
        __p.__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *__p.__end_ = Float;
        v10 = end + 1;
      }
      __p.__end_ = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v20, (__n128 *)&__p);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v20.n128_u64[0])
  {
    v20.n128_u64[1] = v20.n128_u64[0];
    operator delete((void *)v20.n128_u64[0]);
  }
}

void sub_1E06C3B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7));
      v9 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v11 = (void *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v9 = __p.n128_u64[1];
          v11 = (void *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = Float;
        v10 = (unint64_t)(v17 + 2);
        while ((void *)v9 != v11)
        {
          v18 = *(_WORD *)(v9 - 2);
          v9 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v10;
        v20 = (unint64_t)&v16[2 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = Float;
        v10 = v9 + 2;
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06C3D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7));
      v9 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v11 = (void *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v9 = __p.n128_u64[1];
          v11 = (void *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = Float;
        v10 = (unint64_t)(v17 + 2);
        while ((void *)v9 != v11)
        {
          v18 = *(_WORD *)(v9 - 2);
          v9 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v10;
        v20 = (unint64_t)&v16[2 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = Float;
        v10 = v9 + 2;
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06C3EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  char v20;
  __n128 __p;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7));
      v9 = (char *)__p.n128_u64[1];
      if (__p.n128_u64[1] >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0] + 1;
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v22 - __p.n128_u64[0];
        if (2 * (v22 - __p.n128_u64[0]) > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = v16 + v12;
        v18 = (_BYTE *)(v16 + v12);
        *v18 = Float;
        v10 = (unint64_t)(v18 + 1);
        if (v9 != (char *)v11)
        {
          v19 = &v9[~v11];
          do
          {
            v20 = *--v9;
            (v19--)[v16] = v20;
          }
          while (v9 != (char *)v11);
          v9 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = v16 + v15;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_BYTE *)__p.n128_u64[1] = Float;
        v10 = (unint64_t)(v9 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06C4090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  char v20;
  __n128 __p;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7));
      v9 = (char *)__p.n128_u64[1];
      if (__p.n128_u64[1] >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0] + 1;
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v22 - __p.n128_u64[0];
        if (2 * (v22 - __p.n128_u64[0]) > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = v16 + v12;
        v18 = (_BYTE *)(v16 + v12);
        *v18 = Float;
        v10 = (unint64_t)(v18 + 1);
        if (v9 != (char *)v11)
        {
          v19 = &v9[~v11];
          do
          {
            v20 = *--v9;
            (v19--)[v16] = v20;
          }
          while (v9 != (char *)v11);
          v9 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = v16 + v15;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_BYTE *)__p.n128_u64[1] = Float;
        v10 = (unint64_t)(v9 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06C4260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<float>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float Float;
  float v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  float *v18;
  int v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<float>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7));
      v9 = Float;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v12 = (void *)__p.n128_u64[0];
        v13 = (uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v15 = v21 - __p.n128_u64[0];
        if ((uint64_t)(v21 - __p.n128_u64[0]) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v21, v16);
          v10 = __p.n128_u64[1];
          v12 = (void *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = (float *)&v17[4 * v13];
        *v18 = v9;
        v11 = (unint64_t)(v18 + 1);
        while ((void *)v10 != v12)
        {
          v19 = *(_DWORD *)(v10 - 4);
          v10 -= 4;
          *((_DWORD *)v18-- - 1) = v19;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v11;
        v21 = (unint64_t)&v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(float *)__p.n128_u64[1] = Float;
        v11 = v10 + 4;
      }
      __p.n128_u64[1] = v11;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06C442C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<int>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int Float;
  std::vector<unsigned int>::pointer end;
  unsigned int *v10;
  std::vector<unsigned int>::pointer begin;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  std::vector<unsigned int> __p;
  __n128 v20;
  uint64_t v21;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v21 = 0;
  v20 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v20, v4, v5, (v5 - (uint64_t)v4) >> 3);
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::reserve(&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7));
      end = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        begin = __p.__begin_;
        v12 = __p.__end_ - __p.__begin_;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
        if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v15);
          begin = __p.__begin_;
          end = __p.__end_;
        }
        else
        {
          v16 = 0;
        }
        v17 = (unsigned int *)&v16[4 * v12];
        *v17 = Float;
        v10 = v17 + 1;
        while (end != begin)
        {
          v18 = *--end;
          *--v17 = v18;
        }
        __p.__begin_ = v17;
        __p.__end_ = v10;
        __p.__end_cap_.__value_ = (unsigned int *)&v16[4 * v15];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *__p.__end_ = Float;
        v10 = end + 1;
      }
      __p.__end_ = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v20, (__n128 *)&__p);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v20.n128_u64[0])
  {
    v20.n128_u64[1] = v20.n128_u64[0];
    operator delete((void *)v20.n128_u64[0]);
  }
}

void sub_1E06C45F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7));
      v9 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v11 = (void *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v9 = __p.n128_u64[1];
          v11 = (void *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = Float;
        v10 = (unint64_t)(v17 + 2);
        while ((void *)v9 != v11)
        {
          v18 = *(_WORD *)(v9 - 2);
          v9 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v10;
        v20 = (unint64_t)&v16[2 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = Float;
        v10 = v9 + 2;
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06C47B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<short>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7));
      v9 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v11 = (void *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v9 = __p.n128_u64[1];
          v11 = (void *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = Float;
        v10 = (unint64_t)(v17 + 2);
        while ((void *)v9 != v11)
        {
          v18 = *(_WORD *)(v9 - 2);
          v9 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v10;
        v20 = (unint64_t)&v16[2 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = Float;
        v10 = v9 + 2;
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06C4970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<unsigned char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  char v20;
  __n128 __p;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7));
      v9 = (char *)__p.n128_u64[1];
      if (__p.n128_u64[1] >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0] + 1;
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v22 - __p.n128_u64[0];
        if (2 * (v22 - __p.n128_u64[0]) > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = v16 + v12;
        v18 = (_BYTE *)(v16 + v12);
        *v18 = Float;
        v10 = (unint64_t)(v18 + 1);
        if (v9 != (char *)v11)
        {
          v19 = &v9[~v11];
          do
          {
            v20 = *--v9;
            (v19--)[v16] = v20;
          }
          while (v9 != (char *)v11);
          v9 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = v16 + v15;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_BYTE *)__p.n128_u64[1] = Float;
        v10 = (unint64_t)(v9 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06C4B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<signed char>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int Float;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  char v20;
  __n128 __p;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = (int)MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7));
      v9 = (char *)__p.n128_u64[1];
      if (__p.n128_u64[1] >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0] + 1;
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v22 - __p.n128_u64[0];
        if (2 * (v22 - __p.n128_u64[0]) > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = v16 + v12;
        v18 = (_BYTE *)(v16 + v12);
        *v18 = Float;
        v10 = (unint64_t)(v18 + 1);
        if (v9 != (char *)v11)
        {
          v19 = &v9[~v11];
          do
          {
            v20 = *--v9;
            (v19--)[v16] = v20;
          }
          while (v9 != (char *)v11);
          v9 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = v16 + v15;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_BYTE *)__p.n128_u64[1] = Float;
        v10 = (unint64_t)(v9 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06C4D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;

  MIL::IRTensorValue::TryGetDataView<float>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&__p, v13, (uint64_t)v13 + 4 * v14, v14);
  MIL::ValueInference::Tensor<float>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06C4E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<float>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 5, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<float>,std::allocator<MIL::IRTypedTensorValue<float>>,MIL::IRTensorValueType const*&,std::vector<float>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06C4F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<float>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99BBB0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06C506C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<float>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99BBB0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t MIL::ValueInference::Tensor<float>::GetDataView(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
    return 0;
  else
    return *(_QWORD *)(a1 + 32);
}

uint64_t MIL::ValueInference::Tensor<float>::GetNumElements(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

unint64_t MIL::ValueInference::Tensor<float>::operator[](uint64_t a1, uint64_t *a2)
{
}

unint64_t `anonymous namespace'::FlattenIndices(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  std::logic_error *v11;
  std::logic_error *exception;
  std::string v13;
  _QWORD v14[33];

  v3 = *a2;
  v2 = a2[1];
  v4 = (v2 - *a2) >> 3;
  if (v4 != (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "indices must have the same length as the shape.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  if (v2 == v3)
    return 0;
  v5 = 0;
  v6 = 0;
  if (v4 <= 1)
    v4 = 1;
  do
  {
    v7 = *(_QWORD *)(v3 + 8 * v5);
    v8 = *(_QWORD *)(*a1 + 8 * v5);
    if (v7 >= v8)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"index ", 6);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" cannnot be out of the range of dimension ", 42);
      std::ostream::operator<<();
      v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v11, &v13);
      v11->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
      __cxa_throw(v11, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
    }
    v6 = v7 + v8 * v6;
    ++v5;
  }
  while (v4 != v5);
  return v6;
}

void sub_1E06C5278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<float>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  int *v7;
  int *v8;
  float *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  __p.n128_u32[0] = 0;
  std::vector<float>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(int **)(a1 + 32);
  v7 = *(int **)(a1 + 40);
  v9 = (float *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(float (**)(_BYTE *, int *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<float>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06C5420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float MIL::ValueInference::Tensor<float>::GetScalarData(_QWORD *a1)
{
  uint64_t v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = a1[4], a1[5] - v1 != 4))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *(float *)v1;
}

void sub_1E06C5500(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<float>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  MIL::ValueInference::Tensor<float>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06C56FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<float>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(float *)(*(_QWORD *)(a1 + 32) + 4 * v5) != 0.0)
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06C5810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1E06C5968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::UnflattenIndex@<X0>(uint64_t **a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  std::logic_error *exception;

  v3 = a2;
  v5 = a1[1];
  v6 = 1;
  if (*a1 != v5)
  {
    v7 = *a1;
    do
    {
      v8 = *v7++;
      v6 *= v8;
    }
    while (v7 != v5);
  }
  if (v6 <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "flattened index must be smaller than the number of elements.");
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  result = std::vector<unsigned long long>::vector(a3, v5 - *a1);
  v10 = result[1] - *result;
  if (v10)
  {
    v11 = v10 >> 3;
    if ((unint64_t)(v10 >> 3) <= 1)
      v12 = 1;
    else
      v12 = v10 >> 3;
    v13 = 8 * v11 - 8;
    v14 = (unint64_t *)(*result + v13);
    v15 = (unint64_t *)((char *)*a1 + v13);
    do
    {
      *v14-- = v3 % *v15;
      v16 = *v15--;
      v3 /= v16;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_1E06C5A54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<float>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 2;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06C5DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<float>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<float>::vector(&__p, v5);
  MIL::ValueInference::Tensor<float>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06C5ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  __n128 __p;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v30 = 0;
  v31 = 0;
  v29 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v29, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v29;
  *((_QWORD *)v29 + a2) = v7;
  v28 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v30, (v30 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 2) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 2;
        do
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 3);
          *((_QWORD *)v22 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          v21 = *(_DWORD *)(*(_QWORD *)(v20 + 32)
          *(_DWORD *)(*(_QWORD *)(a3 + 32)
          if (v22)
          {
            v23 = v22;
            operator delete(v22);
          }
          if (v25)
          {
            v26 = v25;
            operator delete(v25);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_1E06C60E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  std::runtime_error *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::runtime_error *exception;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *v45[3];
  __n128 __p;
  uint64_t v47;
  std::string v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"The number of tensors (", 23);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") is not the same as the number of blocks (", 43);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v48);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v50 = 0;
  v51 = 0;
  v49 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v49, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v48, 0, sizeof(v48));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v48.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v48.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v47 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v48.__r_.__value_.__l.__size_, (uint64_t)(v48.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v50 - (_BYTE *)v49 || memcmp(v20, v49, v21))
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 2;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v49;
            v29 = (uint64_t *)v45[0];
            v30 = v40;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          v35 = *(_DWORD *)(*(_QWORD *)(v34 + 32)
          *(_DWORD *)(*(_QWORD *)(a3 + 32)
          if (v40)
          {
            v41 = v40;
            operator delete(v40);
          }
          if (v43)
          {
            v44 = v43;
            operator delete(v43);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
    }
  }
  if (v48.__r_.__value_.__r.__words[0])
  {
    v48.__r_.__value_.__l.__size_ = v48.__r_.__value_.__r.__words[0];
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1E06C64DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<float>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  float v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  float v92;
  _QWORD *v94;
  _QWORD *v95;
  std::logic_error *exception;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v101;
  unint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  void *v109;
  char *v110;
  char *v111;
  void *v112;
  void *v113;
  void *v114[3];
  __n128 v115;
  uint64_t v116;
  void *v117;
  char *v118;
  char *v119;
  std::string v120;
  void *__p;
  char *v122;
  _QWORD v123[31];
  _QWORD v124[2];
  _QWORD *v125;

  v106 = a1[1];
  v107 = a1 + 1;
  v105 = a1[2];
  v7 = (v105 - v106) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v124, *a2, a2[1]);
  for (i = v125; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v94 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v95 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v120);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v122 = 0;
  v123[0] = 0;
  memset(&v120, 0, sizeof(v120));
  v117 = 0;
  v118 = 0;
  v119 = 0;
  if (v105 == v106)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v105 - v106) >> 3;
    do
    {
      v114[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v124, (unint64_t *)v114))
      {
        if (a3)
        {
          v11 = v122;
          if ((unint64_t)v122 >= v123[0])
          {
            v22 = (char *)__p;
            v23 = (v122 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v123[0] - (_QWORD)__p;
            if ((uint64_t)(v123[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v123, v26);
              v22 = (char *)__p;
              v11 = v122;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v122 = v12;
            v123[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v122 = 1;
            v12 = v11 + 8;
          }
          v122 = v12;
        }
        v43 = *v107;
        v44 = v118;
        if (v118 >= v119)
        {
          v46 = (char *)v117;
          v47 = (v118 - (_BYTE *)v117) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_154:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v119 - (_BYTE *)v117;
          if ((v119 - (_BYTE *)v117) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v50);
            v46 = (char *)v117;
            v44 = v118;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v117 = v52;
          v118 = v45;
          v119 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v118 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v118 = v45;
      }
      else
      {
        v13 = *v107;
        v14 = v122;
        if ((unint64_t)v122 >= v123[0])
        {
          v16 = (char *)__p;
          v17 = (v122 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_154;
          v19 = v123[0] - (_QWORD)__p;
          if ((uint64_t)(v123[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v123, v20);
            v16 = (char *)__p;
            v14 = v122;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v122 = v15;
          v123[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v122 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v122 = v15;
        v30 = *v107;
        size = v120.__r_.__value_.__l.__size_;
        if (v120.__r_.__value_.__l.__size_ >= v120.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v120.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v120.__r_.__value_.__l.__size_ - v120.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_154;
          v36 = v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v120.__r_.__value_.__r.__words[2], v37);
            size = v120.__r_.__value_.__l.__size_;
            v33 = (void *)v120.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v120.__r_.__value_.__l.__size_ = v32;
          v120.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v120.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v120.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v122;
  }
  v115 = 0uLL;
  v116 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v115, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v115, a5);
  if (v115.n128_u64[0])
  {
    v115.n128_u64[1] = v115.n128_u64[0];
    operator delete((void *)v115.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 2;
    v98 = v56 >> 2;
    v99 = (uint64_t)(a1[5] - a1[4]) >> 2;
    v59 = v99 / (v56 >> 2);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v105 - v106) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v97 = v62;
    if (v59 <= 1)
      v59 = 1;
    v103 = v59;
    do
    {
      v101 = v57;
      LODWORD(v5) &= 0xFFFFFF00;
      if (v98 <= v99)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v109 = 0;
          v110 = 0;
          v111 = 0;
          if (v105 != v106)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v108 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v124, &v108);
              v69 = v110;
              if (v68)
              {
                v70 = v112;
                if (v110 >= v111)
                {
                  v74 = (char *)v109;
                  v75 = (v110 - (_BYTE *)v109) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_152;
                  v77 = v111 - (_BYTE *)v109;
                  if ((v111 - (_BYTE *)v109) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v78);
                    v74 = (char *)v109;
                    v69 = v110;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v109 = v86;
                  v110 = v71;
                  v111 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v110 = *((_QWORD *)v112 + v66);
                  v71 = v69 + 8;
                }
                v110 = v71;
                ++v66;
              }
              else
              {
                v72 = v114[0];
                if (v110 >= v111)
                {
                  v80 = (char *)v109;
                  v81 = (v110 - (_BYTE *)v109) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_152:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v111 - (_BYTE *)v109;
                  if ((v111 - (_BYTE *)v109) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v84);
                    v80 = (char *)v109;
                    v69 = v110;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v109 = v88;
                  v110 = v73;
                  v111 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v110 = *((_QWORD *)v114[0] + v67);
                  v73 = v69 + 8;
                }
                v110 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v61);
          }
          v91 = a1[4];
          if ((v64 & 1) != 0)
          {
            v5 = *(float *)(v91 + 4 * v90);
          }
          else
          {
            std::function<float ()(float,float)>::operator()(a4, v5, *(float *)(v91 + 4 * v90));
            v5 = v92;
          }
          v60 = (uint64_t **)(a5 + 8);
          if (v109)
          {
            v110 = (char *)v109;
            operator delete(v109);
          }
          if (v112)
          {
            v113 = v112;
            operator delete(v112);
          }
          v64 = 0;
          ++v63;
        }
        while (v63 != v103);
      }
      if (v112)
      {
        v113 = v112;
        operator delete(v112);
      }
      if (v114[0])
      {
        v114[1] = v114[0];
        operator delete(v114[0]);
      }
      v57 = v101 + 1;
    }
    while (v101 + 1 != v97);
  }
  if (v117)
  {
    v118 = (char *)v117;
    operator delete(v117);
  }
  if (v120.__r_.__value_.__r.__words[0])
  {
    v120.__r_.__value_.__l.__size_ = v120.__r_.__value_.__r.__words[0];
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v122 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v124);
}

void sub_1E06C6E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  if (a42 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a43);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v46 - 144);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

uint64_t std::function<float ()(float,float)>::operator()(uint64_t a1, float a2, float a3)
{
  uint64_t v3;
  float v5;
  float v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, float *, float *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void MIL::ValueInference::Tensor<float>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<float>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06C6FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<double>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;

  MIL::IRTensorValue::TryGetDataView<double>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<double>::__init_with_size[abi:ne180100]<double const*,double const*>(&__p, v13, (uint64_t)v13 + 8 * v14, v14);
  MIL::ValueInference::Tensor<double>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06C7114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<double>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 6, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<double>,std::allocator<MIL::IRTypedTensorValue<double>>,MIL::IRTensorValueType const*&,std::vector<double>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06C721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<double>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F2A8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06C732C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<double>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F2A8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t MIL::ValueInference::Tensor<double>::GetDataView(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
    return 0;
  else
    return *(_QWORD *)(a1 + 32);
}

unint64_t MIL::ValueInference::Tensor<double>::operator[](uint64_t a1, uint64_t *a2)
{
}

void MIL::ValueInference::Tensor<double>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  double *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
  __p.n128_u64[0] = 0;
  std::vector<double>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(uint64_t **)(a1 + 32);
  v7 = *(uint64_t **)(a1 + 40);
  v9 = (double *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(double (**)(_BYTE *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<double>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06C751C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<double>::GetScalarData(_QWORD *a1)
{
  uint64_t v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = a1[4], a1[5] - v1 != 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *(double *)v1;
}

void sub_1E06C75FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<double>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 3);
  MIL::ValueInference::Tensor<double>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06C77F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<double>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(double *)(*(_QWORD *)(a1 + 32) + 8 * v5) != 0.0)
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06C790C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<double>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<double>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 3;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06C7C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<double>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<double>::vector(&__p, v5);
  MIL::ValueInference::Tensor<double>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06C7DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<double>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  __n128 __p;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v30 = 0;
  v31 = 0;
  v29 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v29, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v29;
  *((_QWORD *)v29 + a2) = v7;
  v28 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v30, (v30 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<double>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 3) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 3;
        do
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 3);
          *((_QWORD *)v22 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          v21 = *(_QWORD *)(*(_QWORD *)(v20 + 32)
          *(_QWORD *)(*(_QWORD *)(a3 + 32)
          if (v22)
          {
            v23 = v22;
            operator delete(v22);
          }
          if (v25)
          {
            v26 = v25;
            operator delete(v25);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_1E06C7FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<double>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::runtime_error *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::runtime_error *exception;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *v45[3];
  __n128 __p;
  uint64_t v47;
  std::string v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"The number of tensors (", 23);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") is not the same as the number of blocks (", 43);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v48);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v50 = 0;
  v51 = 0;
  v49 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v49, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v48, 0, sizeof(v48));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v48.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v48.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v47 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v48.__r_.__value_.__l.__size_, (uint64_t)(v48.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<double>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v50 - (_BYTE *)v49 || memcmp(v20, v49, v21))
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 3;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v49;
            v29 = (uint64_t *)v45[0];
            v30 = v40;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          v35 = *(_QWORD *)(*(_QWORD *)(v34 + 32)
          *(_QWORD *)(*(_QWORD *)(a3 + 32)
          if (v40)
          {
            v41 = v40;
            operator delete(v40);
          }
          if (v43)
          {
            v44 = v43;
            operator delete(v43);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
    }
  }
  if (v48.__r_.__value_.__r.__words[0])
  {
    v48.__r_.__value_.__l.__size_ = v48.__r_.__value_.__r.__words[0];
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1E06C83B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<double>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  double v92;
  _QWORD *v94;
  _QWORD *v95;
  std::logic_error *exception;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v101;
  unint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  void *v109;
  char *v110;
  char *v111;
  void *v112;
  void *v113;
  void *v114[3];
  __n128 v115;
  uint64_t v116;
  void *v117;
  char *v118;
  char *v119;
  std::string v120;
  void *__p;
  char *v122;
  _QWORD v123[31];
  _QWORD v124[2];
  _QWORD *v125;

  v106 = a1[1];
  v107 = a1 + 1;
  v105 = a1[2];
  v7 = (v105 - v106) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v124, *a2, a2[1]);
  for (i = v125; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v94 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v95 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v120);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v122 = 0;
  v123[0] = 0;
  memset(&v120, 0, sizeof(v120));
  v117 = 0;
  v118 = 0;
  v119 = 0;
  if (v105 == v106)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v105 - v106) >> 3;
    do
    {
      v114[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v124, (unint64_t *)v114))
      {
        if (a3)
        {
          v11 = v122;
          if ((unint64_t)v122 >= v123[0])
          {
            v22 = (char *)__p;
            v23 = (v122 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v123[0] - (_QWORD)__p;
            if ((uint64_t)(v123[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v123, v26);
              v22 = (char *)__p;
              v11 = v122;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v122 = v12;
            v123[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v122 = 1;
            v12 = v11 + 8;
          }
          v122 = v12;
        }
        v43 = *v107;
        v44 = v118;
        if (v118 >= v119)
        {
          v46 = (char *)v117;
          v47 = (v118 - (_BYTE *)v117) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_154:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v119 - (_BYTE *)v117;
          if ((v119 - (_BYTE *)v117) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v50);
            v46 = (char *)v117;
            v44 = v118;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v117 = v52;
          v118 = v45;
          v119 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v118 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v118 = v45;
      }
      else
      {
        v13 = *v107;
        v14 = v122;
        if ((unint64_t)v122 >= v123[0])
        {
          v16 = (char *)__p;
          v17 = (v122 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_154;
          v19 = v123[0] - (_QWORD)__p;
          if ((uint64_t)(v123[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v123, v20);
            v16 = (char *)__p;
            v14 = v122;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v122 = v15;
          v123[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v122 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v122 = v15;
        v30 = *v107;
        size = v120.__r_.__value_.__l.__size_;
        if (v120.__r_.__value_.__l.__size_ >= v120.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v120.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v120.__r_.__value_.__l.__size_ - v120.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_154;
          v36 = v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v120.__r_.__value_.__r.__words[2], v37);
            size = v120.__r_.__value_.__l.__size_;
            v33 = (void *)v120.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v120.__r_.__value_.__l.__size_ = v32;
          v120.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v120.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v120.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v122;
  }
  v115 = 0uLL;
  v116 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v115, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<double>::Zeros(&v115, a5);
  if (v115.n128_u64[0])
  {
    v115.n128_u64[1] = v115.n128_u64[0];
    operator delete((void *)v115.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 3;
    v98 = v56 >> 3;
    v99 = (uint64_t)(a1[5] - a1[4]) >> 3;
    v59 = v99 / (v56 >> 3);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v105 - v106) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v97 = v62;
    if (v59 <= 1)
      v59 = 1;
    v103 = v59;
    do
    {
      v101 = v57;
      *(_QWORD *)&v5 &= 0xFFFFFFFFFFFFFF00;
      if (v98 <= v99)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v109 = 0;
          v110 = 0;
          v111 = 0;
          if (v105 != v106)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v108 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v124, &v108);
              v69 = v110;
              if (v68)
              {
                v70 = v112;
                if (v110 >= v111)
                {
                  v74 = (char *)v109;
                  v75 = (v110 - (_BYTE *)v109) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_152;
                  v77 = v111 - (_BYTE *)v109;
                  if ((v111 - (_BYTE *)v109) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v78);
                    v74 = (char *)v109;
                    v69 = v110;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v109 = v86;
                  v110 = v71;
                  v111 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v110 = *((_QWORD *)v112 + v66);
                  v71 = v69 + 8;
                }
                v110 = v71;
                ++v66;
              }
              else
              {
                v72 = v114[0];
                if (v110 >= v111)
                {
                  v80 = (char *)v109;
                  v81 = (v110 - (_BYTE *)v109) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_152:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v111 - (_BYTE *)v109;
                  if ((v111 - (_BYTE *)v109) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v84);
                    v80 = (char *)v109;
                    v69 = v110;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v109 = v88;
                  v110 = v73;
                  v111 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v110 = *((_QWORD *)v114[0] + v67);
                  v73 = v69 + 8;
                }
                v110 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v61);
          }
          v91 = a1[4];
          if ((v64 & 1) != 0)
          {
            v5 = *(double *)(v91 + 8 * v90);
          }
          else
          {
            std::function<double ()(double,double)>::operator()(a4, v5, *(double *)(v91 + 8 * v90));
            v5 = v92;
          }
          v60 = (uint64_t **)(a5 + 8);
          if (v109)
          {
            v110 = (char *)v109;
            operator delete(v109);
          }
          if (v112)
          {
            v113 = v112;
            operator delete(v112);
          }
          v64 = 0;
          ++v63;
        }
        while (v63 != v103);
      }
      if (v112)
      {
        v113 = v112;
        operator delete(v112);
      }
      if (v114[0])
      {
        v114[1] = v114[0];
        operator delete(v114[0]);
      }
      v57 = v101 + 1;
    }
    while (v101 + 1 != v97);
  }
  if (v117)
  {
    v118 = (char *)v117;
    operator delete(v117);
  }
  if (v120.__r_.__value_.__r.__words[0])
  {
    v120.__r_.__value_.__l.__size_ = v120.__r_.__value_.__r.__words[0];
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v122 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v124);
}

void sub_1E06C8CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  if (a42 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a43);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v46 - 144);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

uint64_t std::function<double ()(double,double)>::operator()(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  double v5;
  double v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, double *, double *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void MIL::ValueInference::Tensor<double>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<double>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06C8EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  size_t v14;

  MIL::IRTensorValue::TryGetDataView<unsigned char>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v13, (uint64_t)v13 + v14, v14);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06C8FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 14, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned char>,std::allocator<MIL::IRTypedTensorValue<unsigned char>>,MIL::IRTensorValueType const*&,std::vector<unsigned char>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06C90E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned char>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99BC70;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != v11 - v10)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06C91F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<unsigned char>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99BC70;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t MIL::ValueInference::Tensor<unsigned char>::GetDataView(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
    return 0;
  else
    return *(_QWORD *)(a1 + 32);
}

unint64_t MIL::ValueInference::Tensor<unsigned char>::operator[](uint64_t a1, uint64_t *a2)
{
}

void MIL::ValueInference::Tensor<unsigned char>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  char v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  __p.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(char **)(a1 + 32);
  v7 = *(char **)(a1 + 40);
  v9 = (_BYTE *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(uint64_t (**)(_BYTE *, char *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06C93E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned char>::GetScalarData(_QWORD *a1)
{
  unsigned __int8 *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (unsigned __int8 *)a1[4], a1[5] - (_QWORD)v1 != 1))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06C94C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned char>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, v11, v12, v12 - (_QWORD)v11);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06C96B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<unsigned char>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06C97C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned char>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  std::logic_error *v32;
  void (*v33)(void *);
  struct type_info *v34;
  std::logic_error *exception;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  __n128 v41;
  uint64_t v42;
  void *__p;
  char *v44;
  char *v45;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v32, "Indices end is out of the bound for the tensor dimension.");
        v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v33 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v34 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v32, v34, v33);
      }
      v13 = v44;
      if (v44 >= v45)
      {
        v15 = (char *)__p;
        v16 = (v44 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v45 - (_BYTE *)__p;
        if ((v45 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v45, v19);
          v15 = (char *)__p;
          v13 = v44;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v44 = (char *)v14;
        v45 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v44 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v44 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "Indices end must not be smaller than the indices begin.");
    v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v33 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v34 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v44;
LABEL_25:
  v41 = 0uLL;
  v42 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<unsigned char>::Zeros(&v41, (uint64_t)a3);
  if (v41.n128_u64[0])
  {
    v41.n128_u64[1] = v41.n128_u64[0];
    operator delete((void *)v41.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    if (v23 <= 1)
      v25 = 1;
    else
      v25 = a3[5] - a3[4];
    do
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v36, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 3);
      v26 = a1[2] - a1[1];
      if (v26)
      {
        v27 = v26 >> 3;
        v28 = *a2;
        v29 = v36;
        if (v27 <= 1)
          v27 = 1;
        do
        {
          v30 = *v28;
          v28 += 2;
          *v29++ += v30;
          --v27;
        }
        while (v27);
      }
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  if (__p)
  {
    v44 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06C9B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned char>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  size_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<unsigned char>::vector(&__p, v5);
  MIL::ValueInference::Tensor<unsigned char>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06C9C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  __n128 __p;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v28;
  *((_QWORD *)v28 + a2) = v7;
  v27 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v29, (v29 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<unsigned char>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if (v17 <= 1)
          v19 = 1;
        else
          v19 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
        do
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
          *((_QWORD *)v21 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          LOBYTE(v20) = *(_BYTE *)(*(_QWORD *)(v20 + 32)
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E06C9E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::runtime_error *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::runtime_error *exception;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  void *v43[3];
  __n128 __p;
  uint64_t v45;
  std::string v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"The number of tensors (", 23);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") is not the same as the number of blocks (", 43);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v46);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v48 = 0;
  v49 = 0;
  v47 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v46, 0, sizeof(v46));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v46, v47, (uint64_t)v48, (v48 - (_BYTE *)v47) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v46.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v46.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v45 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v46.__r_.__value_.__l.__size_, (uint64_t)(v46.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<unsigned char>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v48 - (_BYTE *)v47 || memcmp(v20, v47, v21))
      {
        v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        if (v22 <= 1)
          v24 = 1;
        else
          v24 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
        do
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 3);
          v25 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v25)
          {
            v26 = v25 >> 3;
            v27 = (uint64_t *)v47;
            v28 = (uint64_t *)v43[0];
            v29 = v38;
            if (v26 <= 1)
              v26 = 1;
            do
            {
              v31 = *v27++;
              v30 = v31;
              v32 = *v28++;
              *v29++ += v32 * v30;
              --v26;
            }
            while (v26);
          }
          v33 = *a1 + (i << 6);
          LOBYTE(v33) = *(_BYTE *)(*(_QWORD *)(v33 + 32)
          if (v38)
          {
            v39 = v38;
            operator delete(v38);
          }
          if (v41)
          {
            v42 = v41;
            operator delete(v41);
          }
          ++v23;
        }
        while (v23 != v24);
      }
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
    }
  }
  if (v46.__r_.__value_.__r.__words[0])
  {
    v46.__r_.__value_.__l.__size_ = v46.__r_.__value_.__r.__words[0];
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1E06CA248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<unsigned char>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  _QWORD *i;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type size;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  _QWORD *v89;
  _QWORD *v90;
  std::logic_error *exception;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v96;
  unint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  char v103;
  unint64_t v104;
  void *v105;
  char *v106;
  char *v107;
  void *v108;
  void *v109;
  void *v110[3];
  __n128 v111;
  uint64_t v112;
  void *v113;
  char *v114;
  char *v115;
  std::string v116;
  void *__p;
  char *v118;
  _QWORD v119[31];
  _QWORD v120[2];
  _QWORD *v121;

  v101 = a1[1];
  v102 = a1 + 1;
  v100 = a1[2];
  v6 = (v100 - v101) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v120, *a2, a2[1]);
  for (i = v121; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v89 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v90 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v116);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v118 = 0;
  v119[0] = 0;
  memset(&v116, 0, sizeof(v116));
  v113 = 0;
  v114 = 0;
  v115 = 0;
  if (v100 == v101)
  {
    v54 = 0;
    v53 = 0;
  }
  else
  {
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = (v100 - v101) >> 3;
    do
    {
      v110[0] = v8;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v120, (unint64_t *)v110))
      {
        if (a3)
        {
          v10 = v118;
          if ((unint64_t)v118 >= v119[0])
          {
            v21 = (char *)__p;
            v22 = (v118 - (_BYTE *)__p) >> 3;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v24 = v119[0] - (_QWORD)__p;
            if ((uint64_t)(v119[0] - (_QWORD)__p) >> 2 > v23)
              v23 = v24 >> 2;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v119, v25);
              v21 = (char *)__p;
              v10 = v118;
            }
            else
            {
              v26 = 0;
            }
            v40 = &v26[8 * v22];
            *(_QWORD *)v40 = 1;
            v11 = v40 + 8;
            while (v10 != v21)
            {
              v41 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            __p = v40;
            v118 = v11;
            v119[0] = &v26[8 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v118 = 1;
            v11 = v10 + 8;
          }
          v118 = v11;
        }
        v42 = *v102;
        v43 = v114;
        if (v114 >= v115)
        {
          v45 = (char *)v113;
          v46 = (v114 - (_BYTE *)v113) >> 3;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
LABEL_154:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v48 = v115 - (_BYTE *)v113;
          if ((v115 - (_BYTE *)v113) >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v115, v49);
            v45 = (char *)v113;
            v43 = v114;
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[8 * v46];
          *(_QWORD *)v51 = *(_QWORD *)(v42 + 8 * (_QWORD)v8);
          v44 = v51 + 8;
          while (v43 != v45)
          {
            v52 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *((_QWORD *)v51 - 1) = v52;
            v51 -= 8;
          }
          v113 = v51;
          v114 = v44;
          v115 = &v50[8 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_QWORD *)v114 = *(_QWORD *)(v42 + 8 * (_QWORD)v8);
          v44 = v43 + 8;
        }
        v114 = v44;
      }
      else
      {
        v12 = *v102;
        v13 = v118;
        if ((unint64_t)v118 >= v119[0])
        {
          v15 = (char *)__p;
          v16 = (v118 - (_BYTE *)__p) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            goto LABEL_154;
          v18 = v119[0] - (_QWORD)__p;
          if ((uint64_t)(v119[0] - (_QWORD)__p) >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v119, v19);
            v15 = (char *)__p;
            v13 = v118;
          }
          else
          {
            v20 = 0;
          }
          v27 = &v20[8 * v16];
          *(_QWORD *)v27 = *(_QWORD *)(v12 + 8 * (_QWORD)v8);
          v14 = v27 + 8;
          while (v13 != v15)
          {
            v28 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          __p = v27;
          v118 = v14;
          v119[0] = &v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v118 = *(_QWORD *)(v12 + 8 * (_QWORD)v8);
          v14 = v13 + 8;
        }
        v118 = v14;
        v29 = *v102;
        size = v116.__r_.__value_.__l.__size_;
        if (v116.__r_.__value_.__l.__size_ >= v116.__r_.__value_.__r.__words[2])
        {
          v32 = (void *)v116.__r_.__value_.__r.__words[0];
          v33 = (uint64_t)(v116.__r_.__value_.__l.__size_ - v116.__r_.__value_.__r.__words[0]) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_154;
          v35 = v116.__r_.__value_.__r.__words[2] - v116.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v116.__r_.__value_.__r.__words[2] - v116.__r_.__value_.__r.__words[0]) >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v116.__r_.__value_.__r.__words[2], v36);
            size = v116.__r_.__value_.__l.__size_;
            v32 = (void *)v116.__r_.__value_.__r.__words[0];
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = *(_QWORD *)(v29 + 8 * (_QWORD)v8);
          v31 = (std::string::size_type)(v38 + 8);
          while ((void *)size != v32)
          {
            v39 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          v116.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
          v116.__r_.__value_.__l.__size_ = v31;
          v116.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v116.__r_.__value_.__l.__size_ = *(_QWORD *)(v29 + 8 * (_QWORD)v8);
          v31 = size + 8;
        }
        v116.__r_.__value_.__l.__size_ = v31;
      }
      v8 = (char *)v8 + 1;
    }
    while (v8 != (void *)v9);
    v53 = __p;
    v54 = (uint64_t)v118;
  }
  v111 = 0uLL;
  v112 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v111, v53, v54, (v54 - (uint64_t)v53) >> 3);
  MIL::ValueInference::Tensor<unsigned char>::Zeros(&v111, a5);
  if (v111.n128_u64[0])
  {
    v111.n128_u64[1] = v111.n128_u64[0];
    operator delete((void *)v111.n128_u64[0]);
  }
  v94 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v94)
  {
    v55 = 0;
    v93 = a1[5] - a1[4];
    v56 = v93 / v94;
    v57 = (uint64_t **)(a5 + 8);
    if (v6 <= 1)
      v58 = 1;
    else
      v58 = (v100 - v101) >> 3;
    if (v94 <= 1)
      v59 = 1;
    else
      v59 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
    v92 = v59;
    if (v56 <= 1)
      v56 = 1;
    v98 = v56;
    do
    {
      v96 = v55;
      if (v94 <= v93)
      {
        v61 = 0;
        v60 = 0;
        v62 = 1;
        do
        {
          v103 = v60;
          v105 = 0;
          v106 = 0;
          v107 = 0;
          if (v100 != v101)
          {
            v63 = 0;
            v64 = 0;
            v65 = 0;
            do
            {
              v104 = v63;
              v66 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v120, &v104);
              v67 = v106;
              if (v66)
              {
                v68 = v108;
                if (v106 >= v107)
                {
                  v72 = (char *)v105;
                  v73 = (v106 - (_BYTE *)v105) >> 3;
                  v74 = v73 + 1;
                  if ((unint64_t)(v73 + 1) >> 61)
                    goto LABEL_152;
                  v75 = v107 - (_BYTE *)v105;
                  if ((v107 - (_BYTE *)v105) >> 2 > v74)
                    v74 = v75 >> 2;
                  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                    v76 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v76 = v74;
                  if (v76)
                  {
                    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v107, v76);
                    v72 = (char *)v105;
                    v67 = v106;
                  }
                  else
                  {
                    v77 = 0;
                  }
                  v84 = &v77[8 * v73];
                  *(_QWORD *)v84 = v68[v64];
                  v69 = v84 + 8;
                  while (v67 != v72)
                  {
                    v85 = *((_QWORD *)v67 - 1);
                    v67 -= 8;
                    *((_QWORD *)v84 - 1) = v85;
                    v84 -= 8;
                  }
                  v105 = v84;
                  v106 = v69;
                  v107 = &v77[8 * v76];
                  if (v72)
                    operator delete(v72);
                }
                else
                {
                  *(_QWORD *)v106 = *((_QWORD *)v108 + v64);
                  v69 = v67 + 8;
                }
                v106 = v69;
                ++v64;
              }
              else
              {
                v70 = v110[0];
                if (v106 >= v107)
                {
                  v78 = (char *)v105;
                  v79 = (v106 - (_BYTE *)v105) >> 3;
                  v80 = v79 + 1;
                  if ((unint64_t)(v79 + 1) >> 61)
LABEL_152:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v81 = v107 - (_BYTE *)v105;
                  if ((v107 - (_BYTE *)v105) >> 2 > v80)
                    v80 = v81 >> 2;
                  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                    v82 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v82 = v80;
                  if (v82)
                  {
                    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v107, v82);
                    v78 = (char *)v105;
                    v67 = v106;
                  }
                  else
                  {
                    v83 = 0;
                  }
                  v86 = &v83[8 * v79];
                  *(_QWORD *)v86 = v70[v65];
                  v71 = v86 + 8;
                  while (v67 != v78)
                  {
                    v87 = *((_QWORD *)v67 - 1);
                    v67 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v105 = v86;
                  v106 = v71;
                  v107 = &v83[8 * v82];
                  if (v78)
                    operator delete(v78);
                }
                else
                {
                  *(_QWORD *)v106 = *((_QWORD *)v110[0] + v65);
                  v71 = v67 + 8;
                }
                v106 = v71;
                ++v65;
              }
              ++v63;
            }
            while (v63 != v58);
          }
          if ((v62 & 1) == 0)
            v60 = std::function<unsigned char ()(unsigned char,unsigned char)>::operator()(a4, v103, v60);
          v57 = (uint64_t **)(a5 + 8);
          if (v105)
          {
            v106 = (char *)v105;
            operator delete(v105);
          }
          if (v108)
          {
            v109 = v108;
            operator delete(v108);
          }
          v62 = 0;
          ++v61;
        }
        while (v61 != v98);
      }
      else
      {
        v60 = 0;
      }
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      if (v110[0])
      {
        v110[1] = v110[0];
        operator delete(v110[0]);
      }
      v55 = v96 + 1;
    }
    while (v96 + 1 != v92);
  }
  if (v113)
  {
    v114 = (char *)v113;
    operator delete(v113);
  }
  if (v116.__r_.__value_.__r.__words[0])
  {
    v116.__r_.__value_.__l.__size_ = v116.__r_.__value_.__r.__words[0];
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v118 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v120);
}

void sub_1E06CAB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

uint64_t std::function<unsigned char ()(unsigned char,unsigned char)>::operator()(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  char v5;
  char v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void MIL::ValueInference::Tensor<unsigned char>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<unsigned char>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06CAD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  MIL::IRTensorValue::TryGetDataView<unsigned short>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(&__p, v13, (uint64_t)v13 + 2 * v14, v14);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06CAE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned short>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 15, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned short>,std::allocator<MIL::IRTypedTensorValue<unsigned short>>,MIL::IRTensorValueType const*&,std::vector<unsigned short>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06CAF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned short>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F248;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06CB090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<unsigned short>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F248;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t MIL::ValueInference::Tensor<unsigned short>::GetDataView(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
    return 0;
  else
    return *(_QWORD *)(a1 + 32);
}

unint64_t MIL::ValueInference::Tensor<unsigned short>::operator[](uint64_t a1, uint64_t *a2)
{
}

void MIL::ValueInference::Tensor<unsigned short>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  _WORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  __int16 v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1;
  __p.n128_u16[0] = 0;
  std::vector<unsigned short>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(__int16 **)(a1 + 32);
  v7 = *(__int16 **)(a1 + 40);
  v9 = (_WORD *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(uint64_t (**)(_BYTE *, __int16 *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06CB280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned short>::GetScalarData(_QWORD *a1)
{
  unsigned __int16 *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (unsigned __int16 *)a1[4], a1[5] - (_QWORD)v1 != 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06CB360(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned short>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 1);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06CB55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<unsigned short>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06CB66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned short>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  __int16 v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<unsigned short>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 1;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06CB9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned short>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<unsigned short>::vector(&__p, v5);
  MIL::ValueInference::Tensor<unsigned short>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06CBB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  __n128 __p;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v28;
  *((_QWORD *)v28 + a2) = v7;
  v27 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v29, (v29 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<unsigned short>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 1) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 1;
        do
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
          *((_QWORD *)v21 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          LOWORD(v20) = *(_WORD *)(*(_QWORD *)(v20 + 32)
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E06CBD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::runtime_error *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::runtime_error *exception;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  void *v44[3];
  __n128 __p;
  uint64_t v46;
  std::string v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"The number of tensors (", 23);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") is not the same as the number of blocks (", 43);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v47);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v49 = 0;
  v50 = 0;
  v48 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v47, 0, sizeof(v47));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v47.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v47.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v47.__r_.__value_.__l.__size_, (uint64_t)(v47.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<unsigned short>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v49 - (_BYTE *)v48 || memcmp(v20, v48, v21))
      {
        v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 1;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v39, v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v48;
            v29 = (uint64_t *)v44[0];
            v30 = v39;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          LOWORD(v34) = *(_WORD *)(*(_QWORD *)(v34 + 32)
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v39)
          {
            v40 = v39;
            operator delete(v39);
          }
          if (v42)
          {
            v43 = v42;
            operator delete(v42);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
    }
  }
  if (v47.__r_.__value_.__r.__words[0])
  {
    v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1E06CC0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<unsigned short>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char **v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  __int16 v105;
  unint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  void *v112[3];
  __n128 v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  std::string v118;
  void *__p;
  char *v120;
  _QWORD v121[31];
  _QWORD v122[2];
  _QWORD *v123;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v122, *a2, a2[1]);
  for (i = v123; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v118);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v120 = 0;
  v121[0] = 0;
  memset(&v118, 0, sizeof(v118));
  v115 = 0;
  v116 = 0;
  v117 = 0;
  if (v102 == v103)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    v5 = &v117;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v102 - v103) >> 3;
    do
    {
      v112[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, (unint64_t *)v112))
      {
        if (a3)
        {
          v11 = v120;
          if ((unint64_t)v120 >= v121[0])
          {
            v22 = (char *)__p;
            v23 = (v120 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v121[0] - (_QWORD)__p;
            if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v26);
              v22 = (char *)__p;
              v11 = v120;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v120 = v12;
            v121[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v120 = 1;
            v12 = v11 + 8;
          }
          v120 = v12;
        }
        v43 = *v104;
        v44 = v116;
        if (v116 >= v117)
        {
          v46 = (char *)v115;
          v47 = (v116 - (_BYTE *)v115) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_153:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v117 - (_BYTE *)v115;
          if ((v117 - (_BYTE *)v115) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v50);
            v46 = (char *)v115;
            v44 = v116;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v115 = v52;
          v116 = v45;
          v117 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v116 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v116 = v45;
      }
      else
      {
        v13 = *v104;
        v14 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          v16 = (char *)__p;
          v17 = (v120 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_153;
          v19 = v121[0] - (_QWORD)__p;
          if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v20);
            v16 = (char *)__p;
            v14 = v120;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v120 = v15;
          v121[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v120 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v120 = v15;
        v30 = *v104;
        size = v118.__r_.__value_.__l.__size_;
        if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v118.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_153;
          v36 = v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118.__r_.__value_.__r.__words[2], v37);
            size = v118.__r_.__value_.__l.__size_;
            v33 = (void *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v118.__r_.__value_.__l.__size_ = v32;
          v118.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v118.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v118.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v120;
  }
  v113 = 0uLL;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v113, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<unsigned short>::Zeros(&v113, a5);
  if (v113.n128_u64[0])
  {
    v113.n128_u64[1] = v113.n128_u64[0];
    operator delete((void *)v113.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 1;
    v95 = v56 >> 1;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 1;
    v59 = v96 / (v56 >> 1);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v102 - v103) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v94 = v62;
    if (v59 <= 1)
      v59 = 1;
    v100 = v59;
    do
    {
      v98 = v57;
      LOWORD(v5) = (unsigned __int16)v5 & 0xFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v105 = (__int16)v5;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          if (v102 != v103)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v106 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, &v106);
              v69 = v108;
              if (v68)
              {
                v70 = v110;
                if (v108 >= v109)
                {
                  v74 = (char *)v107;
                  v75 = (v108 - (_BYTE *)v107) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_151;
                  v77 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v78);
                    v74 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v107 = v86;
                  v108 = v71;
                  v109 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v110 + v66);
                  v71 = v69 + 8;
                }
                v108 = v71;
                ++v66;
              }
              else
              {
                v72 = v112[0];
                if (v108 >= v109)
                {
                  v80 = (char *)v107;
                  v81 = (v108 - (_BYTE *)v107) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_151:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v84);
                    v80 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v107 = v88;
                  v108 = v73;
                  v109 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v112[0] + v67);
                  v73 = v69 + 8;
                }
                v108 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v61);
          }
          if ((v64 & 1) == 0)
            LOWORD(v5) = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a4, v105, (__int16)v5);
          v60 = (uint64_t **)(a5 + 8);
          if (v107)
          {
            v108 = (char *)v107;
            operator delete(v107);
          }
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          v64 = 0;
          ++v63;
        }
        while (v63 != v100);
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      if (v112[0])
      {
        v112[1] = v112[0];
        operator delete(v112[0]);
      }
      v57 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118.__r_.__value_.__r.__words[0])
  {
    v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v122);
}

void sub_1E06CCA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

uint64_t std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v3;
  __int16 v5;
  __int16 v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, __int16 *, __int16 *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void MIL::ValueInference::Tensor<unsigned short>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<unsigned short>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06CCBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned int>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;

  MIL::IRTensorValue::TryGetDataView<unsigned int>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&__p, v13, (uint64_t)v13 + 4 * v14, v14);
  MIL::ValueInference::Tensor<unsigned int>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06CCD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned int>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 16, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned int>,std::allocator<MIL::IRTypedTensorValue<unsigned int>>,MIL::IRTensorValueType const*&,std::vector<unsigned int>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06CCE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned int>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F2C8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06CCF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<unsigned int>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F2C8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void MIL::ValueInference::Tensor<unsigned int>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<unsigned int>::size_type v6;
  int *v7;
  int *v8;
  std::vector<unsigned int>::pointer begin;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  std::vector<unsigned int> v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  __p.n128_u32[0] = 0;
  std::vector<unsigned int>::vector(&v14, v6, (const std::vector<unsigned int>::value_type *)&__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(int **)(a1 + 32);
  v7 = *(int **)(a1 + 40);
  begin = v14.__begin_;
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *begin++ = (*(uint64_t (**)(_BYTE *, int *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<unsigned int>::Tensor(a3, &__p, (__n128 *)&v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.__begin_)
  {
    v14.__end_ = v14.__begin_;
    operator delete(v14.__begin_);
  }
}

void sub_1E06CD0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned int>::GetScalarData(_QWORD *a1)
{
  unsigned int *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (unsigned int *)a1[4], a1[5] - (_QWORD)v1 != 4))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06CD1CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned int>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  MIL::ValueInference::Tensor<unsigned int>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06CD3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<unsigned int>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06CD4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned int>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<unsigned int>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 2;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06CD85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned int>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::vector<unsigned int>::size_type v5;
  uint64_t v6;
  std::vector<unsigned int> v7;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<unsigned int>::vector(&v7, v5);
  MIL::ValueInference::Tensor<unsigned int>::Tensor(a2, a1, (__n128 *)&v7);
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1E06CD96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned int>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  __n128 __p;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v28;
  *((_QWORD *)v28 + a2) = v7;
  v27 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v29, (v29 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<unsigned int>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 2) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 2;
        do
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
          *((_QWORD *)v21 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(v20 + 32)
          *(_DWORD *)(*(_QWORD *)(a3 + 32)
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E06CDB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned int>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::runtime_error *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::runtime_error *exception;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  void *v44[3];
  __n128 __p;
  uint64_t v46;
  std::string v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"The number of tensors (", 23);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") is not the same as the number of blocks (", 43);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v47);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v49 = 0;
  v50 = 0;
  v48 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v47, 0, sizeof(v47));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v47.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v47.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v47.__r_.__value_.__l.__size_, (uint64_t)(v47.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<unsigned int>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v49 - (_BYTE *)v48 || memcmp(v20, v48, v21))
      {
        v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 2;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v39, v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v48;
            v29 = (uint64_t *)v44[0];
            v30 = v39;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          LODWORD(v34) = *(_DWORD *)(*(_QWORD *)(v34 + 32)
          *(_DWORD *)(*(_QWORD *)(a3 + 32)
          if (v39)
          {
            v40 = v39;
            operator delete(v39);
          }
          if (v42)
          {
            v43 = v42;
            operator delete(v42);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
    }
  }
  if (v47.__r_.__value_.__r.__words[0])
  {
    v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1E06CDF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<unsigned int>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char **v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  unint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  void *v112[3];
  __n128 v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  std::string v118;
  void *__p;
  char *v120;
  _QWORD v121[31];
  _QWORD v122[2];
  _QWORD *v123;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v122, *a2, a2[1]);
  for (i = v123; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v118);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v120 = 0;
  v121[0] = 0;
  memset(&v118, 0, sizeof(v118));
  v115 = 0;
  v116 = 0;
  v117 = 0;
  if (v102 == v103)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    v5 = &v117;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v102 - v103) >> 3;
    do
    {
      v112[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, (unint64_t *)v112))
      {
        if (a3)
        {
          v11 = v120;
          if ((unint64_t)v120 >= v121[0])
          {
            v22 = (char *)__p;
            v23 = (v120 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v121[0] - (_QWORD)__p;
            if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v26);
              v22 = (char *)__p;
              v11 = v120;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v120 = v12;
            v121[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v120 = 1;
            v12 = v11 + 8;
          }
          v120 = v12;
        }
        v43 = *v104;
        v44 = v116;
        if (v116 >= v117)
        {
          v46 = (char *)v115;
          v47 = (v116 - (_BYTE *)v115) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_153:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v117 - (_BYTE *)v115;
          if ((v117 - (_BYTE *)v115) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v50);
            v46 = (char *)v115;
            v44 = v116;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v115 = v52;
          v116 = v45;
          v117 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v116 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v116 = v45;
      }
      else
      {
        v13 = *v104;
        v14 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          v16 = (char *)__p;
          v17 = (v120 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_153;
          v19 = v121[0] - (_QWORD)__p;
          if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v20);
            v16 = (char *)__p;
            v14 = v120;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v120 = v15;
          v121[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v120 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v120 = v15;
        v30 = *v104;
        size = v118.__r_.__value_.__l.__size_;
        if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v118.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_153;
          v36 = v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118.__r_.__value_.__r.__words[2], v37);
            size = v118.__r_.__value_.__l.__size_;
            v33 = (void *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v118.__r_.__value_.__l.__size_ = v32;
          v118.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v118.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v118.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v120;
  }
  v113 = 0uLL;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v113, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<unsigned int>::Zeros(&v113, a5);
  if (v113.n128_u64[0])
  {
    v113.n128_u64[1] = v113.n128_u64[0];
    operator delete((void *)v113.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 2;
    v95 = v56 >> 2;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 2;
    v59 = v96 / (v56 >> 2);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v102 - v103) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v94 = v62;
    if (v59 <= 1)
      v59 = 1;
    v100 = v59;
    do
    {
      v98 = v57;
      LODWORD(v5) = v5 & 0xFFFFFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v105 = (int)v5;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          if (v102 != v103)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v106 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, &v106);
              v69 = v108;
              if (v68)
              {
                v70 = v110;
                if (v108 >= v109)
                {
                  v74 = (char *)v107;
                  v75 = (v108 - (_BYTE *)v107) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_151;
                  v77 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v78);
                    v74 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v107 = v86;
                  v108 = v71;
                  v109 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v110 + v66);
                  v71 = v69 + 8;
                }
                v108 = v71;
                ++v66;
              }
              else
              {
                v72 = v112[0];
                if (v108 >= v109)
                {
                  v80 = (char *)v107;
                  v81 = (v108 - (_BYTE *)v107) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_151:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v84);
                    v80 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v107 = v88;
                  v108 = v73;
                  v109 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v112[0] + v67);
                  v73 = v69 + 8;
                }
                v108 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v61);
          }
          if ((v64 & 1) == 0)
            LODWORD(v5) = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, v105, (int)v5);
          v60 = (uint64_t **)(a5 + 8);
          if (v107)
          {
            v108 = (char *)v107;
            operator delete(v107);
          }
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          v64 = 0;
          ++v63;
        }
        while (v63 != v100);
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      if (v112[0])
      {
        v112[1] = v112[0];
        operator delete(v112[0]);
      }
      v57 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118.__r_.__value_.__r.__words[0])
  {
    v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v122);
}

void sub_1E06CE880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

uint64_t std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void MIL::ValueInference::Tensor<unsigned int>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<unsigned int>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06CEA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned long long>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;

  MIL::IRTensorValue::TryGetDataView<unsigned long long>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(&__p, v13, (uint64_t)v13 + 8 * v14, v14);
  MIL::ValueInference::Tensor<unsigned long long>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06CEB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned long long>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 17, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned long long>,std::allocator<MIL::IRTypedTensorValue<unsigned long long>>,MIL::IRTensorValueType const*&,std::vector<unsigned long long>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06CEC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned long long>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F2E8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06CEDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<unsigned long long>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F2E8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void MIL::ValueInference::Tensor<unsigned long long>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
  __p.n128_u64[0] = 0;
  std::vector<unsigned long long>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(uint64_t **)(a1 + 32);
  v7 = *(uint64_t **)(a1 + 40);
  v9 = (_QWORD *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<unsigned long long>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06CEF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<unsigned long long>::GetScalarData(_QWORD *a1)
{
  uint64_t v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = a1[4], a1[5] - v1 != 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *(_QWORD *)v1;
}

void sub_1E06CF038(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned long long>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 3);
  MIL::ValueInference::Tensor<unsigned long long>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06CF234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<unsigned long long>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06CF344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned long long>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<unsigned long long>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 3;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06CF6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<unsigned long long>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<unsigned long long>::vector(&__p, v5);
  MIL::ValueInference::Tensor<unsigned long long>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06CF7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned long long>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  __n128 __p;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v30 = 0;
  v31 = 0;
  v29 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v29, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v29;
  *((_QWORD *)v29 + a2) = v7;
  v28 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v30, (v30 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<unsigned long long>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 3) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 3;
        do
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 3);
          *((_QWORD *)v22 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          v21 = *(_QWORD *)(*(_QWORD *)(v20 + 32)
          *(_QWORD *)(*(_QWORD *)(a3 + 32)
          if (v22)
          {
            v23 = v22;
            operator delete(v22);
          }
          if (v25)
          {
            v26 = v25;
            operator delete(v25);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_1E06CF9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned long long>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::runtime_error *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::runtime_error *exception;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *v45[3];
  __n128 __p;
  uint64_t v47;
  std::string v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"The number of tensors (", 23);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") is not the same as the number of blocks (", 43);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v48);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v50 = 0;
  v51 = 0;
  v49 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v49, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v48, 0, sizeof(v48));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v48.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v48.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v47 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v48.__r_.__value_.__l.__size_, (uint64_t)(v48.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<unsigned long long>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v50 - (_BYTE *)v49 || memcmp(v20, v49, v21))
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 3;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v49;
            v29 = (uint64_t *)v45[0];
            v30 = v40;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          v35 = *(_QWORD *)(*(_QWORD *)(v34 + 32)
          *(_QWORD *)(*(_QWORD *)(a3 + 32)
          if (v40)
          {
            v41 = v40;
            operator delete(v40);
          }
          if (v43)
          {
            v44 = v43;
            operator delete(v43);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
    }
  }
  if (v48.__r_.__value_.__r.__words[0])
  {
    v48.__r_.__value_.__l.__size_ = v48.__r_.__value_.__r.__words[0];
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1E06CFDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<unsigned long long>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  void *v112[3];
  __n128 v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  std::string v118;
  void *__p;
  char *v120;
  _QWORD v121[31];
  _QWORD v122[2];
  _QWORD *v123;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v122, *a2, a2[1]);
  for (i = v123; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v118);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v120 = 0;
  v121[0] = 0;
  memset(&v118, 0, sizeof(v118));
  v115 = 0;
  v116 = 0;
  v117 = 0;
  if (v102 == v103)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    v5 = (uint64_t)&v117;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v102 - v103) >> 3;
    do
    {
      v112[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, (unint64_t *)v112))
      {
        if (a3)
        {
          v11 = v120;
          if ((unint64_t)v120 >= v121[0])
          {
            v22 = (char *)__p;
            v23 = (v120 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v121[0] - (_QWORD)__p;
            if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v26);
              v22 = (char *)__p;
              v11 = v120;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v120 = v12;
            v121[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v120 = 1;
            v12 = v11 + 8;
          }
          v120 = v12;
        }
        v43 = *v104;
        v44 = v116;
        if (v116 >= v117)
        {
          v46 = (char *)v115;
          v47 = (v116 - (_BYTE *)v115) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_153:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v117 - (_BYTE *)v115;
          if ((v117 - (_BYTE *)v115) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v50);
            v46 = (char *)v115;
            v44 = v116;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v115 = v52;
          v116 = v45;
          v117 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v116 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v116 = v45;
      }
      else
      {
        v13 = *v104;
        v14 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          v16 = (char *)__p;
          v17 = (v120 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_153;
          v19 = v121[0] - (_QWORD)__p;
          if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v20);
            v16 = (char *)__p;
            v14 = v120;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v120 = v15;
          v121[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v120 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v120 = v15;
        v30 = *v104;
        size = v118.__r_.__value_.__l.__size_;
        if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v118.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_153;
          v36 = v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118.__r_.__value_.__r.__words[2], v37);
            size = v118.__r_.__value_.__l.__size_;
            v33 = (void *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v118.__r_.__value_.__l.__size_ = v32;
          v118.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v118.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v118.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v120;
  }
  v113 = 0uLL;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v113, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<unsigned long long>::Zeros(&v113, a5);
  if (v113.n128_u64[0])
  {
    v113.n128_u64[1] = v113.n128_u64[0];
    operator delete((void *)v113.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 3;
    v95 = v56 >> 3;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 3;
    v59 = v96 / (v56 >> 3);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v102 - v103) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v94 = v62;
    if (v59 <= 1)
      v59 = 1;
    v100 = v59;
    do
    {
      v98 = v57;
      v5 &= 0xFFFFFFFFFFFFFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v105 = v5;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          if (v102 != v103)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v106 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, &v106);
              v69 = v108;
              if (v68)
              {
                v70 = v110;
                if (v108 >= v109)
                {
                  v74 = (char *)v107;
                  v75 = (v108 - (_BYTE *)v107) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_151;
                  v77 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v78);
                    v74 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v107 = v86;
                  v108 = v71;
                  v109 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v110 + v66);
                  v71 = v69 + 8;
                }
                v108 = v71;
                ++v66;
              }
              else
              {
                v72 = v112[0];
                if (v108 >= v109)
                {
                  v80 = (char *)v107;
                  v81 = (v108 - (_BYTE *)v107) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_151:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v84);
                    v80 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v107 = v88;
                  v108 = v73;
                  v109 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v112[0] + v67);
                  v73 = v69 + 8;
                }
                v108 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v61);
          }
          if ((v64 & 1) == 0)
            v5 = std::function<unsigned long long ()(unsigned long long,unsigned long long)>::operator()(a4, v105, v5);
          v60 = (uint64_t **)(a5 + 8);
          if (v107)
          {
            v108 = (char *)v107;
            operator delete(v107);
          }
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          v64 = 0;
          ++v63;
        }
        while (v63 != v100);
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      if (v112[0])
      {
        v112[1] = v112[0];
        operator delete(v112[0]);
      }
      v57 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118.__r_.__value_.__r.__words[0])
  {
    v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v122);
}

void sub_1E06D06EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

uint64_t std::function<unsigned long long ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void MIL::ValueInference::Tensor<unsigned long long>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<unsigned long long>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06D08B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  size_t v14;

  MIL::IRTensorValue::TryGetDataView<signed char>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(&__p, v13, (uint64_t)v13 + v14, v14);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06D09F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<signed char>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 9, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<signed char>,std::allocator<MIL::IRTypedTensorValue<signed char>>,MIL::IRTensorValueType const*&,std::vector<signed char>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06D0AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<signed char>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99BCA0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != v11 - v10)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06D0C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<signed char>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99BCA0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void MIL::ValueInference::Tensor<signed char>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  char v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  __p.n128_u8[0] = 0;
  std::vector<signed char>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(char **)(a1 + 32);
  v7 = *(char **)(a1 + 40);
  v9 = (_BYTE *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(uint64_t (**)(_BYTE *, char *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<signed char>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06D0DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<signed char>::GetScalarData(_QWORD *a1)
{
  char *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (char *)a1[4], a1[5] - (_QWORD)v1 != 1))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06D0E94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<signed char>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(&__p, v11, v12, v12 - (_QWORD)v11);
  MIL::ValueInference::Tensor<signed char>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06D108C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<signed char>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06D119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<signed char>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  std::logic_error *v32;
  void (*v33)(void *);
  struct type_info *v34;
  std::logic_error *exception;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  __n128 v41;
  uint64_t v42;
  void *__p;
  char *v44;
  char *v45;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v32, "Indices end is out of the bound for the tensor dimension.");
        v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v33 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v34 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v32, v34, v33);
      }
      v13 = v44;
      if (v44 >= v45)
      {
        v15 = (char *)__p;
        v16 = (v44 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v45 - (_BYTE *)__p;
        if ((v45 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v45, v19);
          v15 = (char *)__p;
          v13 = v44;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v44 = (char *)v14;
        v45 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v44 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v44 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "Indices end must not be smaller than the indices begin.");
    v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v33 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v34 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v44;
LABEL_25:
  v41 = 0uLL;
  v42 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<signed char>::Zeros(&v41, (uint64_t)a3);
  if (v41.n128_u64[0])
  {
    v41.n128_u64[1] = v41.n128_u64[0];
    operator delete((void *)v41.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    if (v23 <= 1)
      v25 = 1;
    else
      v25 = a3[5] - a3[4];
    do
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v36, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 3);
      v26 = a1[2] - a1[1];
      if (v26)
      {
        v27 = v26 >> 3;
        v28 = *a2;
        v29 = v36;
        if (v27 <= 1)
          v27 = 1;
        do
        {
          v30 = *v28;
          v28 += 2;
          *v29++ += v30;
          --v27;
        }
        while (v27);
      }
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  if (__p)
  {
    v44 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06D151C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<signed char>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  size_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<signed char>::vector(&__p, v5);
  MIL::ValueInference::Tensor<signed char>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06D162C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  __n128 __p;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v28;
  *((_QWORD *)v28 + a2) = v7;
  v27 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v29, (v29 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<signed char>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if (v17 <= 1)
          v19 = 1;
        else
          v19 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
        do
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
          *((_QWORD *)v21 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          LOBYTE(v20) = *(_BYTE *)(*(_QWORD *)(v20 + 32)
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E06D182C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::runtime_error *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::runtime_error *exception;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  void *v43[3];
  __n128 __p;
  uint64_t v45;
  std::string v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"The number of tensors (", 23);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") is not the same as the number of blocks (", 43);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v46);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v48 = 0;
  v49 = 0;
  v47 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v46, 0, sizeof(v46));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v46, v47, (uint64_t)v48, (v48 - (_BYTE *)v47) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v46.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v46.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v45 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v46.__r_.__value_.__l.__size_, (uint64_t)(v46.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<signed char>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v48 - (_BYTE *)v47 || memcmp(v20, v47, v21))
      {
        v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        if (v22 <= 1)
          v24 = 1;
        else
          v24 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
        do
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 3);
          v25 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v25)
          {
            v26 = v25 >> 3;
            v27 = (uint64_t *)v47;
            v28 = (uint64_t *)v43[0];
            v29 = v38;
            if (v26 <= 1)
              v26 = 1;
            do
            {
              v31 = *v27++;
              v30 = v31;
              v32 = *v28++;
              *v29++ += v32 * v30;
              --v26;
            }
            while (v26);
          }
          v33 = *a1 + (i << 6);
          LOBYTE(v33) = *(_BYTE *)(*(_QWORD *)(v33 + 32)
          if (v38)
          {
            v39 = v38;
            operator delete(v38);
          }
          if (v41)
          {
            v42 = v41;
            operator delete(v41);
          }
          ++v23;
        }
        while (v23 != v24);
      }
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
    }
  }
  if (v46.__r_.__value_.__r.__words[0])
  {
    v46.__r_.__value_.__l.__size_ = v46.__r_.__value_.__r.__words[0];
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1E06D1C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<signed char>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  _QWORD *i;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type size;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  _QWORD *v89;
  _QWORD *v90;
  std::logic_error *exception;
  uint64_t v92;
  uint64_t **v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v97;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  char v104;
  unint64_t v105;
  void *v106;
  char *v107;
  char *v108;
  void *v109;
  void *v110;
  void *v111[3];
  __n128 v112;
  uint64_t v113;
  void *v114;
  char *v115;
  char *v116;
  std::string v117;
  void *__p;
  char *v119;
  _QWORD v120[31];
  _QWORD v121[2];
  _QWORD *v122;

  v102 = a1[1];
  v103 = a1 + 1;
  v101 = a1[2];
  v6 = (v101 - v102) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v121, *a2, a2[1]);
  for (i = v122; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v89 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v90 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v117);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v119 = 0;
  v120[0] = 0;
  memset(&v117, 0, sizeof(v117));
  v114 = 0;
  v115 = 0;
  v116 = 0;
  if (v101 == v102)
  {
    v54 = 0;
    v53 = 0;
  }
  else
  {
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = (v101 - v102) >> 3;
    do
    {
      v111[0] = v8;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v121, (unint64_t *)v111))
      {
        if (a3)
        {
          v10 = v119;
          if ((unint64_t)v119 >= v120[0])
          {
            v21 = (char *)__p;
            v22 = (v119 - (_BYTE *)__p) >> 3;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v24 = v120[0] - (_QWORD)__p;
            if ((uint64_t)(v120[0] - (_QWORD)__p) >> 2 > v23)
              v23 = v24 >> 2;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v120, v25);
              v21 = (char *)__p;
              v10 = v119;
            }
            else
            {
              v26 = 0;
            }
            v40 = &v26[8 * v22];
            *(_QWORD *)v40 = 1;
            v11 = v40 + 8;
            while (v10 != v21)
            {
              v41 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            __p = v40;
            v119 = v11;
            v120[0] = &v26[8 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v119 = 1;
            v11 = v10 + 8;
          }
          v119 = v11;
        }
        v42 = *v103;
        v43 = v115;
        if (v115 >= v116)
        {
          v45 = (char *)v114;
          v46 = (v115 - (_BYTE *)v114) >> 3;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
LABEL_154:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v48 = v116 - (_BYTE *)v114;
          if ((v116 - (_BYTE *)v114) >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v116, v49);
            v45 = (char *)v114;
            v43 = v115;
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[8 * v46];
          *(_QWORD *)v51 = *(_QWORD *)(v42 + 8 * (_QWORD)v8);
          v44 = v51 + 8;
          while (v43 != v45)
          {
            v52 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *((_QWORD *)v51 - 1) = v52;
            v51 -= 8;
          }
          v114 = v51;
          v115 = v44;
          v116 = &v50[8 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_QWORD *)v115 = *(_QWORD *)(v42 + 8 * (_QWORD)v8);
          v44 = v43 + 8;
        }
        v115 = v44;
      }
      else
      {
        v12 = *v103;
        v13 = v119;
        if ((unint64_t)v119 >= v120[0])
        {
          v15 = (char *)__p;
          v16 = (v119 - (_BYTE *)__p) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            goto LABEL_154;
          v18 = v120[0] - (_QWORD)__p;
          if ((uint64_t)(v120[0] - (_QWORD)__p) >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v120, v19);
            v15 = (char *)__p;
            v13 = v119;
          }
          else
          {
            v20 = 0;
          }
          v27 = &v20[8 * v16];
          *(_QWORD *)v27 = *(_QWORD *)(v12 + 8 * (_QWORD)v8);
          v14 = v27 + 8;
          while (v13 != v15)
          {
            v28 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          __p = v27;
          v119 = v14;
          v120[0] = &v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v119 = *(_QWORD *)(v12 + 8 * (_QWORD)v8);
          v14 = v13 + 8;
        }
        v119 = v14;
        v29 = *v103;
        size = v117.__r_.__value_.__l.__size_;
        if (v117.__r_.__value_.__l.__size_ >= v117.__r_.__value_.__r.__words[2])
        {
          v32 = (void *)v117.__r_.__value_.__r.__words[0];
          v33 = (uint64_t)(v117.__r_.__value_.__l.__size_ - v117.__r_.__value_.__r.__words[0]) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_154;
          v35 = v117.__r_.__value_.__r.__words[2] - v117.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v117.__r_.__value_.__r.__words[2] - v117.__r_.__value_.__r.__words[0]) >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117.__r_.__value_.__r.__words[2], v36);
            size = v117.__r_.__value_.__l.__size_;
            v32 = (void *)v117.__r_.__value_.__r.__words[0];
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = *(_QWORD *)(v29 + 8 * (_QWORD)v8);
          v31 = (std::string::size_type)(v38 + 8);
          while ((void *)size != v32)
          {
            v39 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
          v117.__r_.__value_.__l.__size_ = v31;
          v117.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v117.__r_.__value_.__l.__size_ = *(_QWORD *)(v29 + 8 * (_QWORD)v8);
          v31 = size + 8;
        }
        v117.__r_.__value_.__l.__size_ = v31;
      }
      v8 = (char *)v8 + 1;
    }
    while (v8 != (void *)v9);
    v53 = __p;
    v54 = (uint64_t)v119;
  }
  v112 = 0uLL;
  v113 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v112, v53, v54, (v54 - (uint64_t)v53) >> 3);
  MIL::ValueInference::Tensor<signed char>::Zeros(&v112, a5);
  if (v112.n128_u64[0])
  {
    v112.n128_u64[1] = v112.n128_u64[0];
    operator delete((void *)v112.n128_u64[0]);
  }
  v95 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v95)
  {
    v55 = 0;
    v94 = a1[5] - a1[4];
    v56 = v94 / v95;
    if (v6 <= 1)
      v57 = 1;
    else
      v57 = (v101 - v102) >> 3;
    if (v95 <= 1)
      v58 = 1;
    else
      v58 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
    v92 = v58;
    v93 = (uint64_t **)(a5 + 8);
    if (v56 <= 1)
      v56 = 1;
    v99 = v56;
    do
    {
      v97 = v55;
      if (v95 <= v94)
      {
        v60 = 0;
        v61 = 0;
        v62 = 1;
        do
        {
          v104 = v61;
          v106 = 0;
          v107 = 0;
          v108 = 0;
          if (v101 != v102)
          {
            v63 = 0;
            v64 = 0;
            v65 = 0;
            do
            {
              v105 = v63;
              v66 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v121, &v105);
              v67 = v107;
              if (v66)
              {
                v68 = v109;
                if (v107 >= v108)
                {
                  v72 = (char *)v106;
                  v73 = (v107 - (_BYTE *)v106) >> 3;
                  v74 = v73 + 1;
                  if ((unint64_t)(v73 + 1) >> 61)
                    goto LABEL_152;
                  v75 = v108 - (_BYTE *)v106;
                  if ((v108 - (_BYTE *)v106) >> 2 > v74)
                    v74 = v75 >> 2;
                  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                    v76 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v76 = v74;
                  if (v76)
                  {
                    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v108, v76);
                    v72 = (char *)v106;
                    v67 = v107;
                  }
                  else
                  {
                    v77 = 0;
                  }
                  v84 = &v77[8 * v73];
                  *(_QWORD *)v84 = v68[v64];
                  v69 = v84 + 8;
                  while (v67 != v72)
                  {
                    v85 = *((_QWORD *)v67 - 1);
                    v67 -= 8;
                    *((_QWORD *)v84 - 1) = v85;
                    v84 -= 8;
                  }
                  v106 = v84;
                  v107 = v69;
                  v108 = &v77[8 * v76];
                  if (v72)
                    operator delete(v72);
                }
                else
                {
                  *(_QWORD *)v107 = *((_QWORD *)v109 + v64);
                  v69 = v67 + 8;
                }
                v107 = v69;
                ++v64;
              }
              else
              {
                v70 = v111[0];
                if (v107 >= v108)
                {
                  v78 = (char *)v106;
                  v79 = (v107 - (_BYTE *)v106) >> 3;
                  v80 = v79 + 1;
                  if ((unint64_t)(v79 + 1) >> 61)
LABEL_152:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v81 = v108 - (_BYTE *)v106;
                  if ((v108 - (_BYTE *)v106) >> 2 > v80)
                    v80 = v81 >> 2;
                  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                    v82 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v82 = v80;
                  if (v82)
                  {
                    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v108, v82);
                    v78 = (char *)v106;
                    v67 = v107;
                  }
                  else
                  {
                    v83 = 0;
                  }
                  v86 = &v83[8 * v79];
                  *(_QWORD *)v86 = v70[v65];
                  v71 = v86 + 8;
                  while (v67 != v78)
                  {
                    v87 = *((_QWORD *)v67 - 1);
                    v67 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v106 = v86;
                  v107 = v71;
                  v108 = &v83[8 * v82];
                  if (v78)
                    operator delete(v78);
                }
                else
                {
                  *(_QWORD *)v107 = *((_QWORD *)v111[0] + v65);
                  v71 = v67 + 8;
                }
                v107 = v71;
                ++v65;
              }
              ++v63;
            }
            while (v63 != v57);
          }
          if ((v62 & 1) == 0)
            v59 = std::function<unsigned char ()(unsigned char,unsigned char)>::operator()(a4, v104, v59);
          if (v106)
          {
            v107 = (char *)v106;
            operator delete(v106);
          }
          if (v109)
          {
            v110 = v109;
            operator delete(v109);
          }
          v62 = 0;
          ++v60;
          v61 = v59;
        }
        while (v60 != v99);
      }
      else
      {
        v59 = 0;
      }
      if (v109)
      {
        v110 = v109;
        operator delete(v109);
      }
      if (v111[0])
      {
        v111[1] = v111[0];
        operator delete(v111[0]);
      }
      v55 = v97 + 1;
    }
    while (v97 + 1 != v92);
  }
  if (v114)
  {
    v115 = (char *)v114;
    operator delete(v114);
  }
  if (v117.__r_.__value_.__r.__words[0])
  {
    v117.__r_.__value_.__l.__size_ = v117.__r_.__value_.__r.__words[0];
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v119 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v121);
}

void sub_1E06D2548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<signed char>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<signed char>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06D26D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  MIL::IRTensorValue::TryGetDataView<short>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<short>::__init_with_size[abi:ne180100]<short const*,short const*>(&__p, v13, (uint64_t)v13 + 2 * v14, v14);
  MIL::ValueInference::Tensor<short>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06D2818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<short>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 10, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<short>,std::allocator<MIL::IRTypedTensorValue<short>>,MIL::IRTensorValueType const*&,std::vector<short>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06D291C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<short>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F278;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06D2A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<short>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F278;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void MIL::ValueInference::Tensor<short>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  _WORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  __int16 v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1;
  __p.n128_u16[0] = 0;
  std::vector<short>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(__int16 **)(a1 + 32);
  v7 = *(__int16 **)(a1 + 40);
  v9 = (_WORD *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(uint64_t (**)(_BYTE *, __int16 *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<short>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06D2BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<short>::GetScalarData(_QWORD *a1)
{
  __int16 *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (__int16 *)a1[4], a1[5] - (_QWORD)v1 != 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06D2CBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<short>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 1);
  MIL::ValueInference::Tensor<short>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06D2EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<short>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06D2FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<short>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  __int16 v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<short>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 1;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06D334C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<short>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<short>::vector(&__p, v5);
  MIL::ValueInference::Tensor<short>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06D345C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  __n128 __p;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v28;
  *((_QWORD *)v28 + a2) = v7;
  v27 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v29, (v29 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<short>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 1) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 1;
        do
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
          *((_QWORD *)v21 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          LOWORD(v20) = *(_WORD *)(*(_QWORD *)(v20 + 32)
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E06D3660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::runtime_error *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::runtime_error *exception;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  void *v44[3];
  __n128 __p;
  uint64_t v46;
  std::string v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"The number of tensors (", 23);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") is not the same as the number of blocks (", 43);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v47);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v49 = 0;
  v50 = 0;
  v48 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v47, 0, sizeof(v47));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v47.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v47.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v47.__r_.__value_.__l.__size_, (uint64_t)(v47.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<short>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v49 - (_BYTE *)v48 || memcmp(v20, v48, v21))
      {
        v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 1;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v39, v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v48;
            v29 = (uint64_t *)v44[0];
            v30 = v39;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          LOWORD(v34) = *(_WORD *)(*(_QWORD *)(v34 + 32)
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v39)
          {
            v40 = v39;
            operator delete(v39);
          }
          if (v42)
          {
            v43 = v42;
            operator delete(v42);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
    }
  }
  if (v47.__r_.__value_.__r.__words[0])
  {
    v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1E06D3A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<short>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v5;
  unint64_t v7;
  _QWORD *i;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type size;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t **v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  __int16 v105;
  unint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  void *v112[3];
  __n128 v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  std::string v118;
  void *__p;
  char *v120;
  _QWORD v121[31];
  _QWORD v122[2];
  _QWORD *v123;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v122, *a2, a2[1]);
  for (i = v123; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v118);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v120 = 0;
  v121[0] = 0;
  memset(&v118, 0, sizeof(v118));
  v115 = 0;
  v116 = 0;
  v117 = 0;
  if (v102 == v103)
  {
    v54 = 0;
    v53 = 0;
  }
  else
  {
    v5 = 0;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = (v102 - v103) >> 3;
    do
    {
      v112[0] = v5;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, (unint64_t *)v112))
      {
        if (a3)
        {
          v10 = v120;
          if ((unint64_t)v120 >= v121[0])
          {
            v21 = (char *)__p;
            v22 = (v120 - (_BYTE *)__p) >> 3;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v24 = v121[0] - (_QWORD)__p;
            if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v23)
              v23 = v24 >> 2;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v25);
              v21 = (char *)__p;
              v10 = v120;
            }
            else
            {
              v26 = 0;
            }
            v40 = &v26[8 * v22];
            *(_QWORD *)v40 = 1;
            v11 = v40 + 8;
            while (v10 != v21)
            {
              v41 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            __p = v40;
            v120 = v11;
            v121[0] = &v26[8 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v120 = 1;
            v11 = v10 + 8;
          }
          v120 = v11;
        }
        v42 = *v104;
        v43 = v116;
        if (v116 >= v117)
        {
          v45 = (char *)v115;
          v46 = (v116 - (_BYTE *)v115) >> 3;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
LABEL_154:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v48 = v117 - (_BYTE *)v115;
          if ((v117 - (_BYTE *)v115) >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v49);
            v45 = (char *)v115;
            v43 = v116;
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[8 * v46];
          *(_QWORD *)v51 = *(_QWORD *)(v42 + 8 * (_QWORD)v5);
          v44 = v51 + 8;
          while (v43 != v45)
          {
            v52 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *((_QWORD *)v51 - 1) = v52;
            v51 -= 8;
          }
          v115 = v51;
          v116 = v44;
          v117 = &v50[8 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_QWORD *)v116 = *(_QWORD *)(v42 + 8 * (_QWORD)v5);
          v44 = v43 + 8;
        }
        v116 = v44;
      }
      else
      {
        v12 = *v104;
        v13 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          v15 = (char *)__p;
          v16 = (v120 - (_BYTE *)__p) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            goto LABEL_154;
          v18 = v121[0] - (_QWORD)__p;
          if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v19);
            v15 = (char *)__p;
            v13 = v120;
          }
          else
          {
            v20 = 0;
          }
          v27 = &v20[8 * v16];
          *(_QWORD *)v27 = *(_QWORD *)(v12 + 8 * (_QWORD)v5);
          v14 = v27 + 8;
          while (v13 != v15)
          {
            v28 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          __p = v27;
          v120 = v14;
          v121[0] = &v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v120 = *(_QWORD *)(v12 + 8 * (_QWORD)v5);
          v14 = v13 + 8;
        }
        v120 = v14;
        v29 = *v104;
        size = v118.__r_.__value_.__l.__size_;
        if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
        {
          v32 = (void *)v118.__r_.__value_.__r.__words[0];
          v33 = (uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_154;
          v35 = v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0]) >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118.__r_.__value_.__r.__words[2], v36);
            size = v118.__r_.__value_.__l.__size_;
            v32 = (void *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = *(_QWORD *)(v29 + 8 * (_QWORD)v5);
          v31 = (std::string::size_type)(v38 + 8);
          while ((void *)size != v32)
          {
            v39 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
          v118.__r_.__value_.__l.__size_ = v31;
          v118.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v118.__r_.__value_.__l.__size_ = *(_QWORD *)(v29 + 8 * (_QWORD)v5);
          v31 = size + 8;
        }
        v118.__r_.__value_.__l.__size_ = v31;
      }
      v5 = (char *)v5 + 1;
    }
    while (v5 != (void *)v9);
    v53 = __p;
    v54 = (uint64_t)v120;
  }
  v113 = 0uLL;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v113, v53, v54, (v54 - (uint64_t)v53) >> 3);
  MIL::ValueInference::Tensor<short>::Zeros(&v113, a5);
  if (v113.n128_u64[0])
  {
    v113.n128_u64[1] = v113.n128_u64[0];
    operator delete((void *)v113.n128_u64[0]);
  }
  v55 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v55)
  {
    v56 = 0;
    v57 = v55 >> 1;
    v95 = v55 >> 1;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 1;
    v58 = v96 / (v55 >> 1);
    v59 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v60 = 1;
    else
      v60 = (v102 - v103) >> 3;
    if (v57 <= 1)
      v61 = 1;
    else
      v61 = v57;
    v94 = v61;
    if (v58 <= 1)
      v58 = 1;
    v100 = v58;
    do
    {
      v98 = v56;
      v62 = (unsigned __int16)v5 & 0xFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v105 = v62;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          if (v102 != v103)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v106 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, &v106);
              v69 = v108;
              if (v68)
              {
                v70 = v110;
                if (v108 >= v109)
                {
                  v74 = (char *)v107;
                  v75 = (v108 - (_BYTE *)v107) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_152;
                  v77 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v78);
                    v74 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v107 = v86;
                  v108 = v71;
                  v109 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v110 + v66);
                  v71 = v69 + 8;
                }
                v108 = v71;
                ++v66;
              }
              else
              {
                v72 = v112[0];
                if (v108 >= v109)
                {
                  v80 = (char *)v107;
                  v81 = (v108 - (_BYTE *)v107) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_152:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v84);
                    v80 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v107 = v88;
                  v108 = v73;
                  v109 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v112[0] + v67);
                  v73 = v69 + 8;
                }
                v108 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v60);
          }
          v59 = (uint64_t **)(a5 + 8);
          if ((v64 & 1) == 0)
            LOWORD(v5) = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a4, v105, (__int16)v5);
          if (v107)
          {
            v108 = (char *)v107;
            operator delete(v107);
          }
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          v64 = 0;
          ++v63;
          v62 = (__int16)v5;
        }
        while (v63 != v100);
      }
      else
      {
        LOWORD(v5) = (unsigned __int16)v5 & 0xFF00;
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      if (v112[0])
      {
        v112[1] = v112[0];
        operator delete(v112[0]);
      }
      v56 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118.__r_.__value_.__r.__words[0])
  {
    v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v122);
}

void sub_1E06D4378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<short>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<short>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06D4508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;

  MIL::IRTensorValue::TryGetDataView<int>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, v13, (uint64_t)v13 + 4 * v14, v14);
  MIL::ValueInference::Tensor<int>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06D4648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<int>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 11, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<int>,std::allocator<MIL::IRTypedTensorValue<int>>,MIL::IRTensorValueType const*&,std::vector<int>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06D474C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<int>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F1E8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06D485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<int>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F1E8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void MIL::ValueInference::Tensor<int>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<int>::size_type v6;
  int *v7;
  int *v8;
  std::vector<int>::pointer begin;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  std::vector<int> v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
  __p.n128_u32[0] = 0;
  std::vector<int>::vector(&v14, v6, (const std::vector<int>::value_type *)&__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(int **)(a1 + 32);
  v7 = *(int **)(a1 + 40);
  begin = v14.__begin_;
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *begin++ = (*(uint64_t (**)(_BYTE *, int *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<int>::Tensor(a3, &__p, (__n128 *)&v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.__begin_)
  {
    v14.__end_ = v14.__begin_;
    operator delete(v14.__begin_);
  }
}

void sub_1E06D4A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<int>::GetScalarData(_QWORD *a1)
{
  unsigned int *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (unsigned int *)a1[4], a1[5] - (_QWORD)v1 != 4))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06D4AEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<int>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 2);
  MIL::ValueInference::Tensor<int>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06D4CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<int>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06D4DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<int>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<int>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 2;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06D517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<int>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  uint64_t v6;
  std::vector<int> v7;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<int>::vector(&v7, v5);
  MIL::ValueInference::Tensor<int>::Tensor(a2, a1, (__n128 *)&v7);
  if (v7.__begin_)
  {
    v7.__end_ = v7.__begin_;
    operator delete(v7.__begin_);
  }
}

void sub_1E06D528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  __n128 __p;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v28;
  *((_QWORD *)v28 + a2) = v7;
  v27 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v29, (v29 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<int>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 2) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 2;
        do
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
          *((_QWORD *)v21 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(v20 + 32)
          *(_DWORD *)(*(_QWORD *)(a3 + 32)
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E06D5490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::runtime_error *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::runtime_error *exception;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  void *v44[3];
  __n128 __p;
  uint64_t v46;
  std::string v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"The number of tensors (", 23);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") is not the same as the number of blocks (", 43);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v47);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v49 = 0;
  v50 = 0;
  v48 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v47, 0, sizeof(v47));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, v48, (uint64_t)v49, (v49 - (_BYTE *)v48) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v47.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v47.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v46 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v47.__r_.__value_.__l.__size_, (uint64_t)(v47.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<int>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v49 - (_BYTE *)v48 || memcmp(v20, v48, v21))
      {
        v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 2;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v39, v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v48;
            v29 = (uint64_t *)v44[0];
            v30 = v39;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          LODWORD(v34) = *(_DWORD *)(*(_QWORD *)(v34 + 32)
          *(_DWORD *)(*(_QWORD *)(a3 + 32)
          if (v39)
          {
            v40 = v39;
            operator delete(v39);
          }
          if (v42)
          {
            v43 = v42;
            operator delete(v42);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
    }
  }
  if (v47.__r_.__value_.__r.__words[0])
  {
    v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
}

void sub_1E06D5884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<int>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char **v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  unint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  void *v112[3];
  __n128 v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  std::string v118;
  void *__p;
  char *v120;
  _QWORD v121[31];
  _QWORD v122[2];
  _QWORD *v123;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v122, *a2, a2[1]);
  for (i = v123; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v118);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v120 = 0;
  v121[0] = 0;
  memset(&v118, 0, sizeof(v118));
  v115 = 0;
  v116 = 0;
  v117 = 0;
  if (v102 == v103)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    v5 = &v117;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v102 - v103) >> 3;
    do
    {
      v112[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, (unint64_t *)v112))
      {
        if (a3)
        {
          v11 = v120;
          if ((unint64_t)v120 >= v121[0])
          {
            v22 = (char *)__p;
            v23 = (v120 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v121[0] - (_QWORD)__p;
            if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v26);
              v22 = (char *)__p;
              v11 = v120;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v120 = v12;
            v121[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v120 = 1;
            v12 = v11 + 8;
          }
          v120 = v12;
        }
        v43 = *v104;
        v44 = v116;
        if (v116 >= v117)
        {
          v46 = (char *)v115;
          v47 = (v116 - (_BYTE *)v115) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_153:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v117 - (_BYTE *)v115;
          if ((v117 - (_BYTE *)v115) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v50);
            v46 = (char *)v115;
            v44 = v116;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v115 = v52;
          v116 = v45;
          v117 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v116 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v116 = v45;
      }
      else
      {
        v13 = *v104;
        v14 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          v16 = (char *)__p;
          v17 = (v120 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_153;
          v19 = v121[0] - (_QWORD)__p;
          if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v20);
            v16 = (char *)__p;
            v14 = v120;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v120 = v15;
          v121[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v120 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v120 = v15;
        v30 = *v104;
        size = v118.__r_.__value_.__l.__size_;
        if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v118.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_153;
          v36 = v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118.__r_.__value_.__r.__words[2], v37);
            size = v118.__r_.__value_.__l.__size_;
            v33 = (void *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v118.__r_.__value_.__l.__size_ = v32;
          v118.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v118.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v118.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v120;
  }
  v113 = 0uLL;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v113, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<int>::Zeros(&v113, a5);
  if (v113.n128_u64[0])
  {
    v113.n128_u64[1] = v113.n128_u64[0];
    operator delete((void *)v113.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 2;
    v95 = v56 >> 2;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 2;
    v59 = v96 / (v56 >> 2);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v102 - v103) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v94 = v62;
    if (v59 <= 1)
      v59 = 1;
    v100 = v59;
    do
    {
      v98 = v57;
      LODWORD(v5) = v5 & 0xFFFFFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v105 = (int)v5;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          if (v102 != v103)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v106 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, &v106);
              v69 = v108;
              if (v68)
              {
                v70 = v110;
                if (v108 >= v109)
                {
                  v74 = (char *)v107;
                  v75 = (v108 - (_BYTE *)v107) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_151;
                  v77 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v78);
                    v74 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v107 = v86;
                  v108 = v71;
                  v109 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v110 + v66);
                  v71 = v69 + 8;
                }
                v108 = v71;
                ++v66;
              }
              else
              {
                v72 = v112[0];
                if (v108 >= v109)
                {
                  v80 = (char *)v107;
                  v81 = (v108 - (_BYTE *)v107) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_151:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v84);
                    v80 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v107 = v88;
                  v108 = v73;
                  v109 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v112[0] + v67);
                  v73 = v69 + 8;
                }
                v108 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v61);
          }
          if ((v64 & 1) == 0)
            LODWORD(v5) = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, v105, (int)v5);
          v60 = (uint64_t **)(a5 + 8);
          if (v107)
          {
            v108 = (char *)v107;
            operator delete(v107);
          }
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          v64 = 0;
          ++v63;
        }
        while (v63 != v100);
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      if (v112[0])
      {
        v112[1] = v112[0];
        operator delete(v112[0]);
      }
      v57 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118.__r_.__value_.__r.__words[0])
  {
    v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v122);
}

void sub_1E06D619C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<int>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<int>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06D632C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<long long>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14;

  MIL::IRTensorValue::TryGetDataView<long long>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(&__p, v13, (uint64_t)v13 + 8 * v14, v14);
  MIL::ValueInference::Tensor<long long>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06D646C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<long long>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 12, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<long long>,std::allocator<MIL::IRTypedTensorValue<long long>>,MIL::IRTensorValueType const*&,std::vector<long long>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06D6574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<long long>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F308;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06D6684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<long long>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F308;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void MIL::ValueInference::Tensor<long long>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
  __p.n128_u64[0] = 0;
  std::vector<long long>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(uint64_t **)(a1 + 32);
  v7 = *(uint64_t **)(a1 + 40);
  v9 = (_QWORD *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<long long>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06D6834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<long long>::GetScalarData(_QWORD *a1)
{
  uint64_t v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = a1[4], a1[5] - v1 != 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *(_QWORD *)v1;
}

void sub_1E06D6914(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<long long>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 3);
  MIL::ValueInference::Tensor<long long>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06D6B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<long long>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06D6C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<long long>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  std::logic_error *v33;
  void (*v34)(void *);
  struct type_info *v35;
  std::logic_error *exception;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  _BYTE *v41;
  __n128 v42;
  uint64_t v43;
  void *__p;
  char *v45;
  char *v46;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Indices end is out of the bound for the tensor dimension.");
        v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v34 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v35 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v33, v35, v34);
      }
      v13 = v45;
      if (v45 >= v46)
      {
        v15 = (char *)__p;
        v16 = (v45 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v46 - (_BYTE *)__p;
        if ((v46 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v46, v19);
          v15 = (char *)__p;
          v13 = v45;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v45 = (char *)v14;
        v46 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v45 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v45 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Indices end must not be smaller than the indices begin.");
    v33->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v34 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v35 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v45;
LABEL_25:
  v42 = 0uLL;
  v43 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v42, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<long long>::Zeros(&v42, (uint64_t)a3);
  if (v42.n128_u64[0])
  {
    v42.n128_u64[1] = v42.n128_u64[0];
    operator delete((void *)v42.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 3;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v37, v40, (uint64_t)v41, (v41 - (_BYTE *)v40) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v37;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06D6FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<long long>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<long long>::vector(&__p, v5);
  MIL::ValueInference::Tensor<long long>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06D70B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<long long>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  __n128 __p;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v30 = 0;
  v31 = 0;
  v29 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v29, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v29;
  *((_QWORD *)v29 + a2) = v7;
  v28 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v30, (v30 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<long long>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 3) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 3;
        do
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, v25, (uint64_t)v26, (v26 - (_BYTE *)v25) >> 3);
          *((_QWORD *)v22 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          v21 = *(_QWORD *)(*(_QWORD *)(v20 + 32)
          *(_QWORD *)(*(_QWORD *)(a3 + 32)
          if (v22)
          {
            v23 = v22;
            operator delete(v22);
          }
          if (v25)
          {
            v26 = v25;
            operator delete(v25);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_1E06D72BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<long long>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::runtime_error *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::runtime_error *exception;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *v45[3];
  __n128 __p;
  uint64_t v47;
  std::string v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"The number of tensors (", 23);
    v37 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") is not the same as the number of blocks (", 43);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v48);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v50 = 0;
  v51 = 0;
  v49 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v49, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v48, 0, sizeof(v48));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v48, v49, (uint64_t)v50, (v50 - (_BYTE *)v49) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v48.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v48.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v47 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v48.__r_.__value_.__l.__size_, (uint64_t)(v48.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<long long>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v50 - (_BYTE *)v49 || memcmp(v20, v49, v21))
      {
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 3;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v49;
            v29 = (uint64_t *)v45[0];
            v30 = v40;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          v35 = *(_QWORD *)(*(_QWORD *)(v34 + 32)
          *(_QWORD *)(*(_QWORD *)(a3 + 32)
          if (v40)
          {
            v41 = v40;
            operator delete(v40);
          }
          if (v43)
          {
            v44 = v43;
            operator delete(v43);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v45[0])
      {
        v45[1] = v45[0];
        operator delete(v45[0]);
      }
    }
  }
  if (v48.__r_.__value_.__r.__words[0])
  {
    v48.__r_.__value_.__l.__size_ = v48.__r_.__value_.__r.__words[0];
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1E06D76B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<long long>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110;
  void *v111;
  void *v112[3];
  __n128 v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  std::string v118;
  void *__p;
  char *v120;
  _QWORD v121[31];
  _QWORD v122[2];
  _QWORD *v123;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v122, *a2, a2[1]);
  for (i = v123; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v118);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v120 = 0;
  v121[0] = 0;
  memset(&v118, 0, sizeof(v118));
  v115 = 0;
  v116 = 0;
  v117 = 0;
  if (v102 == v103)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    v5 = (uint64_t)&v117;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v102 - v103) >> 3;
    do
    {
      v112[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, (unint64_t *)v112))
      {
        if (a3)
        {
          v11 = v120;
          if ((unint64_t)v120 >= v121[0])
          {
            v22 = (char *)__p;
            v23 = (v120 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v121[0] - (_QWORD)__p;
            if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v26);
              v22 = (char *)__p;
              v11 = v120;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v120 = v12;
            v121[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v120 = 1;
            v12 = v11 + 8;
          }
          v120 = v12;
        }
        v43 = *v104;
        v44 = v116;
        if (v116 >= v117)
        {
          v46 = (char *)v115;
          v47 = (v116 - (_BYTE *)v115) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_153:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v117 - (_BYTE *)v115;
          if ((v117 - (_BYTE *)v115) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v117, v50);
            v46 = (char *)v115;
            v44 = v116;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v115 = v52;
          v116 = v45;
          v117 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v116 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v116 = v45;
      }
      else
      {
        v13 = *v104;
        v14 = v120;
        if ((unint64_t)v120 >= v121[0])
        {
          v16 = (char *)__p;
          v17 = (v120 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_153;
          v19 = v121[0] - (_QWORD)__p;
          if ((uint64_t)(v121[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v121, v20);
            v16 = (char *)__p;
            v14 = v120;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v120 = v15;
          v121[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v120 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v120 = v15;
        v30 = *v104;
        size = v118.__r_.__value_.__l.__size_;
        if (v118.__r_.__value_.__l.__size_ >= v118.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v118.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v118.__r_.__value_.__l.__size_ - v118.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_153;
          v36 = v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v118.__r_.__value_.__r.__words[2] - v118.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118.__r_.__value_.__r.__words[2], v37);
            size = v118.__r_.__value_.__l.__size_;
            v33 = (void *)v118.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v118.__r_.__value_.__l.__size_ = v32;
          v118.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v118.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v118.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v120;
  }
  v113 = 0uLL;
  v114 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v113, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<long long>::Zeros(&v113, a5);
  if (v113.n128_u64[0])
  {
    v113.n128_u64[1] = v113.n128_u64[0];
    operator delete((void *)v113.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 3;
    v95 = v56 >> 3;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 3;
    v59 = v96 / (v56 >> 3);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v102 - v103) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v94 = v62;
    if (v59 <= 1)
      v59 = 1;
    v100 = v59;
    do
    {
      v98 = v57;
      v5 &= 0xFFFFFFFFFFFFFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v64 = 1;
        do
        {
          v105 = v5;
          v107 = 0;
          v108 = 0;
          v109 = 0;
          if (v102 != v103)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v106 = v65;
              v68 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v122, &v106);
              v69 = v108;
              if (v68)
              {
                v70 = v110;
                if (v108 >= v109)
                {
                  v74 = (char *)v107;
                  v75 = (v108 - (_BYTE *)v107) >> 3;
                  v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61)
                    goto LABEL_151;
                  v77 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v76)
                    v76 = v77 >> 2;
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
                    v78 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v78 = v76;
                  if (v78)
                  {
                    v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v78);
                    v74 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v79 = 0;
                  }
                  v86 = &v79[8 * v75];
                  *(_QWORD *)v86 = v70[v66];
                  v71 = v86 + 8;
                  while (v69 != v74)
                  {
                    v87 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v86 - 1) = v87;
                    v86 -= 8;
                  }
                  v107 = v86;
                  v108 = v71;
                  v109 = &v79[8 * v78];
                  if (v74)
                    operator delete(v74);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v110 + v66);
                  v71 = v69 + 8;
                }
                v108 = v71;
                ++v66;
              }
              else
              {
                v72 = v112[0];
                if (v108 >= v109)
                {
                  v80 = (char *)v107;
                  v81 = (v108 - (_BYTE *)v107) >> 3;
                  v82 = v81 + 1;
                  if ((unint64_t)(v81 + 1) >> 61)
LABEL_151:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v83 = v109 - (_BYTE *)v107;
                  if ((v109 - (_BYTE *)v107) >> 2 > v82)
                    v82 = v83 >> 2;
                  if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
                    v84 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v84 = v82;
                  if (v84)
                  {
                    v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v109, v84);
                    v80 = (char *)v107;
                    v69 = v108;
                  }
                  else
                  {
                    v85 = 0;
                  }
                  v88 = &v85[8 * v81];
                  *(_QWORD *)v88 = v72[v67];
                  v73 = v88 + 8;
                  while (v69 != v80)
                  {
                    v89 = *((_QWORD *)v69 - 1);
                    v69 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  v107 = v88;
                  v108 = v73;
                  v109 = &v85[8 * v84];
                  if (v80)
                    operator delete(v80);
                }
                else
                {
                  *(_QWORD *)v108 = *((_QWORD *)v112[0] + v67);
                  v73 = v69 + 8;
                }
                v108 = v73;
                ++v67;
              }
              ++v65;
            }
            while (v65 != v61);
          }
          if ((v64 & 1) == 0)
            v5 = std::function<unsigned long long ()(unsigned long long,unsigned long long)>::operator()(a4, v105, v5);
          v60 = (uint64_t **)(a5 + 8);
          if (v107)
          {
            v108 = (char *)v107;
            operator delete(v107);
          }
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          v64 = 0;
          ++v63;
        }
        while (v63 != v100);
      }
      if (v110)
      {
        v111 = v110;
        operator delete(v110);
      }
      if (v112[0])
      {
        v112[1] = v112[0];
        operator delete(v112[0]);
      }
      v57 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118.__r_.__value_.__r.__words[0])
  {
    v118.__r_.__value_.__l.__size_ = v118.__r_.__value_.__r.__words[0];
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v120 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v122);
}

void sub_1E06D7FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<long long>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<long long>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06D8158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  size_t v14;

  MIL::IRTensorValue::TryGetDataView<BOOL>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>((char *)&__p, v13, &v13[v14], v14);
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06D8298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 2, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<BOOL>,std::allocator<MIL::IRTypedTensorValue<BOOL>>,MIL::IRTensorValueType const*&,std::vector<unsigned char>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06D8398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<BOOL>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F218;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != v11 - v10)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06D84A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<BOOL>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F218;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void MIL::ValueInference::Tensor<BOOL>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 __p;
  uint64_t v13;
  __n128 v14;
  char v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  __p.n128_u8[0] = 0;
  std::vector<unsigned char>::vector(&v14, v6, &__p);
  __p = 0uLL;
  v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v8 = *(char **)(a1 + 32);
  v7 = *(char **)(a1 + 40);
  v9 = (_BYTE *)v14.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
  while (v8 != v7)
  {
    v15 = *v8;
    if (!v17)
      std::__throw_bad_function_call[abi:ne180100]();
    *v9++ = (*(uint64_t (**)(_BYTE *, char *))(*(_QWORD *)v17 + 48))(v17, &v15);
    ++v8;
  }
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_10;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_10:
  MIL::ValueInference::Tensor<BOOL>::Tensor(a3, &__p, &v14);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14.n128_u64[0])
  {
    v14.n128_u64[1] = v14.n128_u64[0];
    operator delete((void *)v14.n128_u64[0]);
  }
}

void sub_1E06D8654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<BOOL>::GetScalarData(_QWORD *a1)
{
  unsigned __int8 *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (unsigned __int8 *)a1[4], a1[5] - (_QWORD)v1 != 1))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06D8734(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<BOOL>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, v11, v12, v12 - (_QWORD)v11);
  MIL::ValueInference::Tensor<BOOL>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06D892C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<BOOL>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t **v6;
  void *__p[3];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = 0;
    v6 = (uint64_t **)(a1 + 8);
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v5))
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v3 = *(_QWORD *)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < v3);
  }
}

void sub_1E06D8A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<BOOL>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  std::logic_error *v32;
  void (*v33)(void *);
  struct type_info *v34;
  std::logic_error *exception;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  __n128 v41;
  uint64_t v42;
  void *__p;
  char *v44;
  char *v45;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v44 = 0;
  v45 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v32, "Indices end is out of the bound for the tensor dimension.");
        v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v33 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v34 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v32, v34, v33);
      }
      v13 = v44;
      if (v44 >= v45)
      {
        v15 = (char *)__p;
        v16 = (v44 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v45 - (_BYTE *)__p;
        if ((v45 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v45, v19);
          v15 = (char *)__p;
          v13 = v44;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v44 = (char *)v14;
        v45 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v44 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v44 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "Indices end must not be smaller than the indices begin.");
    v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v33 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v34 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v44;
LABEL_25:
  v41 = 0uLL;
  v42 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<BOOL>::Zeros(&v41, (uint64_t)a3);
  if (v41.n128_u64[0])
  {
    v41.n128_u64[1] = v41.n128_u64[0];
    operator delete((void *)v41.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    if (v23 <= 1)
      v25 = 1;
    else
      v25 = a3[5] - a3[4];
    do
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v36, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 3);
      v26 = a1[2] - a1[1];
      if (v26)
      {
        v27 = v26 >> 3;
        v28 = *a2;
        v29 = v36;
        if (v27 <= 1)
          v27 = 1;
        do
        {
          v30 = *v28;
          v28 += 2;
          *v29++ += v30;
          --v27;
        }
        while (v27);
      }
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      ++v24;
    }
    while (v24 != v25);
  }
  if (__p)
  {
    v44 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06D8DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<BOOL>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  size_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<unsigned char>::vector(&__p, v5);
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06D8ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE *v25;
  __n128 __p;
  uint64_t v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v28;
  *((_QWORD *)v28 + a2) = v7;
  v27 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v29, (v29 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<BOOL>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if (v17 <= 1)
          v19 = 1;
        else
          v19 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
        do
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 3);
          *((_QWORD *)v21 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          LOBYTE(v20) = *(_BYTE *)(*(_QWORD *)(v20 + 32)
          if (v21)
          {
            v22 = v21;
            operator delete(v21);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1E06D90CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::runtime_error *v34;
  _QWORD *v35;
  _QWORD *v36;
  std::runtime_error *exception;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  void *v43[3];
  __n128 __p;
  uint64_t v45;
  std::string v46;
  void *v47;
  _BYTE *v48;
  uint64_t v49;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"The number of tensors (", 23);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") is not the same as the number of blocks (", 43);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v46);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v48 = 0;
  v49 = 0;
  v47 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v47, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v46, 0, sizeof(v46));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v46, v47, (uint64_t)v48, (v48 - (_BYTE *)v47) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v46.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v46.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v45 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v46.__r_.__value_.__l.__size_, (uint64_t)(v46.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<BOOL>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v48 - (_BYTE *)v47 || memcmp(v20, v47, v21))
      {
        v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        if (v22 <= 1)
          v24 = 1;
        else
          v24 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
        do
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 3);
          v25 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v25)
          {
            v26 = v25 >> 3;
            v27 = (uint64_t *)v47;
            v28 = (uint64_t *)v43[0];
            v29 = v38;
            if (v26 <= 1)
              v26 = 1;
            do
            {
              v31 = *v27++;
              v30 = v31;
              v32 = *v28++;
              *v29++ += v32 * v30;
              --v26;
            }
            while (v26);
          }
          v33 = *a1 + (i << 6);
          LOBYTE(v33) = *(_BYTE *)(*(_QWORD *)(v33 + 32)
          if (v38)
          {
            v39 = v38;
            operator delete(v38);
          }
          if (v41)
          {
            v42 = v41;
            operator delete(v41);
          }
          ++v23;
        }
        while (v23 != v24);
      }
      if (v43[0])
      {
        v43[1] = v43[0];
        operator delete(v43[0]);
      }
    }
  }
  if (v46.__r_.__value_.__r.__words[0])
  {
    v46.__r_.__value_.__l.__size_ = v46.__r_.__value_.__r.__words[0];
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
}

void sub_1E06D94BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28)
{
  void *v28;
  int v29;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<BOOL>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  _QWORD *i;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type size;
  std::string::size_type v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  _QWORD *v92;
  _QWORD *v93;
  std::logic_error *exception;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v99;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  char v107;
  unint64_t v108;
  void *v109;
  char *v110;
  char *v111;
  void *v112;
  void *v113;
  void *v114[3];
  __n128 v115;
  uint64_t v116;
  void *v117;
  char *v118;
  char *v119;
  std::string v120;
  void *__p;
  char *v122;
  _QWORD v123[31];
  _QWORD v124[2];
  _QWORD *v125;

  v104 = a1[1];
  v105 = a1 + 1;
  v103 = a1[2];
  v6 = (v103 - v104) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v124, *a2, a2[1]);
  for (i = v125; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v6)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v93 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v120);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v122 = 0;
  v123[0] = 0;
  memset(&v120, 0, sizeof(v120));
  v117 = 0;
  v118 = 0;
  v119 = 0;
  if (v103 == v104)
  {
    v54 = 0;
    v53 = 0;
  }
  else
  {
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = (v103 - v104) >> 3;
    do
    {
      v114[0] = v8;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v124, (unint64_t *)v114))
      {
        if (a3)
        {
          v10 = v122;
          if ((unint64_t)v122 >= v123[0])
          {
            v21 = (char *)__p;
            v22 = (v122 - (_BYTE *)__p) >> 3;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v24 = v123[0] - (_QWORD)__p;
            if ((uint64_t)(v123[0] - (_QWORD)__p) >> 2 > v23)
              v23 = v24 >> 2;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v123, v25);
              v21 = (char *)__p;
              v10 = v122;
            }
            else
            {
              v26 = 0;
            }
            v40 = &v26[8 * v22];
            *(_QWORD *)v40 = 1;
            v11 = v40 + 8;
            while (v10 != v21)
            {
              v41 = *((_QWORD *)v10 - 1);
              v10 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            __p = v40;
            v122 = v11;
            v123[0] = &v26[8 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_QWORD *)v122 = 1;
            v11 = v10 + 8;
          }
          v122 = v11;
        }
        v42 = *v105;
        v43 = v118;
        if (v118 >= v119)
        {
          v45 = (char *)v117;
          v46 = (v118 - (_BYTE *)v117) >> 3;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 61)
LABEL_155:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v48 = v119 - (_BYTE *)v117;
          if ((v119 - (_BYTE *)v117) >> 2 > v47)
            v47 = v48 >> 2;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
            v49 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119, v49);
            v45 = (char *)v117;
            v43 = v118;
          }
          else
          {
            v50 = 0;
          }
          v51 = &v50[8 * v46];
          *(_QWORD *)v51 = *(_QWORD *)(v42 + 8 * (_QWORD)v8);
          v44 = v51 + 8;
          while (v43 != v45)
          {
            v52 = *((_QWORD *)v43 - 1);
            v43 -= 8;
            *((_QWORD *)v51 - 1) = v52;
            v51 -= 8;
          }
          v117 = v51;
          v118 = v44;
          v119 = &v50[8 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_QWORD *)v118 = *(_QWORD *)(v42 + 8 * (_QWORD)v8);
          v44 = v43 + 8;
        }
        v118 = v44;
      }
      else
      {
        v12 = *v105;
        v13 = v122;
        if ((unint64_t)v122 >= v123[0])
        {
          v15 = (char *)__p;
          v16 = (v122 - (_BYTE *)__p) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            goto LABEL_155;
          v18 = v123[0] - (_QWORD)__p;
          if ((uint64_t)(v123[0] - (_QWORD)__p) >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v123, v19);
            v15 = (char *)__p;
            v13 = v122;
          }
          else
          {
            v20 = 0;
          }
          v27 = &v20[8 * v16];
          *(_QWORD *)v27 = *(_QWORD *)(v12 + 8 * (_QWORD)v8);
          v14 = v27 + 8;
          while (v13 != v15)
          {
            v28 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          __p = v27;
          v122 = v14;
          v123[0] = &v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v122 = *(_QWORD *)(v12 + 8 * (_QWORD)v8);
          v14 = v13 + 8;
        }
        v122 = v14;
        v29 = *v105;
        size = v120.__r_.__value_.__l.__size_;
        if (v120.__r_.__value_.__l.__size_ >= v120.__r_.__value_.__r.__words[2])
        {
          v32 = (void *)v120.__r_.__value_.__r.__words[0];
          v33 = (uint64_t)(v120.__r_.__value_.__l.__size_ - v120.__r_.__value_.__r.__words[0]) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_155;
          v35 = v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v120.__r_.__value_.__r.__words[2] - v120.__r_.__value_.__r.__words[0]) >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v120.__r_.__value_.__r.__words[2], v36);
            size = v120.__r_.__value_.__l.__size_;
            v32 = (void *)v120.__r_.__value_.__r.__words[0];
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = *(_QWORD *)(v29 + 8 * (_QWORD)v8);
          v31 = (std::string::size_type)(v38 + 8);
          while ((void *)size != v32)
          {
            v39 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
          v120.__r_.__value_.__l.__size_ = v31;
          v120.__r_.__value_.__r.__words[2] = (std::string::size_type)&v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v120.__r_.__value_.__l.__size_ = *(_QWORD *)(v29 + 8 * (_QWORD)v8);
          v31 = size + 8;
        }
        v120.__r_.__value_.__l.__size_ = v31;
      }
      v8 = (char *)v8 + 1;
    }
    while (v8 != (void *)v9);
    v53 = __p;
    v54 = (uint64_t)v122;
  }
  v115 = 0uLL;
  v116 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v115, v53, v54, (v54 - (uint64_t)v53) >> 3);
  MIL::ValueInference::Tensor<BOOL>::Zeros(&v115, a5);
  if (v115.n128_u64[0])
  {
    v115.n128_u64[1] = v115.n128_u64[0];
    operator delete((void *)v115.n128_u64[0]);
  }
  v97 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v97)
  {
    v55 = 0;
    v96 = a1[5] - a1[4];
    v56 = v96 / v97;
    v57 = (uint64_t **)(a5 + 8);
    if (v6 <= 1)
      v58 = 1;
    else
      v58 = (v103 - v104) >> 3;
    if (v97 <= 1)
      v59 = 1;
    else
      v59 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
    v95 = v59;
    if (v56 <= 1)
      v56 = 1;
    v101 = v56;
    do
    {
      v99 = v55;
      if (v97 <= v96)
      {
        v61 = 0;
        v106 = 0;
        v60 = 0;
        do
        {
          v107 = v60;
          v109 = 0;
          v110 = 0;
          v111 = 0;
          if (v103 != v104)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            do
            {
              v108 = v62;
              v65 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v124, &v108);
              v66 = v110;
              if (v65)
              {
                v67 = v112;
                if (v110 >= v111)
                {
                  v71 = (char *)v109;
                  v72 = (v110 - (_BYTE *)v109) >> 3;
                  v73 = v72 + 1;
                  if ((unint64_t)(v72 + 1) >> 61)
                    goto LABEL_153;
                  v74 = v111 - (_BYTE *)v109;
                  if ((v111 - (_BYTE *)v109) >> 2 > v73)
                    v73 = v74 >> 2;
                  if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
                    v75 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v75 = v73;
                  if (v75)
                  {
                    v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v75);
                    v71 = (char *)v109;
                    v66 = v110;
                  }
                  else
                  {
                    v76 = 0;
                  }
                  v83 = &v76[8 * v72];
                  *(_QWORD *)v83 = v67[v63];
                  v68 = v83 + 8;
                  while (v66 != v71)
                  {
                    v84 = *((_QWORD *)v66 - 1);
                    v66 -= 8;
                    *((_QWORD *)v83 - 1) = v84;
                    v83 -= 8;
                  }
                  v109 = v83;
                  v110 = v68;
                  v111 = &v76[8 * v75];
                  if (v71)
                    operator delete(v71);
                }
                else
                {
                  *(_QWORD *)v110 = *((_QWORD *)v112 + v63);
                  v68 = v66 + 8;
                }
                v110 = v68;
                ++v63;
              }
              else
              {
                v69 = v114[0];
                if (v110 >= v111)
                {
                  v77 = (char *)v109;
                  v78 = (v110 - (_BYTE *)v109) >> 3;
                  v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 61)
LABEL_153:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v80 = v111 - (_BYTE *)v109;
                  if ((v111 - (_BYTE *)v109) >> 2 > v79)
                    v79 = v80 >> 2;
                  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                    v81 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v81 = v79;
                  if (v81)
                  {
                    v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v111, v81);
                    v77 = (char *)v109;
                    v66 = v110;
                  }
                  else
                  {
                    v82 = 0;
                  }
                  v85 = &v82[8 * v78];
                  *(_QWORD *)v85 = v69[v64];
                  v70 = v85 + 8;
                  while (v66 != v77)
                  {
                    v86 = *((_QWORD *)v66 - 1);
                    v66 -= 8;
                    *((_QWORD *)v85 - 1) = v86;
                    v85 -= 8;
                  }
                  v109 = v85;
                  v110 = v70;
                  v111 = &v82[8 * v81];
                  if (v77)
                    operator delete(v77);
                }
                else
                {
                  *(_QWORD *)v110 = *((_QWORD *)v114[0] + v64);
                  v70 = v66 + 8;
                }
                v110 = v70;
                ++v64;
              }
              ++v62;
            }
            while (v62 != v58);
          }
          v88 = a1[4];
          v89 = *(unsigned __int8 *)(v88 + v87);
          v90 = *(_BYTE *)(v88 + v87) != 0;
          if (v106)
          {
            v60 = std::function<unsigned char ()(unsigned char,unsigned char)>::operator()(a4, v107, v89 != 0) != 0;
          }
          else
          {
            v106 = 1;
            v60 = v90;
          }
          v57 = (uint64_t **)(a5 + 8);
          if (v109)
          {
            v110 = (char *)v109;
            operator delete(v109);
          }
          if (v112)
          {
            v113 = v112;
            operator delete(v112);
          }
          ++v61;
        }
        while (v61 != v101);
      }
      else
      {
        v60 = 0;
      }
      if (v112)
      {
        v113 = v112;
        operator delete(v112);
      }
      if (v114[0])
      {
        v114[1] = v114[0];
        operator delete(v114[0]);
      }
      v55 = v99 + 1;
    }
    while (v99 + 1 != v95);
  }
  if (v117)
  {
    v118 = (char *)v117;
    operator delete(v117);
  }
  if (v120.__r_.__value_.__r.__words[0])
  {
    v120.__r_.__value_.__l.__size_ = v120.__r_.__value_.__r.__words[0];
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v122 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v124);
}

void sub_1E06D9DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<BOOL>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<BOOL>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06D9F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  MIL::IRTensorValue::TryGetDataView<MIL::Bf16>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<MIL::Bf16 const*,MIL::Bf16 const*>(&__p, v13, (uint64_t)v13 + 2 * v14, v14);
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06DA0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 7, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<MIL::Bf16*,MIL::Bf16*>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<MIL::Bf16>,std::allocator<MIL::IRTypedTensorValue<MIL::Bf16>>,MIL::IRTensorValueType const*&,std::vector<MIL::Bf16>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06DA1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99F1B8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06DA2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99F1B8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(_QWORD *a1)
{
  unsigned __int16 *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (unsigned __int16 *)a1[4], a1[5] - (_QWORD)v1 != 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06DA3AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::Bf16 const*>,std::__wrap_iter<MIL::Bf16 const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 1);
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06DA5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<MIL::Bf16>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t **v5;
  void *__p[3];
  __int16 v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_QWORD *)(a1 + 56))
  {
    v4 = 0;
    v5 = (uint64_t **)(a1 + 8);
    do
    {
      v7 = *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v4);
      if (MIL::Bf16::GetFloat((MIL::Bf16 *)&v7) != 0.0)
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v4;
    }
    while (v4 < *(_QWORD *)(a1 + 56));
  }
}

void sub_1E06DA6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::logic_error *v34;
  void (*v35)(void *);
  struct type_info *v36;
  std::logic_error *exception;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  __n128 v43;
  uint64_t v44;
  void *__p;
  char *v46;
  char *v47;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v46 = 0;
  v47 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v34, "Indices end is out of the bound for the tensor dimension.");
        v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v35 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v36 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v34, v36, v35);
      }
      v13 = v46;
      if (v46 >= v47)
      {
        v15 = (char *)__p;
        v16 = (v46 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v47 - (_BYTE *)__p;
        if ((v47 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v47, v19);
          v15 = (char *)__p;
          v13 = v46;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v46 = (char *)v14;
        v47 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v46 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v46 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "Indices end must not be smaller than the indices begin.");
    v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v35 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v36 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v46;
LABEL_25:
  v43 = 0uLL;
  v44 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v43, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<MIL::Bf16>::Zeros(&v43, (uint64_t)a3);
  if (v43.n128_u64[0])
  {
    v43.n128_u64[1] = v43.n128_u64[0];
    operator delete((void *)v43.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 1;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v38;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      v33 = a1[4];
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (v41)
      {
        v42 = v41;
        operator delete(v41);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v46 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06DAA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<MIL::Bf16>::vector(&__p, v5);
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06DAB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _BYTE *v27;
  __n128 __p;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v30, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v30;
  *((_QWORD *)v30 + a2) = v7;
  v29 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v31, (v31 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<MIL::Bf16>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 1) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 1;
        do
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v23, v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 3);
          *((_QWORD *)v23 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          v22 = *(_QWORD *)(v20 + 32);
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v23)
          {
            v24 = v23;
            operator delete(v23);
          }
          if (v26)
          {
            v27 = v26;
            operator delete(v26);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_1E06DAD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::runtime_error *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::runtime_error *exception;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  _BYTE *v45;
  void *v46[3];
  __n128 __p;
  uint64_t v48;
  std::string v49;
  void *v50;
  _BYTE *v51;
  uint64_t v52;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"The number of tensors (", 23);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") is not the same as the number of blocks (", 43);
    v39 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v49);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v50, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v49, 0, sizeof(v49));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v49, v50, (uint64_t)v51, (v51 - (_BYTE *)v50) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v49.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v49.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v48 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v49.__r_.__value_.__l.__size_, (uint64_t)(v49.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<MIL::Bf16>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v51 - (_BYTE *)v50 || memcmp(v20, v50, v21))
      {
        v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 1;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v50;
            v29 = (uint64_t *)v46[0];
            v30 = v41;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          v36 = *(_QWORD *)(v34 + 32);
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v41)
          {
            v42 = v41;
            operator delete(v41);
          }
          if (v44)
          {
            v45 = v44;
            operator delete(v44);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v46[0])
      {
        v46[1] = v46[0];
        operator delete(v46[0]);
      }
    }
  }
  if (v49.__r_.__value_.__r.__words[0])
  {
    v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1E06DB164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29)
{
  void *v29;
  int v30;

  if (a27 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<MIL::Bf16>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  __int16 v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  __int16 v106;
  unint64_t v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  void *v113[3];
  __n128 v114;
  uint64_t v115;
  void *v116;
  char *v117;
  char *v118;
  std::string v119;
  void *__p;
  char *v121;
  _QWORD v122[31];
  _QWORD v123[2];
  _QWORD *v124;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v123, *a2, a2[1]);
  for (i = v124; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v119);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v121 = 0;
  v122[0] = 0;
  memset(&v119, 0, sizeof(v119));
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if (v102 == v103)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    v5 = v122;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v102 - v103) >> 3;
    do
    {
      v113[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v123, (unint64_t *)v113))
      {
        if (a3)
        {
          v11 = v121;
          if ((unint64_t)v121 >= v122[0])
          {
            v22 = (char *)__p;
            v23 = (v121 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v122[0] - (_QWORD)__p;
            if ((uint64_t)(v122[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v122, v26);
              v22 = (char *)__p;
              v11 = v121;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v121 = v12;
            v122[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v121 = 1;
            v12 = v11 + 8;
          }
          v121 = v12;
        }
        v43 = *v104;
        v44 = v117;
        if (v117 >= v118)
        {
          v46 = (char *)v116;
          v47 = (v117 - (_BYTE *)v116) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_154:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v118 - (_BYTE *)v116;
          if ((v118 - (_BYTE *)v116) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118, v50);
            v46 = (char *)v116;
            v44 = v117;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v116 = v52;
          v117 = v45;
          v118 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v117 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v117 = v45;
      }
      else
      {
        v13 = *v104;
        v14 = v121;
        if ((unint64_t)v121 >= v122[0])
        {
          v16 = (char *)__p;
          v17 = (v121 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_154;
          v19 = v122[0] - (_QWORD)__p;
          if ((uint64_t)(v122[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v122, v20);
            v16 = (char *)__p;
            v14 = v121;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v121 = v15;
          v122[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v121 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v121 = v15;
        v30 = *v104;
        size = v119.__r_.__value_.__l.__size_;
        if (v119.__r_.__value_.__l.__size_ >= v119.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v119.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v119.__r_.__value_.__l.__size_ - v119.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_154;
          v36 = v119.__r_.__value_.__r.__words[2] - v119.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v119.__r_.__value_.__r.__words[2] - v119.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119.__r_.__value_.__r.__words[2], v37);
            size = v119.__r_.__value_.__l.__size_;
            v33 = (void *)v119.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v119.__r_.__value_.__l.__size_ = v32;
          v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v119.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v119.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v121;
  }
  v114 = 0uLL;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v114, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<MIL::Bf16>::Zeros(&v114, a5);
  if (v114.n128_u64[0])
  {
    v114.n128_u64[1] = v114.n128_u64[0];
    operator delete((void *)v114.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 1;
    v95 = v56 >> 1;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 1;
    v59 = v96 / (v56 >> 1);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v102 - v103) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v94 = v62;
    if (v59 <= 1)
      v59 = 1;
    v100 = v59;
    do
    {
      v98 = v57;
      LOWORD(v5) = (unsigned __int16)v5 & 0xFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v105 = 0;
        do
        {
          v106 = (__int16)v5;
          v108 = 0;
          v109 = 0;
          v110 = 0;
          if (v102 != v103)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v107 = v64;
              v67 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v123, &v107);
              v68 = v109;
              if (v67)
              {
                v69 = v111;
                if (v109 >= v110)
                {
                  v73 = (char *)v108;
                  v74 = (v109 - (_BYTE *)v108) >> 3;
                  v75 = v74 + 1;
                  if ((unint64_t)(v74 + 1) >> 61)
                    goto LABEL_152;
                  v76 = v110 - (_BYTE *)v108;
                  if ((v110 - (_BYTE *)v108) >> 2 > v75)
                    v75 = v76 >> 2;
                  if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                    v77 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v77 = v75;
                  if (v77)
                  {
                    v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v110, v77);
                    v73 = (char *)v108;
                    v68 = v109;
                  }
                  else
                  {
                    v78 = 0;
                  }
                  v85 = &v78[8 * v74];
                  *(_QWORD *)v85 = v69[v65];
                  v70 = v85 + 8;
                  while (v68 != v73)
                  {
                    v86 = *((_QWORD *)v68 - 1);
                    v68 -= 8;
                    *((_QWORD *)v85 - 1) = v86;
                    v85 -= 8;
                  }
                  v108 = v85;
                  v109 = v70;
                  v110 = &v78[8 * v77];
                  if (v73)
                    operator delete(v73);
                }
                else
                {
                  *(_QWORD *)v109 = *((_QWORD *)v111 + v65);
                  v70 = v68 + 8;
                }
                v109 = v70;
                ++v65;
              }
              else
              {
                v71 = v113[0];
                if (v109 >= v110)
                {
                  v79 = (char *)v108;
                  v80 = (v109 - (_BYTE *)v108) >> 3;
                  v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 61)
LABEL_152:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v82 = v110 - (_BYTE *)v108;
                  if ((v110 - (_BYTE *)v108) >> 2 > v81)
                    v81 = v82 >> 2;
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
                    v83 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v83 = v81;
                  if (v83)
                  {
                    v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v110, v83);
                    v79 = (char *)v108;
                    v68 = v109;
                  }
                  else
                  {
                    v84 = 0;
                  }
                  v87 = &v84[8 * v80];
                  *(_QWORD *)v87 = v71[v66];
                  v72 = v87 + 8;
                  while (v68 != v79)
                  {
                    v88 = *((_QWORD *)v68 - 1);
                    v68 -= 8;
                    *((_QWORD *)v87 - 1) = v88;
                    v87 -= 8;
                  }
                  v108 = v87;
                  v109 = v72;
                  v110 = &v84[8 * v83];
                  if (v79)
                    operator delete(v79);
                }
                else
                {
                  *(_QWORD *)v109 = *((_QWORD *)v113[0] + v66);
                  v72 = v68 + 8;
                }
                v109 = v72;
                ++v66;
              }
              ++v64;
            }
            while (v64 != v61);
          }
          if (v105)
          {
            LOWORD(v5) = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a4, v106, v89);
          }
          else
          {
            v105 = 1;
            LOWORD(v5) = v89;
          }
          v60 = (uint64_t **)(a5 + 8);
          if (v108)
          {
            v109 = (char *)v108;
            operator delete(v108);
          }
          if (v111)
          {
            v112 = v111;
            operator delete(v111);
          }
          ++v63;
        }
        while (v63 != v100);
      }
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      if (v113[0])
      {
        v113[1] = v113[0];
        operator delete(v113[0]);
      }
      v57 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v116)
  {
    v117 = (char *)v116;
    operator delete(v116);
  }
  if (v119.__r_.__value_.__r.__words[0])
  {
    v119.__r_.__value_.__l.__size_ = v119.__r_.__value_.__r.__words[0];
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v121 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v123);
}

void sub_1E06DBA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<MIL::Bf16>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06DBC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  MIL *v4;
  const MIL::IRTensorValueType *v5;
  std::runtime_error *exception;
  struct type_info *v7;
  void (*v8)(void *);
  __n128 __p;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  MIL::IRTensorValue::TryGetDataView<MIL::Fp16>(&v12, *a1);
  if (!(_BYTE)v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get data view.");
    v7 = (struct type_info *)MEMORY[0x1E0DE4E80];
    v8 = (void (*)(void *))MEMORY[0x1E0DE4338];
    goto LABEL_10;
  }
  v4 = (MIL *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)v4 + 88))(v4) == 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100]((std::logic_error *)exception, "It is not supported to convert a tensor of string dtype.");
    v7 = (struct type_info *)off_1EA992598;
    v8 = (void (*)(void *))MEMORY[0x1E0DE4360];
LABEL_10:
    __cxa_throw(exception, v7, v8);
  }
  MIL::GetTensorShapeWithDimensionsAllKnown(v4, v5, (uint64_t)&v11);
  v10 = 0;
  __p = 0uLL;
  std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16 const*,MIL::Fp16 const*>(&__p, v13, (uint64_t)v13 + 2 * v14, v14);
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v11, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v11.n128_u64[0])
  {
    v11.n128_u64[1] = v11.n128_u64[0];
    operator delete((void *)v11.n128_u64[0]);
  }
}

void sub_1E06DBD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue(uint64_t a1@<X0>, void (***a2)(MIL::MILContextImpl *__hidden this)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  __p = 0;
  v10 = 0;
  v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v6 = MIL::IRTensorValueType::Make(a2, 4, (MIL::MILContext ***)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  v11 = 0;
  v12 = v6;
  __p = 0;
  v10 = 0;
  std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(&__p, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<MIL::Fp16>,std::allocator<MIL::IRTypedTensorValue<MIL::Fp16>>,MIL::IRTensorValueType const*&,std::vector<MIL::Fp16>,void>(&v12, (uint64_t)&__p, &v8);
  v7 = __p;
  *a3 = v8;
  if (v7)
  {
    v10 = v7;
    operator delete(v7);
  }
}

void sub_1E06DBE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(uint64_t a1, __n128 *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  *(_QWORD *)a1 = &off_1EA99BB80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = (uint64_t *)a2->n128_u64[0];
  v7 = (uint64_t *)a2->n128_u64[1];
  if ((uint64_t *)a2->n128_u64[0] == v7)
  {
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
    v8 = a3->n128_u64[0] != v11;
  }
  else
  {
    v8 = 1;
    do
    {
      v9 = *v6++;
      v8 *= v9;
    }
    while (v6 != v7);
    v10 = a3->n128_u64[0];
    v11 = a3->n128_u64[1];
  }
  if (v8 != (uint64_t)(v11 - v10) >> 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "data size and shape dismatch.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::vector<float>::__move_assign(v5, a2);
  std::vector<float>::__move_assign(a1 + 32, a3);
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

void sub_1E06DBF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 40) = v13;
    operator delete(v13);
  }
  v14 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 16) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

double MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1EA99BB80;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(_QWORD *a1)
{
  unsigned __int16 *v1;
  std::logic_error *exception;

  if (a1[1] != a1[2] || (v1 = (unsigned __int16 *)a1[4], a1[5] - (_QWORD)v1 != 2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Tensor is not a scalar.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return *v1;
}

void sub_1E06DC038(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Reshape(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v19;
  std::logic_error *exception;
  std::string __p;
  __n128 v22;
  uint64_t v23;

  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  v8 = 1;
  if (v6 != (uint64_t *)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v9++;
      v8 *= v10;
    }
    while (v9 != (uint64_t *)v7);
  }
  if (a1[7] != v8)
  {
    v13 = a2;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Tensor is not able to be reshaped since the number of elements in the newShape [ ", 81);
    v14 = *v13;
    v15 = v13[1];
    if (*v13 != v15)
    {
      do
      {
        v16 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
        v14 += 8;
      }
      while (v14 != v15);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"] is not the same as the number of elements in the tensor shape [ ", 66);
    v17 = a1[1];
    for (i = a1[2]; v17 != i; v17 += 8)
    {
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"].", 2);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v22 = 0uLL;
  v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v6, v7, (v7 - (uint64_t)v6) >> 3);
  v11 = (const void *)a1[4];
  v12 = a1[5];
  memset(&__p, 0, sizeof(__p));
  std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::Fp16 const*>,std::__wrap_iter<MIL::Fp16 const*>>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 1);
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a3, &v22, (__n128 *)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06DC234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  void *v16;
  int v17;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<MIL::Fp16>::NonZero(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t **v5;
  void *__p[3];
  __int16 v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_QWORD *)(a1 + 56))
  {
    v4 = 0;
    v5 = (uint64_t **)(a1 + 8);
    do
    {
      v7 = *(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v4);
      if (MIL::Fp16::GetFloat((MIL::Fp16 *)&v7) != 0.0)
      {
        std::vector<std::vector<unsigned long long>>::push_back[abi:ne180100](a2, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      ++v4;
    }
    while (v4 < *(_QWORD *)(a1 + 56));
  }
}

void sub_1E06DC354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::SubTensor(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::logic_error *v34;
  void (*v35)(void *);
  struct type_info *v36;
  std::logic_error *exception;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _BYTE *v42;
  __n128 v43;
  uint64_t v44;
  void *__p;
  char *v46;
  char *v47;

  v5 = ((char *)a2[1] - (char *)*a2) >> 4;
  v6 = a1 + 1;
  if (v5 != (uint64_t)(a1[2] - a1[1]) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices does not match the rank of the tensor.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  __p = 0;
  v46 = 0;
  v47 = 0;
  std::vector<unsigned long long>::reserve(&__p, v5);
  v8 = a1[1];
  if (a1[2] != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = (*a2)[2 * v9];
      v10 = (*a2)[2 * v9 + 1];
      v12 = v10 - v11;
      if (v10 < v11)
        break;
      if (v10 > *(_QWORD *)(v8 + 8 * v9))
      {
        v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v34, "Indices end is out of the bound for the tensor dimension.");
        v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
        v35 = (void (*)(void *))MEMORY[0x1E0DE42E0];
        v36 = (struct type_info *)off_1EA992588;
LABEL_45:
        __cxa_throw(v34, v36, v35);
      }
      v13 = v46;
      if (v46 >= v47)
      {
        v15 = (char *)__p;
        v16 = (v46 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v47 - (_BYTE *)__p;
        if ((v47 - (_BYTE *)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v47, v19);
          v15 = (char *)__p;
          v13 = v46;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v14 = (uint64_t)(v21 + 8);
        while (v13 != v15)
        {
          v22 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        __p = v21;
        v46 = (char *)v14;
        v47 = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *(_QWORD *)v46 = v12;
        v14 = (uint64_t)(v13 + 8);
      }
      v46 = (char *)v14;
      ++v9;
      v8 = a1[1];
      if (v9 >= (a1[2] - v8) >> 3)
        goto LABEL_25;
    }
    v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "Indices end must not be smaller than the indices begin.");
    v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    v35 = (void (*)(void *))MEMORY[0x1E0DE4360];
    v36 = (struct type_info *)off_1EA992598;
    goto LABEL_45;
  }
  v14 = (uint64_t)v46;
LABEL_25:
  v43 = 0uLL;
  v44 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v43, __p, v14, (v14 - (uint64_t)__p) >> 3);
  MIL::ValueInference::Tensor<MIL::Fp16>::Zeros(&v43, (uint64_t)a3);
  if (v43.n128_u64[0])
  {
    v43.n128_u64[1] = v43.n128_u64[0];
    operator delete((void *)v43.n128_u64[0]);
  }
  v23 = a3[5] - a3[4];
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 1;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v38, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 3);
      v27 = a1[2] - a1[1];
      if (v27)
      {
        v28 = v27 >> 3;
        v29 = *a2;
        v30 = v38;
        if (v28 <= 1)
          v28 = 1;
        do
        {
          v31 = *v29;
          v29 += 2;
          *v30++ += v31;
          --v28;
        }
        while (v28);
      }
      v33 = a1[4];
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      if (v41)
      {
        v42 = v41;
        operator delete(v41);
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (__p)
  {
    v46 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1E06DC6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Zeros(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 __p;

  v4 = (uint64_t *)a1->n128_u64[0];
  v5 = 1;
  while (v4 != (uint64_t *)a1->n128_u64[1])
  {
    v6 = *v4++;
    v5 *= v6;
  }
  std::vector<MIL::Fp16>::vector(&__p, v5);
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, a1, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06DC7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Concat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  _BYTE *v27;
  __n128 __p;
  uint64_t v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;

  v6 = *a1;
  v7 = 0;
  v8 = a1[1] - *a1;
  if (v8)
  {
    v9 = v8 >> 6;
    if (v9 <= 1)
      v9 = 1;
    v10 = (uint64_t *)(v6 + 8);
    do
    {
      v11 = *v10;
      v10 += 8;
      v7 += *(_QWORD *)(v11 + 8 * a2);
      --v9;
    }
    while (v9);
  }
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v30, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 3);
  v12 = v30;
  *((_QWORD *)v30 + a2) = v7;
  v29 = 0;
  __p = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v12, (uint64_t)v31, (v31 - (_BYTE *)v12) >> 3);
  MIL::ValueInference::Tensor<MIL::Fp16>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  v13 = *a1;
  v14 = a1[1];
  if (v14 != *a1)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + (v15 << 6) + 40) - *(_QWORD *)(v13 + (v15 << 6) + 32);
      if (v17)
      {
        v18 = 0;
        if ((unint64_t)(v17 >> 1) <= 1)
          v19 = 1;
        else
          v19 = v17 >> 1;
        do
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v23, v26, (uint64_t)v27, (v27 - (_BYTE *)v26) >> 3);
          *((_QWORD *)v23 + a2) += v16;
          v20 = *a1 + (v15 << 6);
          v22 = *(_QWORD *)(v20 + 32);
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v23)
          {
            v24 = v23;
            operator delete(v23);
          }
          if (v26)
          {
            v27 = v26;
            operator delete(v26);
          }
          ++v18;
        }
        while (v19 != v18);
        v13 = *a1;
        v14 = a1[1];
      }
      v16 += *(_QWORD *)(*(_QWORD *)(v13 + (v15++ << 6) + 8) + 8 * a2);
    }
    while (v15 < (v14 - v13) >> 6);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_1E06DC9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::BlockwiseMerge(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t i;
  unint64_t v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::runtime_error *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::runtime_error *exception;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  _BYTE *v45;
  void *v46[3];
  __n128 __p;
  uint64_t v48;
  std::string v49;
  void *v50;
  _BYTE *v51;
  uint64_t v52;

  v6 = *(uint64_t **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    v8 = v7 >> 3;
    if (v8 <= 1)
      v8 = 1;
    v9 = 1;
    do
    {
      v10 = *v6++;
      v9 *= v10;
      --v8;
    }
    while (v8);
  }
  else
  {
    v9 = 1;
  }
  v11 = *a1;
  if (v9 != (a1[1] - *a1) >> 6)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"The number of tensors (", 23);
    v38 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") is not the same as the number of blocks (", 43);
    v39 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)").", 2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v49);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v50, *(const void **)(v11 + 8), *(_QWORD *)(v11 + 16), (uint64_t)(*(_QWORD *)(v11 + 16) - *(_QWORD *)(v11 + 8)) >> 3);
  memset(&v49, 0, sizeof(v49));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v49, v50, (uint64_t)v51, (v51 - (_BYTE *)v50) >> 3);
  v12 = *(uint64_t **)a2;
  v13 = (const void *)v49.__r_.__value_.__r.__words[0];
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_QWORD *)v49.__r_.__value_.__r.__words[0];
    do
    {
      v17 = *v12++;
      *v16++ *= v17;
      --v15;
    }
    while (v15);
  }
  __p = 0uLL;
  v48 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v13, v49.__r_.__value_.__l.__size_, (uint64_t)(v49.__r_.__value_.__l.__size_ - (_QWORD)v13) >> 3);
  MIL::ValueInference::Tensor<MIL::Fp16>::Zeros(&__p, a3);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v19 = *a1 + (i << 6);
      v20 = *(const void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16) - (_QWORD)v20;
      if (v21 != v51 - (_BYTE *)v50 || memcmp(v20, v50, v21))
      {
        v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "All tensors must have the same shape so they can be merged.");
        __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v22 = *(_QWORD *)(*a1 + (i << 6) + 40) - *(_QWORD *)(*a1 + (i << 6) + 32);
      if (v22)
      {
        v23 = 0;
        v24 = v22 >> 1;
        if (v24 <= 1)
          v25 = 1;
        else
          v25 = v24;
        do
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v41, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 3);
          v26 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
          if (v26)
          {
            v27 = v26 >> 3;
            v28 = (uint64_t *)v50;
            v29 = (uint64_t *)v46[0];
            v30 = v41;
            if (v27 <= 1)
              v27 = 1;
            do
            {
              v32 = *v28++;
              v31 = v32;
              v33 = *v29++;
              *v30++ += v33 * v31;
              --v27;
            }
            while (v27);
          }
          v34 = *a1 + (i << 6);
          v36 = *(_QWORD *)(v34 + 32);
          *(_WORD *)(*(_QWORD *)(a3 + 32)
          if (v41)
          {
            v42 = v41;
            operator delete(v41);
          }
          if (v44)
          {
            v45 = v44;
            operator delete(v44);
          }
          ++v23;
        }
        while (v23 != v25);
      }
      if (v46[0])
      {
        v46[1] = v46[0];
        operator delete(v46[0]);
      }
    }
  }
  if (v49.__r_.__value_.__r.__words[0])
  {
    v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1E06DCDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29)
{
  void *v29;
  int v30;

  if (a27 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

uint64_t MIL::ValueInference::Tensor<MIL::Fp16>::Reduce@<X0>(_QWORD *a1@<X0>, unint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  _QWORD *i;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string::size_type v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  __int16 v89;
  _QWORD *v91;
  _QWORD *v92;
  std::logic_error *exception;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  __int16 v106;
  unint64_t v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  void *v113[3];
  __n128 v114;
  uint64_t v115;
  void *v116;
  char *v117;
  char *v118;
  std::string v119;
  void *__p;
  char *v121;
  _QWORD v122[31];
  _QWORD v123[2];
  _QWORD *v124;

  v103 = a1[1];
  v104 = a1 + 1;
  v102 = a1[2];
  v7 = (v102 - v103) >> 3;
  std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>((uint64_t)v123, *a2, a2[1]);
  for (i = v124; i; i = (_QWORD *)*i)
  {
    if (i[2] >= v7)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"axis(", 5);
      v91 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") must be smaller than the number of input dimensions(", 54);
      v92 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)").", 2);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v119);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  __p = 0;
  v121 = 0;
  v122[0] = 0;
  memset(&v119, 0, sizeof(v119));
  v116 = 0;
  v117 = 0;
  v118 = 0;
  if (v102 == v103)
  {
    v55 = 0;
    v54 = 0;
  }
  else
  {
    v9 = 0;
    v5 = v122;
    if (v7 <= 1)
      v10 = 1;
    else
      v10 = (v102 - v103) >> 3;
    do
    {
      v113[0] = v9;
      if (std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v123, (unint64_t *)v113))
      {
        if (a3)
        {
          v11 = v121;
          if ((unint64_t)v121 >= v122[0])
          {
            v22 = (char *)__p;
            v23 = (v121 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v25 = v122[0] - (_QWORD)__p;
            if ((uint64_t)(v122[0] - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v122, v26);
              v22 = (char *)__p;
              v11 = v121;
            }
            else
            {
              v27 = 0;
            }
            v41 = &v27[8 * v23];
            *(_QWORD *)v41 = 1;
            v12 = v41 + 8;
            while (v11 != v22)
            {
              v42 = *((_QWORD *)v11 - 1);
              v11 -= 8;
              *((_QWORD *)v41 - 1) = v42;
              v41 -= 8;
            }
            __p = v41;
            v121 = v12;
            v122[0] = &v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *(_QWORD *)v121 = 1;
            v12 = v11 + 8;
          }
          v121 = v12;
        }
        v43 = *v104;
        v44 = v117;
        if (v117 >= v118)
        {
          v46 = (char *)v116;
          v47 = (v117 - (_BYTE *)v116) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
LABEL_154:
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v49 = v118 - (_BYTE *)v116;
          if ((v118 - (_BYTE *)v116) >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v118, v50);
            v46 = (char *)v116;
            v44 = v117;
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          v116 = v52;
          v117 = v45;
          v118 = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v117 = *(_QWORD *)(v43 + 8 * (_QWORD)v9);
          v45 = v44 + 8;
        }
        v117 = v45;
      }
      else
      {
        v13 = *v104;
        v14 = v121;
        if ((unint64_t)v121 >= v122[0])
        {
          v16 = (char *)__p;
          v17 = (v121 - (_BYTE *)__p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            goto LABEL_154;
          v19 = v122[0] - (_QWORD)__p;
          if ((uint64_t)(v122[0] - (_QWORD)__p) >> 2 > v18)
            v18 = v19 >> 2;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v20 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v122, v20);
            v16 = (char *)__p;
            v14 = v121;
          }
          else
          {
            v21 = 0;
          }
          v28 = &v21[8 * v17];
          *(_QWORD *)v28 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v28 + 8;
          while (v14 != v16)
          {
            v29 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v28 - 1) = v29;
            v28 -= 8;
          }
          __p = v28;
          v121 = v15;
          v122[0] = &v21[8 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v121 = *(_QWORD *)(v13 + 8 * (_QWORD)v9);
          v15 = v14 + 8;
        }
        v121 = v15;
        v30 = *v104;
        size = v119.__r_.__value_.__l.__size_;
        if (v119.__r_.__value_.__l.__size_ >= v119.__r_.__value_.__r.__words[2])
        {
          v33 = (void *)v119.__r_.__value_.__r.__words[0];
          v34 = (uint64_t)(v119.__r_.__value_.__l.__size_ - v119.__r_.__value_.__r.__words[0]) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_154;
          v36 = v119.__r_.__value_.__r.__words[2] - v119.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v119.__r_.__value_.__r.__words[2] - v119.__r_.__value_.__r.__words[0]) >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v119.__r_.__value_.__r.__words[2], v37);
            size = v119.__r_.__value_.__l.__size_;
            v33 = (void *)v119.__r_.__value_.__r.__words[0];
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = (std::string::size_type)(v39 + 8);
          while ((void *)size != v33)
          {
            v40 = *(_QWORD *)(size - 8);
            size -= 8;
            *((_QWORD *)v39 - 1) = v40;
            v39 -= 8;
          }
          v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v119.__r_.__value_.__l.__size_ = v32;
          v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&v38[8 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_QWORD *)v119.__r_.__value_.__l.__size_ = *(_QWORD *)(v30 + 8 * (_QWORD)v9);
          v32 = size + 8;
        }
        v119.__r_.__value_.__l.__size_ = v32;
      }
      v9 = (char *)v9 + 1;
    }
    while (v9 != (void *)v10);
    v54 = __p;
    v55 = (uint64_t)v121;
  }
  v114 = 0uLL;
  v115 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v114, v54, v55, (v55 - (uint64_t)v54) >> 3);
  MIL::ValueInference::Tensor<MIL::Fp16>::Zeros(&v114, a5);
  if (v114.n128_u64[0])
  {
    v114.n128_u64[1] = v114.n128_u64[0];
    operator delete((void *)v114.n128_u64[0]);
  }
  v56 = *(_QWORD *)(a5 + 40) - *(_QWORD *)(a5 + 32);
  if (v56)
  {
    v57 = 0;
    v58 = v56 >> 1;
    v95 = v56 >> 1;
    v96 = (uint64_t)(a1[5] - a1[4]) >> 1;
    v59 = v96 / (v56 >> 1);
    v60 = (uint64_t **)(a5 + 8);
    if (v7 <= 1)
      v61 = 1;
    else
      v61 = (v102 - v103) >> 3;
    if (v58 <= 1)
      v62 = 1;
    else
      v62 = v58;
    v94 = v62;
    if (v59 <= 1)
      v59 = 1;
    v100 = v59;
    do
    {
      v98 = v57;
      LOWORD(v5) = (unsigned __int16)v5 & 0xFF00;
      if (v95 <= v96)
      {
        v63 = 0;
        v105 = 0;
        do
        {
          v106 = (__int16)v5;
          v108 = 0;
          v109 = 0;
          v110 = 0;
          if (v102 != v103)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v107 = v64;
              v67 = std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(v123, &v107);
              v68 = v109;
              if (v67)
              {
                v69 = v111;
                if (v109 >= v110)
                {
                  v73 = (char *)v108;
                  v74 = (v109 - (_BYTE *)v108) >> 3;
                  v75 = v74 + 1;
                  if ((unint64_t)(v74 + 1) >> 61)
                    goto LABEL_152;
                  v76 = v110 - (_BYTE *)v108;
                  if ((v110 - (_BYTE *)v108) >> 2 > v75)
                    v75 = v76 >> 2;
                  if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                    v77 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v77 = v75;
                  if (v77)
                  {
                    v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v110, v77);
                    v73 = (char *)v108;
                    v68 = v109;
                  }
                  else
                  {
                    v78 = 0;
                  }
                  v85 = &v78[8 * v74];
                  *(_QWORD *)v85 = v69[v65];
                  v70 = v85 + 8;
                  while (v68 != v73)
                  {
                    v86 = *((_QWORD *)v68 - 1);
                    v68 -= 8;
                    *((_QWORD *)v85 - 1) = v86;
                    v85 -= 8;
                  }
                  v108 = v85;
                  v109 = v70;
                  v110 = &v78[8 * v77];
                  if (v73)
                    operator delete(v73);
                }
                else
                {
                  *(_QWORD *)v109 = *((_QWORD *)v111 + v65);
                  v70 = v68 + 8;
                }
                v109 = v70;
                ++v65;
              }
              else
              {
                v71 = v113[0];
                if (v109 >= v110)
                {
                  v79 = (char *)v108;
                  v80 = (v109 - (_BYTE *)v108) >> 3;
                  v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 61)
LABEL_152:
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  v82 = v110 - (_BYTE *)v108;
                  if ((v110 - (_BYTE *)v108) >> 2 > v81)
                    v81 = v82 >> 2;
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
                    v83 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v83 = v81;
                  if (v83)
                  {
                    v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v110, v83);
                    v79 = (char *)v108;
                    v68 = v109;
                  }
                  else
                  {
                    v84 = 0;
                  }
                  v87 = &v84[8 * v80];
                  *(_QWORD *)v87 = v71[v66];
                  v72 = v87 + 8;
                  while (v68 != v79)
                  {
                    v88 = *((_QWORD *)v68 - 1);
                    v68 -= 8;
                    *((_QWORD *)v87 - 1) = v88;
                    v87 -= 8;
                  }
                  v108 = v87;
                  v109 = v72;
                  v110 = &v84[8 * v83];
                  if (v79)
                    operator delete(v79);
                }
                else
                {
                  *(_QWORD *)v109 = *((_QWORD *)v113[0] + v66);
                  v72 = v68 + 8;
                }
                v109 = v72;
                ++v66;
              }
              ++v64;
            }
            while (v64 != v61);
          }
          if (v105)
          {
            LOWORD(v5) = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a4, v106, v89);
          }
          else
          {
            v105 = 1;
            LOWORD(v5) = v89;
          }
          v60 = (uint64_t **)(a5 + 8);
          if (v108)
          {
            v109 = (char *)v108;
            operator delete(v108);
          }
          if (v111)
          {
            v112 = v111;
            operator delete(v111);
          }
          ++v63;
        }
        while (v63 != v100);
      }
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      if (v113[0])
      {
        v113[1] = v113[0];
        operator delete(v113[0]);
      }
      v57 = v98 + 1;
    }
    while (v98 + 1 != v94);
  }
  if (v116)
  {
    v117 = (char *)v116;
    operator delete(v116);
  }
  if (v119.__r_.__value_.__r.__words[0])
  {
    v119.__r_.__value_.__l.__size_ = v119.__r_.__value_.__r.__words[0];
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v121 = (char *)__p;
    operator delete(__p);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v123);
}

void sub_1E06DD714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  void *v46;
  int v47;
  uint64_t v48;

  if (a44 < 0)
  {
    operator delete(__p);
    if ((v47 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a45);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v48 - 128);
      _Unwind_Resume(a1);
    }
  }
  else if (!v47)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v46);
  goto LABEL_6;
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Zeros(MIL *a1@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  MIL::GetTensorShapeWithDimensionsAllKnown(a1, a2, (uint64_t)v6);
  *(_OWORD *)__p = *(_OWORD *)v6;
  v5 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  MIL::ValueInference::Tensor<MIL::Fp16>::Zeros((__n128 *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1E06DD8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<float,float>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  float v19;
  float v20;
  int v21;
  float ScalarData;
  float v23;
  int v24;
  int v25;
  _DWORD *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *__s2;
  _BYTE *v33;
  void *v34[2];
  uint64_t v35;
  __n128 __p;
  uint64_t v37;
  __n128 v38;
  _DWORD *v39;
  __n128 v40;
  uint64_t v41;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<float>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<float>::GetScalarData(a2);
    std::function<float ()(float,float)>::operator()(a3, ScalarData, v23);
    v25 = v24;
    v40 = 0uLL;
    v41 = 0;
    v26 = operator new(4uLL);
    v38.n128_u64[0] = (unint64_t)v26;
    *v26 = v25;
    v38.n128_u64[1] = (unint64_t)(v26 + 1);
    v39 = v26 + 1;
    MIL::ValueInference::Tensor<float>::Tensor(a5, &v40, &v38);
  }
  else
  {
    __p = 0uLL;
    v37 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<float>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v38.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v40, v13, &v38);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v34[0] = 0;
    std::vector<unsigned long long>::vector(&v38, v14, v34);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v34, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v30 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v30);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v34[0];
      if ((char *)v34[1] - (char *)v34[0] == v33 - v17 && !memcmp(v34[0], v17, (char *)v34[1] - (char *)v34[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<float>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<float>::GetScalarData(a2);
      else
      std::function<float ()(float,float)>::operator()(a3, v19, v20);
      v28 = 0;
      v29 = 0;
      v27 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v27, v34[0], (uint64_t)v34[1], ((char *)v34[1] - (char *)v34[0]) >> 3);
      if (v34[0])
      {
        v34[1] = v34[0];
        operator delete(v34[0]);
      }
      *(_OWORD *)v34 = v30;
      v35 = v31;
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v33 = v17;
      operator delete(v17);
      v18 = v34[0];
    }
    if (v18)
    {
      v34[1] = v18;
      operator delete(v18);
    }
  }
  if (v38.n128_u64[0])
  {
    v38.n128_u64[1] = v38.n128_u64[0];
    operator delete((void *)v38.n128_u64[0]);
  }
  if (v40.n128_u64[0])
  {
    v40.n128_u64[1] = v40.n128_u64[0];
    operator delete((void *)v40.n128_u64[0]);
  }
}

void sub_1E06DDBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(_QWORD *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::GetInputIndexFromOutputIndex(uint64_t result, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::logic_error *exception;

  v4 = *a3;
  v5 = a3[1];
  if (*a3 != v5)
  {
    v6 = (v5 - v4) >> 3;
    if (v6 > (uint64_t)(a2[1] - *a2) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "inShape has more elements than outShape.");
    }
    else
    {
      v7 = a4[1];
      if (v6 == (v7 - *a4) >> 3)
      {
        v8 = (unint64_t *)(v7 - 8);
        v9 = (unint64_t *)(*(_QWORD *)(result + 8) - 8);
        do
        {
          v11 = *(_QWORD *)(v5 - 8);
          v5 -= 8;
          v10 = v11;
          v12 = *v9--;
          *v8-- = v12 % v10;
        }
        while (v5 != v4);
        return result;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "Size of inIndex is not equal to size of inShape.");
    }
    __cxa_throw(exception, (struct type_info *)off_1EA992588, MEMORY[0x1E0DE42E0]);
  }
  return result;
}

void sub_1E06DDD64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 `anonymous namespace'::FetchNextIndex@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *i;
  unint64_t v13;
  std::logic_error *exception;
  __n128 result;

  v3 = 0;
  v4 = *(unint64_t **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v6 = *(unint64_t **)a1;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) - 8;
  v8 = *(_QWORD *)a2 + v7;
  v9 = (unint64_t *)(*(_QWORD *)a1 + v7);
  v10 = -(v5 >> 3);
  v11 = 1 - (v5 >> 3);
  for (i = v9; ; --i)
  {
    if (v11 == v3)
    {
      v13 = *v6;
      if (*v6 < *v4)
        break;
    }
    v13 = v9[v3];
    if (v13 < *(_QWORD *)(v8 + 8 * v3) - 1)
      goto LABEL_8;
    v9[v3--] = 0;
    if (v10 == v3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "The next index cannot be found.");
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  i = v6;
LABEL_8:
  *i = v13 + 1;
  *(_QWORD *)a3 = v6;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  return result;
}

void sub_1E06DDE54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 ScalarData;
  __int16 v23;
  __int16 v24;
  _WORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _WORD *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a2);
    v24 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(2uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<MIL::Fp16>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a2);
      else
      v21 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DE158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<MIL::Bf16,MIL::Bf16>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 ScalarData;
  __int16 v23;
  __int16 v24;
  _WORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _WORD *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a2);
    v24 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(2uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<MIL::Bf16>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a2);
      else
      v21 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DE528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<int,int>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  int ScalarData;
  int v23;
  int v24;
  _DWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _DWORD *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<int>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<int>::GetScalarData(a2);
    v24 = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(4uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<int>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<int>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<int>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<int>::GetScalarData(a2);
      else
      v21 = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DE8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<BOOL,BOOL>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  char ScalarData;
  char v23;
  char v24;
  _BYTE *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _BYTE *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<BOOL>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<BOOL>::GetScalarData(a2);
    v24 = std::function<unsigned char ()(unsigned char,unsigned char)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(1uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<BOOL>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<BOOL>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<BOOL>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<BOOL>::GetScalarData(a2);
      else
      v21 = std::function<unsigned char ()(unsigned char,unsigned char)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DECC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<float,BOOL>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  float v19;
  float v20;
  char v21;
  float ScalarData;
  float v23;
  char v24;
  _BYTE *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _BYTE *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<float>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<float>::GetScalarData(a2);
    v24 = std::function<float ()(float,float)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(1uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<BOOL>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<BOOL>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<float>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<float>::GetScalarData(a2);
      else
      v21 = std::function<float ()(float,float)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DF098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 128);
  if (v29)
  {
    *(_QWORD *)(v27 - 120) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<int,BOOL>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  int v19;
  int v20;
  char v21;
  int ScalarData;
  int v23;
  char v24;
  _BYTE *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _BYTE *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<int>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<int>::GetScalarData(a2);
    v24 = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(1uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<BOOL>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<BOOL>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<int>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<int>::GetScalarData(a2);
      else
      v21 = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DF464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<MIL::Fp16,BOOL>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  __int16 v19;
  __int16 v20;
  char v21;
  __int16 ScalarData;
  __int16 v23;
  char v24;
  _BYTE *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _BYTE *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a2);
    v24 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(1uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<BOOL>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<BOOL>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<MIL::Fp16>::GetScalarData(a2);
      else
      v21 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DF830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::BinaryOp<MIL::Bf16,BOOL>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  void *v18;
  __int16 v19;
  __int16 v20;
  char v21;
  __int16 ScalarData;
  __int16 v23;
  char v24;
  _BYTE *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__s2;
  _BYTE *v32;
  void *v33[2];
  uint64_t v34;
  __n128 __p;
  uint64_t v36;
  __n128 v37;
  _BYTE *v38;
  __n128 v39;
  uint64_t v40;

  v9 = (_QWORD *)*a4;
  v10 = a4[1];
  v11 = v10 - *a4;
  if (v10 == *a4)
  {
    ScalarData = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a1);
    v23 = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a2);
    v24 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, ScalarData, v23);
    v39 = 0uLL;
    v40 = 0;
    v25 = operator new(1uLL);
    v37.n128_u64[0] = (unint64_t)v25;
    *v25 = v24;
    v37.n128_u64[1] = (unint64_t)(v25 + 1);
    v38 = v25 + 1;
    MIL::ValueInference::Tensor<BOOL>::Tensor(a5, &v39, &v37);
  }
  else
  {
    __p = 0uLL;
    v36 = 0;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v9, v10, v11 >> 3);
    MIL::ValueInference::Tensor<BOOL>::Zeros(&__p, a5);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    v13 = (uint64_t)(a1[2] - a1[1]) >> 3;
    v37.n128_u64[0] = 0;
    std::vector<unsigned long long>::vector(&v39, v13, &v37);
    v14 = (uint64_t)(a2[2] - a2[1]) >> 3;
    v33[0] = 0;
    std::vector<unsigned long long>::vector(&v37, v14, v33);
    v15 = (uint64_t)(a4[1] - *a4) >> 3;
    __s2 = 0;
    std::vector<unsigned long long>::vector(v33, v15, &__s2);
    v16 = (uint64_t)(a4[1] - *a4) >> 3;
    *(_QWORD *)&v29 = 0;
    std::vector<unsigned long long>::vector(&__s2, v16, &v29);
    v17 = __s2;
    *(_QWORD *)__s2 = *(_QWORD *)*a4;
    while (1)
    {
      v18 = v33[0];
      if ((char *)v33[1] - (char *)v33[0] == v32 - v17 && !memcmp(v33[0], v17, (char *)v33[1] - (char *)v33[0]))
        break;
      if (a1[1] == a1[2])
        v19 = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a1);
      else
      if (a2[1] == a2[2])
        v20 = MIL::ValueInference::Tensor<MIL::Bf16>::GetScalarData(a2);
      else
      v21 = std::function<unsigned short ()(unsigned short,unsigned short)>::operator()(a3, v19, v20);
      v27 = 0;
      v28 = 0;
      v26 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, v33[0], (uint64_t)v33[1], ((char *)v33[1] - (char *)v33[0]) >> 3);
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
      *(_OWORD *)v33 = v29;
      v34 = v30;
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v17 = __s2;
    }
    if (v17)
    {
      v32 = v17;
      operator delete(v17);
      v18 = v33[0];
    }
    if (v18)
    {
      v33[1] = v18;
      operator delete(v18);
    }
  }
  if (v37.n128_u64[0])
  {
    v37.n128_u64[1] = v37.n128_u64[0];
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v39.n128_u64[0])
  {
    v39.n128_u64[1] = v39.n128_u64[0];
    operator delete((void *)v39.n128_u64[0]);
  }
}

void sub_1E06DFBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Bf16 *v6;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int16 v17;
  __int16 *v18;
  __int16 *v19;
  _WORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 __p;
  unint64_t v26;
  __int16 v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  __p = 0uLL;
  v26 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
  {
    v7 = 0;
    do
    {
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, 0.0);
      v8 = (__int16)v6;
      v9 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v26)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v11 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v12 = v11 >> 1;
        if (v26 - __p.n128_u64[0] <= (v11 >> 1) + 1)
          v13 = v12 + 1;
        else
          v13 = v26 - __p.n128_u64[0];
        if (v26 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v26, v14);
          v9 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[2 * v12];
        *(_WORD *)v16 = v8;
        v10 = (unint64_t)(v16 + 2);
        while ((MIL::Bf16 *)v9 != v6)
        {
          v17 = *(_WORD *)(v9 - 2);
          v9 -= 2;
          *((_WORD *)v16 - 1) = v17;
          v16 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v16;
        __p.n128_u64[1] = v10;
        v26 = (unint64_t)&v15[2 * v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v10 = v9 + 2;
      }
      __p.n128_u64[1] = v10;
      ++v7;
    }
    while (v7 < (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  }
  v23 = 0uLL;
  v24 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v23, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v19 = *(__int16 **)(a1 + 32);
  v18 = *(__int16 **)(a1 + 40);
  v20 = (_WORD *)__p.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v28, a2);
  while (v19 != v18)
  {
    v27 = *v19;
    if (!v29)
      std::__throw_bad_function_call[abi:ne180100]();
    *v20++ = (*(uint64_t (**)(_BYTE *, __int16 *))(*(_QWORD *)v29 + 48))(v29, &v27);
    ++v19;
  }
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_30;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_30:
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a3, &v23, &__p);
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06DFF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::ForEach(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Fp16 *v6;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int16 v17;
  __int16 *v18;
  __int16 *v19;
  _WORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 __p;
  unint64_t v26;
  __int16 v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  __p = 0uLL;
  v26 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a1 + 32))
  {
    v7 = 0;
    do
    {
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, 0.0);
      v8 = (__int16)v6;
      v9 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v26)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v11 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v12 = v11 >> 1;
        if (v26 - __p.n128_u64[0] <= (v11 >> 1) + 1)
          v13 = v12 + 1;
        else
          v13 = v26 - __p.n128_u64[0];
        if (v26 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v26, v14);
          v9 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[2 * v12];
        *(_WORD *)v16 = v8;
        v10 = (unint64_t)(v16 + 2);
        while ((MIL::Fp16 *)v9 != v6)
        {
          v17 = *(_WORD *)(v9 - 2);
          v9 -= 2;
          *((_WORD *)v16 - 1) = v17;
          v16 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v16;
        __p.n128_u64[1] = v10;
        v26 = (unint64_t)&v15[2 * v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v10 = v9 + 2;
      }
      __p.n128_u64[1] = v10;
      ++v7;
    }
    while (v7 < (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 1);
  }
  v23 = 0uLL;
  v24 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v23, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v19 = *(__int16 **)(a1 + 32);
  v18 = *(__int16 **)(a1 + 40);
  v20 = (_WORD *)__p.n128_u64[0];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v28, a2);
  while (v19 != v18)
  {
    v27 = *v19;
    if (!v29)
      std::__throw_bad_function_call[abi:ne180100]();
    *v20++ = (*(uint64_t (**)(_BYTE *, __int16 *))(*(_QWORD *)v29 + 48))(v29, &v27);
    ++v19;
  }
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_30;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_30:
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a3, &v23, &__p);
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1E06E01DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      v8 = MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7)) != 0.0;
      v9 = (char *)__p.n128_u64[1];
      if (__p.n128_u64[1] >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0] + 1;
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v22 - __p.n128_u64[0];
        if (2 * (v22 - __p.n128_u64[0]) > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = v16 + v12;
        v18 = (BOOL *)(v16 + v12);
        *v18 = v8;
        v10 = (unint64_t)(v18 + 1);
        if (v9 != (char *)v11)
        {
          v19 = &v9[~v11];
          do
          {
            v20 = *--v9;
            (v19--)[v16] = v20;
          }
          while (v9 != (char *)v11);
          v9 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = v16 + v15;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_BYTE *)__p.n128_u64[1] = v8;
        v10 = (unint64_t)(v9 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E03F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::Bf16 const*>,std::__wrap_iter<MIL::Bf16 const*>>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 1);
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06E04BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float Float;
  MIL::Bf16 *v9;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;
  __n128 __p;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v25 = 0;
  v24 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v24, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v23 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7));
      v10 = MIL::Bf16::FromFloat(v9, Float);
      v11 = v10;
      v12 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v23)
      {
        v14 = (void *)__p.n128_u64[0];
        v15 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v15 >> 1;
        if (v23 - __p.n128_u64[0] <= (v15 >> 1) + 1)
          v17 = v16 + 1;
        else
          v17 = v23 - __p.n128_u64[0];
        if (v23 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v23, v18);
          v12 = __p.n128_u64[1];
          v14 = (void *)__p.n128_u64[0];
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[2 * v16];
        *(_WORD *)v20 = v11;
        v13 = (unint64_t)(v20 + 2);
        while ((void *)v12 != v14)
        {
          v21 = *(_WORD *)(v12 - 2);
          v12 -= 2;
          *((_WORD *)v20 - 1) = v21;
          v20 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v20;
        __p.n128_u64[1] = v13;
        v23 = (unint64_t)&v19[2 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = v10;
        v13 = v12 + 2;
      }
      __p.n128_u64[1] = v13;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v24, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24.n128_u64[0])
  {
    v24.n128_u64[1] = v24.n128_u64[0];
    operator delete((void *)v24.n128_u64[0]);
  }
}

void sub_1E06E0680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Bf16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 2);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, *(float *)(v7 + 4 * v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Bf16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < (a1[5] - v7) >> 2);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E0840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Bf16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 2);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, (float)*(int *)(v7 + 4 * v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Bf16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < (a1[5] - v7) >> 2);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E0A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Bf16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, (float)*(__int16 *)(v7 + 2 * v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Bf16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < (a1[5] - v7) >> 1);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E0BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Bf16 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int16 v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v8 = a1[4];
  if (a1[5] != v8)
  {
    v9 = 0;
    do
    {
      LOWORD(v7) = *(_WORD *)(v8 + 2 * v9);
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, (float)v7);
      v10 = (__int16)v6;
      v11 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v13 >> 1;
        if (v21 - __p.n128_u64[0] <= (v13 >> 1) + 1)
          v15 = v14 + 1;
        else
          v15 = v21 - __p.n128_u64[0];
        if (v21 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v21, v16);
          v11 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[2 * v14];
        *(_WORD *)v18 = v10;
        v12 = (unint64_t)(v18 + 2);
        while ((MIL::Bf16 *)v11 != v6)
        {
          v19 = *(_WORD *)(v11 - 2);
          v11 -= 2;
          *((_WORD *)v18 - 1) = v19;
          v18 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v12;
        v21 = (unint64_t)&v17[2 * v16];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v12 = v11 + 2;
      }
      __p.n128_u64[1] = v12;
      ++v9;
      v8 = a1[4];
    }
    while (v9 < (a1[5] - v8) >> 1);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06E0D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Bf16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, a1[5] - a1[4]);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, (float)*(char *)(v7 + v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Bf16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < a1[5] - v7);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E0F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Bf16 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int16 v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, a1[5] - a1[4]);
  v8 = a1[4];
  if (a1[5] != v8)
  {
    v9 = 0;
    do
    {
      LOBYTE(v7) = *(_BYTE *)(v8 + v9);
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, (float)v7);
      v10 = (__int16)v6;
      v11 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v13 >> 1;
        if (v21 - __p.n128_u64[0] <= (v13 >> 1) + 1)
          v15 = v14 + 1;
        else
          v15 = v21 - __p.n128_u64[0];
        if (v21 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v21, v16);
          v11 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[2 * v14];
        *(_WORD *)v18 = v10;
        v12 = (unint64_t)(v18 + 2);
        while ((MIL::Bf16 *)v11 != v6)
        {
          v19 = *(_WORD *)(v11 - 2);
          v11 -= 2;
          *((_WORD *)v18 - 1) = v19;
          v18 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v12;
        v21 = (unint64_t)&v17[2 * v16];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v12 = v11 + 2;
      }
      __p.n128_u64[1] = v12;
      ++v9;
      v8 = a1[4];
    }
    while (v9 < a1[5] - v8);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06E110C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<MIL::Bf16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Bf16 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int16 v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, a1[5] - a1[4]);
  v8 = a1[4];
  if (a1[5] != v8)
  {
    v9 = 0;
    do
    {
      LOBYTE(v7) = *(_BYTE *)(v8 + v9);
      v6 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v6, (float)v7);
      v10 = (__int16)v6;
      v11 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v6 = (MIL::Bf16 *)__p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v13 >> 1;
        if (v21 - __p.n128_u64[0] <= (v13 >> 1) + 1)
          v15 = v14 + 1;
        else
          v15 = v21 - __p.n128_u64[0];
        if (v21 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v21, v16);
          v11 = __p.n128_u64[1];
          v6 = (MIL::Bf16 *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[2 * v14];
        *(_WORD *)v18 = v10;
        v12 = (unint64_t)(v18 + 2);
        while ((MIL::Bf16 *)v11 != v6)
        {
          v19 = *(_WORD *)(v11 - 2);
          v11 -= 2;
          *((_WORD *)v18 - 1) = v19;
          v18 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v12;
        v21 = (unint64_t)&v17[2 * v16];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v12 = v11 + 2;
      }
      __p.n128_u64[1] = v12;
      ++v9;
      v8 = a1[4];
    }
    while (v9 < a1[5] - v8);
  }
  MIL::ValueInference::Tensor<MIL::Bf16>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06E12CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      v8 = MIL::Fp16::GetFloat((MIL::Fp16 *)(v6 + 2 * v7)) != 0.0;
      v9 = (char *)__p.n128_u64[1];
      if (__p.n128_u64[1] >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0] + 1;
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v22 - __p.n128_u64[0];
        if (2 * (v22 - __p.n128_u64[0]) > v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = v16 + v12;
        v18 = (BOOL *)(v16 + v12);
        *v18 = v8;
        v10 = (unint64_t)(v18 + 1);
        if (v9 != (char *)v11)
        {
          v19 = &v9[~v11];
          do
          {
            v20 = *--v9;
            (v19--)[v16] = v20;
          }
          while (v9 != (char *)v11);
          v9 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = v16 + v15;
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_BYTE *)__p.n128_u64[1] = v8;
        v10 = (unint64_t)(v9 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E14A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Bf16>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float Float;
  MIL::Fp16 *v9;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;
  __n128 __p;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v25 = 0;
  v24 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v24, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v23 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    do
    {
      Float = MIL::Bf16::GetFloat((MIL::Bf16 *)(v6 + 2 * v7));
      v10 = MIL::Fp16::FromFloat(v9, Float);
      v11 = v10;
      v12 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v23)
      {
        v14 = (void *)__p.n128_u64[0];
        v15 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v15 >> 1;
        if (v23 - __p.n128_u64[0] <= (v15 >> 1) + 1)
          v17 = v16 + 1;
        else
          v17 = v23 - __p.n128_u64[0];
        if (v23 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v23, v18);
          v12 = __p.n128_u64[1];
          v14 = (void *)__p.n128_u64[0];
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[2 * v16];
        *(_WORD *)v20 = v11;
        v13 = (unint64_t)(v20 + 2);
        while ((void *)v12 != v14)
        {
          v21 = *(_WORD *)(v12 - 2);
          v12 -= 2;
          *((_WORD *)v20 - 1) = v21;
          v20 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v20;
        __p.n128_u64[1] = v13;
        v23 = (unint64_t)&v19[2 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = v10;
        v13 = v12 + 2;
      }
      __p.n128_u64[1] = v13;
      ++v7;
      v6 = a1[4];
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v24, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24.n128_u64[0])
  {
    v24.n128_u64[1] = v24.n128_u64[0];
    operator delete((void *)v24.n128_u64[0]);
  }
}

void sub_1E06E1664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<MIL::Fp16>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __n128 __p;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v11 = 0;
  v10 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v10, v4, v5, (v5 - (uint64_t)v4) >> 3);
  v6 = (const void *)a1[4];
  v7 = a1[5];
  v9 = 0;
  __p = 0uLL;
  std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::Fp16 const*>,std::__wrap_iter<MIL::Fp16 const*>>(&__p, v6, v7, (v7 - (uint64_t)v6) >> 1);
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v10, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v10.n128_u64[0])
  {
    v10.n128_u64[1] = v10.n128_u64[0];
    operator delete((void *)v10.n128_u64[0]);
  }
}

void sub_1E06E1728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Fp16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 2);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, *(float *)(v7 + 4 * v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Fp16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < (a1[5] - v7) >> 2);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E18E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Fp16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 2);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, (float)*(int *)(v7 + 4 * v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Fp16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < (a1[5] - v7) >> 2);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E1AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Fp16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, (float)*(__int16 *)(v7 + 2 * v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Fp16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < (a1[5] - v7) >> 1);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E1C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Fp16 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int16 v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, (uint64_t)(a1[5] - a1[4]) >> 1);
  v8 = a1[4];
  if (a1[5] != v8)
  {
    v9 = 0;
    do
    {
      LOWORD(v7) = *(_WORD *)(v8 + 2 * v9);
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, (float)v7);
      v10 = (__int16)v6;
      v11 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v13 >> 1;
        if (v21 - __p.n128_u64[0] <= (v13 >> 1) + 1)
          v15 = v14 + 1;
        else
          v15 = v21 - __p.n128_u64[0];
        if (v21 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v21, v16);
          v11 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[2 * v14];
        *(_WORD *)v18 = v10;
        v12 = (unint64_t)(v18 + 2);
        while ((MIL::Fp16 *)v11 != v6)
        {
          v19 = *(_WORD *)(v11 - 2);
          v11 -= 2;
          *((_WORD *)v18 - 1) = v19;
          v18 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v12;
        v21 = (unint64_t)&v17[2 * v16];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v12 = v11 + 2;
      }
      __p.n128_u64[1] = v12;
      ++v9;
      v8 = a1[4];
    }
    while (v9 < (a1[5] - v8) >> 1);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06E1E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Fp16 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int16 v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, a1[5] - a1[4]);
  v8 = a1[4];
  if (a1[5] != v8)
  {
    v9 = 0;
    do
    {
      LOBYTE(v7) = *(_BYTE *)(v8 + v9);
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, (float)v7);
      v10 = (__int16)v6;
      v11 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v13 >> 1;
        if (v21 - __p.n128_u64[0] <= (v13 >> 1) + 1)
          v15 = v14 + 1;
        else
          v15 = v21 - __p.n128_u64[0];
        if (v21 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v21, v16);
          v11 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[2 * v14];
        *(_WORD *)v18 = v10;
        v12 = (unint64_t)(v18 + 2);
        while ((MIL::Fp16 *)v11 != v6)
        {
          v19 = *(_WORD *)(v11 - 2);
          v11 -= 2;
          *((_WORD *)v18 - 1) = v19;
          v18 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v12;
        v21 = (unint64_t)&v17[2 * v16];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v12 = v11 + 2;
      }
      __p.n128_u64[1] = v12;
      ++v9;
      v8 = a1[4];
    }
    while (v9 < a1[5] - v8);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06E1FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Fp16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int16 v18;
  __n128 __p;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v22 = 0;
  v21 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v21, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v20 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, a1[5] - a1[4]);
  v7 = a1[4];
  if (a1[5] != v7)
  {
    v8 = 0;
    do
    {
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, (float)*(char *)(v7 + v8));
      v9 = (__int16)v6;
      v10 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v20)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v12 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v20 - __p.n128_u64[0] <= (v12 >> 1) + 1)
          v14 = v13 + 1;
        else
          v14 = v20 - __p.n128_u64[0];
        if (v20 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v20, v15);
          v10 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[2 * v13];
        *(_WORD *)v17 = v9;
        v11 = (unint64_t)(v17 + 2);
        while ((MIL::Fp16 *)v10 != v6)
        {
          v18 = *(_WORD *)(v10 - 2);
          v10 -= 2;
          *((_WORD *)v17 - 1) = v18;
          v17 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v17;
        __p.n128_u64[1] = v11;
        v20 = (unint64_t)&v16[2 * v15];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v11 = v10 + 2;
      }
      __p.n128_u64[1] = v11;
      ++v8;
      v7 = a1[4];
    }
    while (v8 < a1[5] - v7);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v21, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v21.n128_u64[0])
  {
    v21.n128_u64[1] = v21.n128_u64[0];
    operator delete((void *)v21.n128_u64[0]);
  }
}

void sub_1E06E21B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<BOOL>::Cast<MIL::Fp16>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  MIL::Fp16 *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int16 v19;
  __n128 __p;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v23 = 0;
  v22 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v22, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v21 = 0;
  std::vector<MIL::Fp16>::reserve((void **)&__p, a1[5] - a1[4]);
  v8 = a1[4];
  if (a1[5] != v8)
  {
    v9 = 0;
    do
    {
      LOBYTE(v7) = *(_BYTE *)(v8 + v9);
      v6 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v6, (float)v7);
      v10 = (__int16)v6;
      v11 = __p.n128_u64[1];
      if (__p.n128_u64[1] >= v21)
      {
        v6 = (MIL::Fp16 *)__p.n128_u64[0];
        v13 = __p.n128_u64[1] - __p.n128_u64[0];
        if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = v13 >> 1;
        if (v21 - __p.n128_u64[0] <= (v13 >> 1) + 1)
          v15 = v14 + 1;
        else
          v15 = v21 - __p.n128_u64[0];
        if (v21 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
          v16 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v21, v16);
          v11 = __p.n128_u64[1];
          v6 = (MIL::Fp16 *)__p.n128_u64[0];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[2 * v14];
        *(_WORD *)v18 = v10;
        v12 = (unint64_t)(v18 + 2);
        while ((MIL::Fp16 *)v11 != v6)
        {
          v19 = *(_WORD *)(v11 - 2);
          v11 -= 2;
          *((_WORD *)v18 - 1) = v19;
          v18 -= 2;
        }
        __p.n128_u64[0] = (unint64_t)v18;
        __p.n128_u64[1] = v12;
        v21 = (unint64_t)&v17[2 * v16];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_WORD *)__p.n128_u64[1] = (_WORD)v6;
        v12 = v11 + 2;
      }
      __p.n128_u64[1] = v12;
      ++v9;
      v8 = a1[4];
    }
    while (v9 < a1[5] - v8);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::Tensor(a2, &v22, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
}

void sub_1E06E2374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<float>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  char *v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 2);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    v8 = (char *)__p.n128_u64[1];
    do
    {
      v9 = *(float *)(v6 + 4 * v7) != 0.0;
      if (v8 >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = &v8[-__p.n128_u64[0]];
        v13 = (int64_t)&v8[-__p.n128_u64[0] + 1];
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (unint64_t)&v22[-__p.n128_u64[0]];
        if (2 * (uint64_t)&v22[-__p.n128_u64[0]] > (unint64_t)v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = (unint64_t)&v12[v16];
        v18 = (BOOL *)&v12[v16];
        *v18 = v9;
        v10 = (unint64_t)(v18 + 1);
        if (v8 != (char *)v11)
        {
          v19 = &v8[~v11];
          do
          {
            v20 = *--v8;
            (v19--)[v16] = v20;
          }
          while (v8 != (char *)v11);
          v8 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = (char *)(v16 + v15);
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v10 = (unint64_t)(v8 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
      v8 = (char *)v10;
    }
    while (v7 < (a1[5] - v6) >> 2);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E254C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<int>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  char *v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 2);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    v8 = (char *)__p.n128_u64[1];
    do
    {
      v9 = *(_DWORD *)(v6 + 4 * v7) != 0;
      if (v8 >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = &v8[-__p.n128_u64[0]];
        v13 = (int64_t)&v8[-__p.n128_u64[0] + 1];
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (unint64_t)&v22[-__p.n128_u64[0]];
        if (2 * (uint64_t)&v22[-__p.n128_u64[0]] > (unint64_t)v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = (unint64_t)&v12[v16];
        v18 = (BOOL *)&v12[v16];
        *v18 = v9;
        v10 = (unint64_t)(v18 + 1);
        if (v8 != (char *)v11)
        {
          v19 = &v8[~v11];
          do
          {
            v20 = *--v8;
            (v19--)[v16] = v20;
          }
          while (v8 != (char *)v11);
          v8 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = (char *)(v16 + v15);
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v10 = (unint64_t)(v8 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
      v8 = (char *)v10;
    }
    while (v7 < (a1[5] - v6) >> 2);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E2724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<short>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  char *v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    v8 = (char *)__p.n128_u64[1];
    do
    {
      v9 = *(unsigned __int16 *)(v6 + 2 * v7) != 0;
      if (v8 >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = &v8[-__p.n128_u64[0]];
        v13 = (int64_t)&v8[-__p.n128_u64[0] + 1];
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (unint64_t)&v22[-__p.n128_u64[0]];
        if (2 * (uint64_t)&v22[-__p.n128_u64[0]] > (unint64_t)v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = (unint64_t)&v12[v16];
        v18 = (BOOL *)&v12[v16];
        *v18 = v9;
        v10 = (unint64_t)(v18 + 1);
        if (v8 != (char *)v11)
        {
          v19 = &v8[~v11];
          do
          {
            v20 = *--v8;
            (v19--)[v16] = v20;
          }
          while (v8 != (char *)v11);
          v8 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = (char *)(v16 + v15);
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v10 = (unint64_t)(v8 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
      v8 = (char *)v10;
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E28FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned short>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  char *v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, (uint64_t)(a1[5] - a1[4]) >> 1);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    v8 = (char *)__p.n128_u64[1];
    do
    {
      v9 = *(unsigned __int16 *)(v6 + 2 * v7) != 0;
      if (v8 >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = &v8[-__p.n128_u64[0]];
        v13 = (int64_t)&v8[-__p.n128_u64[0] + 1];
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (unint64_t)&v22[-__p.n128_u64[0]];
        if (2 * (uint64_t)&v22[-__p.n128_u64[0]] > (unint64_t)v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = (unint64_t)&v12[v16];
        v18 = (BOOL *)&v12[v16];
        *v18 = v9;
        v10 = (unint64_t)(v18 + 1);
        if (v8 != (char *)v11)
        {
          v19 = &v8[~v11];
          do
          {
            v20 = *--v8;
            (v19--)[v16] = v20;
          }
          while (v8 != (char *)v11);
          v8 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = (char *)(v16 + v15);
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v10 = (unint64_t)(v8 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
      v8 = (char *)v10;
    }
    while (v7 < (a1[5] - v6) >> 1);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E2AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<signed char>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  char *v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, a1[5] - a1[4]);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    v8 = (char *)__p.n128_u64[1];
    do
    {
      v9 = *(_BYTE *)(v6 + v7) != 0;
      if (v8 >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = &v8[-__p.n128_u64[0]];
        v13 = (int64_t)&v8[-__p.n128_u64[0] + 1];
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (unint64_t)&v22[-__p.n128_u64[0]];
        if (2 * (uint64_t)&v22[-__p.n128_u64[0]] > (unint64_t)v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = (unint64_t)&v12[v16];
        v18 = (BOOL *)&v12[v16];
        *v18 = v9;
        v10 = (unint64_t)(v18 + 1);
        if (v8 != (char *)v11)
        {
          v19 = &v8[~v11];
          do
          {
            v20 = *--v8;
            (v19--)[v16] = v20;
          }
          while (v8 != (char *)v11);
          v8 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = (char *)(v16 + v15);
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v10 = (unint64_t)(v8 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
      v8 = (char *)v10;
    }
    while (v7 < a1[5] - v6);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E2CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<unsigned char>::Cast<BOOL>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL *v18;
  char *v19;
  char v20;
  __n128 __p;
  char *v22;
  __n128 v23;
  uint64_t v24;

  v4 = (const void *)a1[1];
  v5 = a1[2];
  v24 = 0;
  v23 = 0uLL;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v23, v4, v5, (v5 - (uint64_t)v4) >> 3);
  __p = 0uLL;
  v22 = 0;
  std::vector<unsigned char>::reserve(__p.n128_u64, a1[5] - a1[4]);
  v6 = a1[4];
  if (a1[5] != v6)
  {
    v7 = 0;
    v8 = (char *)__p.n128_u64[1];
    do
    {
      v9 = *(_BYTE *)(v6 + v7) != 0;
      if (v8 >= v22)
      {
        v11 = __p.n128_u64[0];
        v12 = &v8[-__p.n128_u64[0]];
        v13 = (int64_t)&v8[-__p.n128_u64[0] + 1];
        if (v13 < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v14 = (unint64_t)&v22[-__p.n128_u64[0]];
        if (2 * (uint64_t)&v22[-__p.n128_u64[0]] > (unint64_t)v13)
          v13 = 2 * v14;
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
          v16 = (unint64_t)operator new(v15);
        else
          v16 = 0;
        v17 = (unint64_t)&v12[v16];
        v18 = (BOOL *)&v12[v16];
        *v18 = v9;
        v10 = (unint64_t)(v18 + 1);
        if (v8 != (char *)v11)
        {
          v19 = &v8[~v11];
          do
          {
            v20 = *--v8;
            (v19--)[v16] = v20;
          }
          while (v8 != (char *)v11);
          v8 = (char *)__p.n128_u64[0];
          v17 = v16;
        }
        __p.n128_u64[0] = v17;
        __p.n128_u64[1] = v10;
        v22 = (char *)(v16 + v15);
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = v9;
        v10 = (unint64_t)(v8 + 1);
      }
      __p.n128_u64[1] = v10;
      ++v7;
      v6 = a1[4];
      v8 = (char *)v10;
    }
    while (v7 < a1[5] - v6);
  }
  MIL::ValueInference::Tensor<BOOL>::Tensor(a2, &v23, &__p);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v23.n128_u64[0])
  {
    v23.n128_u64[1] = v23.n128_u64[0];
    operator delete((void *)v23.n128_u64[0]);
  }
}

void sub_1E06E2E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void MIL::ValueInference::Tensor<double>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<double>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

void MIL::ValueInference::Tensor<unsigned int>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<unsigned int>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

void MIL::ValueInference::Tensor<unsigned long long>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<unsigned long long>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

void MIL::ValueInference::Tensor<long long>::~Tensor(_QWORD *a1)
{
  MIL::ValueInference::Tensor<long long>::~Tensor(a1);
  JUMPOUT(0x1E0C023A0);
}

_QWORD *MIL::ValueInference::Tensor<double>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F2A8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *MIL::ValueInference::Tensor<unsigned int>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F2C8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *MIL::ValueInference::Tensor<unsigned long long>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F2E8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *MIL::ValueInference::Tensor<long long>::~Tensor(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1EA99F308;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E30CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3140(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E31B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3228(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E32A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3314(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(char *result, int *a2, int *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3384(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(char *result, int *a2, int *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E33F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(char *result, int *a2, int *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  int v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3464(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(char *result, int *a2, int *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  int v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E34D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E354C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, unsigned __int8 *a2, unsigned __int8 *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  unsigned int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E35C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, unsigned __int8 *a2, unsigned __int8 *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3630(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E36A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3710(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3780(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E37F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      a2 += 2;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E38DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E394C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(char *result, __int16 *a2, __int16 *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E39BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<short const*>,std::__wrap_iter<short const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      a2 += 2;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3A2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E3AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      a2 += 2;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3B14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(char *result, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  unsigned int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(char *result, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(char *result, __int16 *a2, __int16 *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short const*>,std::__wrap_iter<unsigned short const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      a2 += 2;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3CD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E3D50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(char *result, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  float *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (float *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (float)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(char *result, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3E34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(char *result, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3EA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(char *result, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3F14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<signed char const*>,std::__wrap_iter<signed char const*>>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1E06E3F84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::Bf16 const*>,std::__wrap_iter<MIL::Bf16 const*>>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E3FFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::Fp16 const*>,std::__wrap_iter<MIL::Fp16 const*>>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E4074(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<float>,std::allocator<MIL::IRTypedTensorValue<float>>,MIL::IRTensorValueType const*&,std::vector<float>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<float>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<float>,std::allocator<MIL::IRTypedTensorValue<float>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E40DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<float>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<float>,std::allocator<MIL::IRTypedTensorValue<float>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F368;
  MIL::IRTypedTensorValue<float>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E4128(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<float>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<float>::~IRTypedTensorValue(a1 + 24);
}

uint64_t std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::unordered_set<unsigned long long>::unordered_set<std::__wrap_iter<unsigned long long const*>>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1E06E4334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1E06E454C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E4670(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<double>,std::allocator<MIL::IRTypedTensorValue<double>>,MIL::IRTensorValueType const*&,std::vector<double>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<double>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<double>,std::allocator<MIL::IRTypedTensorValue<double>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E46D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<double>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<double>,std::allocator<MIL::IRTypedTensorValue<double>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F3B8;
  MIL::IRTypedTensorValue<double>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E4724(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<double>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<double>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E06E47E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E4860(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned char>,std::allocator<MIL::IRTypedTensorValue<unsigned char>>,MIL::IRTensorValueType const*&,std::vector<unsigned char>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned char>,std::allocator<MIL::IRTypedTensorValue<unsigned char>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E48C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned char>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned char>,std::allocator<MIL::IRTypedTensorValue<unsigned char>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F408;
  MIL::IRTypedTensorValue<unsigned char>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E4914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<unsigned char>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short const*,unsigned short const*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E49D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E4A48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned short>,std::allocator<MIL::IRTypedTensorValue<unsigned short>>,MIL::IRTensorValueType const*&,std::vector<unsigned short>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned short>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned short>,std::allocator<MIL::IRTypedTensorValue<unsigned short>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E4AB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned short>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned short>,std::allocator<MIL::IRTypedTensorValue<unsigned short>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F458;
  MIL::IRTypedTensorValue<unsigned short>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E4AFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned short>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<unsigned short>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E06E4BC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1E06E4C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E4CAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned int>,std::allocator<MIL::IRTypedTensorValue<unsigned int>>,MIL::IRTensorValueType const*&,std::vector<unsigned int>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned int>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned int>,std::allocator<MIL::IRTypedTensorValue<unsigned int>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E4D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned int>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned int>,std::allocator<MIL::IRTypedTensorValue<unsigned int>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F4A8;
  MIL::IRTypedTensorValue<unsigned int>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E4D60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<unsigned int>::~IRTypedTensorValue(a1 + 24);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1E06E4E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned int const*>,std::__wrap_iter<unsigned int const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E4E9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1E06E4F10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E4F88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<unsigned long long>,std::allocator<MIL::IRTypedTensorValue<unsigned long long>>,MIL::IRTensorValueType const*&,std::vector<unsigned long long>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned long long>,std::allocator<MIL::IRTypedTensorValue<unsigned long long>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E4FF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned long long>,std::allocator<MIL::IRTypedTensorValue<unsigned long long>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F4F8;
  MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E503C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<unsigned long long>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<unsigned long long>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E50F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<signed char>,std::allocator<MIL::IRTypedTensorValue<signed char>>,MIL::IRTensorValueType const*&,std::vector<signed char>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<signed char>,std::allocator<MIL::IRTypedTensorValue<signed char>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E5160(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<signed char>,std::allocator<MIL::IRTypedTensorValue<signed char>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F548;
  MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E51AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<signed char>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<signed char>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<signed char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E06E526C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<signed char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1E06E52DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<short>::__init_with_size[abi:ne180100]<short const*,short const*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E5354(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E53CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<short>,std::allocator<MIL::IRTypedTensorValue<short>>,MIL::IRTensorValueType const*&,std::vector<short>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<short>,std::allocator<MIL::IRTypedTensorValue<short>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E5434(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<short>,std::allocator<MIL::IRTypedTensorValue<short>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F598;
  MIL::IRTypedTensorValue<short>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E5480(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<short>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<short>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<short>::vector(_QWORD *a1, uint64_t a2, _WORD *a3)
{
  _WORD *v6;
  _WORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_WORD *)a1[1];
    v7 = &v6[a2];
    v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E06E5544(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_1E06E55B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E5630(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<int>,std::allocator<MIL::IRTypedTensorValue<int>>,MIL::IRTensorValueType const*&,std::vector<int>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<int>,std::allocator<MIL::IRTypedTensorValue<int>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E5698(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<int>,std::allocator<MIL::IRTypedTensorValue<int>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F5E8;
  MIL::IRTypedTensorValue<int>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E56E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<int>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<int>::~IRTypedTensorValue(a1 + 24);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1E06E579C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<long long>,std::allocator<MIL::IRTypedTensorValue<long long>>,MIL::IRTensorValueType const*&,std::vector<long long>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<long long>,std::allocator<MIL::IRTypedTensorValue<long long>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E5804(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<long long>,std::allocator<MIL::IRTypedTensorValue<long long>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F638;
  MIL::IRTypedTensorValue<long long>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E5850(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<long long>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<long long>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E06E5914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E598C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<BOOL>,std::allocator<MIL::IRTypedTensorValue<BOOL>>,MIL::IRTensorValueType const*&,std::vector<unsigned char>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned char>,std::allocator<MIL::IRTypedTensorValue<BOOL>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E59F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<unsigned char>,std::allocator<MIL::IRTypedTensorValue<BOOL>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F688;
  MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E5A40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<BOOL>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<BOOL>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<MIL::Bf16*,MIL::Bf16*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E5AFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<MIL::Bf16>,std::allocator<MIL::IRTypedTensorValue<MIL::Bf16>>,MIL::IRTensorValueType const*&,std::vector<MIL::Bf16>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Bf16>,std::allocator<MIL::IRTypedTensorValue<MIL::Bf16>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E5B64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Bf16>,std::allocator<MIL::IRTypedTensorValue<MIL::Bf16>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F6D8;
  MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E5BB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Bf16>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<MIL::Bf16>::~IRTypedTensorValue(a1 + 24);
}

_QWORD *std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06E5C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<MIL::IRTypedTensorValue<MIL::Fp16>,std::allocator<MIL::IRTypedTensorValue<MIL::Fp16>>,MIL::IRTensorValueType const*&,std::vector<MIL::Fp16>,void>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Fp16>,std::allocator<MIL::IRTypedTensorValue<MIL::Fp16>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1E06E5CD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::__shared_ptr_emplace[abi:ne180100]<MIL::IRTensorValueType const*&,std::vector<MIL::Fp16>,std::allocator<MIL::IRTypedTensorValue<MIL::Fp16>>,0>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1EA99F728;
  MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue(a1 + 3, *a2, a3);
  return a1;
}

void sub_1E06E5D20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1EA99F728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_emplace<MIL::IRTypedTensorValue<MIL::Fp16>>::__on_zero_shared(uint64_t a1)
{
  return MIL::IRTypedTensorValue<MIL::Fp16>::~IRTypedTensorValue(a1 + 24);
}

void MIL::ValueTypeInference::CopyFromInput(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  std::string *v4;
  int v5;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  *(_QWORD *)(a2 + 24) = 0;
  v3 = operator new(0x20uLL);
  *v3 = off_1EA99F778;
  v4 = (std::string *)(v3 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a2 + 24) = v3;
    if (v5 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v3[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a2 + 24) = v3;
  }
}

void sub_1E06E5E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInference::BroadcastFromInputs(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  std::string v4;
  std::string *v5;

  memset(&v4, 0, sizeof(v4));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v4, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  *(_QWORD *)(a2 + 24) = 0;
  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)v3 = off_1EA99F808;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v3 + 8), (__int128 *)v4.__r_.__value_.__l.__data_, (__int128 *)v4.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4.__r_.__value_.__l.__size_ - v4.__r_.__value_.__r.__words[0]) >> 3));
  *(_QWORD *)(a2 + 24) = v3;
  v5 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_1E06E5EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;

  operator delete(v12);
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99F778;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1EA99F778;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1EA99F778;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1E06E6004(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1EA99F778;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1@<X0>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, void **a4@<X8>)
{
  std::__shared_weak_count *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t i;
  MIL::IRTypedArgument::IRTypedArgumentImpl **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t ValueType;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;

  v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)(a1 + 8));
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((char *)&v31, *((_QWORD **)v6 + 5), *((_QWORD **)v6 + 6), (uint64_t)(*((_QWORD *)v6 + 6) - *((_QWORD *)v6 + 5)) >> 4);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<std::string const*>::reserve(a4, (v32 - v31) >> 4);
  v7 = v31;
  for (i = v32; v7 != i; v7 += 16)
  {
    v9 = *(MIL::IRTypedArgument::IRTypedArgumentImpl ***)v7;
    v10 = *(std::__shared_weak_count **)(v7 + 8);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    ValueType = MIL::IRTypedArgument::GetValueType(v9);
    v14 = ValueType;
    v16 = (uint64_t *)a4[1];
    v15 = (unint64_t)a4[2];
    if ((unint64_t)v16 >= v15)
    {
      v18 = ((char *)v16 - (_BYTE *)*a4) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v19 = v15 - (_QWORD)*a4;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v21);
      else
        v22 = 0;
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v14;
      v17 = (char *)(v23 + 1);
      v25 = (char *)*a4;
      v24 = (char *)a4[1];
      if (v24 != *a4)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v23 = v26;
        }
        while (v24 != v25);
        v24 = (char *)*a4;
      }
      *a4 = v23;
      a4[1] = v17;
      a4[2] = &v22[8 * v21];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v16 = ValueType;
      v17 = (char *)(v16 + 1);
    }
    a4[1] = v17;
    if (v10)
    {
      v27 = (unint64_t *)&v10->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v34 = (void **)&v31;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (v5)
  {
    v29 = (unint64_t *)&v5->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1E06E62A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  void *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0,std::allocator<MIL::ValueTypeInference::CopyFromInput(std::string const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1EA99F808;
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_1EA99F808;
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1E0C023A0](a1, 0xA1C4030951706);
}

char *std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1EA99F808;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 1) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 8), *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  return v2;
}

void sub_1E06E6490(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1EA99F808;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 8), *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
}

void std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1@<X0>, void (****a2)(MIL::MILContextImpl *__hidden this)@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 *v9;
  __int128 *i;
  __int128 v11;
  MIL::IRValueType *SingleValueType;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  std::vector<unsigned int>::pointer end;
  unsigned int *v20;
  std::vector<unsigned int>::pointer begin;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  std::vector<unsigned int>::pointer v29;
  std::vector<unsigned int>::pointer v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v36;
  int v37;
  int v39;
  int v40;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::logic_error *exception;
  std::__shared_weak_count *v48;
  std::string v49;
  std::vector<unsigned int> v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;

  v48 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  std::vector<std::vector<MIL::IRDimension const*>>::reserve(&v51, a4[3]);
  memset(&v50, 0, sizeof(v50));
  std::vector<int>::reserve(&v50, a4[3]);
  v9 = *(__int128 **)(a1 + 8);
  for (i = *(__int128 **)(a1 + 16); v9 != i; v9 = (__int128 *)((char *)v9 + 24))
  {
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v11 = *v9;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v11;
    }
    SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a4, (uint64_t)&v49);
    v13 = MIL::IRValueType::AsTensorType(SingleValueType);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
    v15 = v52;
    if ((unint64_t)v52 >= v53)
    {
      v16 = std::vector<std::vector<MIL::IRDimension const*>>::__push_back_slow_path<std::vector<MIL::IRDimension const*> const&>(&v51, v14);
    }
    else
    {
      *v52 = 0;
      v15[1] = 0;
      v15[2] = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v15, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
      v16 = (uint64_t)(v15 + 3);
    }
    v52 = (_QWORD *)v16;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
    v18 = v17;
    end = v50.__end_;
    if (v50.__end_ >= v50.__end_cap_.__value_)
    {
      begin = v50.__begin_;
      v22 = v50.__end_ - v50.__begin_;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v24 = (char *)v50.__end_cap_.__value_ - (char *)v50.__begin_;
      if (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50.__end_cap_, v25);
        begin = v50.__begin_;
        end = v50.__end_;
      }
      else
      {
        v26 = 0;
      }
      v27 = (unsigned int *)&v26[4 * v22];
      *v27 = v18;
      v20 = v27 + 1;
      while (end != begin)
      {
        v28 = *--end;
        *--v27 = v28;
      }
      v50.__begin_ = v27;
      v50.__end_ = v20;
      v50.__end_cap_.__value_ = (unsigned int *)&v26[4 * v25];
      if (begin)
        operator delete(begin);
    }
    else
    {
      *v50.__end_ = v17;
      v20 = end + 1;
    }
    v50.__end_ = v20;
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
  }
  v30 = v50.__begin_;
  v29 = v50.__end_;
  if (v50.__end_ == v50.__begin_)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v31 = *v50.__begin_;
  do
  {
    if ((_DWORD)v31 == 18 || (v32 = *v30, (_DWORD)v32 == 18))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Any dtype is not valid for dtype promotion.");
      goto LABEL_87;
    }
    if ((_DWORD)v31 == 3 && (_DWORD)v32 == 3)
    {
      v31 = 3;
    }
    else
    {
      if ((_DWORD)v31 == 3 || (_DWORD)v32 == 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "String dtype cannot be promoted to any other dtype.");
LABEL_87:
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      if (MIL::IsFloat(v31) || MIL::IsFloat(v32))
      {
        v31 = 6;
        if (v33 != 6 && v34 != 6)
        {
          v31 = 5;
          if (v33 != 5 && v34 != 5)
          {
            if (v34 == 7 || v33 == 7)
              v31 = 7;
            else
              v31 = 4;
          }
        }
      }
      else if (MIL::IsSignedInt(v31) || MIL::IsSignedInt(v32))
      {
        v31 = 12;
        if (v36 != 12 && v37 != 12)
        {
          v31 = 11;
          if (v36 != 11 && v37 != 11)
          {
            if (v37 == 10 || v36 == 10)
              v31 = 10;
            else
              v31 = 9;
          }
        }
      }
      else if (MIL::IsUnsignedInt(v31) || MIL::IsUnsignedInt(v32))
      {
        v31 = 17;
        if (v39 != 17 && v40 != 17)
        {
          v31 = 16;
          if (v39 != 16 && v40 != 16)
          {
            if (v40 == 15 || v39 == 15)
              v31 = 15;
            else
              v31 = 14;
          }
        }
      }
      else
      {
        v31 = 2;
      }
    }
    ++v30;
  }
  while (v30 != v29);
  MIL::ValueTypeInferenceUtils::BroadcastShape(*a2, &v51, (unint64_t *)&v49);
  v42 = MIL::IRTensorValueType::MakeWithShape(*a2, v31, (uint64_t)&v49);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v43 = operator new(8uLL);
  *a5 = v43;
  *v43 = v42;
  v44 = v43 + 1;
  a5[1] = v44;
  a5[2] = v44;
  if (v49.__r_.__value_.__r.__words[0])
  {
    v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v50.__begin_)
  {
    v50.__end_ = v50.__begin_;
    operator delete(v50.__begin_);
  }
  v50.__begin_ = (std::vector<unsigned int>::pointer)&v51;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1E06E69F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, char *a19, uint64_t a20,char a21,uint64_t a22)
{
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (__p)
    operator delete(__p);
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
  a18 = &a21;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0,std::allocator<MIL::ValueTypeInference::BroadcastFromInputs(std::vector<std::string> const&)::$_0>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

uint64_t std::vector<std::vector<MIL::IRDimension const*>>::__push_back_slow_path<std::vector<MIL::IRDimension const*> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<MIL::IRDimension const*>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1E06E6C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::ValueTypeInference::`anonymous namespace'::CastToFloat(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::logic_error *exception;
  std::string *v4;
  __int128 v5;
  std::string v7;
  std::string v8;

  v1 = a1;
  if (!MIL::IsFloat(a1))
  {
    v2 = 0;
    {
      v2 += 2;
      if (v2 == 18)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v1, &v7);
        v4 = std::string::insert(&v7, 0, "Invalid inputDtype ");
        v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        v8.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v5;
        v4->__r_.__value_.__l.__size_ = 0;
        v4->__r_.__value_.__r.__words[2] = 0;
        v4->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v8);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
    }
  }
  return v1;
}

void sub_1E06E6D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::ValueTypeInference::`anonymous namespace'::CastToInt(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::logic_error *exception;
  std::string *v4;
  __int128 v5;
  std::string v7;
  std::string v8;

  v1 = a1;
  if (!MIL::IsSignedInt(a1))
  {
    v2 = 0;
    {
      v2 += 2;
      if (v2 == 10)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        MIL::IRDataTypeToString(v1, &v7);
        v4 = std::string::insert(&v7, 0, "Invalid inputDtype ");
        v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
        v8.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v5;
        v4->__r_.__value_.__l.__size_ = 0;
        v4->__r_.__value_.__r.__words[2] = 0;
        v4->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v8);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
    }
  }
  return v1;
}

void sub_1E06E6E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::ValueTypeInference::`anonymous namespace'::CastToUInt(uint64_t a1)
{
  uint64_t v1;
  std::logic_error *exception;
  std::string *v4;
  __int128 v5;
  std::string v6;
  std::string v7;

  v1 = a1;
  if (!MIL::IsUnsignedInt(a1))
  {
    if ((_DWORD)v1 != 2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      MIL::IRDataTypeToString(v1, &v6);
      v4 = std::string::insert(&v6, 0, "Invalid inputDtype ");
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v7);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    return 14;
  }
  return v1;
}

void sub_1E06E6F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MIL::ValueTypeInferenceUtils::BroadcastShape(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  std::logic_error *exception;
  unint64_t *v45;
  void *__p;
  char *v47;
  char *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  std::vector<std::vector<MIL::IRDimension const*>>::reserve((uint64_t *)&v49, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (v8 <= (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3)
        v8 = (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3;
      __p = 0;
      v47 = 0;
      v48 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v9 = v47 - 8;
      if (__p != v47 && v9 > __p)
      {
        v11 = (char *)__p + 8;
        do
        {
          v12 = *((_QWORD *)v11 - 1);
          *((_QWORD *)v11 - 1) = *(_QWORD *)v9;
          *(_QWORD *)v9 = v12;
          v9 -= 8;
          v13 = v11 >= v9;
          v11 += 8;
        }
        while (!v13);
      }
      std::vector<std::vector<MIL::IRDimension const*>>::push_back[abi:ne180100]((uint64_t *)&v49, (uint64_t)&__p);
      if (__p)
      {
        v47 = (char *)__p;
        operator delete(__p);
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
  __p = 0;
  v47 = 0;
  v48 = 0;
  std::vector<std::string const*>::reserve(&__p, v8);
  v45 = a3;
  if (v8)
  {
    v14 = 0;
    while (1)
    {
      v15 = v49;
      v16 = v50;
      if (v49 == v50)
        break;
      v17 = 0;
      v18 = 0;
      v19 = 1;
      do
      {
        if (v14 < (uint64_t)(v15[1] - *v15) >> 3)
        {
          v20 = *(_QWORD *)(*v15 + 8 * v14);
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
          if (v21)
          {
            v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21);
            if (v22 != 1 && v19 != 1 && v22 != v19)
            {
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Shapes are not compatible for broadcasting.");
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
            }
            if (v22 > v19)
              v19 = v22;
          }
          else
          {
            v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
            v17 = 1;
          }
        }
        v15 += 3;
      }
      while (v15 != v16);
      if (((v19 < 2) & v17) == 0)
        goto LABEL_40;
      v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)(v18 & 1));
LABEL_41:
      v27 = v26;
      v28 = v47;
      if (v47 >= v48)
      {
        v30 = (v47 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v31 = (v48 - (_BYTE *)__p) >> 2;
        if (v31 <= v30 + 1)
          v31 = v30 + 1;
        if ((unint64_t)(v48 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v48, v32);
        else
          v33 = 0;
        v34 = (uint64_t *)&v33[8 * v30];
        *v34 = v27;
        v29 = (uint64_t)(v34 + 1);
        v36 = (char *)__p;
        v35 = v47;
        if (v47 != __p)
        {
          do
          {
            v37 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *--v34 = v37;
          }
          while (v35 != v36);
          v35 = (char *)__p;
        }
        __p = v34;
        v47 = (char *)v29;
        v48 = &v33[8 * v32];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_QWORD *)v47 = v26;
        v29 = (uint64_t)(v28 + 8);
      }
      v47 = (char *)v29;
      if (++v14 == v8)
        goto LABEL_60;
    }
    v19 = 1;
LABEL_40:
    v26 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)v19);
    goto LABEL_41;
  }
  v29 = (uint64_t)v47;
LABEL_60:
  v38 = __p;
  *v45 = 0;
  v45[1] = 0;
  v45[2] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v45, v38, v29, (v29 - (uint64_t)v38) >> 3);
  v40 = *v45;
  v39 = v45[1];
  if (*v45 != v39)
  {
    v41 = (_QWORD *)(v39 - 8);
    if ((unint64_t)v41 > v40)
    {
      v42 = v40 + 8;
      do
      {
        v43 = *(_QWORD *)(v42 - 8);
        *(_QWORD *)(v42 - 8) = *v41;
        *v41-- = v43;
        v13 = v42 >= (unint64_t)v41;
        v42 += 8;
      }
      while (!v13);
    }
  }
  if (__p)
  {
    v47 = (char *)__p;
    operator delete(__p);
  }
  __p = &v49;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1E06E7378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, uint64_t a13, char a14)
{
  __p = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::ValueTypeInferenceUtils::GetVariadicValueTypes@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = v4;
  result = (uint64_t)std::vector<MIL::IRValueType const*>::vector(a3, (uint64_t)(*((_QWORD *)v4 + 6) - *((_QWORD *)v4 + 5)) >> 4);
  v7 = *((_QWORD *)v5 + 5);
  if (*((_QWORD *)v5 + 6) != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = MIL::IRTypedArgument::GetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v7 + v8));
      *(_QWORD *)(*a3 + 8 * v9++) = result;
      v7 = *((_QWORD *)v5 + 5);
      v8 += 16;
    }
    while (v9 < (*((_QWORD *)v5 + 6) - v7) >> 4);
  }
  return result;
}

void sub_1E06E745C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ValueTypeInferenceUtils::GetSingleValueType(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v4;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::logic_error *exception;
  std::string v13;
  _QWORD v14[33];

  v3 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v4 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((_QWORD *)v3 + 5);
  if (*((_QWORD *)v3 + 6) - (_QWORD)v4 != 16)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Inputs must not be variadic. But size of input ", 47);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is ", 4);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return MIL::IRTypedArgument::GetValueType(*v4);
}

void sub_1E06E7594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::ValueTypeInferenceUtils::TryGetSingleValue(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v4;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::logic_error *exception;
  std::string v13;
  _QWORD v14[33];

  v3 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (!v3)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v4 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((_QWORD *)v3 + 5);
  if (*((_QWORD *)v3 + 6) - (_QWORD)v4 != 16)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Inputs must not be variadic. But size of input ", 47);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is ", 4);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return MIL::IRTypedArgument::TryGetValue(*v4);
}

void sub_1E06E76F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::ValueTypeInferenceUtils::GetSingleValue(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  std::logic_error *exception;

  result = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a1, a2);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "The single input must store a Value.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return result;
}

void sub_1E06E7790(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::ConvertAxesToNonNeg(unsigned int *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  MIL::Validation *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void *exception;
  _QWORD *v23;
  uint64_t v24;
  char v25[24];
  uint64_t v26;
  __int128 v27;
  _QWORD v28[33];

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2)
  {
    v5 = a1;
    v7 = (uint64_t)(a4 + 2);
    v8 = &a1[a2];
    do
    {
      v9 = (MIL::Validation *)*v5;
      if (!MIL::Validation::IsAxisValidForRank(v9, a3))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
        v21 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" for input_ndim: ", 17);
        std::ostream::operator<<();
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::UnknownLocation::Make(&v26);
        *(_QWORD *)&v27 = v26;
        if (v26)
        {
          v23 = (_QWORD *)operator new();
          v24 = v26;
          *v23 = &unk_1EA9940C8;
          v23[1] = 0;
          v23[2] = 0;
          v23[3] = v24;
        }
        else
        {
          v23 = 0;
        }
        *((_QWORD *)&v27 + 1) = v23;
        v26 = 0;
        std::stringbuf::str();
        MIL::ValidationError::ValidationError((uint64_t)exception, &v27, (uint64_t)v25, 315);
      }
      if ((int)v9 < 0)
        v9 = (MIL::Validation *)((int)v9 + a3);
      v11 = a4[1];
      v10 = (unint64_t)a4[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a4;
        v14 = (v11 - *a4) >> 3;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v17);
          v13 = *a4;
          v11 = a4[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v9;
        v12 = v19 + 8;
        while (v11 != v13)
        {
          v20 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *((_QWORD *)v19 - 1) = v20;
          v19 -= 8;
        }
        *a4 = v19;
        a4[1] = v12;
        a4[2] = &v18[8 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v11 = v9;
        v12 = v11 + 8;
      }
      a4[1] = v12;
      ++v5;
    }
    while (v5 != v8);
  }
}

void sub_1E06E79C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v20;
  void *v22;

  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  __cxa_free_exception(v20);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  v22 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

_QWORD *MIL::ValueTypeInferenceUtils::SliceShape@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  std::logic_error *exception;

  if (a3 < a2 || (v4 = *a1, a3 > (a1[1] - *a1) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "invalid index");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(a4, (const void *)(v4 + 8 * a2), v4 + 8 * a3, a3 - a2);
}

void sub_1E06E7AF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::GetSpatialDimensionsOutShape(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, int **a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, void **a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v24;
  int v25;
  _BYTE *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  double v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  double v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  std::logic_error *v117;
  std::logic_error *v118;
  _QWORD *v119;
  int v120;
  _DWORD *v121;
  uint64_t v122;
  std::logic_error *v123;
  std::logic_error *exception;
  std::logic_error *v125;
  std::logic_error *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  void *v133;
  uint64_t *v134;
  char *v135;
  std::string v136;
  void *__p;
  _BYTE *v138;
  uint64_t v139;

  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v16 = a3[1] - *a3;
  if (a8 && (unint64_t)v16 >= 0x11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ceil_mode must be False when there are 3 spatial dimensions (3D pool)");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v128 = *a3;
  v129 = a3[1];
  v127 = v16 >> 3;
  std::vector<std::string const*>::reserve(a9, v16 >> 3);
  v18 = *a3;
  v17 = a3[1];
  v130 = a3;
  v19 = (v17 - *a3) >> 3;
  v134 = 0;
  v135 = 0;
  v133 = 0;
  std::vector<std::string const*>::reserve(&v133, v19);
  if ((*((char *)a6 + 23) & 0x80000000) == 0)
  {
    v20 = (int *)a6;
    switch(*((_BYTE *)a6 + 23))
    {
      case 4:
        v21 = *(_DWORD *)a6;
        goto LABEL_8;
      case 5:
        if (*(_DWORD *)a6 != 1768710518 || *((_BYTE *)a6 + 4) != 100)
          goto LABEL_204;
        goto LABEL_116;
      case 6:
        goto LABEL_21;
      case 0xA:
        if (*a6 != (int *)0x776F6C5F656D6173 || *((_WORD *)a6 + 4) != 29285)
          goto LABEL_204;
        goto LABEL_67;
      default:
        goto LABEL_204;
    }
  }
  switch((unint64_t)a6[1])
  {
    case 4uLL:
      v21 = **a6;
LABEL_8:
      if (v21 != 1701667187)
        goto LABEL_204;
      goto LABEL_67;
    case 5uLL:
      if (**a6 != 1768710518 || *((_BYTE *)*a6 + 4) != 100)
        goto LABEL_204;
LABEL_116:
      __p = (void *)MIL::IRConstantDimension::Make(a1, 0);
      std::vector<MIL::IRDimension const*>::assign((char **)&v133, (v17 - v18) >> 3, &__p);
      v71 = v129;
      v70 = a3;
      v72 = v128;
      goto LABEL_117;
    case 6uLL:
      v20 = *a6;
LABEL_21:
      v24 = *v20;
      v25 = *((unsigned __int16 *)v20 + 2);
      if (v24 != 1953723747 || v25 != 28015)
        goto LABEL_204;
      __p = 0;
      v138 = 0;
      v139 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a7, *(_QWORD *)(a7 + 8), (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2);
      v27 = __p;
      if (v138 - (_BYTE *)__p != v17 - v18)
      {
        v126 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v126, "Attribute 'pad' invalid: should be length of 2 * num_spatial_dims");
        v126->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v126, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      if (v17 != v18 && a8)
      {
        if (v19 <= 1)
          v28 = 1;
        else
          v28 = (v17 - v18) >> 3;
        v29 = (char *)__p + 4;
        do
        {
          if (*(v29 - 1) != *v29)
          {
            v117 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v117, "Padding must be symmetric if ceil_mode is True");
            v117->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v117, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
          }
          v29 += 2;
          --v28;
        }
        while (v28);
      }
      if (v17 == v18)
        goto LABEL_109;
      v30 = 0;
      if (v19 <= 1)
        v31 = 1;
      else
        v31 = v19;
      do
      {
        v32 = (v138 - (_BYTE *)__p) >> 2;
        v33 = (2 * v30) | 1;
        if (v32 <= 2 * v30 || v32 <= v33)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v35 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)(*((int *)__p + v33) + (uint64_t)*((int *)__p + 2 * v30)));
        v36 = v35;
        v37 = v134;
        if (v134 >= (uint64_t *)v135)
        {
          v39 = ((char *)v134 - (_BYTE *)v133) >> 3;
          if ((unint64_t)(v39 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v40 = (v135 - (_BYTE *)v133) >> 2;
          if (v40 <= v39 + 1)
            v40 = v39 + 1;
          if ((unint64_t)(v135 - (_BYTE *)v133) >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          if (v41)
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v135, v41);
          else
            v42 = 0;
          v43 = (uint64_t *)&v42[8 * v39];
          *v43 = v36;
          v38 = v43 + 1;
          v45 = (char *)v133;
          v44 = (char *)v134;
          if (v134 != v133)
          {
            do
            {
              v46 = *((_QWORD *)v44 - 1);
              v44 -= 8;
              *--v43 = v46;
            }
            while (v44 != v45);
            v44 = (char *)v133;
          }
          v133 = v43;
          v134 = v38;
          v135 = &v42[8 * v41];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *v134 = v35;
          v38 = v37 + 1;
        }
        v134 = v38;
        ++v30;
      }
      while (v30 != v31);
      goto LABEL_108;
    case 0xAuLL:
      if (*(_QWORD *)*a6 != 0x776F6C5F656D6173 || *((_WORD *)*a6 + 4) != 29285)
        goto LABEL_204;
LABEL_67:
      if (a8)
      {
        v125 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v125, "ceil_mode must be False when pad_type is equal to 'same'");
        v125->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v125, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      if (v17 == v18)
        goto LABEL_108;
      v48 = 0;
      if (v19 <= 1)
        v19 = 1;
      break;
    default:
LABEL_204:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Invalid padding type ", 21);
      v120 = *((char *)a6 + 23);
      if (v120 >= 0)
        v121 = a6;
      else
        v121 = *a6;
      if (v120 >= 0)
        v122 = *((unsigned __int8 *)a6 + 23);
      else
        v122 = (uint64_t)a6[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v121, v122);
      v123 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v123, &v136);
      v123->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v123, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  do
  {
    if (v48 >= (uint64_t)(a2[1] - *a2) >> 3)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v48) + 24))(*(_QWORD *)(*a2 + 8 * v48));
    if (v49)
    {
      v50 = v134;
      if (v134 < (uint64_t *)v135)
        goto LABEL_88;
      v51 = ((char *)v134 - (_BYTE *)v133) >> 3;
      if ((unint64_t)(v51 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v52 = (v135 - (_BYTE *)v133) >> 2;
      if (v52 <= v51 + 1)
        v52 = v51 + 1;
      if ((unint64_t)(v135 - (_BYTE *)v133) >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v52;
      if (v53)
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v135, v53);
      else
        v54 = 0;
      v64 = (uint64_t *)&v54[8 * v51];
      *v64 = v49;
      v61 = v64 + 1;
      v66 = (char *)v133;
      v65 = (char *)v134;
      if (v134 != v133)
      {
        do
        {
          v67 = *((_QWORD *)v65 - 1);
          v65 -= 8;
          *--v64 = v67;
        }
        while (v65 != v66);
LABEL_104:
        v65 = (char *)v133;
      }
    }
    else
    {
      if (v48 >= (uint64_t)(a2[1] - *a2) >> 3)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v55 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v48));
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 48))(v55);
      if (v48 >= (v138 - (_BYTE *)__p) >> 3)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v57 = v56;
      v58 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + v48));
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58);
      if (v48 >= (uint64_t)(a4[1] - *a4) >> 2)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v60 = (double)v59
          - ((double)v57
           - (double)*(int *)(*a4 + 4 * v48) * ceil((double)v57 / (double)*(int *)(*a4 + 4 * v48)))
          - (double)*(int *)(*a4 + 4 * v48);
      if (v60 < 0.0)
        v60 = 0.0;
      v49 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)v60);
      v50 = v134;
      if (v134 < (uint64_t *)v135)
      {
LABEL_88:
        *v50 = v49;
        v61 = v50 + 1;
        goto LABEL_107;
      }
      v62 = ((char *)v134 - (_BYTE *)v133) >> 3;
      if ((unint64_t)(v62 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v63 = (v135 - (_BYTE *)v133) >> 2;
      if (v63 <= v62 + 1)
        v63 = v62 + 1;
      if ((unint64_t)(v135 - (_BYTE *)v133) >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v63;
      if (v53)
        v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v135, v53);
      else
        v54 = 0;
      v64 = (uint64_t *)&v54[8 * v62];
      *v64 = v49;
      v61 = v64 + 1;
      v68 = (char *)v133;
      v65 = (char *)v134;
      if (v134 != v133)
      {
        do
        {
          v69 = *((_QWORD *)v65 - 1);
          v65 -= 8;
          *--v64 = v69;
        }
        while (v65 != v68);
        goto LABEL_104;
      }
    }
    v133 = v64;
    v134 = v61;
    v135 = &v54[8 * v53];
    if (v65)
      operator delete(v65);
LABEL_107:
    v134 = v61;
    ++v48;
  }
  while (v48 != v19);
LABEL_108:
  v27 = __p;
LABEL_109:
  v71 = v129;
  v70 = v130;
  v72 = v128;
  if (v27)
  {
    v138 = v27;
    operator delete(v27);
  }
LABEL_117:
  if (v71 != v72)
  {
    v74 = 0;
    if (v127 <= 1)
      v75 = 1;
    else
      v75 = v127;
    do
    {
      if (v74 >= (uint64_t)(a2[1] - *a2) >> 3)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v74) + 24))(*(_QWORD *)(*a2 + 8 * v74));
      if (v76)
      {
        v78 = (uint64_t *)a9[1];
        v77 = (unint64_t)a9[2];
        if ((unint64_t)v78 >= v77)
        {
          v79 = ((char *)v78 - (_BYTE *)*a9) >> 3;
          if ((unint64_t)(v79 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v80 = v77 - (_QWORD)*a9;
          v81 = v80 >> 2;
          if (v80 >> 2 <= (unint64_t)(v79 + 1))
            v81 = v79 + 1;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
            v82 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v82 = v81;
          if (v82)
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a9 + 2), v82);
          else
            v83 = 0;
          v106 = (uint64_t *)&v83[8 * v79];
          *v106 = v76;
          v105 = (char *)(v106 + 1);
          v108 = (char *)*a9;
          v107 = (char *)a9[1];
          if (v107 != *a9)
          {
            do
            {
              v109 = *((_QWORD *)v107 - 1);
              v107 -= 8;
              *--v106 = v109;
            }
            while (v107 != v108);
            goto LABEL_176;
          }
          goto LABEL_177;
        }
      }
      else
      {
        if (v74 >= (uint64_t)(a2[1] - *a2) >> 3)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v84 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v74));
        v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 48))(v84);
        if (v74 >= ((char *)v134 - (_BYTE *)v133) >> 3)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v86 = v85;
        v87 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v133 + v74));
        v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 48))(v87);
        if (v74 >= (v138 - (_BYTE *)__p) >> 3)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v89 = v88;
        v90 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + v74));
        v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 48))(v90);
        if (a8)
        {
          if (v74 >= (uint64_t)(a4[1] - *a4) >> 2)
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          v92 = v89 + v86 - v91;
          v93 = *(int *)(*a4 + 4 * v74);
          v94 = __OFADD__(v92, v93);
          v95 = v92 + v93;
          if ((v95 < 0) ^ v94 | (v95 == 0))
          {
LABEL_198:
            v118 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v118, "output size is too small.");
            v118->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v118, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
          }
          v96 = floor((double)(v95 - 1) / (double)(int)v93) + 1.0;
          v97 = ((unint64_t)v96 - 1) * v93;
          if (v89 >= 0)
            v98 = v89;
          else
            v98 = v89 + 1;
          LODWORD(v99) = v97 >= (int)((v98 >> 1) + v86);
          if (v89 > 0)
            v99 = v99;
          else
            v99 = 0;
          v76 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)((unint64_t)v96 - v99));
          v78 = (uint64_t *)a9[1];
          v100 = (unint64_t)a9[2];
          if ((unint64_t)v78 >= v100)
          {
            v101 = ((char *)v78 - (_BYTE *)*a9) >> 3;
            if ((unint64_t)(v101 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v102 = v100 - (_QWORD)*a9;
            v103 = v102 >> 2;
            if (v102 >> 2 <= (unint64_t)(v101 + 1))
              v103 = v101 + 1;
            if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
              v82 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v82 = v103;
            if (v82)
              v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a9 + 2), v82);
            else
              v83 = 0;
            v106 = (uint64_t *)&v83[8 * v101];
            *v106 = v76;
            v105 = (char *)(v106 + 1);
            v113 = (char *)*a9;
            v107 = (char *)a9[1];
            if (v107 != *a9)
            {
              do
              {
                v114 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *--v106 = v114;
              }
              while (v107 != v113);
              goto LABEL_176;
            }
            goto LABEL_177;
          }
        }
        else
        {
          if (v89 + v86 - v91 < 0)
            goto LABEL_198;
          if (v74 >= (uint64_t)(a4[1] - *a4) >> 2)
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          v76 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)(floor((double)(v89 + v86 - v91) / (double)*(int *)(*a4 + 4 * v74)) + 1.0));
          v78 = (uint64_t *)a9[1];
          v104 = (unint64_t)a9[2];
          if ((unint64_t)v78 >= v104)
          {
            v110 = ((char *)v78 - (_BYTE *)*a9) >> 3;
            if ((unint64_t)(v110 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v111 = v104 - (_QWORD)*a9;
            v112 = v111 >> 2;
            if (v111 >> 2 <= (unint64_t)(v110 + 1))
              v112 = v110 + 1;
            if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
              v82 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v82 = v112;
            if (v82)
              v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a9 + 2), v82);
            else
              v83 = 0;
            v106 = (uint64_t *)&v83[8 * v110];
            *v106 = v76;
            v105 = (char *)(v106 + 1);
            v115 = (char *)*a9;
            v107 = (char *)a9[1];
            if (v107 != *a9)
            {
              do
              {
                v116 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *--v106 = v116;
              }
              while (v107 != v115);
LABEL_176:
              v107 = (char *)*a9;
            }
LABEL_177:
            *a9 = v106;
            a9[1] = v105;
            a9[2] = &v83[8 * v82];
            if (v107)
              operator delete(v107);
            goto LABEL_179;
          }
        }
      }
      *v78 = v76;
      v105 = (char *)(v78 + 1);
LABEL_179:
      a9[1] = v105;
      ++v74;
    }
    while (v74 != v75);
  }
  if (__p)
  {
    v138 = __p;
    operator delete(__p);
  }
  if (v133)
  {
    v134 = (uint64_t *)v133;
    operator delete(v133);
  }
}

void sub_1E06E8724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v26;
  int v27;
  void *v29;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a24);
      if (a15)
        operator delete(a15);
      v29 = *(void **)v25;
      if (*(_QWORD *)v25)
      {
        *(_QWORD *)(v25 + 8) = v29;
        operator delete(v29);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void MIL::ValueTypeInferenceUtils::`anonymous namespace'::GetEffectiveKernelShape(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  uint64_t v28;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v9 = *a2;
  v8 = a2[1];
  v10 = (v8 - *a2) >> 3;
  std::vector<std::string const*>::reserve(a4, v10);
  if (v8 != v9)
  {
    v11 = 0;
    if (v10 <= 1)
      v12 = 1;
    else
      v12 = v10;
    do
    {
      if (v11 >= (a2[1] - *a2) >> 3)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v13 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v11));
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
      if (v11 >= (uint64_t)(a3[1] - *a3) >> 2)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v15 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)((v14 - 1) * *(int *)(*a3 + 4 * v11) + 1));
      v16 = v15;
      v18 = (uint64_t *)a4[1];
      v17 = (unint64_t)a4[2];
      if ((unint64_t)v18 >= v17)
      {
        v20 = ((char *)v18 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v21 = v17 - (_QWORD)*a4;
        v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v23);
        else
          v24 = 0;
        v25 = (uint64_t *)&v24[8 * v20];
        *v25 = v16;
        v19 = (char *)(v25 + 1);
        v27 = (char *)*a4;
        v26 = (char *)a4[1];
        if (v26 != *a4)
        {
          do
          {
            v28 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            *--v25 = v28;
          }
          while (v26 != v27);
          v26 = (char *)*a4;
        }
        *a4 = v25;
        a4[1] = v19;
        a4[2] = &v24[8 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *v18 = v15;
        v19 = (char *)(v18 + 1);
      }
      a4[1] = v19;
      ++v11;
    }
    while (v11 != v12);
  }
}

void sub_1E06E8A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::ConvTransposeSpatialDimensionsOutShape(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, void **a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (***v38)(MIL::MILContextImpl *__hidden);
  uint64_t v39;
  uint64_t v40;
  int v43;
  int v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  std::logic_error *v77;
  std::logic_error *exception;
  uint64_t v81;
  std::string v82;
  _QWORD v83[33];
  MIL::IRDimension **v84;
  MIL::IRDimension **v85;

  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  v14 = *a3;
  v15 = a3[1];
  v16 = v15 - *a3;
  std::vector<std::string const*>::reserve(a8, v16 >> 3);
  v17 = *(char *)(a6 + 23);
  if (v17 < 0)
  {
    if (*(_QWORD *)(a6 + 8) != 6)
      goto LABEL_12;
    v18 = *(_QWORD **)a6;
  }
  else
  {
    v18 = (_QWORD *)a6;
    if (v17 != 6)
      goto LABEL_12;
  }
  v19 = *(_DWORD *)v18;
  v20 = *((unsigned __int16 *)v18 + 2);
  v21 = v19 == 1953723747 && v20 == 28015;
  if (v21 && a7[1] - *a7 != v16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attribute 'pad' invalid: should be length of 2 * num_spatial_dims");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
LABEL_12:
  if (v15 != v14)
  {
    v22 = 0;
    v81 = (uint64_t)(a8 + 2);
    if ((unint64_t)(v16 >> 3) <= 1)
      v23 = 1;
    else
      v23 = v16 >> 3;
    while (1)
    {
      if (v22 >= (uint64_t)(a2[1] - *a2) >> 3)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v22) + 24))(*(_QWORD *)(*a2 + 8 * v22));
      if (v24)
      {
        v26 = (uint64_t *)a8[1];
        v25 = (unint64_t)a8[2];
        if ((unint64_t)v26 >= v25)
        {
          v27 = ((char *)v26 - (_BYTE *)*a8) >> 3;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v28 = v25 - (_QWORD)*a8;
          v29 = v28 >> 2;
          if (v28 >> 2 <= (unint64_t)(v27 + 1))
            v29 = v27 + 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v81, v30);
          else
            v31 = 0;
          v52 = (uint64_t *)&v31[8 * v27];
          *v52 = v24;
          v53 = (char *)(v52 + 1);
          v55 = (char *)*a8;
          v54 = (char *)a8[1];
          if (v54 != *a8)
          {
            do
            {
              v56 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *--v52 = v56;
            }
            while (v54 != v55);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        goto LABEL_93;
      }
      if (v22 >= (uint64_t)(a2[1] - *a2) >> 3)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v32 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v22));
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32);
      if (v22 >= v85 - v84)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v34 = v33;
      v35 = MIL::IRDimension::AsConstant(v84[v22]);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35);
      if ((*(char *)(a6 + 23) & 0x80000000) == 0)
      {
        v37 = *(unsigned __int8 *)(a6 + 23);
        v38 = a1;
        v39 = a6;
        switch(*(_BYTE *)(a6 + 23))
        {
          case 4:
            if (*(_DWORD *)a6 != 1701667187)
              goto LABEL_121;
            goto LABEL_91;
          case 5:
            goto LABEL_76;
          case 6:
            goto LABEL_49;
          case 0xA:
            if (*(_QWORD *)a6 == 0x776F6C5F656D6173 && *(_WORD *)(a6 + 8) == 29285)
              goto LABEL_91;
            v39 = a6;
            if (v37 == 6)
              goto LABEL_49;
            if (v37 != 5)
              goto LABEL_121;
LABEL_76:
            if (*(_DWORD *)a6 != 1768710518 || *(_BYTE *)(a6 + 4) != 100)
              goto LABEL_121;
            goto LABEL_81;
          default:
            goto LABEL_121;
        }
      }
      v40 = *(_QWORD *)(a6 + 8);
      v38 = a1;
      if (v40 == 4 && **(_DWORD **)a6 == 1701667187)
      {
LABEL_91:
        if (v22 >= (uint64_t)(a4[1] - *a4) >> 2)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v24 = MIL::IRConstantDimension::Make(v38, (MIL::MILContext *)(v34 * *(int *)(*a4 + 4 * v22)));
        v26 = (uint64_t *)a8[1];
        v63 = (unint64_t)a8[2];
        if ((unint64_t)v26 >= v63)
        {
          v64 = ((char *)v26 - (_BYTE *)*a8) >> 3;
          if ((unint64_t)(v64 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v65 = v63 - (_QWORD)*a8;
          v66 = v65 >> 2;
          if (v65 >> 2 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v66;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v81, v30);
          else
            v31 = 0;
          v52 = (uint64_t *)&v31[8 * v64];
          *v52 = v24;
          v53 = (char *)(v52 + 1);
          v69 = (char *)*a8;
          v54 = (char *)a8[1];
          if (v54 != *a8)
          {
            do
            {
              v70 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *--v52 = v70;
            }
            while (v54 != v69);
            goto LABEL_113;
          }
          goto LABEL_114;
        }
        goto LABEL_93;
      }
      if (v40 == 10)
      {
        if (**(_QWORD **)a6 == 0x776F6C5F656D6173 && *(_WORD *)(*(_QWORD *)a6 + 8) == 29285)
          goto LABEL_91;
        v40 = *(_QWORD *)(a6 + 8);
      }
      if (v40 != 5)
        goto LABEL_47;
      if (**(_DWORD **)a6 != 1768710518 || *(_BYTE *)(*(_QWORD *)a6 + 4) != 100)
        break;
LABEL_81:
      if (v22 >= (uint64_t)(a4[1] - *a4) >> 2)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      v24 = MIL::IRConstantDimension::Make(v38, (MIL::MILContext *)(v36 + (v34 - 1) * *(int *)(*a4 + 4 * v22)));
      v26 = (uint64_t *)a8[1];
      v59 = (unint64_t)a8[2];
      if ((unint64_t)v26 >= v59)
      {
        v60 = ((char *)v26 - (_BYTE *)*a8) >> 3;
        if ((unint64_t)(v60 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v61 = v59 - (_QWORD)*a8;
        v62 = v61 >> 2;
        if (v61 >> 2 <= (unint64_t)(v60 + 1))
          v62 = v60 + 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v62;
        if (v30)
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v81, v30);
        else
          v31 = 0;
        v52 = (uint64_t *)&v31[8 * v60];
        *v52 = v24;
        v53 = (char *)(v52 + 1);
        v71 = (char *)*a8;
        v54 = (char *)a8[1];
        if (v54 != *a8)
        {
          do
          {
            v72 = *((_QWORD *)v54 - 1);
            v54 -= 8;
            *--v52 = v72;
          }
          while (v54 != v71);
          goto LABEL_113;
        }
LABEL_114:
        *a8 = v52;
        a8[1] = v53;
        a8[2] = &v31[8 * v30];
        if (v54)
          operator delete(v54);
        goto LABEL_116;
      }
LABEL_93:
      *v26 = v24;
      v53 = (char *)(v26 + 1);
LABEL_116:
      a8[1] = v53;
      if (++v22 == v23)
        goto LABEL_117;
    }
    v40 = *(_QWORD *)(a6 + 8);
LABEL_47:
    if (v40 != 6)
      goto LABEL_121;
    v39 = *(_QWORD *)a6;
LABEL_49:
    v43 = *(_DWORD *)v39;
    v44 = *(unsigned __int16 *)(v39 + 4);
    if (v43 != 1953723747 || v44 != 28015)
    {
LABEL_121:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v83);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Invalid padding type ", 21);
      v74 = *(char *)(a6 + 23);
      if (v74 >= 0)
        v75 = a6;
      else
        v75 = *(_QWORD *)a6;
      if (v74 >= 0)
        v76 = *(unsigned __int8 *)(a6 + 23);
      else
        v76 = *(_QWORD *)(a6 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, v75, v76);
      v77 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v77, &v82);
      v77->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v77, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    if (v22 >= (uint64_t)(a4[1] - *a4) >> 2
      || (v46 = (uint64_t)(a7[1] - *a7) >> 2, v46 <= 2 * v22)
      || (v47 = (2 * v22) | 1, v46 <= v47))
    {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    v24 = MIL::IRConstantDimension::Make(v38, (MIL::MILContext *)(v36+ (v34 - 1) * *(int *)(*a4 + 4 * v22)- (*(int *)(*a7 + 4 * v47)+ (uint64_t)*(int *)(*a7 + 8 * v22))));
    v26 = (uint64_t *)a8[1];
    v48 = (unint64_t)a8[2];
    if ((unint64_t)v26 >= v48)
    {
      v49 = ((char *)v26 - (_BYTE *)*a8) >> 3;
      if ((unint64_t)(v49 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v50 = v48 - (_QWORD)*a8;
      v51 = v50 >> 2;
      if (v50 >> 2 <= (unint64_t)(v49 + 1))
        v51 = v49 + 1;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v51;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v81, v30);
      else
        v31 = 0;
      v52 = (uint64_t *)&v31[8 * v49];
      *v52 = v24;
      v53 = (char *)(v52 + 1);
      v67 = (char *)*a8;
      v54 = (char *)a8[1];
      if (v54 != *a8)
      {
        do
        {
          v68 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *--v52 = v68;
        }
        while (v54 != v67);
LABEL_113:
        v54 = (char *)*a8;
      }
      goto LABEL_114;
    }
    goto LABEL_93;
  }
LABEL_117:
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
}

void sub_1E06E9180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  void *v22;
  void *v23;

  v22 = *(void **)(v20 - 112);
  if (v22)
  {
    *(_QWORD *)(v20 - 104) = v22;
    operator delete(v22);
  }
  v23 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

BOOL MIL::ValueTypeInferenceUtils::ShapeHasUnknownDims(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v2)
  {
    v4 = *(_QWORD **)a1;
  }
  else
  {
    while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1))
    {
      if (++v1 == v2)
      {
        v1 = v2;
        break;
      }
    }
    v4 = v1;
    v1 = *(_QWORD **)(a1 + 8);
  }
  return v4 != v1;
}

BOOL MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v2)
  {
    v4 = *(_QWORD **)a1;
  }
  else
  {
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 32))(*v1) & 1) == 0)
    {
      if (++v1 == v2)
      {
        v1 = v2;
        break;
      }
    }
    v4 = v1;
    v1 = *(_QWORD **)(a1 + 8);
  }
  return v4 != v1;
}

uint64_t MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::logic_error *exception;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v2)
    goto LABEL_7;
  while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 32))(*v1) & 1) == 0)
  {
    if (++v1 == v2)
    {
      v1 = v2;
      break;
    }
  }
  if (v1 == *(_QWORD **)(a1 + 8))
  {
LABEL_7:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "input shape does not have any unknown variadic dimension.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  return ((uint64_t)v1 - *(_QWORD *)a1) >> 3;
}

void sub_1E06E944C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float MIL::ValueTypeInferenceUtils::GetFloatScalarValue(MIL::ValueTypeInferenceUtils *this, const MIL::IRTensorValue *a2)
{
  int *v3;
  float result;
  uint64_t v5;
  MIL::Fp16 *v6;
  MIL::Bf16 *v7;
  _BYTE *v8;
  uint64_t *v9;
  std::runtime_error *exception;

  v3 = (int *)MIL::IRValue::TryGetScalar<int>(this);
  if (v3)
    return (float)*v3;
  v5 = MIL::IRValue::TryGetScalar<float>(this);
  if (v5)
    return *(float *)v5;
  v6 = (MIL::Fp16 *)MIL::IRValue::TryGetScalar<MIL::Fp16>(this);
  if (v6)
    return MIL::Fp16::GetFloat(v6);
  v7 = (MIL::Bf16 *)MIL::IRValue::TryGetScalar<MIL::Bf16>(this);
  if (v7)
    return MIL::Bf16::GetFloat(v7);
  v8 = (_BYTE *)MIL::IRValue::TryGetScalar<BOOL>(this);
  if (v8)
  {
    result = 0.0;
    if (*v8)
      return 1.0;
  }
  else
  {
    v9 = (uint64_t *)MIL::IRValue::TryGetScalar<long long>(this);
    if (!v9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot extract scalar from value.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    return (float)*v9;
  }
  return result;
}

void sub_1E06E953C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::GetTopkOutShape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, char **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, _QWORD *a6@<X8>)
{
  char *v10;
  char *v11;
  unint64_t VariadicUnknownDimIndex;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *i;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *j;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v10 = *a2;
  v11 = a2[1];
  if (*a2 == v11)
  {
    v16 = 0;
    v17 = v10;
LABEL_11:
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)a6, v16, v17, v10, (v10 - v17) >> 3);
    if ((a3 & 0x80000000) == 0)
    {
      *(_QWORD *)(*a6 + 8 * a3) = a4;
      return;
    }
    v18 = a5 + a3;
    goto LABEL_16;
  }
  while (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v10 + 32))(*(_QWORD *)v10) & 1) == 0)
  {
    v10 += 8;
    if (v10 == v11)
    {
      v10 = v11;
      break;
    }
  }
  if (v10 == a2[1])
  {
    v16 = a6[1];
    v17 = *a2;
    goto LABEL_11;
  }
  VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex((uint64_t)a2);
  v15 = VariadicUnknownDimIndex;
  if ((a3 & 0x80000000) == 0)
  {
    if (VariadicUnknownDimIndex <= a3)
    {
      for (i = *a2; !(*(unsigned int (**)(_QWORD))(**(_QWORD **)i + 32))(*(_QWORD *)i); i += 8)
      {
        v23 = (_QWORD *)a6[1];
        v22 = a6[2];
        if ((unint64_t)v23 >= v22)
        {
          v25 = ((uint64_t)v23 - *a6) >> 3;
          if ((unint64_t)(v25 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v26 = v22 - *a6;
          v27 = v26 >> 2;
          if (v26 >> 2 <= (unint64_t)(v25 + 1))
            v27 = v25 + 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v28 = v27;
          if (v28)
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v28);
          else
            v29 = 0;
          v30 = &v29[8 * v25];
          *(_QWORD *)v30 = *(_QWORD *)i;
          v24 = v30 + 8;
          v32 = (char *)*a6;
          v31 = (char *)a6[1];
          if (v31 != (char *)*a6)
          {
            do
            {
              v33 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *((_QWORD *)v30 - 1) = v33;
              v30 -= 8;
            }
            while (v31 != v32);
            v31 = (char *)*a6;
          }
          *a6 = v30;
          a6[1] = v24;
          a6[2] = &v29[8 * v28];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v23 = *(_QWORD *)i;
          v24 = v23 + 1;
        }
        a6[1] = v24;
      }
      v34 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
      v35 = v34;
      v37 = (uint64_t *)a6[1];
      v36 = a6[2];
      if ((unint64_t)v37 >= v36)
      {
        v45 = ((uint64_t)v37 - *a6) >> 3;
        if ((unint64_t)(v45 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v46 = v36 - *a6;
        v47 = v46 >> 2;
        if (v46 >> 2 <= (unint64_t)(v45 + 1))
          v47 = v45 + 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v48);
        else
          v49 = 0;
        v55 = (uint64_t *)&v49[8 * v45];
        v56 = &v49[8 * v48];
        *v55 = v35;
        v38 = v55 + 1;
        v58 = (char *)*a6;
        v57 = (char *)a6[1];
        if (v57 != (char *)*a6)
        {
          do
          {
            v59 = *((_QWORD *)v57 - 1);
            v57 -= 8;
            *--v55 = v59;
          }
          while (v57 != v58);
          v57 = (char *)*a6;
        }
        *a6 = v55;
        a6[1] = v38;
        a6[2] = v56;
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v37 = v34;
        v38 = v37 + 1;
      }
      a6[1] = v38;
    }
    else
    {
      std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)a6, a6[1], *a2, a2[1], (a2[1] - *a2) >> 3);
      *(_QWORD *)(*a6 + 8 * a3) = a4;
    }
    return;
  }
  v19 = a2[1];
  v20 = (v19 - *a2) >> 3;
  if ((int)VariadicUnknownDimIndex - (int)v20 < (int)a3)
  {
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)a6, a6[1], *a2, v19, (v19 - *a2) >> 3);
    v18 = v20 + a3;
LABEL_16:
    *(_QWORD *)(*a6 + 8 * v18) = a4;
    return;
  }
  v39 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  v40 = v39;
  v42 = a6 + 2;
  v41 = a6[2];
  v43 = (uint64_t *)a6[1];
  if ((unint64_t)v43 >= v41)
  {
    v50 = ((uint64_t)v43 - *a6) >> 3;
    if ((unint64_t)(v50 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v51 = v41 - *a6;
    v52 = v51 >> 2;
    if (v51 >> 2 <= (unint64_t)(v50 + 1))
      v52 = v50 + 1;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v53);
    else
      v54 = 0;
    v60 = (uint64_t *)&v54[8 * v50];
    v61 = &v54[8 * v53];
    *v60 = v40;
    v44 = v60 + 1;
    v63 = (char *)*a6;
    v62 = (char *)a6[1];
    if (v62 != (char *)*a6)
    {
      do
      {
        v64 = *((_QWORD *)v62 - 1);
        v62 -= 8;
        *--v60 = v64;
      }
      while (v62 != v63);
      v62 = (char *)*a6;
    }
    *a6 = v60;
    a6[1] = v44;
    a6[2] = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *v43 = v39;
    v44 = v43 + 1;
  }
  a6[1] = v44;
  v65 = v15 + 1;
  for (j = *a2; v65 < (a2[1] - *a2) >> 3; j = *a2)
  {
    if ((unint64_t)v44 >= *v42)
    {
      v67 = ((uint64_t)v44 - *a6) >> 3;
      if ((unint64_t)(v67 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v68 = *v42 - *a6;
      v69 = v68 >> 2;
      if (v68 >> 2 <= (unint64_t)(v67 + 1))
        v69 = v67 + 1;
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v69;
      if (v70)
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v70);
      else
        v71 = 0;
      v72 = &v71[8 * v67];
      *(_QWORD *)v72 = *(_QWORD *)&j[8 * v65];
      v44 = v72 + 8;
      v74 = (char *)*a6;
      v73 = (char *)a6[1];
      if (v73 != (char *)*a6)
      {
        do
        {
          v75 = *((_QWORD *)v73 - 1);
          v73 -= 8;
          *((_QWORD *)v72 - 1) = v75;
          v72 -= 8;
        }
        while (v73 != v74);
        v73 = (char *)*a6;
      }
      *a6 = v72;
      a6[1] = v44;
      a6[2] = &v71[8 * v70];
      if (v73)
        operator delete(v73);
    }
    else
    {
      *v44++ = *(_QWORD *)&j[8 * v65];
    }
    a6[1] = v44;
    ++v65;
  }
}

void sub_1E06E99E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::InferShapeForDynamicReshape(void (***this)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::MILContext *a2@<X1>, char **a3@<X8>)
{
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char *v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (_QWORD **)(*(uint64_t (**)(MIL::MILContext *))(*(_QWORD *)a2 + 96))(a2);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v6 + 16))(**v6);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
    v18 = MIL::IRUnknownDimension::Make(this, 0);
    std::vector<MIL::IRDimension const*>::vector(&v19, v8, &v18);
    v9 = v20;
    *(_OWORD *)a3 = v19;
    a3[2] = v9;
  }
  else
  {
    v10 = MIL::IRUnknownDimension::Make(this, (MIL::MILContext *)1);
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), 1uLL);
    v13 = &v11[8 * v12];
    *(_QWORD *)v11 = v10;
    v14 = v11 + 8;
    v16 = *a3;
    v15 = a3[1];
    if (v15 != *a3)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v11 - 1) = v17;
        v11 -= 8;
      }
      while (v15 != v16);
      v15 = *a3;
    }
    *a3 = v11;
    a3[1] = v14;
    a3[2] = v13;
    if (v15)
      operator delete(v15);
    a3[1] = v14;
  }
}

void sub_1E06E9B2C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::ValueTypeInferenceReshapeCommon(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  int v10;
  unsigned __int8 *v11;
  _BOOL4 IsValue;
  _BOOL4 v13;
  MIL::IRValue *SingleValue;
  uint64_t *v15;
  const void *Data;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  int v20;
  void *exception;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void (***v25)(MIL::MILContextImpl *__hidden);
  MIL::IRValueType *v26;
  MIL::MILContext *v27;
  int *v28;
  int *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  int *v38;
  int *v39;
  uint64_t v40;
  int v41;
  int *v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *v46;
  std::string::size_type v47;
  void *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  void (***v53)(MIL::MILContextImpl *__hidden);
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  void *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  std::string::size_type size;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  std::string *v85;
  __int128 v86;
  _QWORD *v87;
  _QWORD *v88;
  std::string *v89;
  std::string::size_type v90;
  void *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  char v95[24];
  __int128 v96;
  char v97[24];
  __int128 v98;
  std::string __p[11];
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  __int128 v105;
  std::string::size_type v106;
  __int128 v107;
  _QWORD v108[3];
  __int128 v109;
  int *v110;
  int *v111;
  uint64_t v112;
  __int128 v113;
  _QWORD v114[2];

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v113 = 0uLL;
  v114[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  IsValue = MIL::IRTypedArgument::IsValue(**((MIL::IRTypedArgument ***)v11 + 5));
  v13 = IsValue;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_6:
      std::string::basic_string[abi:ne180100]<0>(__p, "shape");
      SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
      v15 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      Data = (const void *)MIL::IRTensorValue::GetDataView<int>(v15);
      v110 = 0;
      v111 = 0;
      v112 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v110, Data, (uint64_t)Data + 4 * v17, (4 * v17) >> 2);
      v18 = v110;
      if (v110 == v111)
      {
        v19 = 0;
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = *v18++;
          if (v20 == -1)
            ++v19;
        }
        while (v18 != v111);
        if (v19 >= 2)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          v22 = a2[1];
          *(_QWORD *)&v109 = *a2;
          *((_QWORD *)&v109 + 1) = v22;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          std::string::basic_string[abi:ne180100]<0>(v108, "Only one dimension can be set to -1 (infer size from other dims based off of the # of elements in the input tensor).");
          MIL::ValidationError::ValidationError((uint64_t)exception, &v109, (uint64_t)v108, 315);
        }
      }
      if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 104))(v9))
      {
        v29 = v110;
        if (v111 != v110)
        {
          v30 = 0;
          do
          {
            if (!v29[v30])
            {
              if (MIL::IRTensorValueType::Rank(v9) <= v30)
              {
                v71 = __cxa_allocate_exception(0x48uLL);
                v72 = a2[1];
                *(_QWORD *)&v107 = *a2;
                *((_QWORD *)&v107 + 1) = v72;
                if (v72)
                {
                  v73 = (unint64_t *)(v72 + 8);
                  do
                    v74 = __ldxr(v73);
                  while (__stxr(v74 + 1, v73));
                }
                std::to_string(&v101, v30 + 1);
                v75 = std::string::insert(&v101, 0, "Input shape must be at least rank ");
                v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
                v102.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v76;
                v75->__r_.__value_.__l.__size_ = 0;
                v75->__r_.__value_.__r.__words[2] = 0;
                v75->__r_.__value_.__r.__words[0] = 0;
                v77 = std::string::append(&v102, " for target dim ");
                v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                v103.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v78;
                v77->__r_.__value_.__l.__size_ = 0;
                v77->__r_.__value_.__r.__words[2] = 0;
                v77->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v100, v30);
                if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v79 = &v100;
                else
                  v79 = (std::string *)v100.__r_.__value_.__r.__words[0];
                if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
                else
                  size = v100.__r_.__value_.__l.__size_;
                v81 = std::string::append(&v103, (const std::string::value_type *)v79, size);
                v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                v104.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v82;
                v81->__r_.__value_.__l.__size_ = 0;
                v81->__r_.__value_.__r.__words[2] = 0;
                v81->__r_.__value_.__r.__words[0] = 0;
                v83 = std::string::append(&v104, " to be set to 0 ");
                v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
                __p[0].__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v84;
                v83->__r_.__value_.__l.__size_ = 0;
                v83->__r_.__value_.__r.__words[2] = 0;
                v83->__r_.__value_.__r.__words[0] = 0;
                v85 = std::string::append(__p, "(copy the dim at the same index from x's shape).");
                v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                v106 = v85->__r_.__value_.__r.__words[2];
                v105 = v86;
                v85->__r_.__value_.__l.__size_ = 0;
                v85->__r_.__value_.__r.__words[2] = 0;
                v85->__r_.__value_.__r.__words[0] = 0;
                MIL::ValidationError::ValidationError((uint64_t)v71, &v107, (uint64_t)&v105, 315);
              }
              v31 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
              v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v31 + 8 * v30) + 16))(*(_QWORD *)(*v31 + 8 * v30));
              if (v32)
              {
                v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32);
                v29 = v110;
                v110[v30] = v33;
              }
              else
              {
                v29 = v110;
              }
            }
            ++v30;
          }
          while (v30 < v111 - v29);
        }
      }
      v34 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
      v35 = *(_QWORD **)v34;
      v36 = *(_QWORD **)(v34 + 8);
      if (*(_QWORD **)v34 == v36)
        goto LABEL_39;
      do
      {
        if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v35 + 24))(*v35))
          goto LABEL_37;
        ++v35;
      }
      while (v35 != v36);
      v35 = v36;
LABEL_37:
      if (v35 == *(_QWORD **)(v34 + 8))
      {
LABEL_39:
        v40 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 16))(v9);
        v39 = v110;
        v38 = v111;
        v41 = 1;
        if (v110 != v111)
        {
          v42 = v110;
          do
          {
            v43 = *v42++;
            v41 *= v43;
          }
          while (v42 != v111);
        }
        if (v19)
        {
          if ((int)v40 % v41)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cannot reshape tensor of size ", 30);
            v44 = (_QWORD *)std::ostream::operator<<();
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" into shape ", 12);
            (*(void (**)(std::string *__return_ptr, uint64_t *))(*v15 + 72))(&v104, v15);
            if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v46 = &v104;
            else
              v46 = (std::string *)v104.__r_.__value_.__r.__words[0];
            if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
            else
              v47 = v104.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            v48 = __cxa_allocate_exception(0x48uLL);
            v49 = a2[1];
            *(_QWORD *)&v98 = *a2;
            *((_QWORD *)&v98 + 1) = v49;
            if (v49)
            {
              v50 = (unint64_t *)(v49 + 8);
              do
                v51 = __ldxr(v50);
              while (__stxr(v51 + 1, v50));
            }
            std::stringbuf::str();
            MIL::ValidationError::ValidationError((uint64_t)v48, &v98, (uint64_t)v97, 315);
          }
        }
        else if (v40 != v41)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cannot reshape tensor of size ", 30);
          v87 = (_QWORD *)std::ostream::operator<<();
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)" into shape ", 12);
          (*(void (**)(std::string *__return_ptr, uint64_t *))(*v15 + 72))(&v104, v15);
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v89 = &v104;
          else
            v89 = (std::string *)v104.__r_.__value_.__r.__words[0];
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v90 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
          else
            v90 = v104.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          v91 = __cxa_allocate_exception(0x48uLL);
          v92 = a2[1];
          *(_QWORD *)&v96 = *a2;
          *((_QWORD *)&v96 + 1) = v92;
          if (v92)
          {
            v93 = (unint64_t *)(v92 + 8);
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
          }
          std::stringbuf::str();
          MIL::ValidationError::ValidationError((uint64_t)v91, &v96, (uint64_t)v95, 315);
        }
        v37 = -((int)v40 / v41);
      }
      else
      {
        v37 = 0;
        v39 = v110;
        v38 = v111;
      }
      if (v39 == v38)
        goto LABEL_93;
      while (1)
      {
        v52 = *v39;
        if (*v39 == -1)
          v52 = v37;
        v53 = *a1;
        if (v52)
        {
          v54 = MIL::IRConstantDimension::Make(v53, (MIL::MILContext *)v52);
          v55 = (uint64_t *)*((_QWORD *)&v113 + 1);
          if (*((_QWORD *)&v113 + 1) >= v114[0])
          {
            v56 = (uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3;
            if ((unint64_t)(v56 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v57 = (uint64_t)(v114[0] - v113) >> 2;
            if (v57 <= v56 + 1)
              v57 = v56 + 1;
            if (v114[0] - (_QWORD)v113 >= 0x7FFFFFFFFFFFFFF8uLL)
              v58 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v58 = v57;
            if (v58)
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v114, v58);
            else
              v59 = 0;
            v63 = (uint64_t *)&v59[8 * v56];
            *v63 = v54;
            v60 = v63 + 1;
            v64 = (char *)*((_QWORD *)&v113 + 1);
            v65 = (char *)v113;
            if (*((_QWORD *)&v113 + 1) != (_QWORD)v113)
            {
              do
              {
                v66 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *--v63 = v66;
              }
              while (v64 != v65);
              goto LABEL_88;
            }
            goto LABEL_89;
          }
        }
        else
        {
          v54 = MIL::IRUnknownDimension::Make(v53, 0);
          v55 = (uint64_t *)*((_QWORD *)&v113 + 1);
          if (*((_QWORD *)&v113 + 1) >= v114[0])
          {
            v61 = (uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3;
            if ((unint64_t)(v61 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v62 = (uint64_t)(v114[0] - v113) >> 2;
            if (v62 <= v61 + 1)
              v62 = v61 + 1;
            if (v114[0] - (_QWORD)v113 >= 0x7FFFFFFFFFFFFFF8uLL)
              v58 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v58 = v62;
            if (v58)
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v114, v58);
            else
              v59 = 0;
            v63 = (uint64_t *)&v59[8 * v61];
            *v63 = v54;
            v60 = v63 + 1;
            v64 = (char *)*((_QWORD *)&v113 + 1);
            v67 = (char *)v113;
            if (*((_QWORD *)&v113 + 1) != (_QWORD)v113)
            {
              do
              {
                v68 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *--v63 = v68;
              }
              while (v64 != v67);
LABEL_88:
              v64 = (char *)v113;
            }
LABEL_89:
            *(_QWORD *)&v113 = v63;
            *((_QWORD *)&v113 + 1) = v60;
            v114[0] = &v59[8 * v58];
            if (v64)
              operator delete(v64);
            goto LABEL_91;
          }
        }
        *v55 = v54;
        v60 = v55 + 1;
LABEL_91:
        *((_QWORD *)&v113 + 1) = v60;
        if (++v39 == v38)
        {
          v38 = v110;
LABEL_93:
          if (v38)
          {
            v111 = v38;
            v28 = v38;
LABEL_95:
            operator delete(v28);
          }
          goto LABEL_96;
        }
      }
    }
  }
  else if (IsValue)
  {
    goto LABEL_6;
  }
  v25 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v110, "shape");
  v26 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v110);
  v27 = (MIL::MILContext *)MIL::IRValueType::AsTensorType(v26);
  MIL::ValueTypeInferenceUtils::InferShapeForDynamicReshape(v25, v27, &__p[0].__r_.__value_.__l.__data_);
  if ((_QWORD)v113)
  {
    *((_QWORD *)&v113 + 1) = v113;
    operator delete((void *)v113);
  }
  v113 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  v114[0] = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
  memset(__p, 0, 24);
  if (SHIBYTE(v112) < 0)
  {
    v28 = v110;
    goto LABEL_95;
  }
LABEL_96:
  v69 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&v113);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v70 = (uint64_t *)operator new(8uLL);
  *a4 = v70;
  *v70++ = v69;
  a4[1] = v70;
  a4[2] = v70;
  if ((_QWORD)v113)
  {
    *((_QWORD *)&v113 + 1) = v113;
    operator delete((void *)v113);
  }
}

void sub_1E06EA424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, ...)
{
  void *v9;
  int v10;
  uint64_t v11;
  void *v13;
  void *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, void *);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  if (a9 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
    if ((v10 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)va);
    if (!v10)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)va1);
      v13 = *(void **)(v11 - 136);
      if (v13)
      {
        *(_QWORD *)(v11 - 128) = v13;
        operator delete(v13);
      }
      v14 = *(void **)(v11 - 112);
      if (v14)
      {
        *(_QWORD *)(v11 - 104) = v14;
        operator delete(v14);
      }
      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v9);
  goto LABEL_8;
}

void MIL::ValueTypeInferenceUtils::ValueTypeInferenceBaseArgReductionCommon(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, int a3@<W5>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  const void *SingleValue;
  unsigned __int8 *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  std::logic_error *exception;
  void (***v41)(MIL::MILContextImpl *__hidden);
  void *v42;
  uint64_t *v43;
  uint64_t *v44;
  std::string v45;
  void *__p[2];
  char v47;

  v41 = *a1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  if (v47 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  v12 = v11;
  if (v47 < 0)
  {
    operator delete(__p[0]);
    if (!v12)
      goto LABEL_9;
  }
  else if (!v11)
  {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  LODWORD(v12) = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (v47 < 0)
    operator delete(__p[0]);
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v14)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    v15 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
    v16 = MIL::IRValue::GetScalar<int>(v15);
    if (v47 < 0)
      operator delete(__p[0]);
    if (!MIL::Validation::IsAxisValidForRank((MIL::Validation *)v16, (unint64_t)(v10[1] - *v10) >> 3))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Axis must be within range (-input_ndim - 1, input_ndim) (exclusive). Invalid axis: ", 83);
      v39 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" for input_ndim: ", 17);
      std::ostream::operator<<();
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &v45);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    v17 = *v10;
    if ((v16 & 0x80000000) != 0)
      LODWORD(v16) = v16 + ((unint64_t)(v10[1] - v17) >> 3);
  }
  else
  {
    LODWORD(v16) = 0;
    v17 = *v10;
  }
  v18 = v10[1];
  if (v18 != v17)
  {
    v19 = 0;
    while ((_DWORD)v16 == (_DWORD)v19)
    {
      if ((_DWORD)v12)
      {
        v20 = MIL::IRConstantDimension::Make(v41, (MIL::MILContext *)1);
        v21 = v20;
        v22 = v43;
        if (v43 < v44)
        {
          *v43 = v20;
          v23 = v22 + 1;
LABEL_52:
          v43 = v23;
          v17 = *v10;
          v18 = v10[1];
          goto LABEL_53;
        }
        v29 = ((char *)v43 - (_BYTE *)v42) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v30 = ((char *)v44 - (_BYTE *)v42) >> 2;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if ((unint64_t)((char *)v44 - (_BYTE *)v42) >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v30;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v44, v27);
        else
          v28 = 0;
        v31 = &v28[8 * v29];
        *(_QWORD *)v31 = v21;
        v23 = (uint64_t *)(v31 + 8);
        v35 = (char *)v42;
        v32 = (char *)v43;
        if (v43 != v42)
        {
          do
          {
            v36 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v31 - 1) = v36;
            v31 -= 8;
          }
          while (v32 != v35);
          goto LABEL_49;
        }
        goto LABEL_50;
      }
LABEL_53:
      if (++v19 >= (unint64_t)((v18 - v17) >> 3))
        goto LABEL_54;
    }
    v24 = v43;
    if (v43 < v44)
    {
      *v43 = *(_QWORD *)(v17 + 8 * v19);
      v23 = v24 + 1;
      goto LABEL_52;
    }
    v25 = ((char *)v43 - (_BYTE *)v42) >> 3;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v26 = ((char *)v44 - (_BYTE *)v42) >> 2;
    if (v26 <= v25 + 1)
      v26 = v25 + 1;
    if ((unint64_t)((char *)v44 - (_BYTE *)v42) >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v44, v27);
    else
      v28 = 0;
    v31 = &v28[8 * v25];
    *(_QWORD *)v31 = *(_QWORD *)(v17 + 8 * v19);
    v23 = (uint64_t *)(v31 + 8);
    v33 = (char *)v42;
    v32 = (char *)v43;
    if (v43 != v42)
    {
      do
      {
        v34 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *((_QWORD *)v31 - 1) = v34;
        v31 -= 8;
      }
      while (v32 != v33);
LABEL_49:
      v32 = (char *)v42;
    }
LABEL_50:
    v42 = v31;
    v43 = v23;
    v44 = (uint64_t *)&v28[8 * v27];
    if (v32)
      operator delete(v32);
    goto LABEL_52;
  }
LABEL_54:
  v37 = MIL::IRTensorValueType::MakeWithShape(*a1, a3, (uint64_t)&v42);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v38 = (uint64_t *)operator new(8uLL);
  *a4 = v38;
  *v38++ = v37;
  a4[1] = v38;
  a4[2] = v38;
  if (v42)
  {
    v43 = (uint64_t *)v42;
    operator delete(v42);
  }
}

void sub_1E06EAAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      if (a13)
        operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void MIL::ValueTypeInferenceUtils::GetMatmulOutShape(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::IRTensorValueType *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, int a4@<W3>, int a5@<W4>, unint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (***v21)(MIL::MILContextImpl *__hidden);
  uint64_t i;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  int64_t v56;
  std::logic_error *exception;
  std::logic_error *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *__p;
  _BYTE *v63;
  uint64_t v64;
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  void **v74;
  char v75;
  _QWORD v76[3];
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 104))(a2)
    || ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a3 + 104))(a3) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "cannot do type inference if x or y have variadic shapes");
    goto LABEL_69;
  }
  if (MIL::IRTensorValueType::Rank(a2) == 1 && a4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "transpose_x can't be true if x's rank is 1");
LABEL_69:
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v12 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
  v72 = 0;
  v73 = 0;
  v71 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v71, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
  if (a4)
  {
    v13 = *((_QWORD *)v72 - 2);
    *((_QWORD *)v72 - 2) = *((_QWORD *)v72 - 1);
    *((_QWORD *)v72 - 1) = v13;
  }
  v14 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a3 + 96))(a3);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v68, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  if (a5)
  {
    v15 = *((_QWORD *)v69 - 2);
    *((_QWORD *)v69 - 2) = *((_QWORD *)v69 - 1);
    *((_QWORD *)v69 - 1) = v15;
  }
  if (MIL::IRTensorValueType::Rank(a2) == 1)
  {
    v16 = (char *)v71;
    v76[0] = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<MIL::IRDimension const*>::insert((uint64_t)&v71, v16, v76);
  }
  if (MIL::IRTensorValueType::Rank(a3) == 1)
  {
    v17 = v69;
    v76[0] = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)1);
    std::vector<MIL::IRDimension const*>::insert((uint64_t)&v68, v17, v76);
  }
  if (!(*(uint64_t (**)(_QWORD))(**((_QWORD **)v72 - 1) + 24))(*((_QWORD *)v72 - 1))
    && !(*(uint64_t (**)(_QWORD))(**((_QWORD **)v69 - 2) + 24))(*((_QWORD *)v69 - 2)))
  {
    v18 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v72 - 1));
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
    v20 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v69 - 2));
    if (v19 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20))
    {
      v58 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v58, "shapes of x and y are not broadcastable");
      v58->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v58, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
  }
  v66 = 0;
  v67 = 0;
  v65 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(&v65, v71, (uint64_t)(v72 - 16), (v72 - 16 - (_BYTE *)v71) >> 3);
  v63 = 0;
  v64 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(&__p, v68, (uint64_t)(v69 - 16), (v69 - 16 - (_BYTE *)v68) >> 3);
  v21 = *a1;
  memset(v76, 0, sizeof(v76));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v76, v65, (uint64_t)v66, (v66 - (_BYTE *)v65) >> 3);
  v77 = 0;
  v78[0] = 0;
  v78[1] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v77, __p, (uint64_t)v63, (v63 - (_BYTE *)__p) >> 3);
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v74 = (void **)&v59;
  v75 = 0;
  v59 = operator new(0x30uLL);
  v60 = v59;
  v61 = v59 + 6;
  v60 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*>*>((uint64_t)&v61, (uint64_t)v76, (uint64_t)&v79, v59);
  MIL::ValueTypeInferenceUtils::BroadcastShape(v21, (uint64_t *)&v59, a6);
  v74 = (void **)&v59;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v74);
  for (i = 0; i != -6; i -= 3)
  {
    v23 = (void *)v76[i + 3];
    if (v23)
    {
      v78[i] = v23;
      operator delete(v23);
    }
  }
  v24 = v71;
  v25 = ((v72 - (_BYTE *)v71) >> 3) - 2;
  v26 = a6[2];
  v27 = (_QWORD *)a6[1];
  if ((unint64_t)v27 >= v26)
  {
    v29 = (uint64_t)((uint64_t)v27 - *a6) >> 3;
    if ((unint64_t)(v29 + 1) >> 61)
      goto LABEL_70;
    v30 = v26 - *a6;
    v31 = v30 >> 2;
    if (v30 >> 2 <= (unint64_t)(v29 + 1))
      v31 = v29 + 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v32);
    else
      v33 = 0;
    v34 = &v33[8 * v29];
    v35 = &v33[8 * v32];
    *(_QWORD *)v34 = v24[v25];
    v28 = v34 + 8;
    v37 = *a6;
    v36 = (char *)a6[1];
    if (v36 != (char *)*a6)
    {
      do
      {
        v38 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *((_QWORD *)v34 - 1) = v38;
        v34 -= 8;
      }
      while (v36 != (char *)v37);
      v36 = (char *)*a6;
    }
    *a6 = (unint64_t)v34;
    a6[1] = (unint64_t)v28;
    a6[2] = (unint64_t)v35;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v27 = *((_QWORD *)v71 + v25);
    v28 = v27 + 1;
  }
  a6[1] = (unint64_t)v28;
  v39 = v68;
  v40 = ((v69 - (_BYTE *)v68) >> 3) - 1;
  v41 = a6[2];
  if ((unint64_t)v28 < v41)
  {
    *v28 = *((_QWORD *)v68 + v40);
    v42 = v28 + 1;
    goto LABEL_52;
  }
  v43 = (uint64_t)((uint64_t)v28 - *a6) >> 3;
  if ((unint64_t)(v43 + 1) >> 61)
LABEL_70:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v44 = v41 - *a6;
  v45 = v44 >> 2;
  if (v44 >> 2 <= (unint64_t)(v43 + 1))
    v45 = v43 + 1;
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
    v46 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v46 = v45;
  if (v46)
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a6 + 2), v46);
  else
    v47 = 0;
  v48 = &v47[8 * v43];
  v49 = &v47[8 * v46];
  *(_QWORD *)v48 = v39[v40];
  v42 = v48 + 8;
  v51 = *a6;
  v50 = (char *)a6[1];
  if (v50 != (char *)*a6)
  {
    do
    {
      v52 = *((_QWORD *)v50 - 1);
      v50 -= 8;
      *((_QWORD *)v48 - 1) = v52;
      v48 -= 8;
    }
    while (v50 != (char *)v51);
    v50 = (char *)*a6;
  }
  *a6 = (unint64_t)v48;
  a6[1] = (unint64_t)v42;
  a6[2] = (unint64_t)v49;
  if (v50)
    operator delete(v50);
LABEL_52:
  a6[1] = (unint64_t)v42;
  if (MIL::IRTensorValueType::Rank(a2) == 1)
  {
    v54 = *a6;
    v53 = (_BYTE *)a6[1];
    v55 = (_BYTE *)(*a6 + 8);
    v56 = v53 - v55;
    if (v53 != v55)
      memmove((void *)*a6, v55, v53 - v55);
    a6[1] = v54 + v56;
  }
  if (MIL::IRTensorValueType::Rank(a3) == 1)
    a6[1] -= 8;
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v68)
  {
    v69 = (char *)v68;
    operator delete(v68);
  }
  if (v71)
  {
    v72 = (char *)v71;
    operator delete(v71);
  }
}

void sub_1E06EB16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  __cxa_free_exception(v24);
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

char *std::vector<MIL::IRDimension const*>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&__p, a3);
    v4 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_1E06EB3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::ValueTypeInferenceUtils::GetRandomCategoricalOutShape(MIL::MILContext *a1@<X3>, void (****a2)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a3@<X1>, uint64_t *a4@<X2>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  int v7;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void *exception;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD v46[3];
  __int128 v47;
  _QWORD v48[3];
  __int128 v49;

  v6 = *a4;
  if ((unint64_t)(a4[1] - *a4) <= 0xF)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v38 = a3[1];
    *(_QWORD *)&v49 = *a3;
    *((_QWORD *)&v49 + 1) = v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    std::string::basic_string[abi:ne180100]<0>(v48, "Parameter x must have a minimum rank of 2. The last dimension represents vector of probabilities and remaining dimensions represent specific distributions.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v49, (uint64_t)v48, 315);
  }
  v7 = (int)a1;
  v10 = 0;
  v11 = 0;
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v12 = a5 + 2;
  do
  {
    if ((unint64_t)v10 >= *v12)
    {
      v13 = ((uint64_t)v10 - *a5) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v14 = *v12 - *a5;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a5 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[8 * v13];
      *(_QWORD *)v18 = *(_QWORD *)(v6 + 8 * v11);
      v10 = v18 + 8;
      v20 = (char *)*a5;
      v19 = (char *)a5[1];
      if (v19 != (char *)*a5)
      {
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v18 - 1) = v21;
          v18 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*a5;
      }
      *a5 = v18;
      a5[1] = v10;
      a5[2] = &v17[8 * v16];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v10++ = *(_QWORD *)(v6 + 8 * v11);
    }
    a5[1] = v10;
    ++v11;
    v6 = *a4;
  }
  while (v11 < ((a4[1] - *a4) >> 3) - 1);
  if (v7 < 1)
  {
    v41 = __cxa_allocate_exception(0x48uLL);
    v42 = a3[1];
    *(_QWORD *)&v47 = *a3;
    *((_QWORD *)&v47 + 1) = v42;
    if (v42)
    {
      v43 = (unint64_t *)(v42 + 8);
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    std::string::basic_string[abi:ne180100]<0>(v46, "Parameter size must be positive.");
    MIL::ValidationError::ValidationError((uint64_t)v41, &v47, (uint64_t)v46, 315);
  }
  v22 = MIL::IRConstantDimension::Make(*a2, (MIL::MILContext *)v7);
  v23 = v22;
  v25 = (uint64_t *)a5[1];
  v24 = a5[2];
  if ((unint64_t)v25 >= v24)
  {
    v27 = ((uint64_t)v25 - *a5) >> 3;
    if ((unint64_t)(v27 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v28 = v24 - *a5;
    v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v27 + 1))
      v29 = v27 + 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a5 + 2), v30);
    else
      v31 = 0;
    v32 = (uint64_t *)&v31[8 * v27];
    v33 = &v31[8 * v30];
    *v32 = v23;
    v26 = v32 + 1;
    v35 = (char *)*a5;
    v34 = (char *)a5[1];
    if (v34 != (char *)*a5)
    {
      do
      {
        v36 = *((_QWORD *)v34 - 1);
        v34 -= 8;
        *--v32 = v36;
      }
      while (v34 != v35);
      v34 = (char *)*a5;
    }
    *a5 = v32;
    a5[1] = v26;
    a5[2] = v33;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *v25 = v22;
    v26 = v25 + 1;
  }
  a5[1] = v26;
}

void sub_1E06EB730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;
  int v26;
  void *v27;
  void *v29;

  if (a16 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      v29 = *(void **)v25;
      if (*(_QWORD *)v25)
      {
        *(_QWORD *)(v25 + 8) = v29;
        operator delete(v29);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    if (!v26)
      goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void MIL::ValueTypeInferenceUtils::EnsureShapeIsConstant(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string v23;
  std::string v24;
  void *__p[2];
  std::string::size_type v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v6)
    goto LABEL_27;
  while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5))
  {
    if (++v5 == v6)
    {
      v5 = v6;
      break;
    }
  }
  if (v5 == *(_QWORD **)(a1 + 8))
  {
LABEL_27:
    MIL::ValidationResult::ValidationResult(a4);
  }
  else
  {
    v10 = (std::__shared_weak_count *)a3[1];
    v27 = *a3;
    v28 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    std::operator+<char>();
    v13 = std::string::append(&v23, " in op ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = *(char *)(a2 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a2;
    else
      v16 = *(const std::string::value_type **)a2;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a2 + 23);
    else
      v17 = *(_QWORD *)(a2 + 8);
    v18 = std::string::append(&v24, v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v26 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a4, &v27, 304, __p);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v20 = v28;
    if (v28)
    {
      v21 = (unint64_t *)&v28->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_1E06EB9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 80);
  _Unwind_Resume(a1);
}

void MIL::ValueTypeInferenceUtils::GetRandomOpOutShape(MIL::IRValue *this@<X1>, void (****a2)(MIL::MILContextImpl *__hidden this)@<X0>, MIL::IRDimension ***a3@<X2>, _QWORD *a4@<X3>, void **a5@<X8>)
{
  uint64_t *v8;
  unsigned int *Data;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  MIL::MILContext *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *exception;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  __int128 v36;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (this)
  {
    v8 = (uint64_t *)MIL::IRValue::AsTensor(this);
    Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v8);
    v11 = v10;
    std::vector<std::string const*>::reserve(a5, v10);
    if (v11)
    {
      v12 = &Data[v11];
      do
      {
        v13 = (MIL::MILContext *)*Data;
        if ((int)v13 <= 0)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          v31 = a4[1];
          *(_QWORD *)&v36 = *a4;
          *((_QWORD *)&v36 + 1) = v31;
          if (v31)
          {
            v32 = (unint64_t *)(v31 + 8);
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          std::string::basic_string[abi:ne180100]<0>(v35, "Shape parameter must have positive values only");
          MIL::ValidationError::ValidationError((uint64_t)exception, &v36, (uint64_t)v35, 315);
        }
        v14 = MIL::IRConstantDimension::Make(*a2, v13);
        v15 = v14;
        v17 = (uint64_t *)a5[1];
        v16 = (unint64_t)a5[2];
        if ((unint64_t)v17 >= v16)
        {
          v19 = ((char *)v17 - (_BYTE *)*a5) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v20 = v16 - (_QWORD)*a5;
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a5 + 2), v22);
          else
            v23 = 0;
          v24 = (uint64_t *)&v23[8 * v19];
          *v24 = v15;
          v18 = (char *)(v24 + 1);
          v26 = (char *)*a5;
          v25 = (char *)a5[1];
          if (v25 != *a5)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v24 = v27;
            }
            while (v25 != v26);
            v25 = (char *)*a5;
          }
          *a5 = v24;
          a5[1] = v18;
          a5[2] = &v23[8 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v17 = v14;
          v18 = (char *)(v17 + 1);
        }
        a5[1] = v18;
        ++Data;
      }
      while (Data != v12);
    }
  }
  else
  {
    v28 = MIL::IRDimension::AsConstant(**a3);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28);
    v34 = MIL::IRUnknownDimension::Make(*a2, 0);
    std::vector<MIL::IRDimension const*>::assign((char **)a5, v29, &v34);
  }
}

void sub_1E06EBC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = (a1[1] - result) >> 3;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - result) >> 3;
    for (; v14; --v14)
    {
      *(_QWORD *)result = *a3;
      result += 8;
    }
    if (a2 <= v13)
    {
      a1[1] = &(*a1)[8 * a2];
    }
    else
    {
      v15 = a1[1];
      v16 = &v15[8 * (a2 - v13)];
      v17 = 8 * a2 - 8 * v13;
      do
      {
        *(_QWORD *)v15 = *a3;
        v15 += 8;
        v17 -= 8;
      }
      while (v17);
      a1[1] = v16;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void MIL::ValueTypeInferenceUtils::GetOperatorType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  char v5;

  if (std::string::find((const std::string *)a1, 46, 0) == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    v4 = std::string::find((const std::string *)a1, 46, 0);
    std::string::basic_string(a2, (const std::string *)a1, v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v5);
  }
}

void MIL::ValueTypeInferenceUtils::MixedOpTypeinference(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t Operator;
  uint64_t v6;
  _BOOL4 v9;
  void (***v10)(MIL::MILContextImpl *__hidden);
  MIL::Builder::OperationBuilder *v11;
  _DWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v18;
  void (***v19)(MIL::MILContextImpl *__hidden);
  MIL::Builder::OperationBuilder *v20;
  _DWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  void (***v31)(MIL::MILContextImpl *__hidden);
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v53;
  uint64_t *v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  MIL::Builder::OperationBuilder *v59;
  MIL::Builder::OperationBuilder *v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL4 v67;
  uint64_t *v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  MIL::Builder::OperationBuilder *v75;
  MIL::Builder::Variable::VariableImpl **v76;
  unsigned __int8 *v77;
  MIL::Builder::OperationBuilder *v78;
  MIL::Builder::Variable::VariableImpl **v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v85;
  unsigned __int8 *v86;
  _QWORD *v87;
  uint64_t *v88;
  _BOOL4 v89;
  void (***v90)(MIL::MILContextImpl *__hidden);
  MIL::Builder::Variable::VariableImpl **Output;
  uint64_t Type;
  uint64_t v93;
  int v94;
  MIL::IRTypedArgument *v95;
  unsigned __int8 *v96;
  std::string::size_type v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  MIL::Builder::OperationBuilder *v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  _BOOL4 v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  uint64_t *v116;
  int v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  void *v123;
  char *v124;
  int64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  int v131;
  void (***v132)(MIL::MILContextImpl *__hidden);
  uint64_t v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  std::string *v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  _BOOL4 v140;
  MIL::Builder::OperationBuilder *v141;
  BOOL v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  void (***v147)(MIL::MILContextImpl *__hidden);
  MIL::Builder::Variable::VariableImpl **v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  MIL::IRTypedArgument *v152;
  unsigned __int8 *v153;
  uint64_t v154;
  uint64_t *v155;
  int v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unsigned __int8 *v163;
  __int128 *v164;
  uint64_t v165;
  uint64_t v166;
  _BOOL4 v167;
  MIL::Builder::Variable::VariableImpl **v168;
  unsigned __int8 *v169;
  MIL::Builder::OperationBuilder *v170;
  _DWORD *v171;
  BOOL v172;
  uint64_t v173;
  MIL::IRTensorValueType *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t *v180;
  int v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unsigned __int8 *v185;
  uint64_t v186;
  uint64_t v187;
  _BOOL4 v188;
  MIL::Builder::OperationBuilder *v189;
  MIL::Builder::Variable::VariableImpl **v190;
  MIL::Builder::Variable::VariableImpl *v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unsigned __int8 *v194;
  uint64_t v195;
  unint64_t v196;
  MIL::Builder::OperationBuilder *v197;
  unint64_t NumArguments;
  MIL::Builder::OperationBuilder *v199;
  MIL::Builder::Variable::VariableImpl **ArgumentForParameter;
  uint64_t Value;
  uint64_t v202;
  MIL::Builder::OperationBuilder *v203;
  MIL::Builder::Variable::VariableImpl **v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  unint64_t *p_shared_owners;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  MIL::Builder::OperationBuilder *v212;
  MIL::Builder::Variable::VariableImpl **v213;
  unsigned __int8 *Name;
  unsigned __int8 *v215;
  MIL::Builder::OperationBuilder *v216;
  MIL::Builder::Variable::VariableImpl **v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t *v223;
  uint64_t Data;
  uint64_t v225;
  int *v226;
  int *v227;
  char *v228;
  int v229;
  void *v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char *v236;
  char *v237;
  int v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  MIL::IRTensorValueType *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t *v246;
  const MIL::IRTensorValueType *v247;
  MIL::IRTensorValueType *Scalar;
  unsigned __int8 *v249;
  __int128 *v250;
  unint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int *v256;
  MIL::MILContext *v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  void *v261;
  int64_t v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  uint64_t *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  void *v276;
  int64_t v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  uint64_t *v281;
  char *v282;
  char *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  void (***v288)(MIL::MILContextImpl *__hidden);
  MIL::Builder::Variable::VariableImpl **v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  MIL::IRTypedArgument *v293;
  unsigned __int8 *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  unint64_t v298;
  uint64_t *v299;
  const void *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  void (***v304)(MIL::MILContextImpl *__hidden);
  uint64_t v305;
  unsigned __int8 *v306;
  unsigned __int8 *v307;
  int v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  const void **v319;
  unint64_t v320;
  unint64_t v321;
  char v322;
  MIL::Builder::Variable::VariableImpl **v323;
  std::string::size_type v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unsigned __int8 *v328;
  uint64_t v329;
  _QWORD *LocationPtr;
  uint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t NumOutputs;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  std::string::size_type v338;
  unsigned __int8 *v339;
  uint64_t *v340;
  int *v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  int v345;
  unsigned __int8 *v346;
  uint64_t v347;
  unsigned __int8 *v348;
  uint64_t v349;
  uint64_t v350;
  MIL::IRDimension **v351;
  MIL::IRDimension **v352;
  uint64_t v353;
  _BYTE *v354;
  _BYTE *v355;
  _QWORD *v356;
  uint64_t v357;
  void (***v358)(MIL::MILContextImpl *__hidden);
  uint64_t v359;
  unsigned __int8 *v360;
  uint64_t v361;
  char v362;
  MIL::Builder::OperationBuilder *v363;
  MIL::Builder::Variable::VariableImpl **v364;
  unsigned __int8 *v365;
  MIL::IRValueType *ValueType;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  void (***v371)(MIL::MILContextImpl *__hidden);
  uint64_t v372;
  unsigned __int8 *v373;
  uint64_t v374;
  std::string *v375;
  MIL::Builder::BlockBuilder *OwningBlock;
  unint64_t j;
  MIL::Builder::Variable::VariableImpl **v378;
  MIL::Builder::Variable::VariableImpl *v379;
  __int128 v380;
  size_t v381;
  void **v382;
  std::string *v383;
  std::string *v384;
  std::string::size_type v385;
  std::string *v386;
  __int128 v387;
  unint64_t v388;
  std::string *v389;
  std::string::size_type v390;
  std::string *v391;
  std::string::size_type v392;
  char v393;
  unsigned __int8 *v394;
  std::string::size_type v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  __int128 *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  uint64_t *k;
  int v415;
  __int128 *v416;
  BOOL v417;
  __int128 *v418;
  __int128 v419;
  uint64_t v420;
  std::string::size_type v421;
  BOOL v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  uint64_t v432;
  MIL::Builder::OperationBuilder *v433;
  __int128 *v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  __int128 *v438;
  uint64_t v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::__shared_weak_count *v443;
  unint64_t *v444;
  unint64_t v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  unsigned __int8 *v459;
  unsigned __int8 *v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  unint64_t *v464;
  unint64_t v465;
  MIL::IRTensorValueType *v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  MIL::Builder::OperationBuilder *v470;
  std::__shared_weak_count *v471;
  std::string::size_type v472;
  std::__shared_weak_count *v473;
  void *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  std::string::size_type v480;
  _QWORD *v481;
  MIL::Builder::Variable::VariableImpl **v482;
  unsigned __int8 *v483;
  uint64_t v484;
  uint64_t v485;
  _BOOL4 v488;
  uint64_t v489;
  std::__shared_weak_count *v490;
  std::string::size_type v491;
  std::__shared_weak_count *v492;
  void *v493;
  unint64_t *v494;
  unint64_t v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  std::string::size_type v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t i;
  uint64_t *v506;
  uint64_t *v507;
  uint64_t v508;
  void (***v509)(MIL::MILContextImpl *__hidden);
  uint64_t v510;
  unsigned __int8 *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  uint64_t *v520;
  __int16 v521;
  uint64_t v522;
  MIL::IRTensorValueType *v523;
  unint64_t v524;
  uint64_t v525;
  std::__shared_weak_count *size;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  uint64_t *v532;
  int v533;
  uint64_t v534;
  MIL::IRTensorValueType *v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t *v538;
  __int16 v539;
  uint64_t v540;
  MIL::IRTensorValueType *v541;
  unint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  _QWORD *v549;
  std::logic_error *v550;
  _QWORD *v551;
  uint64_t v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  std::logic_error *v557;
  _QWORD *v558;
  uint64_t v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  _QWORD *v563;
  std::logic_error *exception;
  std::string::size_type v568;
  std::__shared_weak_count *v569;
  void *v570[2];
  char v571;
  std::string::size_type v572;
  std::__shared_weak_count *v573;
  void *v574[2];
  char v575;
  MIL::Builder::OperationBuilder *v576;
  std::__shared_weak_count *v577;
  std::string v578;
  std::string v579;
  uint64_t v580;
  std::__shared_weak_count *v581;
  MIL::Builder::OperationBuilder *v582;
  std::__shared_weak_count *v583;
  std::string v584;
  std::string v585;
  uint64_t v586;
  std::__shared_weak_count *v587;
  std::string v588;
  uint64_t v589;
  std::__shared_weak_count *v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  std::string v593;
  uint64_t v594;
  std::__shared_weak_count *v595;
  __int128 v596;
  void *v597[2];
  char v598;
  uint64_t v599;
  std::__shared_weak_count *v600;
  MIL::Builder::OperationBuilder *v601;
  std::__shared_weak_count *v602;
  void *__p[2];
  __int128 v604;
  int v605;
  std::string __sz;
  _QWORD v607[2];
  std::string v608;
  __int128 v609;
  __int128 v610;
  int v611;
  uint64_t v612;
  std::__shared_weak_count *v613;
  unsigned __int8 *OutputName;
  std::string v615;
  uint64_t v616;
  __int128 *v617[2];
  uint64_t v618[4];

  v618[1] = *MEMORY[0x1E0C80C00];
  Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v6, (std::string *)__p);
  if ((SBYTE7(v604) & 0x80000000) == 0)
  {
    if (SBYTE7(v604) != 6)
      goto LABEL_21;
    if (LODWORD(__p[0]) != 1752457575 || WORD2(__p[0]) != 29285)
      goto LABEL_21;
LABEL_17:
    MIL::Builder::FunctionBuilder::GetContext(a1, &__sz);
    v10 = (void (***)(MIL::MILContextImpl *__hidden))__sz.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    v11 = *(MIL::Builder::OperationBuilder **)a2;
    v12 = operator new(4uLL);
    *v12 = 0;
    v615.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 1);
    v615.__r_.__value_.__r.__words[2] = (std::string::size_type)(v12 + 1);
    v615.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    operator delete(v12);
    if (SBYTE7(v604) < 0)
    {
      operator delete(__p[0]);
      if (!v13)
      {
LABEL_291:
        v617[0] = 0;
        goto LABEL_292;
      }
    }
    else if (!v13)
    {
      goto LABEL_291;
    }
    v104 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
    v105 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 64))(v104);
    std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v105, (unsigned __int8 *)__p))
    {
      v106 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v615, "batch_dims");
      v107 = MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v106, (const void **)&v615.__r_.__value_.__l.__data_) != 0;
      if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v615.__r_.__value_.__l.__data_);
    }
    else
    {
      v107 = 0;
    }
    if (SBYTE7(v604) < 0)
    {
      operator delete(__p[0]);
      if (!v107)
        goto LABEL_277;
    }
    else if (!v107)
    {
      goto LABEL_277;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
    v170 = *(MIL::Builder::OperationBuilder **)a2;
    v171 = operator new(4uLL);
    *v171 = 0;
    v615.__r_.__value_.__l.__size_ = (std::string::size_type)(v171 + 1);
    v615.__r_.__value_.__r.__words[2] = (std::string::size_type)(v171 + 1);
    v615.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
    operator delete(v171);
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    if (!v172)
      goto LABEL_291;
LABEL_277:
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "indices");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    if (!(_QWORD)v609)
      goto LABEL_796;
    if (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609))
      goto LABEL_796;
    if (!v608.__r_.__value_.__r.__words[0])
      goto LABEL_796;
    if (!(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_ + 40))(v608.__r_.__value_.__r.__words[0]))
      goto LABEL_796;
    v173 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
    v174 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 32))(v173);
    if (MIL::IRTensorValueType::Rank(v174) != 1)
      goto LABEL_796;
    v175 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_ + 40))(v608.__r_.__value_.__r.__words[0]);
    v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v175 + 32))(v175);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 16))(v176) != 1)
      goto LABEL_796;
    v177 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_ + 40))(v608.__r_.__value_.__r.__words[0]);
    v178 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 32))(v177);
    v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 88))(v178);
    switch(v179)
    {
      case 10:
        v514 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                            + 40))(v608.__r_.__value_.__r.__words[0]);
        v181 = *(__int16 *)MIL::IRTensorValue::GetDataView<short>(v514);
        break;
      case 11:
        v513 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                            + 40))(v608.__r_.__value_.__r.__words[0]);
        v181 = *(_DWORD *)MIL::IRTensorValue::GetDataView<int>(v513);
        break;
      case 15:
        v180 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                            + 40))(v608.__r_.__value_.__r.__words[0]);
        v181 = *(unsigned __int16 *)MIL::IRTensorValue::GetDataView<unsigned short>(v180);
LABEL_792:
        v517 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
        v518 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v517 + 32))(v517);
        v519 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v518 + 88))(v518);
        switch(v519)
        {
          case 15:
            v538 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
            v539 = *(_WORD *)(MIL::IRTensorValue::GetDataView<unsigned short>(v538) + 2 * v181);
            v540 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_ + 40))(v608.__r_.__value_.__r.__words[0]);
            v541 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v540 + 32))(v540);
            v542 = MIL::IRTensorValueType::Rank(v541);
            v612 = 1;
            std::vector<unsigned long long>::vector(__p, v542, &v612);
            v543 = MIL::IRTensorValueType::Make(v10, 15, (MIL::MILContext ***)__p);
            LOWORD(OutputName) = v539;
            std::vector<unsigned short>::vector[abi:ne180100](&v615, &OutputName, 1);
            MIL::IRTensorValueType::MakeUInt16Value(v543, (uint64_t)&v615, v617);
            goto LABEL_809;
          case 11:
            v532 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
            v533 = *(_DWORD *)(MIL::IRTensorValue::GetDataView<int>(v532) + 4 * v181);
            v534 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_ + 40))(v608.__r_.__value_.__r.__words[0]);
            v535 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v534 + 32))(v534);
            v536 = MIL::IRTensorValueType::Rank(v535);
            v612 = 1;
            std::vector<unsigned long long>::vector(__p, v536, &v612);
            v537 = MIL::IRTensorValueType::Make(v10, 11, (MIL::MILContext ***)__p);
            LODWORD(OutputName) = v533;
            std::vector<int>::vector[abi:ne180100](&v615, &OutputName, 1uLL);
            MIL::IRTensorValueType::MakeInt32Value(v537, (uint64_t)&v615, v617);
            goto LABEL_809;
          case 10:
            v520 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
            v521 = *(_WORD *)(MIL::IRTensorValue::GetDataView<short>(v520) + 2 * v181);
            v522 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_ + 40))(v608.__r_.__value_.__r.__words[0]);
            v523 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v522 + 32))(v522);
            v524 = MIL::IRTensorValueType::Rank(v523);
            v612 = 1;
            std::vector<unsigned long long>::vector(__p, v524, &v612);
            v525 = MIL::IRTensorValueType::Make(v10, 10, (MIL::MILContext ***)__p);
            LOWORD(OutputName) = v521;
            std::vector<short>::vector[abi:ne180100](&v615, &OutputName, 1);
            MIL::IRTensorValueType::MakeInt16Value(v525, (uint64_t)&v615, v617);
LABEL_809:
            if (v615.__r_.__value_.__r.__words[0])
            {
              v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
              operator delete(v615.__r_.__value_.__l.__data_);
            }
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_797;
        }
LABEL_796:
        v617[0] = 0;
LABEL_797:
        size = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
        if (v608.__r_.__value_.__l.__size_)
        {
          v527 = (unint64_t *)(v608.__r_.__value_.__l.__size_ + 8);
          do
            v528 = __ldaxr(v527);
          while (__stlxr(v528 - 1, v527));
          if (!v528)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v529 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
        if (*((_QWORD *)&v609 + 1))
        {
          v530 = (unint64_t *)(*((_QWORD *)&v609 + 1) + 8);
          do
            v531 = __ldaxr(v530);
          while (__stlxr(v531 - 1, v530));
          if (!v531)
          {
            ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
            std::__shared_weak_count::__release_weak(v529);
          }
        }
LABEL_292:
        v182 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
        if (__sz.__r_.__value_.__l.__size_)
        {
          v183 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        if (v617[0])
        {
          __p[0] = (void *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
          v185 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v185 + 5, (uint64_t *)v617);
          v164 = v617[0];
          v617[0] = 0;
          if (!v164)
            goto LABEL_528;
          goto LABEL_299;
        }
        return;
      default:
        goto LABEL_796;
    }
    if (v181 < 0)
    {
      v515 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
      v516 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v515 + 32))(v515);
      v181 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v516 + 16))(v516);
    }
    goto LABEL_792;
  }
  if (__p[1] != (void *)6)
  {
    operator delete(__p[0]);
    goto LABEL_21;
  }
  v9 = *(_DWORD *)__p[0] != 1752457575 || *((_WORD *)__p[0] + 2) != 29285;
  operator delete(__p[0]);
  if (!v9)
    goto LABEL_17;
LABEL_21:
  v14 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v15, (std::string *)__p);
  if ((SBYTE7(v604) & 0x80000000) == 0)
  {
    if (SBYTE7(v604) != 6)
      goto LABEL_41;
    if (LODWORD(__p[0]) != 1668181859 || WORD2(__p[0]) != 29793)
      goto LABEL_41;
    goto LABEL_37;
  }
  if (__p[1] != (void *)6)
  {
    operator delete(__p[0]);
    goto LABEL_41;
  }
  v18 = *(_DWORD *)__p[0] != 1668181859 || *((_WORD *)__p[0] + 2) != 29793;
  operator delete(__p[0]);
  if (!v18)
  {
LABEL_37:
    MIL::Builder::FunctionBuilder::GetContext(a1, &__sz);
    v19 = (void (***)(MIL::MILContextImpl *__hidden))__sz.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    v20 = *(MIL::Builder::OperationBuilder **)a2;
    v21 = operator new(4uLL);
    *v21 = 0;
    v615.__r_.__value_.__l.__size_ = (std::string::size_type)(v21 + 1);
    v615.__r_.__value_.__r.__words[2] = (std::string::size_type)(v21 + 1);
    v615.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    operator delete(v21);
    if (SBYTE7(v604) < 0)
    {
      operator delete(__p[0]);
      if (!v22)
      {
LABEL_255:
        v612 = 0;
        goto LABEL_256;
      }
    }
    else if (!v22)
    {
      goto LABEL_255;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "interleave");
    v155 = (uint64_t *)MIL::IRValue::AsTensor((MIL::IRValue *)v615.__r_.__value_.__l.__data_);
    v156 = *(unsigned __int8 *)MIL::IRTensorValue::GetDataView<BOOL>(v155);
    v157 = (std::__shared_weak_count *)v615.__r_.__value_.__l.__size_;
    if (v615.__r_.__value_.__l.__size_)
    {
      v158 = (unint64_t *)(v615.__r_.__value_.__l.__size_ + 8);
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    if (v156)
      goto LABEL_255;
    v196 = 0;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v604 = 0;
    while (1)
    {
      v197 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v615, "values");
      NumArguments = MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v197, (const void **)&v615.__r_.__value_.__l.__data_);
      if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v615.__r_.__value_.__l.__data_);
      if (v196 >= NumArguments)
      {
        v355 = __p[0];
        v354 = __p[1];
        v356 = operator new(8uLL);
        v615.__r_.__value_.__r.__words[0] = (std::string::size_type)v356;
        *v356 = (v354 - v355) >> 2;
        v615.__r_.__value_.__l.__size_ = (std::string::size_type)(v356 + 1);
        v615.__r_.__value_.__r.__words[2] = (std::string::size_type)(v356 + 1);
        v357 = MIL::IRTensorValueType::Make(v19, 11, (MIL::MILContext ***)&v615);
        MIL::IRTensorValueType::MakeInt32Value(v357, (uint64_t)__p, &v612);
        if (v615.__r_.__value_.__r.__words[0])
        {
          v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
          operator delete(v615.__r_.__value_.__l.__data_);
        }
LABEL_499:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
LABEL_256:
        v160 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
        if (__sz.__r_.__value_.__l.__size_)
        {
          v161 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        if (v612)
        {
          __p[0] = (void *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
          v163 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v163 + 5, &v612);
          v164 = (__int128 *)v612;
          v612 = 0;
          if (!v164)
            goto LABEL_528;
LABEL_299:
          (*(void (**)(__int128 *))(*(_QWORD *)v164 + 8))(v164);
          goto LABEL_528;
        }
        return;
      }
      v609 = 0uLL;
      v199 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v615, "values");
      ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v199, (uint64_t)&v615, v196);
      Value = MIL::Builder::Variable::TryGetValue(ArgumentForParameter);
      v202 = Value;
      if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v615.__r_.__value_.__l.__data_);
        if (v202)
        {
LABEL_314:
          v203 = *(MIL::Builder::OperationBuilder **)a2;
          std::string::basic_string[abi:ne180100]<0>(&v615, "values");
          v204 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v203, (uint64_t)&v615, v196);
          MIL::Builder::Variable::TryGetValueSharedPtr(v204, &v608);
          v205 = *(_OWORD *)&v608.__r_.__value_.__l.__data_;
          *(_OWORD *)&v608.__r_.__value_.__l.__data_ = 0uLL;
          v206 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
          v609 = v205;
          if (v206)
          {
            p_shared_owners = (unint64_t *)&v206->__shared_owners_;
            do
              v208 = __ldaxr(p_shared_owners);
            while (__stlxr(v208 - 1, p_shared_owners));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }
          v209 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
          if (v608.__r_.__value_.__l.__size_)
          {
            v210 = (unint64_t *)(v608.__r_.__value_.__l.__size_ + 8);
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
LABEL_330:
          if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v615.__r_.__value_.__l.__data_);
          goto LABEL_332;
        }
      }
      else if (Value)
      {
        goto LABEL_314;
      }
      v212 = *(MIL::Builder::OperationBuilder **)a2;
      std::string::basic_string[abi:ne180100]<0>(&v615, "values");
      v213 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v212, (uint64_t)&v615, v196);
      Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(v213);
      v215 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, Name);
      if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v615.__r_.__value_.__l.__data_);
      if (v215)
      {
        v216 = *(MIL::Builder::OperationBuilder **)a2;
        std::string::basic_string[abi:ne180100]<0>(&v615, "values");
        v217 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v216, (uint64_t)&v615, v196);
        v218 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v217);
        v219 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, v218);
        if (!v219)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100](&v609, (uint64_t *)v219 + 5);
        goto LABEL_330;
      }
LABEL_332:
      if (!(_QWORD)v609
        || !(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609)
        || (v220 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609),
            v221 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v220 + 32))(v220),
            v222 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 96))(v221),
            v222[1] - *v222 > 8uLL))
      {
        v612 = 0;
        v315 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
        if (*((_QWORD *)&v609 + 1))
        {
          v316 = (unint64_t *)(*((_QWORD *)&v609 + 1) + 8);
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
        goto LABEL_499;
      }
      v223 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
      Data = MIL::IRTensorValue::GetDataView<int>(v223);
      if (v225)
      {
        v226 = (int *)Data;
        v227 = (int *)(Data + 4 * v225);
        v228 = (char *)__p[1];
        do
        {
          v229 = *v226;
          if ((unint64_t)v228 >= (unint64_t)v604)
          {
            v231 = (char *)__p[0];
            v232 = (v228 - (char *)__p[0]) >> 2;
            v233 = v232 + 1;
            if ((unint64_t)(v232 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v234 = v604 - (unint64_t)__p[0];
            if ((uint64_t)(v604 - (unint64_t)__p[0]) >> 1 > v233)
              v233 = v234 >> 1;
            if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFFCLL)
              v235 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v235 = v233;
            if (v235)
            {
              v236 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v604, v235);
              v231 = (char *)__p[0];
              v228 = (char *)__p[1];
            }
            else
            {
              v236 = 0;
            }
            v237 = &v236[4 * v232];
            *(_DWORD *)v237 = v229;
            v230 = v237 + 4;
            while (v228 != v231)
            {
              v238 = *((_DWORD *)v228 - 1);
              v228 -= 4;
              *((_DWORD *)v237 - 1) = v238;
              v237 -= 4;
            }
            __p[0] = v237;
            __p[1] = v230;
            *(_QWORD *)&v604 = &v236[4 * v235];
            if (v231)
              operator delete(v231);
          }
          else
          {
            *(_DWORD *)v228 = v229;
            v230 = v228 + 4;
          }
          __p[1] = v230;
          ++v226;
          v228 = (char *)v230;
        }
        while (v226 != v227);
      }
      v239 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
      if (*((_QWORD *)&v609 + 1))
      {
        v240 = (unint64_t *)(*((_QWORD *)&v609 + 1) + 8);
        do
          v241 = __ldaxr(v240);
        while (__stlxr(v241 - 1, v240));
        if (!v241)
        {
          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
          std::__shared_weak_count::__release_weak(v239);
        }
      }
      ++v196;
    }
  }
LABEL_41:
  v23 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v24, (std::string *)__p);
  if (SBYTE7(v604) < 0)
  {
    if (__p[1] != (void *)4)
    {
      operator delete(__p[0]);
      goto LABEL_75;
    }
    v25 = *(_DWORD *)__p[0];
    operator delete(__p[0]);
    if (v25 != 1819044198)
      goto LABEL_75;
LABEL_47:
    std::string::basic_string[abi:ne180100]<0>(__p, "shape");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    v27 = v26;
    if (v26)
    {
      v28 = 0;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v604 = 0;
      while (1)
      {
        v29 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v615.__r_.__value_.__l.__data_
                                                                           + 40))(v615.__r_.__value_.__r.__words[0]);
        MIL::IRTensorValue::GetDataView<int>(v29);
        if (v28 >= v30)
          break;
        MIL::Builder::FunctionBuilder::GetContext(a1, &v609);
        v31 = (void (***)(MIL::MILContextImpl *__hidden))v609;
        v32 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v615.__r_.__value_.__l.__data_
                                                                           + 40))(v615.__r_.__value_.__r.__words[0]);
        v33 = MIL::IRTensorValue::GetDataView<int>(v32);
        v34 = MIL::IRConstantDimension::Make(v31, (MIL::MILContext *)*(int *)(v33 + 4 * v28));
        v35 = v34;
        v36 = (char *)__p[1];
        if (__p[1] >= (void *)v604)
        {
          v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v39 = (uint64_t)(v604 - (unint64_t)__p[0]) >> 2;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if ((unint64_t)v604 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v604, v40);
          else
            v41 = 0;
          v42 = (uint64_t *)&v41[8 * v38];
          *v42 = v35;
          v37 = v42 + 1;
          v44 = (char *)__p[0];
          v43 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v45 = *((_QWORD *)v43 - 1);
              v43 -= 8;
              *--v42 = v45;
            }
            while (v43 != v44);
            v43 = (char *)__p[0];
          }
          __p[0] = v42;
          __p[1] = v37;
          *(_QWORD *)&v604 = &v41[8 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)__p[1] = v34;
          v37 = v36 + 8;
        }
        __p[1] = v37;
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
        if (*((_QWORD *)&v609 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v609 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        ++v28;
      }
      MIL::Builder::FunctionBuilder::GetContext(a1, &v609);
      v90 = (void (***)(MIL::MILContextImpl *__hidden))v609;
      Output = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      Type = MIL::Builder::Variable::TryGetType(Output);
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 88))(v93);
      v95 = (MIL::IRTypedArgument *)MIL::IRTensorValueType::MakeWithShape(v90, v94, (uint64_t)__p);
      MIL::IRTypedArgument::Make(v95, &__sz);
      v608.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v608.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v608);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v96 + 5, (uint64_t *)&__sz);
      v97 = __sz.__r_.__value_.__r.__words[0];
      __sz.__r_.__value_.__r.__words[0] = 0;
      if (v97)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v97 + 8))(v97);
      v98 = (std::__shared_weak_count *)*((_QWORD *)&v609 + 1);
      if (*((_QWORD *)&v609 + 1))
      {
        v99 = (unint64_t *)(*((_QWORD *)&v609 + 1) + 8);
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v101 = (std::__shared_weak_count *)v615.__r_.__value_.__l.__size_;
    if (v615.__r_.__value_.__l.__size_)
    {
      v102 = (unint64_t *)(v615.__r_.__value_.__l.__size_ + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    if ((v27 & 1) == 0)
      return;
    goto LABEL_528;
  }
  if (SBYTE7(v604) == 4 && LODWORD(__p[0]) == 1819044198)
    goto LABEL_47;
LABEL_75:
  v49 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v50, (std::string *)__p);
  if ((SBYTE7(v604) & 0x80000000) == 0)
  {
    if (SBYTE7(v604) != 11)
      goto LABEL_105;
    if (__p[0] != (void *)0x705F656375646572 || *(void **)((char *)__p + 3) != (void *)0x646F72705F656375)
      goto LABEL_105;
LABEL_91:
    std::string::basic_string[abi:ne180100]<0>(__p, "keep_dims");
    v54 = (uint64_t *)MIL::IRValue::AsTensor((MIL::IRValue *)v615.__r_.__value_.__l.__data_);
    v55 = *(unsigned __int8 *)MIL::IRTensorValue::GetDataView<BOOL>(v54);
    v56 = (std::__shared_weak_count *)v615.__r_.__value_.__l.__size_;
    if (v615.__r_.__value_.__l.__size_)
    {
      v57 = (unint64_t *)(v615.__r_.__value_.__l.__size_ + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    if (v55)
      return;
    v59 = *(MIL::Builder::OperationBuilder **)a2;
    std::string::basic_string[abi:ne180100]<0>(__p, "axes");
    if (MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v59, (const void **)__p))
    {
      std::string::basic_string[abi:ne180100]<0>(&v615, "axes");
      v60 = *(MIL::Builder::OperationBuilder **)a2;
      LODWORD(v608.__r_.__value_.__l.__data_) = 0;
      std::vector<int>::vector[abi:ne180100](&v609, &v608, 1uLL);
      if ((_QWORD)v609)
      {
        *((_QWORD *)&v609 + 1) = v609;
        operator delete((void *)v609);
      }
      v62 = !v61;
      if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v615.__r_.__value_.__l.__data_);
    }
    else
    {
      v62 = 0;
    }
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    if (v62)
      return;
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    {
      v340 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
      v341 = (int *)MIL::IRTensorValue::GetDataView<int>(v340);
      if (v342)
      {
        v343 = 4 * v342;
        v344 = 1;
        do
        {
          v345 = *v341++;
          v344 *= v345;
          v343 -= 4;
        }
        while (v343);
      }
      else
      {
        v344 = 1;
      }
      MIL::Builder::FunctionBuilder::GetContext(a1, &v608);
      v371 = (void (***)(MIL::MILContextImpl *__hidden))v608.__r_.__value_.__r.__words[0];
      v617[0] = (__int128 *)1;
      std::vector<unsigned long long>::vector[abi:ne180100](__p, v617, 1uLL);
      v372 = MIL::IRTensorValueType::Make(v371, 11, (MIL::MILContext ***)__p);
      LODWORD(OutputName) = v344;
      std::vector<int>::vector[abi:ne180100](&v615, &OutputName, 1uLL);
      MIL::IRTensorValueType::MakeInt32Value(v372, (uint64_t)&v615, &v612);
      __sz.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v373 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__sz.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__sz);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v373 + 5, &v612);
      v374 = v612;
      v612 = 0;
      if (v374)
        (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
      if (v615.__r_.__value_.__r.__words[0])
      {
        v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
        operator delete(v615.__r_.__value_.__l.__data_);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v608);
      goto LABEL_526;
    }
    goto LABEL_226;
  }
  if (__p[1] != (void *)11)
  {
    operator delete(__p[0]);
    goto LABEL_105;
  }
  v53 = *(_QWORD *)__p[0] != 0x705F656375646572 || *(_QWORD *)((char *)__p[0] + 3) != 0x646F72705F656375;
  operator delete(__p[0]);
  if (!v53)
    goto LABEL_91;
LABEL_105:
  v63 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v64, (std::string *)__p);
  if ((SBYTE7(v604) & 0x80000000) == 0)
  {
    if (SBYTE7(v604) != 7)
      goto LABEL_137;
    if (LODWORD(__p[0]) != 1752393074 || *(_DWORD *)((char *)__p + 3) != 1701863784)
      goto LABEL_137;
LABEL_121:
    std::string::basic_string[abi:ne180100]<0>(__p, "shape");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v604 = 0;
    {
      v68 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                         + 40))(v608.__r_.__value_.__r.__words[0]);
      v69 = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v68);
      if (!v70)
        goto LABEL_371;
      v71 = 0;
      v72 = 4 * v70;
      v73 = 1;
      do
      {
        v74 = *v69;
        if ((int)v74 < 1)
        {
          v71 = 1;
          if ((_DWORD)v74 != -1)
            goto LABEL_434;
        }
        else
        {
          v73 *= v74;
        }
        ++v69;
        v72 -= 4;
      }
      while (v72);
      if (v71)
      {
        v75 = *(MIL::Builder::OperationBuilder **)a2;
        std::string::basic_string[abi:ne180100]<0>(&v615, "x");
        v76 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v75, (uint64_t)&v615, 0);
        v77 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v76);
        if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v77))
        {
          v78 = *(MIL::Builder::OperationBuilder **)a2;
          std::string::basic_string[abi:ne180100]<0>(&v609, "x");
          v79 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v78, (uint64_t)&v609, 0);
          v612 = (uint64_t)MIL::Builder::Variable::GetName(v79);
          v80 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v612, (uint64_t)&std::piecewise_construct, (__int128 **)&v612)+ 5) != 0;
          if (SBYTE7(v610) < 0)
            operator delete((void *)v609);
        }
        else
        {
          v80 = 0;
        }
        if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v615.__r_.__value_.__l.__data_);
        if (!v80)
          goto LABEL_517;
        v363 = *(MIL::Builder::OperationBuilder **)a2;
        std::string::basic_string[abi:ne180100]<0>(&v615, "x");
        v364 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v363, (uint64_t)&v615, 0);
        *(_QWORD *)&v609 = MIL::Builder::Variable::GetName(v364);
        v365 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v609, (uint64_t)&std::piecewise_construct, (__int128 **)&v609);
        ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v365
                                                                           + 5));
        v367 = MIL::IRValueType::AsTensorType(ValueType);
        if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v615.__r_.__value_.__l.__data_);
        v368 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v367 + 96))(v367);
        v369 = *(_QWORD **)v368;
        v370 = *(_QWORD **)(v368 + 8);
        if (*(_QWORD **)v368 != v370)
        {
          while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v369 + 24))(*v369))
          {
            if (++v369 == v370)
            {
              v369 = v370;
              break;
            }
          }
          if (v369 != *(_QWORD **)(v368 + 8))
          {
LABEL_517:
            LODWORD(v71) = 1;
            goto LABEL_434;
          }
        }
        v251 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v367 + 16))(v367) / v73;
      }
      else
      {
LABEL_371:
        v251 = 0;
      }
      v252 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                          + 40))(v608.__r_.__value_.__r.__words[0]);
      v253 = MIL::IRTensorValue::GetDataView<int>(v252);
      if (v254)
      {
        v255 = (unsigned int *)v253;
        v256 = (unsigned int *)(v253 + 4 * v254);
        do
        {
          v257 = (MIL::MILContext *)*v255;
          if ((int)v257 >= 1)
          {
            MIL::Builder::FunctionBuilder::GetContext(a1, &v615);
            v258 = MIL::IRConstantDimension::Make((void (***)(MIL::MILContextImpl *__hidden))v615.__r_.__value_.__l.__data_, v257);
            v259 = v258;
            v260 = (char *)__p[1];
            if (__p[1] >= (void *)v604)
            {
              v262 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              if ((unint64_t)(v262 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v263 = (uint64_t)(v604 - (unint64_t)__p[0]) >> 2;
              if (v263 <= v262 + 1)
                v263 = v262 + 1;
              if ((unint64_t)v604 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v263;
              if (v264)
                v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v604, v264);
              else
                v265 = 0;
              v266 = (uint64_t *)&v265[8 * v262];
              *v266 = v259;
              v261 = v266 + 1;
              v268 = (char *)__p[0];
              v267 = (char *)__p[1];
              if (__p[1] != __p[0])
              {
                do
                {
                  v269 = *((_QWORD *)v267 - 1);
                  v267 -= 8;
                  *--v266 = v269;
                }
                while (v267 != v268);
                v267 = (char *)__p[0];
              }
              __p[0] = v266;
              __p[1] = v261;
              *(_QWORD *)&v604 = &v265[8 * v264];
              if (v267)
                operator delete(v267);
            }
            else
            {
              *(_QWORD *)__p[1] = v258;
              v261 = v260 + 8;
            }
            __p[1] = v261;
            v270 = (std::__shared_weak_count *)v615.__r_.__value_.__l.__size_;
            if (v615.__r_.__value_.__l.__size_)
            {
              v271 = (unint64_t *)(v615.__r_.__value_.__l.__size_ + 8);
              do
                v272 = __ldaxr(v271);
              while (__stlxr(v272 - 1, v271));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                std::__shared_weak_count::__release_weak(v270);
              }
            }
          }
          if ((_DWORD)v257 == -1)
          {
            MIL::Builder::FunctionBuilder::GetContext(a1, &v615);
            v273 = MIL::IRConstantDimension::Make((void (***)(MIL::MILContextImpl *__hidden))v615.__r_.__value_.__l.__data_, (MIL::MILContext *)v251);
            v274 = v273;
            v275 = (char *)__p[1];
            if (__p[1] >= (void *)v604)
            {
              v277 = ((char *)__p[1] - (char *)__p[0]) >> 3;
              if ((unint64_t)(v277 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v278 = (uint64_t)(v604 - (unint64_t)__p[0]) >> 2;
              if (v278 <= v277 + 1)
                v278 = v277 + 1;
              if ((unint64_t)v604 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
                v279 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v279 = v278;
              if (v279)
                v280 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v604, v279);
              else
                v280 = 0;
              v281 = (uint64_t *)&v280[8 * v277];
              *v281 = v274;
              v276 = v281 + 1;
              v283 = (char *)__p[0];
              v282 = (char *)__p[1];
              if (__p[1] != __p[0])
              {
                do
                {
                  v284 = *((_QWORD *)v282 - 1);
                  v282 -= 8;
                  *--v281 = v284;
                }
                while (v282 != v283);
                v282 = (char *)__p[0];
              }
              __p[0] = v281;
              __p[1] = v276;
              *(_QWORD *)&v604 = &v280[8 * v279];
              if (v282)
                operator delete(v282);
            }
            else
            {
              *(_QWORD *)__p[1] = v273;
              v276 = v275 + 8;
            }
            __p[1] = v276;
            v285 = (std::__shared_weak_count *)v615.__r_.__value_.__l.__size_;
            if (v615.__r_.__value_.__l.__size_)
            {
              v286 = (unint64_t *)(v615.__r_.__value_.__l.__size_ + 8);
              do
                v287 = __ldaxr(v286);
              while (__stlxr(v287 - 1, v286));
              if (!v287)
              {
                ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                std::__shared_weak_count::__release_weak(v285);
              }
            }
          }
          ++v255;
        }
        while (v255 != v256);
      }
      MIL::Builder::FunctionBuilder::GetContext(a1, &v615);
      v288 = (void (***)(MIL::MILContextImpl *__hidden))v615.__r_.__value_.__r.__words[0];
      v289 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v290 = MIL::Builder::Variable::TryGetType(v289);
      v291 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v290 + 24))(v290);
      v292 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v291 + 88))(v291);
      v293 = (MIL::IRTypedArgument *)MIL::IRTensorValueType::MakeWithShape(v288, v292, (uint64_t)__p);
      MIL::IRTypedArgument::Make(v293, &v612);
      *(_QWORD *)&v609 = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v294 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v609, (uint64_t)&std::piecewise_construct, (__int128 **)&v609);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v294 + 5, &v612);
      v295 = v612;
      v612 = 0;
      if (v295)
        (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v615);
    }
    {
      v296 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_ + 32))(v608.__r_.__value_.__r.__words[0]);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v296 + 16))(v296) == 1)
      {
        v297 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__sz.__r_.__value_.__l.__data_
                                                                            + 40))(__sz.__r_.__value_.__r.__words[0]);
        MIL::IRTensorValue::GetDataView<int>(v297);
        if (v298 <= 0xA)
        {
          v299 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__sz.__r_.__value_.__l.__data_
                                                                              + 40))(__sz.__r_.__value_.__r.__words[0]);
          v300 = (const void *)MIL::IRTensorValue::GetDataView<int>(v299);
          v301 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__sz.__r_.__value_.__l.__data_
                                                                              + 40))(__sz.__r_.__value_.__r.__words[0]);
          v302 = MIL::IRTensorValue::GetDataView<int>(v301);
          memset(&v615, 0, sizeof(v615));
          std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v615, v300, v302 + 4 * v303, (v302 + 4 * v303 - (uint64_t)v300) >> 2);
          MIL::Builder::FunctionBuilder::GetContext(a1, &v612);
          v304 = (void (***)(MIL::MILContextImpl *__hidden))v612;
          v618[0] = (uint64_t)(v615.__r_.__value_.__l.__size_ - v615.__r_.__value_.__r.__words[0]) >> 2;
          std::vector<unsigned long long>::vector[abi:ne180100](&v609, v618, 1uLL);
          v305 = MIL::IRTensorValueType::Make(v304, 11, (MIL::MILContext ***)&v609);
          MIL::IRTensorValueType::MakeInt32Value(v305, (uint64_t)&v615, &OutputName);
          v617[0] = (__int128 *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
          v306 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v617[0], (uint64_t)&std::piecewise_construct, v617);
          std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v306 + 5, (uint64_t *)&OutputName);
          v307 = OutputName;
          OutputName = 0;
          if (v307)
            (*(void (**)(unsigned __int8 *))(*(_QWORD *)v307 + 8))(v307);
          if ((_QWORD)v609)
          {
            *((_QWORD *)&v609 + 1) = v609;
            operator delete((void *)v609);
          }
          std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v612);
          if (v615.__r_.__value_.__r.__words[0])
          {
            v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
            operator delete(v615.__r_.__value_.__l.__data_);
          }
          LODWORD(v71) = 0;
          v308 = 0;
LABEL_435:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          v309 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
          if (__sz.__r_.__value_.__l.__size_)
          {
            v310 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
            do
              v311 = __ldaxr(v310);
            while (__stlxr(v311 - 1, v310));
            if (!v311)
            {
              ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
              std::__shared_weak_count::__release_weak(v309);
            }
          }
          v312 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
          if (v608.__r_.__value_.__l.__size_)
          {
            v313 = (unint64_t *)(v608.__r_.__value_.__l.__size_ + 8);
            do
              v314 = __ldaxr(v313);
            while (__stlxr(v314 - 1, v313));
            if (!v314)
            {
              ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
              std::__shared_weak_count::__release_weak(v312);
            }
          }
          if (((v71 | v308) & 1) != 0)
            return;
          goto LABEL_528;
        }
      }
    }
    LODWORD(v71) = 0;
LABEL_434:
    v308 = 1;
    goto LABEL_435;
  }
  if (__p[1] != (void *)7)
  {
    operator delete(__p[0]);
    goto LABEL_137;
  }
  v67 = *(_DWORD *)__p[0] != 1752393074 || *(_DWORD *)((char *)__p[0] + 3) != 1701863784;
  operator delete(__p[0]);
  if (!v67)
    goto LABEL_121;
LABEL_137:
  v81 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 16))(v81);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v82, (std::string *)__p);
  if ((SBYTE7(v604) & 0x80000000) == 0)
  {
    if (SBYTE7(v604) != 14)
      goto LABEL_186;
    if (__p[0] != (void *)0x79625F6563696C73 || *(void **)((char *)__p + 6) != (void *)0x7865646E695F7962)
      goto LABEL_186;
LABEL_153:
    std::string::basic_string[abi:ne180100]<0>(__p, "begin");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "end");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    MIL::Builder::OperationBuilder::GetParameterNames(*(unsigned __int8 ***)a2, (uint64_t)__p);
    std::string::basic_string[abi:ne180100]<0>(&v615, "squeeze_mask");
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(__p, (unsigned __int8 *)&v615);
    if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v615.__r_.__value_.__l.__data_);
    if (v86)
    {
      v87 = std::string::basic_string[abi:ne180100]<0>(&v615, "squeeze_mask");
      if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v615.__r_.__value_.__l.__data_);
      v88 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
      v89 = *(_BYTE *)MIL::IRTensorValue::GetDataView<BOOL>(v88) != 0;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v609);
    }
    else
    {
      v89 = 0;
    }
    {
      {
        {
          v242 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v612 + 40))(v612);
          v243 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v242 + 32))(v242);
          if (MIL::IRTensorValueType::Rank(v243) == 1)
          {
            if (v89)
            {
              v244 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                                  + 40))(v608.__r_.__value_.__r.__words[0]);
              v245 = *(int *)MIL::IRTensorValue::GetDataView<int>(v244);
              v246 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v612 + 40))(v612);
              v247 = (const MIL::IRTensorValueType *)*(unsigned int *)(MIL::IRTensorValue::GetDataView<int>(v246)
                                                                     + 4 * v245);
              MIL::Builder::FunctionBuilder::GetContext(a1, &v615);
              Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar((void (***)(MIL::MILContextImpl *__hidden))v615.__r_.__value_.__l.__data_, 11);
              MIL::IRTensorValueType::MakeInt32Value(Scalar, v247, v617);
              *(_QWORD *)&v609 = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
              v249 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v609, (uint64_t)&std::piecewise_construct, (__int128 **)&v609);
              std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v249 + 5, (uint64_t *)v617);
              v250 = v617[0];
              v617[0] = 0;
              if (v250)
                (*(void (**)(__int128 *))(*(_QWORD *)v250 + 8))(v250);
              std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v615);
            }
            else
            {
              memset(&v615, 0, sizeof(v615));
              v503 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                                  + 40))(v608.__r_.__value_.__r.__words[0]);
              v504 = *(int *)MIL::IRTensorValue::GetDataView<int>(v503);
              for (i = 4 * v504; ; i += 4)
              {
                v506 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__sz.__r_.__value_.__l.__data_
                                                                                    + 40))(__sz.__r_.__value_.__r.__words[0]);
                if (v504 >= *(int *)MIL::IRTensorValue::GetDataView<int>(v506))
                  break;
                v507 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v612 + 40))(v612);
                v508 = MIL::IRTensorValue::GetDataView<int>(v507);
                std::vector<int>::push_back[abi:ne180100]((uint64_t)&v615, (_DWORD *)(v508 + i));
                ++v504;
              }
              MIL::Builder::FunctionBuilder::GetContext(a1, v617);
              v509 = (void (***)(MIL::MILContextImpl *__hidden))v617[0];
              v616 = (uint64_t)(v615.__r_.__value_.__l.__size_ - v615.__r_.__value_.__r.__words[0]) >> 2;
              std::vector<unsigned long long>::vector[abi:ne180100](&v609, &v616, 1uLL);
              v510 = MIL::IRTensorValueType::Make(v509, 11, (MIL::MILContext ***)&v609);
              MIL::IRTensorValueType::MakeInt32Value(v510, (uint64_t)&v615, v618);
              OutputName = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
              v511 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, OutputName, (uint64_t)&std::piecewise_construct, (__int128 **)&OutputName);
              std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v511 + 5, v618);
              v512 = v618[0];
              v618[0] = 0;
              if (v512)
                (*(void (**)(uint64_t))(*(_QWORD *)v512 + 8))(v512);
              if ((_QWORD)v609)
              {
                *((_QWORD *)&v609 + 1) = v609;
                operator delete((void *)v609);
              }
              std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v617);
              if (v615.__r_.__value_.__r.__words[0])
              {
                v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
                operator delete(v615.__r_.__value_.__l.__data_);
              }
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
            std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v612);
            std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__sz);
            v375 = &v608;
            goto LABEL_527;
          }
        }
      }
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v612);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__sz);
    v136 = &v608;
LABEL_370:
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v136);
    return;
  }
  if (__p[1] != (void *)14)
  {
    operator delete(__p[0]);
    goto LABEL_186;
  }
  v85 = *(_QWORD *)__p[0] != 0x79625F6563696C73 || *(_QWORD *)((char *)__p[0] + 6) != 0x7865646E695F7962;
  operator delete(__p[0]);
  if (!v85)
    goto LABEL_153;
LABEL_186:
  v108 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 16))(v108);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v109, (std::string *)__p);
  v110 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "slice_by_size");
  v111 = v110;
  if (SBYTE7(v604) < 0)
  {
    operator delete(__p[0]);
    if (v111)
      goto LABEL_188;
  }
  else if (v110)
  {
LABEL_188:
    std::string::basic_string[abi:ne180100]<0>(__p, "begin");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "size");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    {
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v604 = 0;
      v112 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
      v113 = *(int *)MIL::IRTensorValue::GetDataView<int>(v112);
      v114 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v608.__r_.__value_.__l.__data_
                                                                          + 40))(v608.__r_.__value_.__r.__words[0]);
      v115 = *(_DWORD *)MIL::IRTensorValue::GetDataView<int>(v114);
      v116 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__sz.__r_.__value_.__l.__data_
                                                                          + 40))(__sz.__r_.__value_.__r.__words[0]);
      MIL::IRTensorValue::GetDataView<int>(v116);
      if (v115 == -1)
        v118 = v117;
      else
        v118 = v115 + v113;
      if ((int)v113 < v118)
      {
        do
        {
          v119 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__sz.__r_.__value_.__l.__data_
                                                                              + 40))(__sz.__r_.__value_.__r.__words[0]);
          v120 = MIL::IRTensorValue::GetDataView<int>(v119);
          v121 = v120;
          v122 = (char *)__p[1];
          if (__p[1] >= (void *)v604)
          {
            v124 = (char *)__p[0];
            v125 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v126 = v125 + 1;
            if ((unint64_t)(v125 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v127 = v604 - (unint64_t)__p[0];
            if ((uint64_t)(v604 - (unint64_t)__p[0]) >> 1 > v126)
              v126 = v127 >> 1;
            if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
              v128 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v128 = v126;
            if (v128)
            {
              v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v604, v128);
              v124 = (char *)__p[0];
              v122 = (char *)__p[1];
            }
            else
            {
              v129 = 0;
            }
            v130 = &v129[4 * v125];
            *(_DWORD *)v130 = *(_DWORD *)(v121 + 4 * v113);
            v123 = v130 + 4;
            while (v122 != v124)
            {
              v131 = *((_DWORD *)v122 - 1);
              v122 -= 4;
              *((_DWORD *)v130 - 1) = v131;
              v130 -= 4;
            }
            __p[0] = v130;
            __p[1] = v123;
            *(_QWORD *)&v604 = &v129[4 * v128];
            if (v124)
              operator delete(v124);
          }
          else
          {
            *(_DWORD *)__p[1] = *(_DWORD *)(v120 + 4 * v113);
            v123 = v122 + 4;
          }
          __p[1] = v123;
          ++v113;
        }
        while (v118 != (_DWORD)v113);
      }
      MIL::Builder::FunctionBuilder::GetContext(a1, &v612);
      v132 = (void (***)(MIL::MILContextImpl *__hidden))v612;
      v618[0] = ((char *)__p[1] - (char *)__p[0]) >> 2;
      std::vector<unsigned long long>::vector[abi:ne180100](&v615, v618, 1uLL);
      v133 = MIL::IRTensorValueType::Make(v132, 11, (MIL::MILContext ***)&v615);
      MIL::IRTensorValueType::MakeInt32Value(v133, (uint64_t)__p, &OutputName);
      v617[0] = (__int128 *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v617[0], (uint64_t)&std::piecewise_construct, v617);
      std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v134 + 5, (uint64_t *)&OutputName);
      v135 = OutputName;
      OutputName = 0;
      if (v135)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v135 + 8))(v135);
      if (v615.__r_.__value_.__r.__words[0])
      {
        v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
        operator delete(v615.__r_.__value_.__l.__data_);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v612);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__sz);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v608);
LABEL_526:
      v375 = (std::string *)&v609;
LABEL_527:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v375);
      goto LABEL_528;
    }
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&__sz);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v608);
LABEL_226:
    v136 = (std::string *)&v609;
    goto LABEL_370;
  }
  v137 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 16))(v137);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v138, (std::string *)__p);
  v139 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "range_1d");
  v140 = v139;
  if (SBYTE7(v604) < 0)
  {
    operator delete(__p[0]);
    if (v140)
      goto LABEL_230;
  }
  else if (v139)
  {
LABEL_230:
    std::string::basic_string[abi:ne180100]<0>(__p, "step");
    v141 = *(MIL::Builder::OperationBuilder **)a2;
    LODWORD(v609) = 1;
    std::vector<int>::vector[abi:ne180100](&v615, &v609, 1uLL);
    if (v615.__r_.__value_.__r.__words[0])
    {
      v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
      operator delete(v615.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    if (!v142)
      return;
    std::string::basic_string[abi:ne180100]<0>(__p, "start");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "end");
    if (SBYTE7(v604) < 0)
      operator delete(__p[0]);
    {
      v143 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v609 + 40))(v609);
      v144 = *(int *)MIL::IRTensorValue::GetDataView<int>(v143);
      v145 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v615.__r_.__value_.__l.__data_
                                                                          + 40))(v615.__r_.__value_.__r.__words[0]);
      v146 = *(int *)MIL::IRTensorValue::GetDataView<int>(v145);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v604 = 0;
      MIL::Builder::FunctionBuilder::GetContext(a1, &v608);
      __sz.__r_.__value_.__r.__words[0] = MIL::IRConstantDimension::Make((void (***)(MIL::MILContextImpl *__hidden))v608.__r_.__value_.__l.__data_, (MIL::MILContext *)(v144 - v146));
      std::vector<MIL::IRDimension const*>::emplace_back<MIL::IRConstantDimension const*>(__p, &__sz);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v608);
      MIL::Builder::FunctionBuilder::GetContext(a1, &v608);
      v147 = (void (***)(MIL::MILContextImpl *__hidden))v608.__r_.__value_.__r.__words[0];
      v148 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v149 = MIL::Builder::Variable::TryGetType(v148);
      v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149);
      v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v150 + 88))(v150);
      v152 = (MIL::IRTypedArgument *)MIL::IRTensorValueType::MakeWithShape(v147, v151, (uint64_t)__p);
      MIL::IRTypedArgument::Make(v152, &v612);
      __sz.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)__sz.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__sz);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((_QWORD *)v153 + 5, &v612);
      v154 = v612;
      v612 = 0;
      if (v154)
        (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v608);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v609);
    v136 = &v615;
    goto LABEL_370;
  }
  v165 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 16))(v165);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v166, (std::string *)__p);
  v167 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "const");
  if (SBYTE7(v604) < 0)
    operator delete(__p[0]);
  if (v167)
  {
    v168 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
    MIL::Builder::Variable::TryGetValueSharedPtr(v168, __p);
    v615.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
    v169 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v615.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v615);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((uint64_t)(v169 + 40), (__int128 *)__p);
    v136 = (std::string *)__p;
    goto LABEL_370;
  }
  v186 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
  v187 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 16))(v186);
  MIL::ValueTypeInferenceUtils::GetOperatorType(v187, (std::string *)__p);
  v188 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "shape");
  if (SBYTE7(v604) < 0)
    operator delete(__p[0]);
  v189 = *(MIL::Builder::OperationBuilder **)a2;
  if (!v188)
  {
    v318 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v318 + 224))(v318))
      return;
    MIL::Builder::OperationBuilder::GetParameterNames(*(unsigned __int8 ***)a2, (uint64_t)&v615);
    v609 = 0u;
    v610 = 0u;
    v611 = 1065353216;
    v319 = (const void **)v615.__r_.__value_.__r.__words[2];
    if (v615.__r_.__value_.__r.__words[2])
    {
      while (1)
      {
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v604 = 0;
        v320 = MIL::Builder::OperationBuilder::GetNumArguments(*(_QWORD *)a2, v319 + 2);
        if (v320)
        {
          LODWORD(v321) = 0;
          v322 = 0;
          do
          {
            v323 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(*(_QWORD *)a2, (uint64_t)(v319 + 2), v321);
            MIL::Builder::Variable::TryGetValueSharedPtr(v323, &v608);
            v324 = v608.__r_.__value_.__r.__words[0];
            if (v608.__r_.__value_.__r.__words[0])
              std::vector<std::shared_ptr<MIL::IRTypedArgument>>::emplace_back<std::shared_ptr<MIL::IRTypedArgument> const&>((char **)__p, (__int128 *)&v608);
            else
              v322 = 1;
            v325 = (std::__shared_weak_count *)v608.__r_.__value_.__l.__size_;
            if (v608.__r_.__value_.__l.__size_)
            {
              v326 = (unint64_t *)(v608.__r_.__value_.__l.__size_ + 8);
              do
                v327 = __ldaxr(v326);
              while (__stlxr(v327 - 1, v326));
              if (!v327)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
              }
            }
            if (!v324)
              break;
            v321 = (v321 + 1);
          }
          while (v320 > v321);
          if ((v322 & 1) != 0)
            break;
        }
        __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)(v319 + 2);
        v328 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v609, (unsigned __int8 *)v319 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&__sz);
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((void **)v328 + 5);
        *(_OWORD *)(v328 + 40) = *(_OWORD *)__p;
        *((_QWORD *)v328 + 7) = v604;
        __p[1] = 0;
        *(_QWORD *)&v604 = 0;
        __p[0] = 0;
        v608.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v608);
        v319 = (const void **)*v319;
        if (!v319)
          goto LABEL_470;
      }
      v608.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v608);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v609);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v615);
      return;
    }
LABEL_470:
    v329 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)a2);
    MIL::Builder::FunctionBuilder::GetContext(a1, &v612);
    LocationPtr = (_QWORD *)MIL::Builder::OperationBuilder::GetLocationPtr(*(MIL::Builder::OperationBuilder **)a2);
    v331 = LocationPtr[1];
    v607[0] = *LocationPtr;
    v607[1] = v331;
    if (v331)
    {
      v332 = (unint64_t *)(v331 + 8);
      do
        v333 = __ldxr(v332);
      while (__stxr(v333 + 1, v332));
    }
    *(_OWORD *)__p = 0u;
    v604 = 0u;
    v605 = 1065353216;
    memset(&__sz, 0, sizeof(__sz));
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *, _QWORD *, __int128 *, void **, std::string *, uint64_t))(*(_QWORD *)v329 + 208))(&v608, v329, &v612, v607, &v609, __p, &__sz, 0xFFFFFFFFLL);
    v617[0] = (__int128 *)&__sz;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v617);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v607);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v612);
    NumOutputs = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2);
    v335 = NumOutputs;
    if (NumOutputs != (uint64_t)(v608.__r_.__value_.__l.__size_ - v608.__r_.__value_.__r.__words[0]) >> 4)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v558 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output count does not match: ", 29);
      v559 = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v560 = *(char *)(v559 + 23);
      if (v560 >= 0)
        v561 = v559;
      else
        v561 = *(_QWORD *)v559;
      if (v560 >= 0)
        v562 = *(unsigned __int8 *)(v559 + 23);
      else
        v562 = *(_QWORD *)(v559 + 8);
      v563 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v558, v561, v562);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v563, (uint64_t)".", 1);
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(exception, &__sz);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    if (NumOutputs)
    {
      v336 = 0;
      v337 = 0;
      do
      {
        v338 = v608.__r_.__value_.__r.__words[0];
        __sz.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, v337);
        v339 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__sz.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__sz);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v339 + 5, (uint64_t *)(v338 + v336));
        ++v337;
        v336 += 16;
      }
      while (v335 != v337);
    }
    __p[0] = &v608;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v609);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v615);
LABEL_528:
    OwningBlock = (MIL::Builder::BlockBuilder *)MIL::Builder::OperationBuilder::GetOwningBlock(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2);
    MIL::Builder::BlockBuilder::GetOutputNames(OwningBlock, (std::string *)&v609);
    for (j = 0; j < MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2); ++j)
    {
      v378 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetOutput(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, j);
      v379 = MIL::Builder::Variable::GetName(v378);
      if (*((char *)v379 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v608, *(const std::string::value_type **)v379, *((_QWORD *)v379 + 1));
      }
      else
      {
        v380 = *(_OWORD *)v379;
        v608.__r_.__value_.__r.__words[2] = *((_QWORD *)v379 + 2);
        *(_OWORD *)&v608.__r_.__value_.__l.__data_ = v380;
      }
      if ((v608.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v381 = HIBYTE(v608.__r_.__value_.__r.__words[2]);
      else
        v381 = v608.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v381 + 1);
      if ((SBYTE7(v604) & 0x80u) == 0)
        v382 = __p;
      else
        v382 = (void **)__p[0];
      if (v381)
      {
        if ((v608.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v383 = &v608;
        else
          v383 = (std::string *)v608.__r_.__value_.__r.__words[0];
        memmove(v382, v383, v381);
      }
      *(_WORD *)((char *)v382 + v381) = 95;
      std::to_string(&v615, 0);
      if ((v615.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v384 = &v615;
      else
        v384 = (std::string *)v615.__r_.__value_.__r.__words[0];
      if ((v615.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v385 = HIBYTE(v615.__r_.__value_.__r.__words[2]);
      else
        v385 = v615.__r_.__value_.__l.__size_;
      v386 = std::string::append((std::string *)__p, (const std::string::value_type *)v384, v385);
      v387 = *(_OWORD *)&v386->__r_.__value_.__l.__data_;
      __sz.__r_.__value_.__r.__words[2] = v386->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v387;
      v386->__r_.__value_.__l.__size_ = 0;
      v386->__r_.__value_.__r.__words[2] = 0;
      v386->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v615.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v615.__r_.__value_.__l.__data_);
      if (SBYTE7(v604) < 0)
        operator delete(__p[0]);
      v388 = 1;
      while (MIL::Builder::BlockBuilder::TryGetVariable((std::string::size_type)OwningBlock, (uint64_t)&__sz))
      {
        std::to_string((std::string *)__p, v388);
        if ((v608.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v389 = &v608;
        else
          v389 = (std::string *)v608.__r_.__value_.__r.__words[0];
        if ((v608.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v390 = HIBYTE(v608.__r_.__value_.__r.__words[2]);
        else
          v390 = v608.__r_.__value_.__l.__size_;
        v391 = std::string::insert((std::string *)__p, 0, (const std::string::value_type *)v389, v390);
        v392 = v391->__r_.__value_.__r.__words[0];
        v615.__r_.__value_.__r.__words[0] = v391->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v615.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v391->__r_.__value_.__r.__words[1] + 7);
        v393 = HIBYTE(v391->__r_.__value_.__r.__words[2]);
        v391->__r_.__value_.__l.__size_ = 0;
        v391->__r_.__value_.__r.__words[2] = 0;
        v391->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__sz.__r_.__value_.__l.__data_);
        __sz.__r_.__value_.__r.__words[0] = v392;
        __sz.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__sz.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v615.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&__sz.__r_.__value_.__s + 23) = v393;
        if (SBYTE7(v604) < 0)
          operator delete(__p[0]);
        ++v388;
      }
      __p[0] = &v608;
      v394 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)&v608, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v395 = *((_QWORD *)v394 + 5);
      v396 = (std::__shared_weak_count *)*((_QWORD *)v394 + 6);
      v615.__r_.__value_.__r.__words[0] = v395;
      v615.__r_.__value_.__l.__size_ = (std::string::size_type)v396;
      if (v396)
      {
        v397 = (unint64_t *)&v396->__shared_owners_;
        do
          v398 = __ldxr(v397);
        while (__stxr(v398 + 1, v397));
      }
      if (v395)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "const");
        v399 = *(std::__shared_weak_count **)(a2 + 8);
        v601 = *(MIL::Builder::OperationBuilder **)a2;
        v602 = v399;
        if (v399)
        {
          v400 = (unint64_t *)&v399->__shared_owners_;
          do
            v401 = __ldxr(v400);
          while (__stxr(v401 + 1, v400));
        }
        MIL::Builder::BlockBuilder::AddOperation(OwningBlock, (unsigned __int8 *)__p, (uint64_t *)&v601, &v612);
        v402 = v602;
        if (v602)
        {
          v403 = (unint64_t *)&v602->__shared_owners_;
          do
            v404 = __ldaxr(v403);
          while (__stlxr(v404 - 1, v403));
          if (!v404)
          {
            ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
            std::__shared_weak_count::__release_weak(v402);
          }
        }
        if (SBYTE7(v604) < 0)
          operator delete(__p[0]);
        v405 = (__int128 *)v612;
        std::string::basic_string[abi:ne180100]<0>(v597, "val");
        v596 = *(_OWORD *)&v615.__r_.__value_.__l.__data_;
        if (v615.__r_.__value_.__l.__size_)
        {
          v406 = (unint64_t *)(v615.__r_.__value_.__l.__size_ + 8);
          do
            v407 = __ldxr(v406);
          while (__stxr(v407 + 1, v406));
        }
        MIL::Builder::OperationBuilder::SetAttribute((uint64_t)v405, (uint64_t)v597, (uint64_t *)&v596, &v599);
        v408 = v600;
        if (v600)
        {
          v409 = (unint64_t *)&v600->__shared_owners_;
          do
            v410 = __ldaxr(v409);
          while (__stlxr(v410 - 1, v409));
          if (!v410)
          {
            ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
            std::__shared_weak_count::__release_weak(v408);
          }
        }
        v411 = (std::__shared_weak_count *)*((_QWORD *)&v596 + 1);
        if (*((_QWORD *)&v596 + 1))
        {
          v412 = (unint64_t *)(*((_QWORD *)&v596 + 1) + 8);
          do
            v413 = __ldaxr(v412);
          while (__stlxr(v413 - 1, v412));
          if (!v413)
          {
            ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
            std::__shared_weak_count::__release_weak(v411);
          }
        }
        if (v598 < 0)
          operator delete(v597[0]);
        for (k = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes(*(MIL::Builder::OperationBuilder **)a2)
                              + 16); k; k = (uint64_t *)*k)
        {
          v415 = *((char *)k + 39);
          if (v415 < 0)
          {
            v420 = k[2];
            v421 = k[3];
            if (v421 != 3 || (*(_WORD *)v420 == 24950 ? (v422 = *(_BYTE *)(v420 + 2) == 108) : (v422 = 0), !v422))
            {
              v418 = (__int128 *)v612;
              std::string::__init_copy_ctor_external(&v593, (const std::string::value_type *)v420, v421);
              goto LABEL_610;
            }
          }
          else
          {
            v416 = (__int128 *)(k + 2);
            if (v415 != 3 || (*(_WORD *)v416 == 24950 ? (v417 = *((_BYTE *)k + 18) == 108) : (v417 = 0), !v417))
            {
              v418 = (__int128 *)v612;
              v419 = *v416;
              v593.__r_.__value_.__r.__words[2] = k[4];
              *(_OWORD *)&v593.__r_.__value_.__l.__data_ = v419;
LABEL_610:
              v423 = (std::__shared_weak_count *)k[6];
              v591 = k[5];
              v592 = v423;
              if (v423)
              {
                v424 = (unint64_t *)&v423->__shared_owners_;
                do
                  v425 = __ldxr(v424);
                while (__stxr(v425 + 1, v424));
              }
              MIL::Builder::OperationBuilder::SetAttribute((uint64_t)v418, (uint64_t)&v593, &v591, &v594);
              v426 = v595;
              if (v595)
              {
                v427 = (unint64_t *)&v595->__shared_owners_;
                do
                  v428 = __ldaxr(v427);
                while (__stlxr(v428 - 1, v427));
                if (!v428)
                {
                  ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                  std::__shared_weak_count::__release_weak(v426);
                }
              }
              v429 = v592;
              if (v592)
              {
                v430 = (unint64_t *)&v592->__shared_owners_;
                do
                  v431 = __ldaxr(v430);
                while (__stlxr(v431 - 1, v430));
                if (!v431)
                {
                  ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
                  std::__shared_weak_count::__release_weak(v429);
                }
              }
              if (SHIBYTE(v593.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v593.__r_.__value_.__l.__data_);
            }
          }
        }
        v432 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v609, *((uint64_t *)&v609 + 1), (unsigned __int8 **)&v608);
        if (v432 == *((_QWORD *)&v609 + 1))
        {
          v434 = (__int128 *)v612;
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v579, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          else
            v579 = __sz;
          v449 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v615.__r_.__value_.__l.__data_ + 32))(v615.__r_.__value_.__r.__words[0]);
          MIL::Builder::OperationBuilder::AddOutput((uint64_t)v434, (uint64_t)&v579, v449, &v580);
          v450 = v581;
          if (v581)
          {
            v451 = (unint64_t *)&v581->__shared_owners_;
            do
              v452 = __ldaxr(v451);
            while (__stlxr(v452 - 1, v451));
            if (!v452)
            {
              ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
              std::__shared_weak_count::__release_weak(v450);
            }
          }
          if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v579.__r_.__value_.__l.__data_);
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v578, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          else
            v578 = __sz;
          v453 = *(std::__shared_weak_count **)(a2 + 8);
          v576 = *(MIL::Builder::OperationBuilder **)a2;
          v577 = v453;
          if (v453)
          {
            v454 = (unint64_t *)&v453->__shared_owners_;
            do
              v455 = __ldxr(v454);
            while (__stxr(v455 + 1, v454));
          }
          MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)OwningBlock, (uint64_t)&v608, (uint64_t)&v578, (uint64_t *)&v576);
          v456 = v577;
          if (v577)
          {
            v457 = (unint64_t *)&v577->__shared_owners_;
            do
              v458 = __ldaxr(v457);
            while (__stlxr(v458 - 1, v457));
            if (!v458)
            {
              ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
              std::__shared_weak_count::__release_weak(v456);
            }
          }
          if (SHIBYTE(v578.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v578.__r_.__value_.__l.__data_);
        }
        else
        {
          v433 = *(MIL::Builder::OperationBuilder **)a2;
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v588, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          else
            v588 = __sz;
          MIL::Builder::OperationBuilder::RenameOutput((uint64_t)v433, j, (std::string::size_type)&v588, &v589);
          v435 = v590;
          if (v590)
          {
            v436 = (unint64_t *)&v590->__shared_owners_;
            do
              v437 = __ldaxr(v436);
            while (__stlxr(v437 - 1, v436));
            if (!v437)
            {
              ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
              std::__shared_weak_count::__release_weak(v435);
            }
          }
          if (SHIBYTE(v588.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v588.__r_.__value_.__l.__data_);
          v438 = (__int128 *)v612;
          if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v585, v608.__r_.__value_.__l.__data_, v608.__r_.__value_.__l.__size_);
          else
            v585 = v608;
          v439 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v615.__r_.__value_.__l.__data_ + 32))(v615.__r_.__value_.__r.__words[0]);
          MIL::Builder::OperationBuilder::AddOutput((uint64_t)v438, (uint64_t)&v585, v439, &v586);
          v440 = v587;
          if (v587)
          {
            v441 = (unint64_t *)&v587->__shared_owners_;
            do
              v442 = __ldaxr(v441);
            while (__stlxr(v442 - 1, v441));
            if (!v442)
            {
              ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
              std::__shared_weak_count::__release_weak(v440);
            }
          }
          if (SHIBYTE(v585.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v585.__r_.__value_.__l.__data_);
          if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v584, v608.__r_.__value_.__l.__data_, v608.__r_.__value_.__l.__size_);
          else
            v584 = v608;
          v443 = *(std::__shared_weak_count **)(a2 + 8);
          v582 = *(MIL::Builder::OperationBuilder **)a2;
          v583 = v443;
          if (v443)
          {
            v444 = (unint64_t *)&v443->__shared_owners_;
            do
              v445 = __ldxr(v444);
            while (__stxr(v445 + 1, v444));
          }
          MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)OwningBlock, (uint64_t)&__sz, (uint64_t)&v584, (uint64_t *)&v582);
          v446 = v583;
          if (v583)
          {
            v447 = (unint64_t *)&v583->__shared_owners_;
            do
              v448 = __ldaxr(v447);
            while (__stlxr(v448 - 1, v447));
            if (!v448)
            {
              ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
              std::__shared_weak_count::__release_weak(v446);
            }
          }
          if (SHIBYTE(v584.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v584.__r_.__value_.__l.__data_);
          MIL::Builder::BlockBuilder::ReplaceOutput((std::string::size_type)OwningBlock, (uint64_t)&__sz, &v608, 0);
        }
        __p[0] = &v608;
        v459 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)&v608, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        __p[0] = &__sz;
        v460 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)&__sz, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]((_QWORD *)v460 + 5, (uint64_t *)v459 + 5);
        v461 = v613;
        if (v613)
        {
          v462 = (unint64_t *)&v613->__shared_owners_;
          do
            v463 = __ldaxr(v462);
          while (__stlxr(v463 - 1, v462));
          if (!v463)
          {
            ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
            std::__shared_weak_count::__release_weak(v461);
          }
        }
        v396 = (std::__shared_weak_count *)v615.__r_.__value_.__l.__size_;
      }
      if (v396)
      {
        v464 = (unint64_t *)&v396->__shared_owners_;
        do
          v465 = __ldaxr(v464);
        while (__stlxr(v465 - 1, v464));
        if (!v465)
        {
          ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
          std::__shared_weak_count::__release_weak(v396);
        }
      }
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__sz.__r_.__value_.__l.__data_);
      if (SHIBYTE(v608.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v608.__r_.__value_.__l.__data_);
    }
    MIL::Builder::FunctionBuilder::GetContext(a1, __p);
    v466 = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar((void (***)(MIL::MILContextImpl *__hidden))__p[0], 2);
    v467 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v468 = (unint64_t *)((char *)__p[1] + 8);
      do
        v469 = __ldaxr(v468);
      while (__stlxr(v469 - 1, v468));
      if (!v469)
      {
        ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
        std::__shared_weak_count::__release_weak(v467);
      }
    }
    v470 = *(MIL::Builder::OperationBuilder **)a2;
    std::string::basic_string[abi:ne180100]<0>(v574, "constantFolded");
    MIL::IRTensorValueType::MakeBoolValue(v466, (const MIL::IRTensorValueType *)1, &v615);
    v572 = v615.__r_.__value_.__r.__words[0];
    if (v615.__r_.__value_.__r.__words[0])
    {
      v471 = (std::__shared_weak_count *)operator new();
      v472 = v615.__r_.__value_.__r.__words[0];
      v471->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
      v471->__shared_owners_ = 0;
      v471->__shared_weak_owners_ = 0;
      v471[1].__vftable = (std::__shared_weak_count_vtbl *)v472;
    }
    else
    {
      v471 = 0;
    }
    v573 = v471;
    v615.__r_.__value_.__r.__words[0] = 0;
    MIL::Builder::OperationBuilder::SetAttribute((uint64_t)v470, (uint64_t)v574, (uint64_t *)&v572, __p);
    v474 = __p[0];
    v473 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v475 = (unint64_t *)((char *)__p[1] + 8);
      do
        v476 = __ldaxr(v475);
      while (__stlxr(v476 - 1, v475));
      if (!v476)
      {
        ((void (*)(std::__shared_weak_count *))v473->__on_zero_shared)(v473);
        std::__shared_weak_count::__release_weak(v473);
      }
    }
    v477 = v573;
    if (v573)
    {
      v478 = (unint64_t *)&v573->__shared_owners_;
      do
        v479 = __ldaxr(v478);
      while (__stlxr(v479 - 1, v478));
      if (!v479)
      {
        ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
        std::__shared_weak_count::__release_weak(v477);
      }
    }
    v480 = v615.__r_.__value_.__r.__words[0];
    v615.__r_.__value_.__r.__words[0] = 0;
    if (v480)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v480 + 8))(v480);
    if (v575 < 0)
      operator delete(v574[0]);
    if (!v474)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v551 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not add attribute for op producing: ", 42);
      v552 = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
      v553 = *(char *)(v552 + 23);
      if (v553 >= 0)
        v554 = v552;
      else
        v554 = *(_QWORD *)v552;
      if (v553 >= 0)
        v555 = *(unsigned __int8 *)(v552 + 23);
      else
        v555 = *(_QWORD *)(v552 + 8);
      v556 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v551, v554, v555);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v556, (uint64_t)".", 1);
      v557 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      std::logic_error::logic_error(v557, &v615);
      v557->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v557, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
    }
    MIL::Builder::OperationBuilder::GetInputArguments(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, (uint64_t)&v615);
    v481 = (_QWORD *)v615.__r_.__value_.__r.__words[2];
    if (!v615.__r_.__value_.__r.__words[2])
    {
LABEL_767:
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v615);
      __p[0] = &v609;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      return;
    }
    while (1)
    {
      v482 = (MIL::Builder::Variable::VariableImpl **)v481[2];
      if (MIL::Builder::Variable::TryGetName(v482))
        break;
LABEL_766:
      v481 = (_QWORD *)*v481;
      if (!v481)
        goto LABEL_767;
    }
    v483 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v482);
    MIL::Builder::BlockBuilder::TryGetOperation((uint64_t)OwningBlock, v483, &__sz);
    if (__sz.__r_.__value_.__r.__words[0])
    {
      v484 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)__sz.__r_.__value_.__l.__data_);
      v485 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v484 + 16))(v484);
      MIL::ValueTypeInferenceUtils::GetOperatorType(v485, (std::string *)__p);
      if ((SBYTE7(v604) & 0x80000000) == 0)
      {
        if (SBYTE7(v604) != 5)
          goto LABEL_761;
        if (LODWORD(__p[0]) != 1936617315 || BYTE4(__p[0]) != 116)
          goto LABEL_761;
LABEL_742:
        v489 = __sz.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(v570, "constantFolded");
        MIL::IRTensorValueType::MakeBoolValue(v466, (const MIL::IRTensorValueType *)1, &v608);
        v568 = v608.__r_.__value_.__r.__words[0];
        if (v608.__r_.__value_.__r.__words[0])
        {
          v490 = (std::__shared_weak_count *)operator new();
          v491 = v608.__r_.__value_.__r.__words[0];
          v490->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
          v490->__shared_owners_ = 0;
          v490->__shared_weak_owners_ = 0;
          v490[1].__vftable = (std::__shared_weak_count_vtbl *)v491;
        }
        else
        {
          v490 = 0;
        }
        v569 = v490;
        v608.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute(v489, (uint64_t)v570, (uint64_t *)&v568, __p);
        v493 = __p[0];
        v492 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v494 = (unint64_t *)((char *)__p[1] + 8);
          do
            v495 = __ldaxr(v494);
          while (__stlxr(v495 - 1, v494));
          if (!v495)
          {
            ((void (*)(std::__shared_weak_count *))v492->__on_zero_shared)(v492);
            std::__shared_weak_count::__release_weak(v492);
          }
        }
        v496 = v569;
        if (v569)
        {
          v497 = (unint64_t *)&v569->__shared_owners_;
          do
            v498 = __ldaxr(v497);
          while (__stlxr(v498 - 1, v497));
          if (!v498)
          {
            ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
            std::__shared_weak_count::__release_weak(v496);
          }
        }
        v499 = v608.__r_.__value_.__r.__words[0];
        v608.__r_.__value_.__r.__words[0] = 0;
        if (v499)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v499 + 8))(v499);
        if (v571 < 0)
          operator delete(v570[0]);
        if (!v493)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          v544 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not add attribute for op producing: ", 42);
          v545 = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder::OperationBuilderImpl **)__sz.__r_.__value_.__l.__data_, 0);
          v546 = *(char *)(v545 + 23);
          if (v546 >= 0)
            v547 = v545;
          else
            v547 = *(_QWORD *)v545;
          if (v546 >= 0)
            v548 = *(unsigned __int8 *)(v545 + 23);
          else
            v548 = *(_QWORD *)(v545 + 8);
          v549 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v544, v547, v548);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v549, (uint64_t)".", 1);
          v550 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(v550, &v608);
          v550->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v550, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        goto LABEL_761;
      }
      if (__p[1] != (void *)5)
      {
        operator delete(__p[0]);
        goto LABEL_761;
      }
      v488 = *(_DWORD *)__p[0] != 1936617315 || *((_BYTE *)__p[0] + 4) != 116;
      operator delete(__p[0]);
      if (!v488)
        goto LABEL_742;
    }
LABEL_761:
    v500 = (std::__shared_weak_count *)__sz.__r_.__value_.__l.__size_;
    if (__sz.__r_.__value_.__l.__size_)
    {
      v501 = (unint64_t *)(__sz.__r_.__value_.__l.__size_ + 8);
      do
        v502 = __ldaxr(v501);
      while (__stlxr(v502 - 1, v501));
      if (!v502)
      {
        ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
        std::__shared_weak_count::__release_weak(v500);
      }
    }
    goto LABEL_766;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  v190 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((std::string::size_type)v189, (uint64_t)__p, 0);
  v191 = MIL::Builder::Variable::GetName(v190);
  if (SBYTE7(v604) < 0)
    operator delete(__p[0]);
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v191)&& (__p[0] = v191, v192 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v191, (uint64_t)&std::piecewise_construct, (__int128 **)__p), v193 = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v192 + 5)), (*(uint64_t (**)(uint64_t))(*(_QWORD *)v193 + 24))(v193)))
  {
    __p[0] = v191;
    v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (unsigned __int8 *)v191, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v195 = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v194 + 5));
  }
  else
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, (unsigned __int8 *)v191))return;
    __p[0] = v191;
    v346 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v191, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v347 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v346 + 5) + 32))(*((_QWORD *)v346 + 5));
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v347 + 24))(v347))
      return;
    __p[0] = v191;
    v348 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v191, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v195 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v348 + 5) + 32))(*((_QWORD *)v348 + 5));
  }
  v349 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 24))(v195);
  if (v349)
  {
    v350 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v349 + 96))(v349);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v604 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v350, *(_QWORD *)(v350 + 8), (uint64_t)(*(_QWORD *)(v350 + 8) - *(_QWORD *)v350) >> 3);
    memset(&v615, 0, sizeof(v615));
    v351 = (MIL::IRDimension **)__p[0];
    v352 = (MIL::IRDimension **)__p[1];
    while (v351 != v352)
    {
      if (!(*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)*v351 + 16))(*v351))
      {
        v362 = 0;
        goto LABEL_771;
      }
      v353 = MIL::IRDimension::AsConstant(*v351);
      LODWORD(v609) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v353 + 48))(v353);
      std::vector<int>::push_back[abi:ne180100]((uint64_t)&v615, &v609);
      ++v351;
    }
    MIL::Builder::FunctionBuilder::GetContext(a1, &v608);
    v358 = (void (***)(MIL::MILContextImpl *__hidden))v608.__r_.__value_.__r.__words[0];
    v617[0] = (__int128 *)(((char *)__p[1] - (char *)__p[0]) >> 3);
    std::vector<unsigned long long>::vector[abi:ne180100](&v609, v617, 1uLL);
    v359 = MIL::IRTensorValueType::Make(v358, 11, (MIL::MILContext ***)&v609);
    MIL::IRTensorValueType::MakeInt32Value(v359, (uint64_t)&v615, &v612);
    __sz.__r_.__value_.__r.__words[0] = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, 0);
    v360 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)__sz.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&__sz);
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((_QWORD *)v360 + 5, &v612);
    v361 = v612;
    v612 = 0;
    if (v361)
      (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
    if ((_QWORD)v609)
    {
      *((_QWORD *)&v609 + 1) = v609;
      operator delete((void *)v609);
    }
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v608);
    v362 = 1;
LABEL_771:
    if (v615.__r_.__value_.__r.__words[0])
    {
      v615.__r_.__value_.__l.__size_ = v615.__r_.__value_.__r.__words[0];
      operator delete(v615.__r_.__value_.__l.__data_);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v362 & 1) != 0)
      goto LABEL_528;
  }
}

void sub_1E06EF9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  void *v69;
  int v70;
  uint64_t v71;

  if (SLOBYTE(STACK[0x307]) < 0)
  {
    operator delete((void *)STACK[0x2F0]);
    if ((v70 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a69);
      a69 = &STACK[0x320];
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v71 - 256);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v71 - 176);
      _Unwind_Resume(a1);
    }
  }
  else if (!v70)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v69);
  goto LABEL_6;
}

void `anonymous namespace'::GetValueHelper(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::Builder::Variable::VariableImpl **ArgumentForParameter;
  uint64_t Value;
  MIL::Builder::Variable::VariableImpl **v10;
  unsigned __int8 *Name;
  MIL::Builder::Variable::VariableImpl **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(a2, a1, 0);
  Value = MIL::Builder::Variable::TryGetValue(ArgumentForParameter);
  v10 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(a2, a1, 0);
  if (Value)
  {
    MIL::Builder::Variable::TryGetValueSharedPtr(v10, a4);
  }
  else
  {
    Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(v10);
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, Name))
    {
      v12 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter(a2, a1, 0);
      v13 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v12);
      v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13);
      if (!v14)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v15 = *((_QWORD *)v14 + 6);
      *a4 = *((_QWORD *)v14 + 5);
      a4[1] = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
    }
  }
}

uint64_t `anonymous namespace'::VerifyInt32TensorType(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *a1;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if (result)
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 40))(*a1);
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4) == 11;
    }
  }
  return result;
}

_QWORD *std::vector<MIL::IRDimension const*>::emplace_back<MIL::IRConstantDimension const*>(void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return v8 - 1;
}

BOOL `anonymous namespace'::VerifyInt32TensorValue(uint64_t a1, std::string::size_type a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _BOOL8 v10;
  int v11;
  uint64_t *v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;

    && (v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18),
        MIL::IRTensorValue::GetDataView<int>(v5),
        v6 == (uint64_t)(a4[1] - *a4) >> 2))
  {
    v7 = 0;
    do
    {
      v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      MIL::IRTensorValue::GetDataView<int>(v8);
      v10 = v7 >= v9;
      if (v7 >= v9)
        break;
      v11 = *(_DWORD *)(*a4 + 4 * v7);
      v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      v13 = *(_DWORD *)(MIL::IRTensorValue::GetDataView<int>(v12) + 4 * v7++);
    }
    while (v11 == v13);
  }
  else
  {
    v10 = 0;
  }
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v10;
}

void sub_1E06F085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1E06F08E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long long>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1E06F0960(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t MIL::ValueTypeInferenceUtils::OpOutputsContainsUnknownShape(MIL::Builder::OperationBuilder::OperationBuilderImpl ***a1, uint64_t a2)
{
  MIL::Builder::Variable::VariableImpl ***v3;
  unint64_t v4;
  __int128 *Name;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t ValueType;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *__p;
  MIL::Builder::Variable::VariableImpl ***v31;
  __int128 *v32;

  MIL::Builder::OperationBuilder::GetOutputs(*a1, &__p);
  v3 = (MIL::Builder::Variable::VariableImpl ***)__p;
  if (v31 == __p)
  {
    v28 = 0;
    if (__p)
      goto LABEL_23;
    return v28;
  }
  v4 = 0;
  while (1)
  {
    Name = (__int128 *)MIL::Builder::Variable::GetName(v3[v4]);
    v32 = Name;
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
    if (!MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v6 + 5)))
      goto LABEL_19;
    v32 = Name;
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
    ValueType = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v7 + 5));
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ValueType + 32))(ValueType))
      break;
    v32 = Name;
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
    v21 = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v20 + 5));
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
    {
      v32 = Name;
      v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
      v23 = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v22 + 5));
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 104))(v24) & 1) == 0)
        goto LABEL_21;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 96))(v24);
      v26 = *(_QWORD **)v25;
      v27 = *(_QWORD **)(v25 + 8);
      while (v26 != v27)
      {
        if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v26 + 24))(*v26))
          goto LABEL_21;
        ++v26;
      }
    }
LABEL_19:
    ++v4;
    v3 = (MIL::Builder::Variable::VariableImpl ***)__p;
    if (v4 >= ((char *)v31 - (_BYTE *)__p) >> 3)
    {
      v28 = 0;
      goto LABEL_22;
    }
  }
  v32 = Name;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)Name, (uint64_t)&std::piecewise_construct, &v32);
  v10 = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v9 + 5));
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14) & 1) == 0)
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 104))(v15))
          goto LABEL_21;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 96))(v16);
        v18 = *(_QWORD **)v17;
        v19 = *(_QWORD **)(v17 + 8);
        while (v18 != v19)
        {
          if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 24))(*v18))
            goto LABEL_21;
          ++v18;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_21:
  v28 = 1;
LABEL_22:
  v3 = (MIL::Builder::Variable::VariableImpl ***)__p;
  if (__p)
  {
LABEL_23:
    v31 = v3;
    operator delete(v3);
  }
  return v28;
}

void sub_1E06F0D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<short>::vector[abi:ne180100](_QWORD *a1, const void *a2, uint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_1E06F0DA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned short>::vector[abi:ne180100](_QWORD *a1, const void *a2, uint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 2 * a3);
    a1[1] = &v6[2 * a3];
  }
  return a1;
}

void sub_1E06F0E28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::IRValueType const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1E06F0E9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06F0F14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1E06F1104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *std::vector<MIL::IRDimension const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1E06F1264(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1E06F12DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*> const*,std::vector<MIL::IRDimension const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1E06F1394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRDimension const*>>,std::vector<MIL::IRDimension const*>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t MIL::Operators::Common::Shared::MatchesExpectedShape(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  if (a3 != (v4 - *a1) >> 3)
    return 0;
  if (v4 == v3)
    return 1;
  v7 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v7) + 16))(*(_QWORD *)(v3 + 8 * v7));
    if (!result)
      break;
    v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1 + 8 * v7));
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) != *(_DWORD *)(a2 + 4 * v7))
      return 0;
    ++v7;
    v3 = *a1;
    if (v7 >= (a1[1] - *a1) >> 3)
      return 1;
  }
  return result;
}

void MIL::Operators::Common::Shared::ValidateExistenceAndGetAttributeSharedPtr(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v5;
  std::string::size_type size;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *exception;
  MIL::IRObject *v13;
  void *v14;
  MIL::IRObject *v15;
  _QWORD *LocationPtr;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string v28;
  std::string lpsrc;
  __int128 v30;
  std::string::size_type v31;
  __int128 v32;

  MIL::IRObject::TryGetAttributeSharedPtr(a1, a2, &lpsrc);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    size = lpsrc.__r_.__value_.__l.__size_;
    *a3 = v5;
    a3[1] = size;
    if (size)
    {
      v7 = (unint64_t *)(size + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  v9 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!*a3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v13 = (MIL::IRObject *)a1;
    v14 = exception;
    v15 = v13;
    LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(v13);
    v17 = LocationPtr[1];
    *(_QWORD *)&v32 = *LocationPtr;
    *((_QWORD *)&v32 + 1) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::operator+<char>();
    v20 = std::string::append(&v28, " is undefined for ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v15 + 56))(v15);
    v23 = *(char *)(v22 + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)v22;
    else
      v24 = *(const std::string::value_type **)v22;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(v22 + 23);
    else
      v25 = *(_QWORD *)(v22 + 8);
    v26 = std::string::append(&lpsrc, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v31 = v26->__r_.__value_.__r.__words[2];
    v30 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v14, &v32, (uint64_t)&v30, 321);
  }
}

void sub_1E06F1638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v31 - 48);
    if ((v30 & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v31 - 48);
    if (!v30)
    {
LABEL_10:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28);
      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

void MIL::Operators::Common::Shared::ValidateExistenceAndGetInputSharedPtr(MIL::IRObject *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  std::string::size_type size;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  void *exception;
  _QWORD *LocationPtr;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  __int128 v41;
  std::string::size_type v42;
  __int128 v43;
  std::string v44;
  std::string v45;
  std::string lpsrc;
  __int128 v47;
  std::string::size_type v48;
  __int128 v49;

  MIL::IROperation::TryGetParameterValueSharedPtr(a1, (uint64_t)a2, 0, (uint64_t *)&lpsrc);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    size = lpsrc.__r_.__value_.__l.__size_;
    *a3 = v6;
    a3[1] = size;
    if (size)
    {
      v8 = (unint64_t *)(size + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  v10 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!*a3)
  {
    MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)a1, a2, &lpsrc);
    v13 = lpsrc.__r_.__value_.__r.__words[0];
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&lpsrc);
    exception = __cxa_allocate_exception(0x48uLL);
    if (!v13)
    {
      LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
      v16 = LocationPtr[1];
      *(_QWORD *)&v43 = *LocationPtr;
      *((_QWORD *)&v43 + 1) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      std::operator+<char>();
      v19 = std::string::append(&v45, " is undefined for ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      lpsrc.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
      v22 = *(char *)(v21 + 23);
      if (v22 >= 0)
        v23 = (const std::string::value_type *)v21;
      else
        v23 = *(const std::string::value_type **)v21;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v21 + 23);
      else
        v24 = *(_QWORD *)(v21 + 8);
      v25 = std::string::append(&lpsrc, v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42 = v25->__r_.__value_.__r.__words[2];
      v41 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationError::ValidationError((uint64_t)exception, &v43, (uint64_t)&v41, 305);
    }
    v27 = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v28 = v27[1];
    *(_QWORD *)&v49 = *v27;
    *((_QWORD *)&v49 + 1) = v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    std::operator+<char>();
    v31 = std::string::append(&v44, " is undefined for ");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    v34 = *(char *)(v33 + 23);
    if (v34 >= 0)
      v35 = (const std::string::value_type *)v33;
    else
      v35 = *(const std::string::value_type **)v33;
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v33 + 23);
    else
      v36 = *(_QWORD *)(v33 + 8);
    v37 = std::string::append(&v45, v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&lpsrc, ", but it is defined as an attribute, please fix.");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v48 = v39->__r_.__value_.__r.__words[2];
    v47 = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)exception, &v49, (uint64_t)&v47, 305);
  }
}

void sub_1E06F19C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a37 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v40 - 48);
    if ((v39 & 1) == 0)
      goto LABEL_12;
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v40 - 48);
    if (!v39)
    {
LABEL_12:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v37);
      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v38);
  goto LABEL_12;
}

char *MIL::Operators::Common::Shared::ValidateAndGetShape@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unint64_t v4;
  unsigned int *v5;
  std::runtime_error *exception;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;

  MIL::IRTensorValue::TryGetDataView<unsigned int>(&v8, *a1);
  if (!(_BYTE)v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Shape must have dtype uint32.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = v9;
  v4 = v10;
  v5 = &v9[v10];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)a2, v3, v5, v4);
}

void sub_1E06F1B70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::ValidateAndGetAxis(_QWORD *a1)
{
  unsigned int *v1;
  std::runtime_error *exception;

  v1 = (unsigned int *)MIL::IRValue::TryGetScalar<int>(*a1);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Axis must be a scalar int32 value.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return *v1;
}

void sub_1E06F1BDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::HasSameConstantShape(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v3 = a1[1];
  if (v3 - *a1 != a2[1] - *a2)
    return 0;
  if (v3 == v2)
    return 1;
  v6 = 0;
  while (1)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v6) + 16))(*(_QWORD *)(v2 + 8 * v6));
    if (!result)
      break;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v6) + 16))(*(_QWORD *)(*a2 + 8 * v6));
    if (!result)
      break;
    v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1 + 8 * v6));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    v10 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a2 + 8 * v6));
    if (v9 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10))
      return 0;
    ++v6;
    v2 = *a1;
    if (v6 >= (a1[1] - *a1) >> 3)
      return 1;
  }
  return result;
}

BOOL MIL::Operators::Common::Shared::IsShapeConstant(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;

  v1 = *a1;
  if (a1[1] == *a1)
    return 1;
  v3 = 0;
  do
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 16))(*(_QWORD *)(v1 + 8 * v3));
    result = v4 != 0;
    if (!v4)
      break;
    ++v3;
    v1 = *a1;
  }
  while (v3 < (a1[1] - *a1) >> 3);
  return result;
}

float MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(MIL::Operators::Common::Shared::ConstExprs *this, float a2, float a3, float a4)
{
  return (float)(a2 - a3) * a4;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::DequantizeExpression(__int16 a1, float a2, float a3)
{
  float Float;
  MIL::Fp16 *v6;
  __int16 v8;

  v8 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v8);
  return MIL::Fp16::FromFloat(v6, (float)(a2 - a3) * Float);
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::ShapeToVector@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = std::vector<unsigned long>::vector(a2, (a1[1] - *a1) >> 3);
  v5 = *a1;
  if (a1[1] != *a1)
  {
    v6 = 0;
    do
    {
      v7 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v5 + 8 * v6));
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      *(_QWORD *)(*a2 + 8 * v6++) = result;
      v5 = *a1;
    }
    while (v6 < (a1[1] - *a1) >> 3);
  }
  return result;
}

void sub_1E06F1DF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t **MIL::Operators::Common::Shared::ConstExprs::GetBlockSizes@<X0>(uint64_t **a1@<X0>, unint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t **result;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = (unint64_t **)std::vector<unsigned long>::vector(a3, a1[1] - *a1);
  v6 = *a1;
  v7 = (char *)a1[1] - (char *)*a1;
  if (v7)
  {
    v8 = v7 >> 3;
    v9 = *a2;
    v10 = *result;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v12 = *v6++;
      v11 = v12;
      v13 = *v9++;
      *v10++ = v11 / v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *MIL::Operators::Common::Shared::ConstExprs::GetStrides@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  result = std::vector<unsigned long long>::vector(a2, (uint64_t)(a1[1] - *a1) >> 3);
  v4 = a1[1] - *a1;
  if (v4)
  {
    v5 = v4 >> 3;
    if ((unint64_t)(v4 >> 3) <= 1)
      v6 = 1;
    else
      v6 = v4 >> 3;
    v7 = 8 * v5 - 8;
    v8 = (uint64_t *)(*a1 + v7);
    v9 = (uint64_t *)(*result + v7);
    v10 = 1;
    do
    {
      *v9-- = v10;
      v11 = *v8--;
      v10 *= v11;
      --v6;
    }
    while (v6);
  }
  return result;
}

unint64_t **MIL::Operators::Common::Shared::ConstExprs::UnravelIndex@<X0>(unint64_t a1@<X0>, unint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t **result;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = (unint64_t **)std::vector<unsigned long>::vector(a3, a2[1] - *a2);
  v6 = *a2;
  v7 = (char *)a2[1] - (char *)*a2;
  if (v7)
  {
    v8 = v7 >> 3;
    v9 = *result;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *v6++;
      *v9++ = a1 / v10;
      a1 %= v10;
      --v8;
    }
    while (v8);
  }
  return result;
}

unint64_t MIL::Operators::Common::Shared::ConstExprs::UnravelIndex(unint64_t result, uint64_t a2, unint64_t **a3)
{
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v3 = *(unint64_t **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4)
  {
    v5 = v4 >> 3;
    v6 = *a3;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v7 = *v3++;
      *v6++ = result / v7;
      result %= v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::RavelIndex(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(uint64_t **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v3)
    return 0;
  result = 0;
  v6 = v3 >> 3;
  v7 = *a1;
  if (v6 <= 1)
    v6 = 1;
  do
  {
    v9 = *v7++;
    v8 = v9;
    v10 = *v2++;
    result += v10 * v8;
    --v6;
  }
  while (v6);
  return result;
}

void MIL::Operators::Common::Shared::ConstExprs::AssertIsShapeConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 3);
  v4 = v20;
  v5 = v21;
  if (v20 != v21)
  {
    do
    {
      if (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v7 = std::string::append(&v16, ", shape of ");
        v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        v9 = *(char *)(a2 + 23);
        if (v9 >= 0)
          v10 = (const std::string::value_type *)a2;
        else
          v10 = *(const std::string::value_type **)a2;
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(a2 + 23);
        else
          v11 = *(_QWORD *)(a2 + 8);
        v12 = std::string::append(&v17, v10, v11);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        v14 = std::string::append(&v18, " needs to be constant");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v19);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v20;
  }
  if (v4)
  {
    v21 = v4;
    operator delete(v4);
  }
}

void sub_1E06F2144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;
  void *v32;

  if (*(char *)(v30 - 57) < 0)
    operator delete(*(void **)(v30 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
    {
LABEL_12:
      v32 = *(void **)(v30 - 56);
      if (v32)
      {
        *(_QWORD *)(v30 - 48) = v32;
        operator delete(v32);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertIsVector(MIL::IRTensorValueType *a1, uint64_t a2)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  result = MIL::IRTensorValueType::Rank(a1);
  if (result != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v5 = std::string::append(&v14, ", rank of ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = (const std::string::value_type *)a2;
    else
      v8 = *(const std::string::value_type **)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = std::string::append(&v15, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v16, " needs to be 1");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E06F2308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputDType(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::runtime_error *exception;
  int v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  if (v3 != (_DWORD)result)
  {
    v18 = result;
    std::operator+<char>();
    v5 = std::string::append(&v23, ", cannot output tensor value of dtype ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    MIL::IRDataTypeToString(v18, v21);
    if ((v22 & 0x80u) == 0)
      v7 = v21;
    else
      v7 = (void **)v21[0];
    if ((v22 & 0x80u) == 0)
      v8 = v22;
    else
      v8 = (std::string::size_type)v21[1];
    v9 = std::string::append(&v24, (const std::string::value_type *)v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v25, ". Expected output dtype is ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    MIL::IRDataTypeToString(v3, __p);
    if ((v20 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v14 = v20;
    else
      v14 = (std::string::size_type)__p[1];
    v15 = std::string::append(&v26, (const std::string::value_type *)v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((char)v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if ((char)v22 < 0)
      operator delete(v21[0]);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v27);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E06F2584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 41) < 0)
    operator delete(*(void **)(v40 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertSameRank(MIL::IRTensorValueType *a1, MIL::IRTensorValueType *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type size;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::runtime_error *exception;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;

  v8 = MIL::IRTensorValueType::Rank(a1);
  result = MIL::IRTensorValueType::Rank(a2);
  if (v8 != result)
  {
    std::operator+<char>();
    v10 = std::string::append(&v45, ": Rank of ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = *(char *)(a3 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)a3;
    else
      v13 = *(const std::string::value_type **)a3;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a3 + 23);
    else
      v14 = *(_QWORD *)(a3 + 8);
    v15 = std::string::append(&v46, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v47, " (");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v44, v19);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v44;
    else
      v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      size = v44.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v48, (const std::string::value_type *)v20, size);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v49, ") ");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v50, " is not equal to rank of ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = *(char *)(a4 + 23);
    if (v28 >= 0)
      v29 = (const std::string::value_type *)a4;
    else
      v29 = *(const std::string::value_type **)a4;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(a4 + 23);
    else
      v30 = *(_QWORD *)(a4 + 8);
    v31 = std::string::append(&v51, v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v52, " (");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = MIL::IRTensorValueType::Rank(a2);
    std::to_string(&v43, v35);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v43;
    else
      v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      v37 = v43.__r_.__value_.__l.__size_;
    v38 = std::string::append(&v53, (const std::string::value_type *)v36, v37);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = std::string::append(&v54, ") ");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v55);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1E06F29A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 73) < 0)
    operator delete(*(void **)(v61 - 96));
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::AssertConstantAndSameShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  const MIL::IRDimension **v49;
  const MIL::IRDimension **v50;
  uint64_t v51;
  const MIL::IRDimension **v52;
  const MIL::IRDimension **v53;
  uint64_t v54;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v53 = 0;
  v54 = 0;
  v52 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v52, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 3);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v49, *(const void **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3);
  if ((MIL::Operators::Common::Shared::HasSameConstantShape((uint64_t *)&v52, &v49) & 1) == 0)
  {
    std::operator+<char>();
    v9 = std::string::append(&v40, ", shape of ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = *(char *)(a3 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a3;
    else
      v12 = *(const std::string::value_type **)a3;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a3 + 23);
    else
      v13 = *(_QWORD *)(a3 + 8);
    v14 = std::string::append(&v41, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v42, ": ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v39 & 0x80u) == 0)
      v18 = v38;
    else
      v18 = (void **)v38[0];
    if ((v39 & 0x80u) == 0)
      v19 = v39;
    else
      v19 = (std::string::size_type)v38[1];
    v20 = std::string::append(&v43, (const std::string::value_type *)v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v44, " is not equal to shape of ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = *(char *)(a4 + 23);
    if (v24 >= 0)
      v25 = (const std::string::value_type *)a4;
    else
      v25 = *(const std::string::value_type **)a4;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a4 + 23);
    else
      v26 = *(_QWORD *)(a4 + 8);
    v27 = std::string::append(&v45, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v46, ": ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if ((v37 & 0x80u) == 0)
      v31 = __p;
    else
      v31 = (void **)__p[0];
    if ((v37 & 0x80u) == 0)
      v32 = v37;
    else
      v32 = (std::string::size_type)__p[1];
    v33 = std::string::append(&v47, (const std::string::value_type *)v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if ((char)v37 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if ((char)v39 < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v48);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
}

void sub_1E06F2E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;
  void *v63;
  void *v64;

  if (*(char *)(v61 - 105) < 0)
    operator delete(*(void **)(v61 - 128));
  v63 = *(void **)(v61 - 96);
  if (v63)
  {
    *(_QWORD *)(v61 - 88) = v63;
    operator delete(v63);
  }
  v64 = *(void **)(v61 - 72);
  if (v64)
  {
    *(_QWORD *)(v61 - 64) = v64;
    operator delete(v64);
  }
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ShapeToString(const MIL::IRDimension ***a1@<X0>, uint64_t *a2@<X8>)
{
  MIL::Text::SerializerOptions *v4;
  MIL::Text::BasicSerializer *v5;
  MIL::Text::SerializerOptions *v6;
  _BYTE v7[392];

  MIL::Text::SerializerOptions::Make((uint64_t *)&v6);
  MIL::Text::BasicSerializer::BasicSerializer((MIL::Text::BasicSerializer *)v7, v6);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(MIL::Text::SerializerOptions *))(*(_QWORD *)v4 + 8))(v4);
  v5 = MIL::Text::BasicSerializer::TensorShape((MIL::Text::BasicSerializer *)v7, a1);
  MIL::Text::BasicSerializer::GetOutput(a2, v5);
  MIL::Text::BasicSerializer::~BasicSerializer((MIL::Text::BasicSerializer *)v7);
}

void sub_1E06F2FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ConstExprs::AssertExpectedOutputShape(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  const MIL::IRDimension **v27;
  const MIL::IRDimension **v28;
  uint64_t v29;
  const MIL::IRDimension **v30;
  const MIL::IRDimension **v31;
  uint64_t v32;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v31 = 0;
  v32 = 0;
  v30 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v30, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v27, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
  if ((MIL::Operators::Common::Shared::HasSameConstantShape((uint64_t *)&v30, &v27) & 1) == 0)
  {
    std::operator+<char>();
    v5 = std::string::append(&v22, ", cannot output tensor value of shape ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if ((v21 & 0x80u) == 0)
      v7 = v20;
    else
      v7 = (void **)v20[0];
    if ((v21 & 0x80u) == 0)
      v8 = v21;
    else
      v8 = (std::string::size_type)v20[1];
    v9 = std::string::append(&v23, (const std::string::value_type *)v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v24, ". Expected output shape is ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v19 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v19 & 0x80u) == 0)
      v14 = v19;
    else
      v14 = (std::string::size_type)__p[1];
    v15 = std::string::append(&v25, (const std::string::value_type *)v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((char)v19 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if ((char)v21 < 0)
      operator delete(v20[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v26);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_1E06F3268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void *v49;
  void *v50;

  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  v49 = *(void **)(v47 - 80);
  if (v49)
  {
    *(_QWORD *)(v47 - 72) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v47 - 56);
  if (v50)
  {
    *(_QWORD *)(v47 - 48) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertIsScalarOrVector(MIL::IRTensorValueType *a1, uint64_t a2)
{
  uint64_t result;
  std::string *v5;
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  std::string *p_p;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::runtime_error *exception;
  std::string __p;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;

  result = MIL::IRTensorValueType::Rank(a1);
  if (result)
  {
    result = MIL::IRTensorValueType::Rank(a1);
    if (result != 1)
    {
      std::operator+<char>();
      v5 = std::string::append(&v21, ", parameter ");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      v7 = *(char *)(a2 + 23);
      if (v7 >= 0)
        v8 = (const std::string::value_type *)a2;
      else
        v8 = *(const std::string::value_type **)a2;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(a2 + 23);
      else
        v9 = *(_QWORD *)(a2 + 8);
      v10 = std::string::append(&v22, v8, v9);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v23, " should have rank equals to either 0 or 1 but provided rank is ");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = MIL::IRTensorValueType::Rank(a1);
      std::to_string(&__p, v14);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v17 = std::string::append(&v24, (const std::string::value_type *)p_p, size);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v25);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return result;
}

void sub_1E06F3508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 41) < 0)
    operator delete(*(void **)(v33 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::Shared::ConstExprs::AssertVectorSizeSameAsDimension(MIL::IRTensorValueType *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::runtime_error *exception;
  unint64_t __val;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;

  result = MIL::IRTensorValueType::Rank(a1);
  if (result == 1)
  {
    result = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 16))(a1);
    if (result != a2)
    {
      __val = result;
      std::operator+<char>();
      v9 = std::string::append(&v41, ", number of elements in ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = *(char *)(a3 + 23);
      if (v11 >= 0)
        v12 = (const std::string::value_type *)a3;
      else
        v12 = *(const std::string::value_type **)a3;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a3 + 23);
      else
        v13 = *(_QWORD *)(a3 + 8);
      v14 = std::string::append(&v42, v12, v13);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v43, "(=");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, __val);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v40;
      else
        v18 = (std::string *)v40.__r_.__value_.__r.__words[0];
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      else
        size = v40.__r_.__value_.__l.__size_;
      v20 = std::string::append(&v44, (const std::string::value_type *)v18, size);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = std::string::append(&v45, ") should be same as the dimension size of ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = *(char *)(a4 + 23);
      if (v24 >= 0)
        v25 = (const std::string::value_type *)a4;
      else
        v25 = *(const std::string::value_type **)a4;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(a4 + 23);
      else
        v26 = *(_QWORD *)(a4 + 8);
      v27 = std::string::append(&v46, v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      v29 = std::string::append(&v47, "(=");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, a2);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v39;
      else
        v31 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v32 = v39.__r_.__value_.__l.__size_;
      v33 = std::string::append(&v48, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v49, ")");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &v50);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return result;
}

void sub_1E06F38D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::ValidateConvolution(MIL::Operators::Common::Shared *this@<X0>, const MIL::IROperation *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v9;
  uint64_t v10;
  MIL::IRValueType *v11;
  MIL::IRTensorValueType *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ParameterValue;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  MIL::IRDimension **v28;
  MIL::IRDimension **v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  std::vector<unsigned int>::pointer end;
  unsigned int *v34;
  std::vector<unsigned int>::pointer begin;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  unsigned int *v41;
  unsigned int v42;
  int v43;
  const void *v44;
  int v45;
  signed int v46;
  signed int v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  uint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  size_t v87;
  void **v88;
  const void *p_p;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  const void *v99;
  const void *v100;
  int v101;
  _BOOL4 v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  void *v106[2];
  char v107;
  _QWORD v108[2];
  void *v109[2];
  char v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  std::string v113[2];
  int v114;
  void *v115[2];
  char v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  std::vector<unsigned int> v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  MIL::Operators::Common::Shared *v128;
  std::__shared_weak_count *v129;
  void *__p;
  uint64_t v131;
  unsigned __int8 v132;
  int v133;
  void *v134;
  char v135;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  char v139;

  v5 = (int)a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if ((char)v132 < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  if ((char)v132 < 0)
    operator delete(__p);
  v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v12 + 96))(v12);
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 104))(v9)
    && ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v12 + 104))(v12) & 1) != 0)
  {
    v14 = MIL::IRTensorValueType::Rank(v9);
    if (v14 == MIL::IRTensorValueType::Rank(v12))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
      ParameterValue = MIL::IROperation::TryGetParameterValue(this, (uint64_t)&__p, 0);
      if ((char)v132 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
      if (MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p))
      {
        std::string::basic_string[abi:ne180100]<0>(v113, "bias");
        v102 = MIL::IROperation::TryGetParameterValue(this, (uint64_t)v113, 0) == 0;
        if (SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113[0].__r_.__value_.__l.__data_);
      }
      else
      {
        v102 = 0;
      }
      if ((char)v132 < 0)
        operator delete(__p);
      v104 = ParameterValue;
      v103 = a3;
      v105 = a4;
      memset(&v119, 0, sizeof(v119));
      std::vector<int>::reserve(&v119, 5uLL);
      v29 = *(MIL::IRDimension ***)v13;
      v28 = *(MIL::IRDimension ***)(v13 + 8);
      if (*(MIL::IRDimension ***)v13 != v28)
      {
        while ((*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)*v29 + 16))(*v29))
        {
          v30 = MIL::IRDimension::AsConstant(*v29);
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30);
          v32 = v31;
          end = v119.__end_;
          if (v119.__end_ >= v119.__end_cap_.__value_)
          {
            begin = v119.__begin_;
            v36 = v119.__end_ - v119.__begin_;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v38 = (char *)v119.__end_cap_.__value_ - (char *)v119.__begin_;
            if (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 1 > v37)
              v37 = v38 >> 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v119.__end_cap_, v39);
              begin = v119.__begin_;
              end = v119.__end_;
            }
            else
            {
              v40 = 0;
            }
            v41 = (unsigned int *)&v40[4 * v36];
            *v41 = v32;
            v34 = v41 + 1;
            while (end != begin)
            {
              v42 = *--end;
              *--v41 = v42;
            }
            v119.__begin_ = v41;
            v119.__end_ = v34;
            v119.__end_cap_.__value_ = (unsigned int *)&v40[4 * v39];
            if (begin)
              operator delete(begin);
          }
          else
          {
            *v119.__end_ = v31;
            v34 = end + 1;
          }
          v119.__end_ = v34;
          if (++v29 == v28)
            goto LABEL_54;
        }
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v57 = (std::__shared_weak_count *)LocationPtr[1];
        v117 = *LocationPtr;
        v118 = v57;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldxr(p_shared_owners);
          while (__stxr(v59 + 1, p_shared_owners));
        }
        std::string::basic_string[abi:ne180100]<0>(v115, "Unexpected non-constant dimension in weights shape");
        MIL::ValidationResult::ValidationResult(v105, &v117, 315, v115);
        if (v116 < 0)
          operator delete(v115[0]);
        v60 = v118;
        if (v118)
        {
          v61 = (unint64_t *)&v118->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        goto LABEL_179;
      }
LABEL_54:
      std::string::basic_string[abi:ne180100]<0>(&__p, "groups");
      v43 = v5;
      if (MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v137, "groups");
        v44 = (const void *)MIL::IROperation::GetParameterValue(this);
        v45 = MIL::IRValue::GetScalar<int>(v44);
        if (v139 < 0)
          operator delete(v137);
      }
      else
      {
        v45 = 1;
      }
      if ((char)v132 < 0)
        operator delete(__p);
      if (v5)
      {
        v46 = *v119.__begin_;
        v47 = v119.__begin_[1] * v45;
      }
      else
      {
        v47 = *v119.__begin_;
        v46 = v119.__begin_[1] * v45;
      }
      if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v10 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v10 + 8))
        && (v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v10 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v10 + 8)),
            v46 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48)))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        if (v43)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"KernelChannels(", 15);
          v68 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)") != InputChannels(", 19);
        }
        else
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"KernelChannels (", 16);
          v69 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)") != InputChannels (", 20);
          v70 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)") / Group (", 11);
        }
        v71 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)")", 1);
        v72 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v73 = v72[1];
        v128 = (MIL::Operators::Common::Shared *)*v72;
        v129 = (std::__shared_weak_count *)v73;
        if (v73)
        {
          v74 = (unint64_t *)(v73 + 8);
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        std::stringbuf::str();
        MIL::ValidationResult::ValidationResult(v113, &v128, 315, &v137);
        if (v139 < 0)
          operator delete(v137);
        v76 = v129;
        if (v129)
        {
          v77 = (unint64_t *)&v129->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        __p = (void *)*MEMORY[0x1E0DE4F60];
        *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
        v131 = MEMORY[0x1E0DE4FB8] + 16;
        if (v135 < 0)
          operator delete(v134);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1E0C022F8](&v136);
      }
      else if (v46 && v47)
      {
        if (!(v47 % v45) && !(v46 % v45))
        {
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v113);
          goto LABEL_114;
        }
        v49 = MIL::IRObject::GetLocationPtr(this);
        v50 = *(std::__shared_weak_count **)(v49 + 8);
        v137 = *(void **)v49;
        v138 = v50;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Both the number of input and output channels must be divisble by # of groups");
        MIL::ValidationResult::ValidationResult(v113, &v137, 315, &__p);
        if ((char)v132 < 0)
          operator delete(__p);
        v53 = v138;
        if (v138)
        {
          v54 = (unint64_t *)&v138->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          goto LABEL_96;
        }
      }
      else
      {
        v63 = MIL::IRObject::GetLocationPtr(this);
        v64 = *(std::__shared_weak_count **)(v63 + 8);
        v137 = *(void **)v63;
        v138 = v64;
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "Could not infer number of input/output channels");
        MIL::ValidationResult::ValidationResult(v113, &v137, 315, &__p);
        if ((char)v132 < 0)
          operator delete(__p);
        v53 = v138;
        if (v138)
        {
          v67 = (unint64_t *)&v138->__shared_owners_;
          do
            v55 = __ldaxr(v67);
          while (__stlxr(v55 - 1, v67));
LABEL_96:
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
LABEL_114:
      if (((*(uint64_t (**)(std::string *))(v113[0].__r_.__value_.__r.__words[0] + 16))(v113) & 1) == 0)
      {
        MIL::MILResult::MILResult((std::string *)v105, (uint64_t)v113);
        *(_QWORD *)v105 = &off_1EA99F170;
        *(_DWORD *)(v105 + 48) = v114;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v113);
        goto LABEL_179;
      }
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v113);
      v79 = MIL::IRTensorValueType::Rank(v9);
      v80 = v79 - 2;
      if (v79 == 5)
        v81 = 1;
      else
        v81 = v43 & ~v103;
      if (!v104 && v81)
      {
        if (v43)
          v82 = "Deconvolution ";
        else
          v82 = "3D Convolution";
        std::string::basic_string[abi:ne180100]<0>(&__p, v82);
        v83 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v84 = (std::__shared_weak_count *)v83[1];
        v111 = *v83;
        v112 = v84;
        if (v84)
        {
          v85 = (unint64_t *)&v84->__shared_owners_;
          do
            v86 = __ldxr(v85);
          while (__stxr(v86 + 1, v85));
        }
        if ((v132 & 0x80u) == 0)
          v87 = v132;
        else
          v87 = v131;
        std::string::basic_string[abi:ne180100]((uint64_t)v109, v87 + 33);
        if (v110 >= 0)
          v88 = v109;
        else
          v88 = (void **)v109[0];
        if (v87)
        {
          if ((v132 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          memmove(v88, p_p, v87);
        }
        strcpy((char *)v88 + v87, " does not support dynamic weights");
        MIL::ValidationResult::ValidationResult(v105, &v111, 315, v109);
        if (v110 < 0)
          operator delete(v109[0]);
        v90 = v112;
        if (v112)
        {
          v91 = (unint64_t *)&v112->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
LABEL_155:
        if (((char)v132 & 0x80000000) == 0)
          goto LABEL_179;
        v98 = __p;
        goto LABEL_178;
      }
      if ((v102 & v81) == 1)
      {
        if (v43)
          v93 = "Deconvolution ";
        else
          v93 = "3D Convolution";
        std::string::basic_string[abi:ne180100]<0>(&__p, v93);
        v94 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
        v95 = v94[1];
        v108[0] = *v94;
        v108[1] = v95;
        if (v95)
        {
          v96 = (unint64_t *)(v95 + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" does not support dynamic bias", (const void **)&__p, v106);
        MIL::ValidationResult::ValidationResult(v105, v108, 315, v106);
        if (v107 < 0)
          operator delete(v106[0]);
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v108);
        goto LABEL_155;
      }
      v128 = this;
      std::string::basic_string[abi:ne180100]<0>(&__p, "pad_type");
      v99 = (const void *)MIL::IROperation::GetParameterValue(this);
      MIL::IRValue::GetScalar<std::string>(v99, v113);
      if ((char)v132 < 0)
        operator delete(__p);
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v113, "custom"))
      {
        std::string::basic_string[abi:ne180100]<0>(&v137, "pad");
        MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v128, (const void **)&v137, 2 * v80, (MIL::ValidationResult *)&__p);
        if (v139 < 0)
          operator delete(v137);
        if (((*((uint64_t (**)(void **))__p + 2))(&__p) & 1) == 0)
          goto LABEL_175;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&v137, "dilations");
      MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v128, (const void **)&v137, v80, (MIL::ValidationResult *)&__p);
      if (v139 < 0)
        operator delete(v137);
      if (((*((uint64_t (**)(void **))__p + 2))(&__p) & 1) != 0)
      {
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
        std::string::basic_string[abi:ne180100]<0>(&v137, "strides");
        MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v128, (const void **)&v137, v80, (MIL::ValidationResult *)&__p);
        if (v139 < 0)
          operator delete(v137);
        if (((*((uint64_t (**)(void **))__p + 2))(&__p) & 1) != 0)
        {
          MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
          if ((v43 & 1) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "groups");
            if (MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)&__p))
            {
              std::string::basic_string[abi:ne180100]<0>(&v137, "groups");
              v100 = (const void *)MIL::IROperation::GetParameterValue(this);
              v101 = MIL::IRValue::GetScalar<int>(v100);
              if (v139 < 0)
                operator delete(v137);
            }
            else
            {
              v101 = 1;
            }
            if ((char)v132 < 0)
              operator delete(__p);
            std::string::basic_string[abi:ne180100]<0>(&v137, "bias");
            MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v128, (const void **)&v137, *((int *)v119.__begin_ + 1) * (uint64_t)v101, (MIL::ValidationResult *)&__p);
            if (v139 < 0)
              operator delete(v137);
            if (((*((uint64_t (**)(void **))__p + 2))(&__p) & 1) != 0)
            {
              MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
              std::string::basic_string[abi:ne180100]<0>(&v137, "output_shape");
              MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v128, (const void **)&v137, v79, (MIL::ValidationResult *)&__p);
              if (v139 < 0)
                operator delete(v137);
              if (((*((uint64_t (**)(void **))__p + 2))(&__p) & 1) != 0)
              {
LABEL_195:
                MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
                MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v105);
                goto LABEL_176;
              }
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v137, "bias");
            MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()((uint64_t *)&v128, (const void **)&v137, (int)*v119.__begin_, (MIL::ValidationResult *)&__p);
            if (v139 < 0)
              operator delete(v137);
            if (((*((uint64_t (**)(void **))__p + 2))(&__p) & 1) != 0)
              goto LABEL_195;
          }
        }
      }
LABEL_175:
      MIL::MILResult::MILResult((std::string *)v105, (uint64_t)&__p);
      *(_QWORD *)v105 = &off_1EA99F170;
      *(_DWORD *)(v105 + 48) = v133;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
LABEL_176:
      if ((SHIBYTE(v113[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_179;
      v98 = (void *)v113[0].__r_.__value_.__r.__words[0];
LABEL_178:
      operator delete(v98);
LABEL_179:
      if (v119.__begin_)
      {
        v119.__end_ = v119.__begin_;
        operator delete(v119.__begin_);
      }
      return;
    }
    v23 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v24 = (std::__shared_weak_count *)v23[1];
    v122 = *v23;
    v123 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    std::string::basic_string[abi:ne180100]<0>(v120, "Weight must be the a compatible dimensionality for x");
    MIL::ValidationResult::ValidationResult(a4, &v122, 315, v120);
    if (v121 < 0)
      operator delete(v120[0]);
    v20 = v123;
    if (v123)
    {
      v27 = (unint64_t *)&v123->__shared_owners_;
      do
        v22 = __ldaxr(v27);
      while (__stlxr(v22 - 1, v27));
      goto LABEL_21;
    }
  }
  else
  {
    v16 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v17 = (std::__shared_weak_count *)v16[1];
    v126 = *v16;
    v127 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::string::basic_string[abi:ne180100]<0>(v124, "Variadic input/weights not supported");
    MIL::ValidationResult::ValidationResult(a4, &v126, 315, v124);
    if (v125 < 0)
      operator delete(v124[0]);
    v20 = v127;
    if (v127)
    {
      v21 = (unint64_t *)&v127->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
LABEL_21:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_1E06F47F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  if (a28 < 0)
    operator delete(__p);
  if (a38)
    operator delete(a38);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValidateConvolution(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()(uint64_t *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  const void **v5;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  __int128 v18;
  int v19;
  unsigned int v20;
  int v21;
  const std::string::value_type *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::value_type *v26;
  std::string::size_type size;
  int v28;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string __p;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string v39;
  std::string v40;
  std::string v41;
  _DWORD v42[2];
  void *v43[2];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  v5 = a2;
  if (!MIL::IROperation::IsParameterSet(*a1, a2))
    goto LABEL_4;
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType((MIL::IRObject *)*a1);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (MIL::IRTensorValueType::Rank(v9) == 1)
  {
    if ((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 16))(v9) == a3)
    {
LABEL_4:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
    std::operator+<char>();
    v17 = std::string::append(&v39, " must be ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = *((char *)v5 + 23);
    if (v19 < 0)
    {
      if (v5[1] != (const void *)3)
      {
LABEL_22:
        v22 = "";
LABEL_29:
        v23 = std::string::append(&v40, v22);
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v41.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v41, "# of spatial input dims");
        v26 = (std::string::value_type *)v25->__r_.__value_.__r.__words[0];
        size = v25->__r_.__value_.__l.__size_;
        v42[0] = v25->__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v42 + 3) = *(_DWORD *)((char *)&v25->__r_.__value_.__r.__words[2] + 3);
        v28 = SHIBYTE(v25->__r_.__value_.__r.__words[2]);
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)*a1);
        v30 = (std::__shared_weak_count *)LocationPtr[1];
        v37 = *LocationPtr;
        v38 = v30;
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(p_shared_owners);
          while (__stxr(v32 + 1, p_shared_owners));
        }
        if (v28 < 0)
        {
          std::string::__init_copy_ctor_external(&__p, v26, size);
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
          __p.__r_.__value_.__l.__size_ = size;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = v42[0];
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v42 + 3);
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v28;
        }
        MIL::ValidationResult::ValidationResult(a4, &v37, 315, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v33 = v38;
        if (v38)
        {
          v34 = (unint64_t *)&v38->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (v28 < 0)
          operator delete(v26);
        return;
      }
      v5 = (const void **)*v5;
    }
    else if (v19 != 3)
    {
      goto LABEL_22;
    }
    v20 = bswap32(*(unsigned __int16 *)v5) >> 16;
    if (v20 == 28769)
    {
      v21 = *((unsigned __int8 *)v5 + 2) - 100;
    }
    else if (v20 < 0x7061)
    {
      v21 = -1;
    }
    else
    {
      v21 = 1;
    }
    if (v21)
      v22 = "";
    else
      v22 = "2 * ";
    goto LABEL_29;
  }
  v10 = (uint64_t *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)*a1);
  v11 = (std::__shared_weak_count *)v10[1];
  v45 = *v10;
  v46 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  std::string::basic_string[abi:ne180100]<0>(v43, "Input dialations should be rank 1");
  MIL::ValidationResult::ValidationResult(a4, &v45, 315, v43);
  if (v44 < 0)
    operator delete(v43[0]);
  v14 = v46;
  if (v46)
  {
    v15 = (unint64_t *)&v46->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1E06F4DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v36 < 0)
    operator delete(v35);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValidateBaseGatherWithAxis(MIL::Operators::Common::Shared *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  BOOL IsParameterSet;
  BOOL v6;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v8;
  const void *ParameterValue;
  MIL::Validation *v10;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  void *__p[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
  v6 = IsParameterSet;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_3;
LABEL_16:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  if (!IsParameterSet)
    goto LABEL_16;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v8 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v19 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v10 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v19 < 0)
    operator delete(__p[0]);
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v12 = (std::__shared_weak_count *)LocationPtr[1];
  v17[0] = *LocationPtr;
  v17[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1E06F4FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::`anonymous namespace'::ValidateBaseGatherWithAxisInputs(MIL::IRTensorValueType *a1@<X0>, MIL::Validation *a2@<X1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v8 = MIL::IRTensorValueType::Rank(a1);
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 104))(a1)
    && !MIL::Validation::IsAxisValidForRank(a2, v8))
  {
    v9 = (std::__shared_weak_count *)a3[1];
    v17 = *a3;
    v18 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "'axis' must be within range (-x_rank - 1, x_rank) (exclusive)");
    MIL::ValidationResult::ValidationResult(a4, &v17, 315, __p);
    if (v16 < 0)
      operator delete(__p[0]);
    v12 = v18;
    if (v18)
    {
      v13 = (unint64_t *)&v18->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    MIL::ValidationResult::ValidationResult(a4);
  }
}

void sub_1E06F5108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValueTypeInferenceGather(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  uint64_t *v10;
  MIL::IRValueType *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  MIL::IRValue *SingleValue;
  const void *v16;
  MIL::IRValue *v17;
  const void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t VariadicUnknownDimIndex;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  void (****v87)(MIL::MILContextImpl *__hidden);
  uint64_t *v88;
  uint64_t *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t i;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void *exception;
  void *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  int v120;
  uint64_t v121;
  void *__p;
  uint64_t *v123;
  char *v124;
  _QWORD v125[3];
  _QWORD v126[2];
  _BYTE v127[56];
  std::string v128[2];
  int v129;
  uint64_t v130[2];
  void *v131[2];
  char v132;
  int v133;

  std::string::basic_string[abi:ne180100]<0>(v131, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v131);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v132 < 0)
    operator delete(v131[0]);
  v120 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v10 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  std::string::basic_string[abi:ne180100]<0>(v131, "indices");
  v11 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v131);
  v12 = MIL::IRValueType::AsTensorType(v11);
  if (v132 < 0)
    operator delete(v131[0]);
  std::string::basic_string[abi:ne180100]<0>(v131, "batch_dims");
  v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v131);
  v14 = v13;
  if ((v132 & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_7;
LABEL_10:
    v121 = 0;
    goto LABEL_11;
  }
  operator delete(v131[0]);
  if (!v14)
    goto LABEL_10;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(v131, "batch_dims");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v131);
  v16 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v121 = MIL::IRValue::GetScalar<int>(v16);
  if (v132 < 0)
    operator delete(v131[0]);
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>(v131, "axis");
  v17 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v131);
  v18 = (const void *)MIL::IRValue::AsTensor(v17);
  v19 = MIL::IRValue::GetScalar<int>(v18);
  if (v132 < 0)
    operator delete(v131[0]);
  v20 = (std::__shared_weak_count *)a2[1];
  v130[0] = *a2;
  v130[1] = (uint64_t)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v131))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v128, (uint64_t)v131);
    v128[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v129 = v133;
    MIL::ValidationError::ValidationError(exception, v128);
  }
  v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  if (!MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v10))
  {
    if ((v19 & 0x80000000) == 0)
    {
LABEL_51:
      v123 = 0;
      v124 = 0;
      __p = 0;
      std::vector<std::string const*>::reserve(&__p, ((v10[1] - *v10) >> 3) + ((v25[1] - *v25) >> 3) - 1);
      v119 = a2;
      v44 = (int)v19;
      if ((_DWORD)v19)
      {
        v45 = 0;
        v46 = (char *)v123;
        do
        {
          v47 = *v10;
          if (v46 >= v124)
          {
            v48 = (v46 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v49 = (v124 - (_BYTE *)__p) >> 2;
            if (v49 <= v48 + 1)
              v49 = v48 + 1;
            if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            if (v50)
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v50);
            else
              v51 = 0;
            v52 = &v51[8 * v48];
            *(_QWORD *)v52 = *(_QWORD *)(v47 + 8 * v45);
            v46 = v52 + 8;
            v54 = (char *)__p;
            v53 = (char *)v123;
            if (v123 != __p)
            {
              do
              {
                v55 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v52 - 1) = v55;
                v52 -= 8;
              }
              while (v53 != v54);
              v53 = (char *)__p;
            }
            __p = v52;
            v123 = (uint64_t *)v46;
            v124 = &v51[8 * v50];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_QWORD *)v46 = *(_QWORD *)(v47 + 8 * v45);
            v46 += 8;
          }
          v123 = (uint64_t *)v46;
          ++v45;
        }
        while (v45 != v44);
      }
      v56 = (int)v121;
      v57 = *v25;
      if ((int)v121 < (unint64_t)((v25[1] - *v25) >> 3))
      {
        v58 = (char *)v123;
        do
        {
          if (v58 >= v124)
          {
            v59 = (v58 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v59 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v60 = (v124 - (_BYTE *)__p) >> 2;
            if (v60 <= v59 + 1)
              v60 = v59 + 1;
            if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v60;
            if (v61)
              v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v61);
            else
              v62 = 0;
            v63 = &v62[8 * v59];
            *(_QWORD *)v63 = *(_QWORD *)(v57 + 8 * v56);
            v58 = v63 + 8;
            v65 = (char *)__p;
            v64 = (char *)v123;
            if (v123 != __p)
            {
              do
              {
                v66 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *((_QWORD *)v63 - 1) = v66;
                v63 -= 8;
              }
              while (v64 != v65);
              v64 = (char *)__p;
            }
            __p = v63;
            v123 = (uint64_t *)v58;
            v124 = &v62[8 * v61];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *(_QWORD *)v58 = *(_QWORD *)(v57 + 8 * v56);
            v58 += 8;
          }
          v123 = (uint64_t *)v58;
          ++v56;
          v57 = *v25;
        }
        while (v56 < (v25[1] - *v25) >> 3);
      }
      v67 = v44 + 1;
      v68 = *v10;
      if (v44 + 1 < (unint64_t)((v10[1] - *v10) >> 3))
      {
        v69 = (char *)v123;
        do
        {
          if (v69 >= v124)
          {
            v70 = (v69 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v70 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v71 = (v124 - (_BYTE *)__p) >> 2;
            if (v71 <= v70 + 1)
              v71 = v70 + 1;
            if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v72 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v72 = v71;
            if (v72)
              v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v72);
            else
              v73 = 0;
            v74 = &v73[8 * v70];
            *(_QWORD *)v74 = *(_QWORD *)(v68 + 8 * v67);
            v69 = v74 + 8;
            v76 = (char *)__p;
            v75 = (char *)v123;
            if (v123 != __p)
            {
              do
              {
                v77 = *((_QWORD *)v75 - 1);
                v75 -= 8;
                *((_QWORD *)v74 - 1) = v77;
                v74 -= 8;
              }
              while (v75 != v76);
              v75 = (char *)__p;
            }
            __p = v74;
            v123 = (uint64_t *)v69;
            v124 = &v73[8 * v72];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *(_QWORD *)v69 = *(_QWORD *)(v68 + 8 * v67);
            v69 += 8;
          }
          v123 = (uint64_t *)v69;
          ++v67;
          v68 = *v10;
        }
        while (v67 < (v10[1] - *v10) >> 3);
      }
      v78 = MIL::IRTensorValueType::MakeWithShape(*a1, v120, (uint64_t)&__p);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v79 = operator new(8uLL);
      goto LABEL_127;
    }
    v43 = v10[1] - *v10;
LABEL_49:
    LODWORD(v19) = v19 + ((unint64_t)v43 >> 3);
    goto LABEL_51;
  }
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v25))
  {
    v115 = __cxa_allocate_exception(0x48uLL);
    v116 = a2[1];
    v126[0] = *a2;
    v126[1] = v116;
    if (v116)
    {
      v117 = (unint64_t *)(v116 + 8);
      do
        v118 = __ldxr(v117);
      while (__stxr(v118 + 1, v117));
    }
    std::string::basic_string[abi:ne180100]<0>(v125, "'input_shape' and 'indices_shape' cannot both have variadic dimensions.");
    MIL::ValidationResult::ValidationResult(v127, v126, 315, v125);
    MIL::ValidationError::ValidationError(v115, v127);
  }
  VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex((uint64_t)v10);
  v27 = VariadicUnknownDimIndex;
  if ((v19 & 0x80000000) == 0 && VariadicUnknownDimIndex <= v19)
  {
    __p = 0;
    v123 = 0;
    v124 = 0;
    std::vector<std::string const*>::reserve(&__p, VariadicUnknownDimIndex + 1);
    if (v27)
    {
      v28 = 0;
      v29 = (char *)v123;
      do
      {
        v30 = *v10;
        if (v29 >= v124)
        {
          v31 = (v29 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v31 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v32 = (v124 - (_BYTE *)__p) >> 2;
          if (v32 <= v31 + 1)
            v32 = v31 + 1;
          if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          if (v33)
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v33);
          else
            v34 = 0;
          v35 = &v34[8 * v31];
          *(_QWORD *)v35 = *(_QWORD *)(v30 + 8 * v28);
          v29 = v35 + 8;
          v37 = (char *)__p;
          v36 = (char *)v123;
          if (v123 != __p)
          {
            do
            {
              v38 = *((_QWORD *)v36 - 1);
              v36 -= 8;
              *((_QWORD *)v35 - 1) = v38;
              v35 -= 8;
            }
            while (v36 != v37);
            v36 = (char *)__p;
          }
          __p = v35;
          v123 = (uint64_t *)v29;
          v124 = &v34[8 * v33];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *(_QWORD *)v29 = *(_QWORD *)(v30 + 8 * v28);
          v29 += 8;
        }
        v123 = (uint64_t *)v29;
        ++v28;
      }
      while (v28 != v27);
    }
    v39 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    v40 = v39;
    v41 = v123;
    if (v123 >= (uint64_t *)v124)
    {
      v80 = ((char *)v123 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v80 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v81 = (v124 - (_BYTE *)__p) >> 2;
      if (v81 <= v80 + 1)
        v81 = v80 + 1;
      if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v82 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v82 = v81;
      if (v82)
        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v82);
      else
        v83 = 0;
      v89 = (uint64_t *)&v83[8 * v80];
      v90 = &v83[8 * v82];
      *v89 = v40;
      v42 = v89 + 1;
      v92 = (char *)__p;
      v91 = (char *)v123;
      if (v123 != __p)
      {
        do
        {
          v93 = *((_QWORD *)v91 - 1);
          v91 -= 8;
          *--v89 = v93;
        }
        while (v91 != v92);
        v91 = (char *)__p;
      }
      __p = v89;
      v123 = v42;
      v124 = v90;
      if (v91)
        operator delete(v91);
    }
    else
    {
      *v123 = v39;
      v42 = v41 + 1;
    }
    v123 = v42;
    v78 = MIL::IRTensorValueType::MakeWithShape(*a1, v120, (uint64_t)&__p);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v79 = operator new(8uLL);
    goto LABEL_127;
  }
  if ((v19 & 0x80000000) == 0)
    goto LABEL_51;
  v43 = v10[1] - *v10;
  if ((v43 >> 3) - VariadicUnknownDimIndex > -(int)v19)
    goto LABEL_49;
  v123 = 0;
  v124 = 0;
  __p = 0;
  std::vector<std::string const*>::reserve(&__p, ((v10[1] - *v10) >> 3) - VariadicUnknownDimIndex);
  v84 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  v85 = v84;
  v86 = v123;
  if (v123 >= (uint64_t *)v124)
  {
    v95 = ((char *)v123 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v95 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v96 = (v124 - (_BYTE *)__p) >> 2;
    if (v96 <= v95 + 1)
      v96 = v95 + 1;
    if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v97 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v97 = v96;
    if (v97)
      v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v97);
    else
      v98 = 0;
    v99 = (uint64_t *)&v98[8 * v95];
    v100 = &v98[8 * v97];
    *v99 = v85;
    v88 = v99 + 1;
    v102 = (char *)__p;
    v101 = (char *)v123;
    if (v123 != __p)
    {
      do
      {
        v103 = *((_QWORD *)v101 - 1);
        v101 -= 8;
        *--v99 = v103;
      }
      while (v101 != v102);
      v101 = (char *)__p;
    }
    v87 = a1;
    __p = v99;
    v123 = v88;
    v124 = v100;
    if (v101)
      operator delete(v101);
  }
  else
  {
    v87 = a1;
    *v123 = v84;
    v88 = v86 + 1;
  }
  v123 = v88;
  v104 = v27 + 1;
  for (i = *v10; v104 < (v10[1] - *v10) >> 3; i = *v10)
  {
    if (v88 >= (uint64_t *)v124)
    {
      v106 = ((char *)v88 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v106 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v107 = (v124 - (_BYTE *)__p) >> 2;
      if (v107 <= v106 + 1)
        v107 = v106 + 1;
      if ((unint64_t)(v124 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v108 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v108 = v107;
      if (v108)
        v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v124, v108);
      else
        v109 = 0;
      v110 = &v109[8 * v106];
      *(_QWORD *)v110 = *(_QWORD *)(i + 8 * v104);
      v88 = (uint64_t *)(v110 + 8);
      v112 = (char *)__p;
      v111 = (char *)v123;
      if (v123 != __p)
      {
        do
        {
          v113 = *((_QWORD *)v111 - 1);
          v111 -= 8;
          *((_QWORD *)v110 - 1) = v113;
          v110 -= 8;
        }
        while (v111 != v112);
        v111 = (char *)__p;
      }
      __p = v110;
      v123 = v88;
      v124 = &v109[8 * v108];
      if (v111)
        operator delete(v111);
    }
    else
    {
      *v88++ = *(_QWORD *)(i + 8 * v104);
    }
    v123 = v88;
    ++v104;
  }
  v78 = MIL::IRTensorValueType::MakeWithShape(*v87, v120, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v79 = operator new(8uLL);
LABEL_127:
  *a4 = v79;
  *v79 = v78;
  v94 = v79 + 1;
  a4[1] = v94;
  a4[2] = v94;
  if (__p)
  {
    v123 = (uint64_t *)__p;
    operator delete(__p);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v131);
}

void sub_1E06F5BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (__p)
    operator delete(__p);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v31 - 144));
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::Shared::`anonymous namespace'::ValidateBatchDimMatch(uint64_t result, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *exception;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[3];
  _QWORD v20[2];
  _BYTE v21[56];

  if ((_DWORD)result)
  {
    v9 = 0;
    v10 = (int)result;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v9) + 32))(*(_QWORD *)(*a2 + 8 * v9));
      if ((result & 1) != 0)
        break;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 8 * v9) + 32))(*(_QWORD *)(*a3 + 8 * v9));
      if ((result & 1) != 0)
        break;
      if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v9) + 24))(*(_QWORD *)(*a2 + 8 * v9))
        || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 8 * v9) + 24))(*(_QWORD *)(*a3 + 8 * v9))) != 0)
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 8 * v9) + 24))(*(_QWORD *)(*a2 + 8 * v9));
        v11 = result ? a3 : a2;
        *(_QWORD *)(*a4 + 8 * v9) = *(_QWORD *)(*v11 + 8 * v9);
      }
      else if (*(_QWORD *)(*a2 + 8 * v9) != *(_QWORD *)(*a3 + 8 * v9))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        v13 = a5;
        v14 = exception;
        v16 = *v13;
        v15 = v13[1];
        v20[0] = v16;
        v20[1] = v15;
        if (v15)
        {
          v17 = (unint64_t *)(v15 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        std::string::basic_string[abi:ne180100]<0>(v19, "value and index shape must match for first n=batch_dims dimensions.");
        MIL::ValidationResult::ValidationResult(v21, v20, 315, v19);
        MIL::ValidationError::ValidationError(v14, v21);
      }
      ++v9;
    }
    while (v10 != v9);
  }
  return result;
}

void sub_1E06F5E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  void *v17;
  char v18;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if ((v18 & 1) != 0)
    __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValueTypeInferenceGatherAlongAxis(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  MIL::IRValue *SingleValue;
  const void *v11;
  MIL::Validation *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  MIL::IRValueType *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *exception;
  void *v26;
  void *v27;
  uint64_t v28;
  std::string v29[2];
  int v30;
  uint64_t v31[2];
  void *__p[2];
  char v33;
  int v34;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v33 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  v11 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v12 = (MIL::Validation *)MIL::IRValue::GetScalar<int>(v11);
  if (v33 < 0)
    operator delete(__p[0]);
  v13 = *a2;
  v14 = (std::__shared_weak_count *)a2[1];
  v31[0] = v13;
  v31[1] = (uint64_t)v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v29, (uint64_t)__p);
    v29[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v30 = v34;
    MIL::ValidationError::ValidationError(exception, v29);
  }
  v19 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  std::string::basic_string[abi:ne180100]<0>(&v26, "indices");
  v20 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v26);
  v21 = MIL::IRValueType::AsTensorType(v20);
  if (SHIBYTE(v28) < 0)
    operator delete(v26);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 96))(v21);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v26, *(const void **)v22, *(_QWORD *)(v22 + 8), (uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3);
  v23 = MIL::IRTensorValueType::MakeWithShape(*a1, v19, (uint64_t)&v26);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v24 = (uint64_t *)operator new(8uLL);
  *a4 = v24;
  *v24++ = v23;
  a4[1] = v24;
  a4[2] = v24;
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
}

void sub_1E06F6124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a16);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a25);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValueTypeInferenceGatherNd(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  MIL::IRValueType *v12;
  uint64_t v13;
  const void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  MIL::IRValue *SingleValue;
  const void *v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  char *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  void *exception;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD v64[3];
  __int128 v65;
  _QWORD v66[3];
  _QWORD v67[2];
  _BYTE v68[56];
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;

  std::string::basic_string[abi:ne180100]<0>(&v69, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v69);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v71) < 0)
    operator delete(v69);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  std::string::basic_string[abi:ne180100]<0>(&v69, "indices");
  v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v69);
  v13 = MIL::IRValueType::AsTensorType(v12);
  if (SHIBYTE(v71) < 0)
    operator delete(v69);
  v14 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
  std::string::basic_string[abi:ne180100]<0>(&v69, "batch_dims");
  v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v69);
  v16 = v15;
  if ((SHIBYTE(v71) & 0x80000000) == 0)
  {
    if (v15)
      goto LABEL_7;
LABEL_10:
    v19 = 0;
    goto LABEL_11;
  }
  operator delete(v69);
  if (!v16)
    goto LABEL_10;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&v69, "batch_dims");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v69);
  v18 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v19 = MIL::IRValue::GetScalar<int>(v18);
  if (SHIBYTE(v71) < 0)
    operator delete(v69);
LABEL_11:
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v11)
    && MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v14))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v57 = a2[1];
    v67[0] = *a2;
    v67[1] = v57;
    if (v57)
    {
      v58 = (unint64_t *)(v57 + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "'input_shape' and 'indices_shape' cannot both have variadic dimensions.");
    MIL::ValidationResult::ValidationResult(v68, v67, 315, v66);
    MIL::ValidationError::ValidationError(exception, v68);
  }
  v20 = *v14;
  v21 = (uint64_t)v14[1] - 8;
  v22 = (v21 - (uint64_t)*v14) >> 3;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&v69, v20, v21, v22);
  v23 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v14[1] - 1) + 16))(*((_QWORD *)v14[1] - 1));
  if (!v23)
  {
    v31 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    v32 = v31;
    v33 = v70;
    if ((unint64_t)v70 >= v71)
    {
      v35 = v70 - v69;
      if ((unint64_t)(v35 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v36 = (uint64_t)(v71 - (_QWORD)v69) >> 2;
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      if (v71 - (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v71, v37);
      else
        v38 = 0;
      v43 = (uint64_t *)&v38[8 * v35];
      v44 = &v38[8 * v37];
      *v43 = v32;
      v34 = v43 + 1;
      v46 = v69;
      v45 = v70;
      if (v70 != v69)
      {
        do
        {
          v47 = *--v45;
          *--v43 = v47;
        }
        while (v45 != v46);
        v45 = v69;
      }
      v69 = v43;
      v70 = v34;
      v71 = (unint64_t)v44;
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v70 = v31;
      v34 = v33 + 1;
    }
    v70 = v34;
    goto LABEL_45;
  }
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
  if (!MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)v11)
    || v24 <= MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex((uint64_t)v11))
  {
    v29 = (char *)v11[1];
    if (v24 > (uint64_t)&v29[-*v11] >> 3)
    {
      v60 = __cxa_allocate_exception(0x48uLL);
      v61 = a2[1];
      *(_QWORD *)&v65 = *a2;
      *((_QWORD *)&v65 + 1) = v61;
      if (v61)
      {
        v62 = (unint64_t *)(v61 + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      std::string::basic_string[abi:ne180100]<0>(v64, "The last dimension of indices cannot be larger than the input shape size.");
      MIL::ValidationError::ValidationError((uint64_t)v60, &v65, (uint64_t)v64, 315);
    }
    v30 = (char *)(*v11 + 8 * v24 + 8 * (int)v19);
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&v69, (uint64_t)v70, v30, v29, (v29 - v30) >> 3);
LABEL_45:
    v48 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&v69);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v49 = operator new(8uLL);
    goto LABEL_46;
  }
  v25 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
  v26 = v25;
  v27 = v70;
  if ((unint64_t)v70 >= v71)
  {
    v39 = v70 - v69;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = (uint64_t)(v71 - (_QWORD)v69) >> 2;
    if (v40 <= v39 + 1)
      v40 = v39 + 1;
    if (v71 - (unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v40;
    if (v41)
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v71, v41);
    else
      v42 = 0;
    v51 = (uint64_t *)&v42[8 * v39];
    v52 = &v42[8 * v41];
    *v51 = v26;
    v28 = v51 + 1;
    v54 = v69;
    v53 = v70;
    if (v70 != v69)
    {
      do
      {
        v55 = *--v53;
        *--v51 = v55;
      }
      while (v53 != v54);
      v53 = v69;
    }
    v69 = v51;
    v70 = v28;
    v71 = (unint64_t)v52;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v70 = v25;
    v28 = v27 + 1;
  }
  v70 = v28;
  v48 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&v69);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v49 = operator new(8uLL);
LABEL_46:
  *a4 = v49;
  *v49 = v48;
  v50 = v49 + 1;
  a4[1] = v50;
  a4[2] = v50;
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_1E06F66DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;
  char v26;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a25);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  if ((v26 & 1) != 0)
    __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValidatePropertyVec(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v5;
  unint64_t v9;
  void *v10;
  void *v11;
  MIL::IRConstantPropertyImpl **v12;
  MIL::IRConstantProperty *v13;
  MIL::IRConstantProperty *v14;
  BOOL v16;
  BOOL v17;
  MIL::IRUnknownProperty *v18;
  int IsVariadic;
  MIL::IRUnknownProperty *v20;
  int ScalarDataType;
  uint64_t Int64ScalarValue;
  int UInt8ScalarValue;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  unint64_t *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  unint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  unint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  unint64_t *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  std::string::size_type size;
  std::string *v83;
  __int128 v84;
  unint64_t *v85;
  void *v86[2];
  std::string::size_type v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *v90[2];
  std::string::size_type v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void *__p[2];
  std::string::size_type v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  std::string::size_type v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void *v102[2];
  std::string::size_type v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::string v106;
  std::string v107;
  std::string v108;
  __int128 v109;
  std::string::size_type v110;
  uint64_t v111;
  std::__shared_weak_count *v112;

  v5 = *a1;
  if (a1[1] == *a1)
  {
LABEL_26:
    MIL::ValidationResult::ValidationResult(a4);
    return;
  }
  v9 = 0;
  while (1)
  {
    if (v9 >= (uint64_t)(a2[1] - *a2) >> 3)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v10 = *(void **)(v5 + 8 * v9);
    v11 = *(void **)(*a2 + 8 * v9);
    v12 = (MIL::IRConstantPropertyImpl **)MIL::IRProperty::TryAsConstant(v10);
    v13 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v11);
    v14 = v13;
    if (!v12 || v13 == 0)
      break;
    ScalarDataType = MIL::IRConstantProperty::GetScalarDataType(v12);
    if (ScalarDataType == 14)
    {
      UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue((MIL::IRConstantProperty *)v12);
      if (UInt8ScalarValue == MIL::IRConstantProperty::GetUInt8ScalarValue(v14))
        goto LABEL_25;
      v76 = (std::__shared_weak_count *)a3[1];
      v104 = *a3;
      v105 = v76;
      if (v76)
      {
        p_shared_owners = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldxr(p_shared_owners);
        while (__stxr(v78 + 1, p_shared_owners));
      }
      std::operator+<char>();
      v79 = std::string::append(&v107, " at index: ");
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v106, v9);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = &v106;
      else
        v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        size = v106.__r_.__value_.__l.__size_;
      v83 = std::string::append(&v108, (const std::string::value_type *)v81, size);
      v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v103 = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)v102 = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v104, 313, v102);
      if (SHIBYTE(v103) < 0)
        operator delete(v102[0]);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v33 = v105;
      if (!v105)
        return;
      v85 = (unint64_t *)&v105->__shared_owners_;
      do
        v35 = __ldaxr(v85);
      while (__stlxr(v35 - 1, v85));
LABEL_152:
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      return;
    }
    if (ScalarDataType != 12)
    {
      v56 = (std::__shared_weak_count *)a3[1];
      v100 = *a3;
      v101 = v56;
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      std::operator+<char>();
      v59 = std::string::append(&v107, " at index: ");
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v106, v9);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &v106;
      else
        v61 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v62 = v106.__r_.__value_.__l.__size_;
      v63 = std::string::append(&v108, (const std::string::value_type *)v61, v62);
      v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v99 = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)v98 = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v100, 313, v98);
      if (SHIBYTE(v99) < 0)
        operator delete(v98[0]);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v33 = v101;
      if (!v101)
        return;
      v65 = (unint64_t *)&v101->__shared_owners_;
      do
        v35 = __ldaxr(v65);
      while (__stlxr(v35 - 1, v65));
      goto LABEL_152;
    }
    Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue((MIL::IRConstantProperty *)v12);
    if (Int64ScalarValue != MIL::IRConstantProperty::GetInt64ScalarValue(v14))
    {
      v66 = (std::__shared_weak_count *)a3[1];
      v111 = *a3;
      v112 = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      std::operator+<char>();
      v69 = std::string::append(&v107, " at index: ");
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v106, v9);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v106;
      else
        v71 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v72 = v106.__r_.__value_.__l.__size_;
      v73 = std::string::append(&v108, (const std::string::value_type *)v71, v72);
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v110 = v73->__r_.__value_.__r.__words[2];
      v109 = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v111, 313, &v109);
      if (SHIBYTE(v110) < 0)
        operator delete((void *)v109);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v33 = v112;
      if (!v112)
        return;
      v75 = (unint64_t *)&v112->__shared_owners_;
      do
        v35 = __ldaxr(v75);
      while (__stlxr(v35 - 1, v75));
      goto LABEL_152;
    }
LABEL_25:
    ++v9;
    v5 = *a1;
    if (v9 >= (a1[1] - *a1) >> 3)
      goto LABEL_26;
  }
  if (v12)
    v16 = 1;
  else
    v16 = v13 == 0;
  if (v16)
  {
    if (v12)
      v17 = v13 == 0;
    else
      v17 = 0;
    if (v17)
    {
      v36 = (std::__shared_weak_count *)a3[1];
      v92 = *a3;
      v93 = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      std::operator+<char>();
      v39 = std::string::append(&v107, " must not be constant at index: ");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v106, v9);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v106;
      else
        v41 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v42 = v106.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v108, (const std::string::value_type *)v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v91 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)v90 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v92, 313, v90);
      if (SHIBYTE(v91) < 0)
        operator delete(v90[0]);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v33 = v93;
      if (v93)
      {
        v45 = (unint64_t *)&v93->__shared_owners_;
        do
          v35 = __ldaxr(v45);
        while (__stlxr(v35 - 1, v45));
        goto LABEL_152;
      }
      return;
    }
    v18 = (MIL::IRUnknownProperty *)MIL::IRProperty::AsUnknown((MIL::IRProperty *)v10);
    IsVariadic = MIL::IRUnknownProperty::IsVariadic(v18);
    v20 = (MIL::IRUnknownProperty *)MIL::IRProperty::AsUnknown((MIL::IRProperty *)v11);
    if (IsVariadic != MIL::IRUnknownProperty::IsVariadic(v20))
    {
      v46 = (std::__shared_weak_count *)a3[1];
      v88 = *a3;
      v89 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      std::operator+<char>();
      v49 = std::string::append(&v107, " in terms of being unknown variadic at index: ");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v108.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v106, v9);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v106;
      else
        v51 = (std::string *)v106.__r_.__value_.__r.__words[0];
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      else
        v52 = v106.__r_.__value_.__l.__size_;
      v53 = std::string::append(&v108, (const std::string::value_type *)v51, v52);
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v87 = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)v86 = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v88, 313, v86);
      if (SHIBYTE(v87) < 0)
        operator delete(v86[0]);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      v33 = v89;
      if (v89)
      {
        v55 = (unint64_t *)&v89->__shared_owners_;
        do
          v35 = __ldaxr(v55);
        while (__stlxr(v35 - 1, v55));
        goto LABEL_152;
      }
      return;
    }
    goto LABEL_25;
  }
  v24 = (std::__shared_weak_count *)a3[1];
  v96 = *a3;
  v97 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  std::operator+<char>();
  v27 = std::string::append(&v107, " must be constant at index: ");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v108.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v106, v9);
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v106;
  else
    v29 = (std::string *)v106.__r_.__value_.__r.__words[0];
  if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
  else
    v30 = v106.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v108, (const std::string::value_type *)v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v95 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a4, &v96, 313, __p);
  if (SHIBYTE(v95) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  v33 = v97;
  if (v97)
  {
    v34 = (unint64_t *)&v97->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    goto LABEL_152;
  }
}

void sub_1E06F7000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,char a52)
{
  uint64_t v52;

  if (a50 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 185) < 0)
    operator delete(*(void **)(v52 - 208));
  if (*(char *)(v52 - 137) < 0)
    operator delete(*(void **)(v52 - 160));
  if (*(char *)(v52 - 161) < 0)
    operator delete(*(void **)(v52 - 184));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  _Unwind_Resume(a1);
}

MIL::MILResult *MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors@<X0>(uint64_t a1@<X0>, MIL::IRTensorValueType *a2@<X1>, MIL::IRTensorValueType *a3@<X2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  MIL::MILResult *result;
  MIL::ValidationResult *v9;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint64_t v13;

  v12[1] = a4;
  v13 = a1;
  v12[0] = &v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "strides");
  MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::shared_ptr<MIL::Location const>)::$_0::operator()(a2, (uint64_t)v12, (const void **)__p, a5);
  if (v11 < 0)
    operator delete(__p[0]);
  result = (MIL::MILResult *)MIL::ValidationResult::IsGood(a5);
  if ((_DWORD)result)
  {
    MIL::ValidationResult::~ValidationResult(a5);
    std::string::basic_string[abi:ne180100]<0>(__p, "interleaveFactors");
    MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::shared_ptr<MIL::Location const>)::$_0::operator()(a3, (uint64_t)v12, (const void **)__p, a5);
    if (v11 < 0)
      operator delete(__p[0]);
    result = (MIL::MILResult *)MIL::ValidationResult::IsGood(a5);
    if ((_DWORD)result)
    {
      MIL::ValidationResult::~ValidationResult(a5);
      return MIL::ValidationResult::ValidationResult(v9);
    }
  }
  return result;
}

void sub_1E06F7364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MIL::ValidationResult *v14;

  MIL::ValidationResult::~ValidationResult(v14);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::shared_ptr<MIL::Location const>)::$_0::operator()(MIL::IRTensorValueType *this@<X1>, uint64_t a2@<X0>, const void **a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  size_t v16;
  void **v17;
  const void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string *v27;
  __int128 v28;
  unint64_t *v29;
  std::string v30;
  void *v31[2];
  std::string::size_type v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *__p[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  if (MIL::IRTensorValueType::Rank(this) == 1)
  {
    v8 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)this + 96))(this);
    if (*(_QWORD *)(v8 + 8) == *(_QWORD *)v8)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v9 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    if (v10 == MIL::IRTensorValueType::Rank(**(MIL::IRTensorValueType ***)a2))
    {
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
    v22 = *(uint64_t **)(a2 + 8);
    v24 = *v22;
    v23 = (std::__shared_weak_count *)v22[1];
    v33 = v24;
    v34 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    std::operator+<char>();
    v27 = std::string::append(&v30, " must match the rank of input.");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v32 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)v31 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a4, &v33, 304, v31);
    if (SHIBYTE(v32) < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v19 = v34;
    if (v34)
    {
      v29 = (unint64_t *)&v34->__shared_owners_;
      do
        v21 = __ldaxr(v29);
      while (__stlxr(v21 - 1, v29));
LABEL_34:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v11 = *(uint64_t **)(a2 + 8);
    v13 = *v11;
    v12 = (std::__shared_weak_count *)v11[1];
    v37 = v13;
    v38 = v12;
    if (v12)
    {
      v14 = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    if (*((char *)a3 + 23) >= 0)
      v16 = *((unsigned __int8 *)a3 + 23);
    else
      v16 = (size_t)a3[1];
    v17 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 18);
    if (v36 < 0)
      v17 = (void **)__p[0];
    if (v16)
    {
      if (*((char *)a3 + 23) >= 0)
        v18 = a3;
      else
        v18 = *a3;
      memmove(v17, v18, v16);
    }
    strcpy((char *)v17 + v16, " must have rank 1.");
    MIL::ValidationResult::ValidationResult(a4, &v37, 304, __p);
    if (v36 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (v38)
    {
      v20 = (unint64_t *)&v38->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      goto LABEL_34;
    }
  }
}

void sub_1E06F75F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidatePixelBufferToTensor(MIL::Operators::Common::Shared::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRMemoryLayoutValueType *v6;
  MIL::IRTypedArgument *v7;
  MIL::IRValueType *OutputType;
  MIL::IRTensorValueType *v9;
  uint64_t v10;
  void **v11;
  __int128 *v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  void **v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count_vtbl *v28;
  unint64_t *v29;
  unint64_t v30;
  void **v31;
  __int128 v32;
  MIL::IRTensorValueType *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65[2];
  void *v66[2];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void *v70[2];
  char v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *__p[2];
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  _QWORD v78[2];
  uint64_t v79;
  std::__shared_weak_count *v80;
  void **v81;
  __int128 *v82;
  char *v83;
  char *v84;
  _QWORD v85[5];
  uint64_t v86;
  std::__shared_weak_count *v87;
  __int128 **v88;
  std::__shared_weak_count *v89;
  void **v90[2];
  __int128 v91;
  uint64_t v92;
  _BYTE v93[32];
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v93, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(ParameterType);
  v7 = (MIL::IRTypedArgument *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v6);
  if ((v93[23] & 0x80000000) != 0)
    operator delete(*(void **)v93);
  std::string::basic_string[abi:ne180100]<0>(v93, "plane_index");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v93, 0, &v86);
  if ((v93[23] & 0x80000000) != 0)
    operator delete(*(void **)v93);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  std::string::basic_string[abi:ne180100]<0>(&v91, "input");
  MIL::IRTypedArgument::Make(v7, &v81);
  v90[0] = v81;
  if (v81)
  {
    v10 = operator new();
    v11 = v81;
    *(_QWORD *)v10 = &unk_1EA994910;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = v11;
  }
  else
  {
    v10 = 0;
  }
  v90[1] = (void **)v10;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v88 = &v82;
  LOBYTE(v89) = 0;
  v12 = (__int128 *)operator new(0x10uLL);
  v82 = v12;
  v84 = (char *)(v12 + 1);
  *(void ***)v12 = v90[0];
  *((_QWORD *)v12 + 1) = v10;
  if (v10)
  {
    v13 = (unint64_t *)(v10 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v83 = (char *)(v12 + 1);
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v93, &v91, (_QWORD **)&v82);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v85, v93, 1);
  v88 = (__int128 **)&v93[24];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  if ((v93[23] & 0x80000000) != 0)
    operator delete(*(void **)v93);
  v88 = &v82;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v90);
  v15 = v81;
  v81 = 0;
  if (v15)
    (*((void (**)(void **))*v15 + 1))(v15);
  if (SHIBYTE(v92) < 0)
    operator delete((void *)v91);
  if (v86)
  {
    v79 = v86;
    v80 = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    MIL::IRTypedArgument::Make(&v79, &v88);
    *(_QWORD *)&v91 = v88;
    if (v88)
    {
      v18 = (_QWORD *)operator new();
      v19 = (void **)v88;
      *v18 = &unk_1EA994910;
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = v19;
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)&v91 + 1) = v18;
    v88 = 0;
    std::string::basic_string[abi:ne180100]<0>(v93, "plane_index");
    v82 = (__int128 *)v93;
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v85, v93, (uint64_t)&std::piecewise_construct, &v82);
    std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>((uint64_t)(v20 + 40), (uint64_t *)&v91, &v92, 1uLL);
    if ((v93[23] & 0x80000000) != 0)
      operator delete(*(void **)v93);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v91);
    v21 = (void **)v88;
    v88 = 0;
    if (v21)
      (*((void (**)(void **))*v21 + 1))(v21);
    v22 = v80;
    if (v80)
    {
      v23 = (unint64_t *)&v80->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  MIL::MILContext::Make(v93);
  v88 = *(__int128 ***)v93;
  if (*(_QWORD *)v93)
  {
    v25 = (std::__shared_weak_count *)operator new();
    v26 = *(std::__shared_weak_count_vtbl **)v93;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F0A8;
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25[1].__vftable = v26;
  }
  else
  {
    v25 = 0;
  }
  v89 = v25;
  MIL::UnknownLocation::Make(&v81);
  v78[0] = v81;
  if (v81)
  {
    v27 = (std::__shared_weak_count *)operator new();
    v28 = (std::__shared_weak_count_vtbl *)v81;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v27->__shared_owners_ = 0;
    v27->__shared_weak_owners_ = 0;
    v27[1].__vftable = v28;
  }
  else
  {
    v27 = 0;
  }
  v78[1] = v27;
  v81 = 0;
  v82 = 0;
  memset(v93, 0, sizeof(v93));
  v94 = 1065353216;
  v83 = 0;
  v84 = 0;
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor((void (****)(MIL::MILContextImpl *__hidden))&v88, v78, v85, (uint64_t **)&v91);
  v90[0] = (void **)&v82;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v90);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v93);
  if (v27)
  {
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v31 = v81;
  v81 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = v91;
  if ((*(uint64_t (**)(MIL::Operators::Common::Shared::CustomValidators *))(*(_QWORD *)this + 192))(this) != (uint64_t)(*((_QWORD *)&v32 + 1) - v32) >> 3)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v45 = (std::__shared_weak_count *)LocationPtr[1];
    v76 = *LocationPtr;
    v77 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Mismatch in the number of outputs.");
    MIL::ValidationResult::ValidationResult(a2, &v76, 313, __p);
    if (v75 < 0)
      operator delete(__p[0]);
    v39 = v77;
    if (!v77)
      goto LABEL_84;
    v48 = (unint64_t *)&v77->__shared_owners_;
    do
      v43 = __ldaxr(v48);
    while (__stlxr(v43 - 1, v48));
LABEL_82:
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    goto LABEL_84;
  }
  v33 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v32);
  v34 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  if (v34 != (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v33 + 88))(v33))
  {
    v49 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v50 = (std::__shared_weak_count *)v49[1];
    v72 = *v49;
    v73 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    std::string::basic_string[abi:ne180100]<0>(v70, "Unexpected output data type.");
    MIL::ValidationResult::ValidationResult(a2, &v72, 313, v70);
    if (v71 < 0)
      operator delete(v70[0]);
    v39 = v73;
    if (!v73)
      goto LABEL_84;
    v53 = (unint64_t *)&v73->__shared_owners_;
    do
      v43 = __ldaxr(v53);
    while (__stlxr(v43 - 1, v53));
    goto LABEL_82;
  }
  v35 = MIL::IRTensorValueType::Rank(v9);
  if (v35 != MIL::IRTensorValueType::Rank(v33))
  {
    v54 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v55 = (std::__shared_weak_count *)v54[1];
    v68 = *v54;
    v69 = v55;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "Unexpected output rank.");
    MIL::ValidationResult::ValidationResult(a2, &v68, 313, v66);
    if (v67 < 0)
      operator delete(v66[0]);
    v39 = v69;
    if (!v69)
      goto LABEL_84;
    v58 = (unint64_t *)&v69->__shared_owners_;
    do
      v43 = __ldaxr(v58);
    while (__stlxr(v43 - 1, v58));
    goto LABEL_82;
  }
  v36 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v37 = (_QWORD *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v33 + 96))(v33);
  v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v39 = (std::__shared_weak_count *)v38[1];
  v65[0] = *v38;
  v65[1] = (uint64_t)v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  if (v39)
  {
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    goto LABEL_82;
  }
LABEL_84:
  if ((_QWORD)v91)
    operator delete((void *)v91);
  v59 = v89;
  if (v89)
  {
    v60 = (unint64_t *)&v89->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v85);
  v62 = v87;
  if (v87)
  {
    v63 = (unint64_t *)&v87->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_1E06F7DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;
  uint64_t v45;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  operator delete(v44);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v45 - 184);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a44);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v45 - 200);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferencePixelBufferToTensor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRMemoryLayoutValueType *v9;
  MIL::IRPixelBufferValueType *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  MIL::IRValue *SingleValue;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *Shape;
  int PixelFormatType;
  int v19;
  _QWORD *NumSlices;
  MIL::IRConstantProperty *v21;
  MIL::MILContext *Int64ScalarValue;
  void (***v23)(MIL::MILContextImpl *__hidden);
  int v24;
  MIL::IRDimension ***v25;
  int v26;
  int DTypeForPixelFormat;
  uint64_t v28;
  uint64_t *v29;
  void *exception;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  std::string *v43;
  __int128 v44;
  __int128 v45;
  std::string::size_type v46;
  _QWORD v47[2];
  _BYTE v48[56];
  _QWORD v49[3];
  _QWORD v50[2];
  _BYTE v51[56];
  _QWORD v52[2];
  std::string v53;
  _QWORD v54[3];
  _QWORD v55[2];
  _BYTE v56[56];

  if (!a3[3])
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v31 = a2[1];
    v55[0] = *a2;
    v55[1] = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(v54, "At least one input is expected.");
    MIL::ValidationResult::ValidationResult(v56, v55, 300, v54);
    MIL::ValidationError::ValidationError(exception, v56);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v53);
  v9 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(SingleValueType);
  v10 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v9);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v53, "plane_index");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v53);
  v12 = v11;
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_6;
LABEL_9:
    v16 = 0;
    goto LABEL_10;
  }
  operator delete(v53.__r_.__value_.__l.__data_);
  if (!v12)
    goto LABEL_9;
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(&v53, "plane_index");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v53);
  v14 = (void *)MIL::IRValue::AsTensor(SingleValue);
  v52[0] = MIL::IRTensorValue::GetDataView<unsigned char>(v14);
  v52[1] = v15;
  v16 = *(unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(v52, 0);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
LABEL_10:
  Shape = (_QWORD *)MIL::IRPixelBufferValueType::GetShape(v10);
  if (Shape[1] - *Shape != 16)
  {
    v34 = __cxa_allocate_exception(0x48uLL);
    v35 = a2[1];
    v50[0] = *a2;
    v50[1] = v35;
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    std::string::basic_string[abi:ne180100]<0>(v49, "Input rank must be 2.");
    MIL::ValidationResult::ValidationResult(v51, v50, 305, v49);
    MIL::ValidationError::ValidationError(v34, v51);
  }
  PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(v10);
  if (MIL::GetNumPlanesForFormat(PixelFormatType) <= v16)
  {
    v38 = __cxa_allocate_exception(0x48uLL);
    v39 = a2[1];
    v47[0] = *a2;
    v47[1] = v39;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = MIL::IRPixelBufferValueType::GetPixelFormatType(v10);
    MIL::IRPixelFormatTypeToString(v42, &v53);
    v43 = std::string::insert(&v53, 0, "Plane index exceeds the number of planes for the given format type: ");
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v46 = v43->__r_.__value_.__r.__words[2];
    v45 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(v48, v47, 305, &v45);
    MIL::ValidationError::ValidationError(v38, v48);
  }
  v19 = MIL::IRPixelBufferValueType::GetPixelFormatType(v10);
  if (MIL::SupportsMultiSlice(v19))
  {
    NumSlices = (_QWORD *)MIL::IRPixelBufferValueType::GetNumSlices((MIL::IRPixelBufferValueTypeImpl **)v10);
    v21 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(*NumSlices + 8 * v16));
    Int64ScalarValue = (MIL::MILContext *)MIL::IRConstantProperty::GetInt64ScalarValue(v21);
  }
  else
  {
    Int64ScalarValue = 0;
  }
  v23 = *a1;
  v24 = MIL::IRPixelBufferValueType::GetPixelFormatType(v10);
  v25 = (MIL::IRDimension ***)MIL::IRPixelBufferValueType::GetShape(v10);
  MIL::GetShapeForPlane(v23, Int64ScalarValue, v24, v25, v16, &v53);
  v26 = MIL::IRPixelBufferValueType::GetPixelFormatType(v10);
  DTypeForPixelFormat = MIL::GetDTypeForPixelFormat(v26);
  v28 = MIL::IRTensorValueType::MakeWithShape(*a1, DTypeForPixelFormat, (uint64_t)&v53);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v29 = (uint64_t *)operator new(8uLL);
  *a4 = v29;
  *v29++ = v28;
  a4[1] = v29;
  a4[2] = v29;
  if (v53.__r_.__value_.__r.__words[0])
  {
    v53.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
    operator delete(v53.__r_.__value_.__l.__data_);
  }
}

void sub_1E06F83AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33)
{
  void *v33;
  char v34;
  uint64_t v35;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a18);
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 161) < 0)
    operator delete(*(void **)(v35 - 184));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if ((v34 & 1) != 0)
    __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::`anonymous namespace'::ValidateShapes(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t v5;
  unint64_t v9;
  MIL::IRDimension *v10;
  MIL::IRDimension *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::string *v33;
  __int128 v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::string *v39;
  __int128 v40;
  unint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  __int128 v46;
  unint64_t *v47;
  void *v48[2];
  std::string::size_type v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *v52[2];
  std::string::size_type v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  std::string::size_type v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  std::string v60;
  __int128 v61;
  std::string::size_type v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v5 = *a1;
  if (a1[1] == *a1)
  {
LABEL_22:
    MIL::ValidationResult::ValidationResult(a4);
    return;
  }
  v9 = 0;
  while (1)
  {
    if (v9 >= (uint64_t)(a2[1] - *a2) >> 3)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v10 = *(MIL::IRDimension **)(v5 + 8 * v9);
    v11 = *(MIL::IRDimension **)(*a2 + 8 * v9);
    v12 = (*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)v10 + 16))(v10);
    v13 = (*(uint64_t (**)(MIL::IRDimension *))(*(_QWORD *)v11 + 16))(v11);
    v14 = v13;
    if (!v12 || v13 == 0)
      break;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
    if (v21 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14))
    {
      v30 = (std::__shared_weak_count *)a3[1];
      v63 = *a3;
      v64 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(p_shared_owners);
        while (__stxr(v32 + 1, p_shared_owners));
      }
      std::to_string(&v60, v9);
      v33 = std::string::insert(&v60, 0, "Unexpected output constant dim at index: ");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v62 = v33->__r_.__value_.__r.__words[2];
      v61 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v63, 313, &v61);
      if (SHIBYTE(v62) < 0)
        operator delete((void *)v61);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      v27 = v64;
      if (v64)
      {
        v35 = (unint64_t *)&v64->__shared_owners_;
        do
          v29 = __ldaxr(v35);
        while (__stlxr(v29 - 1, v35));
LABEL_66:
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        return;
      }
      return;
    }
LABEL_21:
    ++v9;
    v5 = *a1;
    if (v9 >= (a1[1] - *a1) >> 3)
      goto LABEL_22;
  }
  if (v12)
    v16 = 1;
  else
    v16 = v13 == 0;
  if (v16)
  {
    if (v12)
      v17 = v13 == 0;
    else
      v17 = 0;
    if (v17)
    {
      v36 = (std::__shared_weak_count *)a3[1];
      v54 = *a3;
      v55 = v36;
      if (v36)
      {
        v37 = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      std::to_string(&v60, v9);
      v39 = std::string::insert(&v60, 0, "Output dim must not be constant at index: ");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v53 = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)v52 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v54, 313, v52);
      if (SHIBYTE(v53) < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      v27 = v55;
      if (v55)
      {
        v41 = (unint64_t *)&v55->__shared_owners_;
        do
          v29 = __ldaxr(v41);
        while (__stlxr(v29 - 1, v41));
        goto LABEL_66;
      }
      return;
    }
    v18 = MIL::IRDimension::AsUnknown(v10);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v20 = MIL::IRDimension::AsUnknown(v11);
    if (v19 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20))
    {
      v42 = (std::__shared_weak_count *)a3[1];
      v50 = *a3;
      v51 = v42;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      std::to_string(&v60, v9);
      v45 = std::string::insert(&v60, 0, "Unexpected unknown dim in terms of being variadic at index: ");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v49 = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)v48 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a4, &v50, 313, v48);
      if (SHIBYTE(v49) < 0)
        operator delete(v48[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      v27 = v51;
      if (v51)
      {
        v47 = (unint64_t *)&v51->__shared_owners_;
        do
          v29 = __ldaxr(v47);
        while (__stlxr(v29 - 1, v47));
        goto LABEL_66;
      }
      return;
    }
    goto LABEL_21;
  }
  v22 = (std::__shared_weak_count *)a3[1];
  v58 = *a3;
  v59 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  std::to_string(&v60, v9);
  v25 = std::string::insert(&v60, 0, "Output dim must be constant at index: ");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v57 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  MIL::ValidationResult::ValidationResult(a4, &v58, 313, __p);
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v27 = v59;
  if (v59)
  {
    v28 = (unint64_t *)&v59->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    goto LABEL_66;
  }
}

void sub_1E06F891C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a14 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + a2;
}

void sub_1E06F8A70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidateTensorToPixelBuffer(MIL::Operators::Common::Shared::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRTypedArgument *ParameterType;
  MIL::IRTypedArgument *v6;
  MIL::IRValueType *OutputType;
  MIL::IRMemoryLayoutValueType *v8;
  MIL::IRPixelBufferValueType *v9;
  int v10;
  unsigned int NumPlanesForFormat;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  MIL::IRValueType *v16;
  MIL::IRTypedArgument *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  void **v22;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::string::size_type v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t i;
  void **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  void **v42;
  _QWORD *v43;
  void **v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  char v49;
  void **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::runtime_error *exception;
  MIL::Location *Location;
  std::string *v56;
  __int128 v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  char v61;
  char v62;
  void **v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  void **v70;
  _QWORD *v71;
  void **v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  char v76;
  char v77;
  void **v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::runtime_error *v82;
  MIL::Location *v83;
  std::string *v84;
  __int128 v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  char v89;
  char v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  __int128 v102;
  MIL::IRMemoryLayoutValueType *v103;
  MIL::IRPixelBufferValueType *v104;
  int PixelFormatType;
  uint64_t *Shape;
  _QWORD *v107;
  uint64_t *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t *BytesPerRow;
  _QWORD *v115;
  uint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t *NumSlices;
  _QWORD *v123;
  uint64_t *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  int v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t ValueType;
  uint64_t v135;
  MIL::IRTensorValueType *v136;
  _QWORD **v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  MIL::IRConstantProperty *v142;
  uint64_t *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unsigned int v165;
  std::string *v166;
  __int128 v167;
  std::string *v168;
  __int128 v169;
  _QWORD *v170;
  uint64_t *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unsigned int v175;
  std::string *v176;
  __int128 v177;
  std::string *v178;
  __int128 v179;
  unint64_t *v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unsigned int v185;
  std::string *v186;
  __int128 v187;
  std::string *v188;
  __int128 v189;
  std::runtime_error *v190;
  MIL::Location *v191;
  std::string *v192;
  __int128 v193;
  std::runtime_error *v194;
  MIL::Location *v195;
  std::string *v196;
  __int128 v197;
  void *v198[2];
  std::string::size_type v199;
  _QWORD v200[2];
  void *v201[2];
  std::string::size_type v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  std::string::size_type v206;
  _QWORD v207[2];
  uint64_t v208[2];
  uint64_t v209[2];
  uint64_t v210[2];
  void *v211[2];
  char v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  _QWORD v219[2];
  std::string *v220;
  std::__shared_weak_count *v221;
  std::string *v222;
  std::__shared_weak_count *v223;
  void **v224;
  const void *v225;
  std::__shared_weak_count *v226;
  std::string v227;
  std::string v228;
  uint64_t v229[5];
  char *v230;
  char *v231;
  void *__p[2];
  char v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  const void *v236;
  std::__shared_weak_count *v237;
  std::string *v238;
  std::__shared_weak_count *v239;
  void **v240;
  _QWORD *v241;
  std::string *v242;
  std::__shared_weak_count *v243;
  _BYTE v244[32];
  int v245;
  std::string v246[2];
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v244, "pixel_format_type");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v244, 0, (uint64_t *)&v236);
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  std::string::basic_string[abi:ne180100]<0>(v244, "bytes_per_row");
  ParameterType = (MIL::IRTypedArgument *)MIL::IROperation::TryGetParameterType(this, (uint64_t)v244, 0);
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  std::string::basic_string[abi:ne180100]<0>(v244, "num_slices");
  v6 = (MIL::IRTypedArgument *)MIL::IROperation::TryGetParameterType(this, (uint64_t)v244, 0);
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v8 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  v9 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v8);
  MIL::IRValue::GetScalar<std::string>(v236, (std::string *)v244);
  v10 = MIL::StringToIRPixelFormatType(v244);
  NumPlanesForFormat = MIL::GetNumPlanesForFormat(v10);
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  std::string::basic_string[abi:ne180100]<0>(v244, "input");
  v12 = (*(uint64_t (**)(MIL::Operators::Common::Shared::CustomValidators *, _BYTE *))(*(_QWORD *)this + 152))(this, v244);
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  if (v12 != NumPlanesForFormat)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v24 = (std::__shared_weak_count *)LocationPtr[1];
    v234 = *LocationPtr;
    v235 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Mismatch between expected number of planes and pixel format.");
    MIL::ValidationResult::ValidationResult(a2, &v234, 315, __p);
    if (v233 < 0)
      operator delete(__p[0]);
    v27 = v235;
    if (v235)
    {
      v28 = (unint64_t *)&v235->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    goto LABEL_230;
  }
  v13 = NumPlanesForFormat;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::vector(&v230, NumPlanesForFormat);
  if (NumPlanesForFormat)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(v244, "input");
      v16 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
      v17 = (MIL::IRTypedArgument *)MIL::IRValueType::AsTensorType(v16);
      MIL::IRTypedArgument::Make(v17, v229);
      std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(&v230[v15], v229);
      v18 = v229[0];
      v229[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if ((v244[23] & 0x80000000) != 0)
        operator delete(*(void **)v244);
      v15 += 16;
      ++v14;
    }
    while (16 * v13 != v15);
  }
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<char const(&)[6],std::vector<std::shared_ptr<MIL::IRTypedArgument>>&,0>(v244, "input", (_QWORD **)&v230);
  std::string::basic_string[abi:ne180100]<0>(&v228, "pixel_format_type");
  v225 = v236;
  v226 = v237;
  if (v237)
  {
    v19 = (unint64_t *)&v237->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  MIL::IRTypedArgument::Make((uint64_t *)&v225, &v240);
  v242 = (std::string *)v240;
  if (v240)
  {
    v21 = (std::__shared_weak_count *)operator new();
    v22 = v240;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA994910;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  }
  else
  {
    v21 = 0;
  }
  v243 = v21;
  v240 = 0;
  memset(&v227, 0, sizeof(v227));
  v238 = &v227;
  LOBYTE(v239) = 0;
  v30 = operator new(0x10uLL);
  v31 = (std::string::size_type)(v30 + 2);
  v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  v227.__r_.__value_.__r.__words[2] = (std::string::size_type)(v30 + 2);
  *v30 = v242;
  v30[1] = v21;
  if (v21)
  {
    v32 = (unint64_t *)&v21->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v227.__r_.__value_.__l.__size_ = v31;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v246, (__int128 *)&v228, &v227);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v229, v244, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v238 = &v246[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    if (SHIBYTE(v246[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v246[i / 3].__r_.__value_.__l.__data_);
  }
  v238 = &v227;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v242);
  v35 = v240;
  v240 = 0;
  if (v35)
    (*((void (**)(void **))*v35 + 1))(v35);
  v36 = v226;
  if (v226)
  {
    v37 = (unint64_t *)&v226->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v228.__r_.__value_.__l.__data_);
    if (!ParameterType)
      goto LABEL_95;
  }
  else if (!ParameterType)
  {
    goto LABEL_95;
  }
  std::string::basic_string[abi:ne180100]<0>(v244, "bytes_per_row");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v244, 0, (uint64_t *)&v242);
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  if (v242)
  {
    std::string::basic_string[abi:ne180100]<0>(&v228, "bytes_per_row");
    v222 = v242;
    v223 = v243;
    if (v243)
    {
      v39 = (unint64_t *)&v243->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    MIL::IRTypedArgument::Make((uint64_t *)&v222, &v224);
    v240 = v224;
    if (v224)
    {
      v41 = (_QWORD *)operator new();
      v42 = v224;
      *v41 = &unk_1EA994910;
      v41[1] = 0;
      v41[2] = 0;
      v41[3] = v42;
    }
    else
    {
      v41 = 0;
    }
    v241 = v41;
    v224 = 0;
    memset(&v227, 0, sizeof(v227));
    v238 = &v227;
    LOBYTE(v239) = 0;
    v45 = operator new(0x10uLL);
    v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
    v227.__r_.__value_.__r.__words[2] = (std::string::size_type)(v45 + 2);
    *v45 = v240;
    v45[1] = v41;
    if (v41)
    {
      v46 = v41 + 1;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v227.__r_.__value_.__l.__size_ = (std::string::size_type)(v45 + 2);
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v244, (__int128 *)&v228, &v227);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v229, v244, (__int128 *)v244);
    v49 = v48;
    v238 = (std::string *)&v244[24];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    if ((v244[23] & 0x80000000) != 0)
      operator delete(*(void **)v244);
    v238 = &v227;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v240);
    v50 = v224;
    v224 = 0;
    if (v50)
      (*((void (**)(void **))*v50 + 1))(v50);
    v51 = v223;
    if (v223)
    {
      v52 = (unint64_t *)&v223->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v228.__r_.__value_.__l.__data_);
    if ((v49 & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      Location = (MIL::Location *)MIL::IRObject::GetLocation(this);
      MIL::Location::GetDescription(Location, &v228);
      v56 = std::string::insert(&v228, 0, "Failed to insert bytes_per_row into inputs map: ");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      *(_QWORD *)&v244[16] = *((_QWORD *)&v56->__r_.__value_.__l + 2);
      *(_OWORD *)v244 = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v244);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v228, "bytes_per_row");
    MIL::IRTypedArgument::Make(ParameterType, &v224);
    v240 = v224;
    if (v224)
    {
      v43 = (_QWORD *)operator new();
      v44 = v224;
      *v43 = &unk_1EA994910;
      v43[1] = 0;
      v43[2] = 0;
      v43[3] = v44;
    }
    else
    {
      v43 = 0;
    }
    v241 = v43;
    v224 = 0;
    memset(&v227, 0, sizeof(v227));
    v238 = &v227;
    LOBYTE(v239) = 0;
    v58 = operator new(0x10uLL);
    v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    v227.__r_.__value_.__r.__words[2] = (std::string::size_type)(v58 + 2);
    *v58 = v240;
    v58[1] = v43;
    if (v43)
    {
      v59 = v43 + 1;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v227.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 2);
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v244, (__int128 *)&v228, &v227);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v229, v244, (__int128 *)v244);
    v62 = v61;
    v238 = (std::string *)&v244[24];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    if ((v244[23] & 0x80000000) != 0)
      operator delete(*(void **)v244);
    v238 = &v227;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v240);
    v63 = v224;
    v224 = 0;
    if (v63)
      (*((void (**)(void **))*v63 + 1))(v63);
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v228.__r_.__value_.__l.__data_);
    if ((v62 & 1) == 0)
    {
      v190 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v191 = (MIL::Location *)MIL::IRObject::GetLocation(this);
      MIL::Location::GetDescription(v191, &v228);
      v192 = std::string::insert(&v228, 0, "Failed to insert bytes_per_row into inputs map: ");
      v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
      *(_QWORD *)&v244[16] = *((_QWORD *)&v192->__r_.__value_.__l + 2);
      *(_OWORD *)v244 = v193;
      v192->__r_.__value_.__l.__size_ = 0;
      v192->__r_.__value_.__r.__words[2] = 0;
      v192->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v190, (const std::string *)v244);
      __cxa_throw(v190, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v64 = v243;
  if (v243)
  {
    v65 = (unint64_t *)&v243->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      if (!v6)
        goto LABEL_141;
      goto LABEL_96;
    }
  }
LABEL_95:
  if (!v6)
    goto LABEL_141;
LABEL_96:
  std::string::basic_string[abi:ne180100]<0>(v244, "num_slices");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v244, 0, (uint64_t *)&v242);
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  if (v242)
  {
    std::string::basic_string[abi:ne180100]<0>(&v228, "num_slices");
    v220 = v242;
    v221 = v243;
    if (v243)
    {
      v67 = (unint64_t *)&v243->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    MIL::IRTypedArgument::Make((uint64_t *)&v220, &v224);
    v240 = v224;
    if (v224)
    {
      v69 = (_QWORD *)operator new();
      v70 = v224;
      *v69 = &unk_1EA994910;
      v69[1] = 0;
      v69[2] = 0;
      v69[3] = v70;
    }
    else
    {
      v69 = 0;
    }
    v241 = v69;
    v224 = 0;
    memset(&v227, 0, sizeof(v227));
    v238 = &v227;
    LOBYTE(v239) = 0;
    v73 = operator new(0x10uLL);
    v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    v227.__r_.__value_.__r.__words[2] = (std::string::size_type)(v73 + 2);
    *v73 = v240;
    v73[1] = v69;
    if (v69)
    {
      v74 = v69 + 1;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    v227.__r_.__value_.__l.__size_ = (std::string::size_type)(v73 + 2);
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v244, (__int128 *)&v228, &v227);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v229, v244, (__int128 *)v244);
    v77 = v76;
    v238 = (std::string *)&v244[24];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    if ((v244[23] & 0x80000000) != 0)
      operator delete(*(void **)v244);
    v238 = &v227;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v240);
    v78 = v224;
    v224 = 0;
    if (v78)
      (*((void (**)(void **))*v78 + 1))(v78);
    v79 = v221;
    if (v221)
    {
      v80 = (unint64_t *)&v221->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v228.__r_.__value_.__l.__data_);
    if ((v77 & 1) == 0)
    {
      v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v83 = (MIL::Location *)MIL::IRObject::GetLocation(this);
      MIL::Location::GetDescription(v83, &v228);
      v84 = std::string::insert(&v228, 0, "Failed to insert num_slices into inputs map: ");
      v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      *(_QWORD *)&v244[16] = *((_QWORD *)&v84->__r_.__value_.__l + 2);
      *(_OWORD *)v244 = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v82, (const std::string *)v244);
      __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v228, "num_slices");
    MIL::IRTypedArgument::Make(v6, &v224);
    v240 = v224;
    if (v224)
    {
      v71 = (_QWORD *)operator new();
      v72 = v224;
      *v71 = &unk_1EA994910;
      v71[1] = 0;
      v71[2] = 0;
      v71[3] = v72;
    }
    else
    {
      v71 = 0;
    }
    v241 = v71;
    v224 = 0;
    memset(&v227, 0, sizeof(v227));
    v238 = &v227;
    LOBYTE(v239) = 0;
    v86 = operator new(0x10uLL);
    v227.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
    v227.__r_.__value_.__r.__words[2] = (std::string::size_type)(v86 + 2);
    *v86 = v240;
    v86[1] = v71;
    if (v71)
    {
      v87 = v71 + 1;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v227.__r_.__value_.__l.__size_ = (std::string::size_type)(v86 + 2);
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v244, (__int128 *)&v228, &v227);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v229, v244, (__int128 *)v244);
    v90 = v89;
    v238 = (std::string *)&v244[24];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    if ((v244[23] & 0x80000000) != 0)
      operator delete(*(void **)v244);
    v238 = &v227;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v240);
    v91 = v224;
    v224 = 0;
    if (v91)
      (*((void (**)(void **))*v91 + 1))(v91);
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v228.__r_.__value_.__l.__data_);
    if ((v90 & 1) == 0)
    {
      v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v195 = (MIL::Location *)MIL::IRObject::GetLocation(this);
      MIL::Location::GetDescription(v195, &v228);
      v196 = std::string::insert(&v228, 0, "Failed to insert num_slices into inputs map: ");
      v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
      *(_QWORD *)&v244[16] = *((_QWORD *)&v196->__r_.__value_.__l + 2);
      *(_OWORD *)v244 = v197;
      v196->__r_.__value_.__l.__size_ = 0;
      v196->__r_.__value_.__r.__words[2] = 0;
      v196->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v194, (const std::string *)v244);
      __cxa_throw(v194, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v92 = v243;
  if (v243)
  {
    v93 = (unint64_t *)&v243->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
LABEL_141:
  MIL::MILContext::Make(v244);
  v238 = *(std::string **)v244;
  if (*(_QWORD *)v244)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = *(std::__shared_weak_count_vtbl **)v244;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F0A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v239 = v95;
  MIL::UnknownLocation::Make(&v240);
  v219[0] = v240;
  if (v240)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)v240;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v219[1] = v97;
  v240 = 0;
  memset(v244, 0, sizeof(v244));
  v245 = 1065353216;
  memset(&v227, 0, sizeof(v227));
  MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer((void (****)(MIL::MILContextImpl *__hidden))&v238, v219, v229, (uint64_t **)&v228);
  v242 = &v227;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v244);
  if (v97)
  {
    v99 = (unint64_t *)&v97->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v101 = v240;
  v240 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  v102 = *(_OWORD *)&v228.__r_.__value_.__l.__data_;
  if ((*(uint64_t (**)(MIL::Operators::Common::Shared::CustomValidators *))(*(_QWORD *)this + 192))(this) != (uint64_t)(*((_QWORD *)&v102 + 1) - v102) >> 3)
  {
    v143 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v144 = (std::__shared_weak_count *)v143[1];
    v217 = *v143;
    v218 = v144;
    if (v144)
    {
      v145 = (unint64_t *)&v144->__shared_owners_;
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
    }
    std::string::basic_string[abi:ne180100]<0>(v215, "Mismatch in the number of outputs.");
    MIL::ValidationResult::ValidationResult(a2, &v217, 313, v215);
    if (v216 < 0)
      operator delete(v215[0]);
    v147 = v218;
    if (!v218)
      goto LABEL_222;
    v148 = (unint64_t *)&v218->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
LABEL_219:
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
    goto LABEL_222;
  }
  v103 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(*(MIL::IRValueType **)v102);
  v104 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v103);
  PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(v9);
  if (PixelFormatType != MIL::IRPixelBufferValueType::GetPixelFormatType(v104))
  {
    v150 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v151 = (std::__shared_weak_count *)v150[1];
    v213 = *v150;
    v214 = v151;
    if (v151)
    {
      v152 = (unint64_t *)&v151->__shared_owners_;
      do
        v153 = __ldxr(v152);
      while (__stxr(v153 + 1, v152));
    }
    std::string::basic_string[abi:ne180100]<0>(v211, "Unexpected output pixel format type.");
    MIL::ValidationResult::ValidationResult(a2, &v213, 313, v211);
    if (v212 < 0)
      operator delete(v211[0]);
    v147 = v214;
    if (!v214)
      goto LABEL_222;
    v154 = (unint64_t *)&v214->__shared_owners_;
    do
      v149 = __ldaxr(v154);
    while (__stlxr(v149 - 1, v154));
    goto LABEL_219;
  }
  Shape = (uint64_t *)MIL::IRPixelBufferValueType::GetShape(v9);
  v107 = (_QWORD *)MIL::IRPixelBufferValueType::GetShape(v104);
  v108 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v109 = (std::__shared_weak_count *)v108[1];
  v210[0] = *v108;
  v210[1] = (uint64_t)v109;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  if (v109)
  {
    v112 = (unint64_t *)&v109->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v244 + 16))(v244) & 1) == 0)
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v244);
    *(_QWORD *)a2 = &off_1EA99F170;
    *(_DWORD *)(a2 + 48) = v246[0].__r_.__value_.__l.__data_;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v244);
    goto LABEL_222;
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v244);
  BytesPerRow = (uint64_t *)MIL::IRPixelBufferValueType::TryGetBytesPerRow(v9);
  v115 = (_QWORD *)MIL::IRPixelBufferValueType::TryGetBytesPerRow(v104);
  std::string::basic_string[abi:ne180100]<0>(v244, "bytes_per_row");
  v116 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v117 = (std::__shared_weak_count *)v116[1];
  v209[0] = *v116;
  v209[1] = (uint64_t)v117;
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  if (v117)
  {
    v120 = (unint64_t *)&v117->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if ((v244[23] & 0x80000000) != 0)
    operator delete(*(void **)v244);
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)a2);
    NumSlices = (uint64_t *)MIL::IRPixelBufferValueType::TryGetNumSlices(v9);
    v123 = (_QWORD *)MIL::IRPixelBufferValueType::TryGetNumSlices(v104);
    std::string::basic_string[abi:ne180100]<0>(v244, "num_slices");
    v124 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v125 = (std::__shared_weak_count *)v124[1];
    v208[0] = *v124;
    v208[1] = (uint64_t)v125;
    if (v125)
    {
      v126 = (unint64_t *)&v125->__shared_owners_;
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
    }
    if (v125)
    {
      v128 = (unint64_t *)&v125->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    if ((v244[23] & 0x80000000) != 0)
      operator delete(*(void **)v244);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
    {
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)a2);
      v130 = MIL::IRPixelBufferValueType::GetPixelFormatType(v9);
      if (!MIL::SupportsMultiSlice(v130))
        goto LABEL_201;
      if (MIL::IRPixelBufferValueType::TryGetNumSlices(v9))
      {
        v131 = v230;
        if (v231 != v230)
        {
          v132 = 0;
          v133 = 0;
          do
          {
            if (MIL::IRTypedArgument::TryGetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)&v131[v132]))
            {
              ValueType = MIL::IRTypedArgument::TryGetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)&v131[v132]);
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ValueType + 24))(ValueType))
              {
                v135 = MIL::IRTypedArgument::TryGetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)&v131[v132]);
                v136 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 24))(v135);
                if (MIL::IRTensorValueType::Rank(v136) != -1 && MIL::IRTensorValueType::Rank(v136) != 3)
                {
                  v171 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
                  v172 = (std::__shared_weak_count *)v171[1];
                  v203 = *v171;
                  v204 = v172;
                  if (v172)
                  {
                    v173 = (unint64_t *)&v172->__shared_owners_;
                    do
                      v174 = __ldxr(v173);
                    while (__stxr(v174 + 1, v173));
                  }
                  v175 = MIL::IRPixelBufferValueType::GetPixelFormatType(v9);
                  MIL::IRPixelFormatTypeToString(v175, &v227);
                  v176 = std::string::insert(&v227, 0, "Multislice pixel format ");
                  v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v244[16] = *((_QWORD *)&v176->__r_.__value_.__l + 2);
                  *(_OWORD *)v244 = v177;
                  v176->__r_.__value_.__l.__size_ = 0;
                  v176->__r_.__value_.__r.__words[2] = 0;
                  v176->__r_.__value_.__r.__words[0] = 0;
                  v178 = std::string::append((std::string *)v244, " expects input tensors of [numSlice, H, W]");
                  v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
                  v202 = v178->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v201 = v179;
                  v178->__r_.__value_.__l.__size_ = 0;
                  v178->__r_.__value_.__r.__words[2] = 0;
                  v178->__r_.__value_.__r.__words[0] = 0;
                  MIL::ValidationResult::ValidationResult(a2, &v203, 315, v201);
                  if (SHIBYTE(v202) < 0)
                    operator delete(v201[0]);
                  if ((v244[23] & 0x80000000) != 0)
                    operator delete(*(void **)v244);
                  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v227.__r_.__value_.__l.__data_);
                  v147 = v204;
                  if (v204)
                  {
                    v180 = (unint64_t *)&v204->__shared_owners_;
                    do
                      v149 = __ldaxr(v180);
                    while (__stlxr(v149 - 1, v180));
                    goto LABEL_219;
                  }
                  goto LABEL_222;
                }
                v137 = (_QWORD **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v136 + 96))(v136);
                if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)**v137 + 16))(**v137))
                {
                  v138 = (_QWORD *)MIL::IRPixelBufferValueType::TryGetNumSlices(v9);
                  if (v133 >= (uint64_t)(v138[1] - *v138) >> 3)
                    goto LABEL_272;
                  if (MIL::IRProperty::TryAsConstant(*(void **)(*v138 + 8 * v133)))
                  {
                    v139 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v137 + 16))(**v137);
                    v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 48))(v139);
                    v141 = (_QWORD *)MIL::IRPixelBufferValueType::TryGetNumSlices(v9);
                    if (v133 >= (uint64_t)(v141[1] - *v141) >> 3)
LABEL_272:
                      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
                    v142 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(*(void **)(*v141 + 8 * v133));
                    if (v140 != MIL::IRConstantProperty::GetInt64ScalarValue(v142))
                    {
                      v181 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
                      v182 = v181[1];
                      v200[0] = *v181;
                      v200[1] = v182;
                      if (v182)
                      {
                        v183 = (unint64_t *)(v182 + 8);
                        do
                          v184 = __ldxr(v183);
                        while (__stxr(v184 + 1, v183));
                      }
                      v185 = MIL::IRPixelBufferValueType::GetPixelFormatType(v9);
                      MIL::IRPixelFormatTypeToString(v185, &v227);
                      v186 = std::string::insert(&v227, 0, "Multislice pixel format ");
                      v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v244[16] = *((_QWORD *)&v186->__r_.__value_.__l + 2);
                      *(_OWORD *)v244 = v187;
                      v186->__r_.__value_.__l.__size_ = 0;
                      v186->__r_.__value_.__r.__words[2] = 0;
                      v186->__r_.__value_.__r.__words[0] = 0;
                      v188 = std::string::append((std::string *)v244, " expects input shape[0] to be numSlices.");
                      v189 = *(_OWORD *)&v188->__r_.__value_.__l.__data_;
                      v199 = v188->__r_.__value_.__r.__words[2];
                      *(_OWORD *)v198 = v189;
                      v188->__r_.__value_.__l.__size_ = 0;
                      v188->__r_.__value_.__r.__words[2] = 0;
                      v188->__r_.__value_.__r.__words[0] = 0;
                      MIL::ValidationResult::ValidationResult(a2, v200, 315, v198);
                      if (SHIBYTE(v199) < 0)
                        operator delete(v198[0]);
                      if ((v244[23] & 0x80000000) != 0)
                        operator delete(*(void **)v244);
                      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v227.__r_.__value_.__l.__data_);
                      v170 = v200;
                      goto LABEL_246;
                    }
                  }
                }
              }
            }
            ++v133;
            v131 = v230;
            v132 += 16;
          }
          while (v133 < (v231 - v230) >> 4);
        }
LABEL_201:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
        goto LABEL_222;
      }
      v161 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
      v162 = v161[1];
      v207[0] = *v161;
      v207[1] = v162;
      if (v162)
      {
        v163 = (unint64_t *)(v162 + 8);
        do
          v164 = __ldxr(v163);
        while (__stxr(v164 + 1, v163));
      }
      v165 = MIL::IRPixelBufferValueType::GetPixelFormatType(v9);
      MIL::IRPixelFormatTypeToString(v165, &v227);
      v166 = std::string::insert(&v227, 0, "Multislice pixel format ");
      v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
      *(_QWORD *)&v244[16] = *((_QWORD *)&v166->__r_.__value_.__l + 2);
      *(_OWORD *)v244 = v167;
      v166->__r_.__value_.__l.__size_ = 0;
      v166->__r_.__value_.__r.__words[2] = 0;
      v166->__r_.__value_.__r.__words[0] = 0;
      v168 = std::string::append((std::string *)v244, " expects slice to be set and greater than 1.");
      v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
      v206 = v168->__r_.__value_.__r.__words[2];
      *(_OWORD *)v205 = v169;
      v168->__r_.__value_.__l.__size_ = 0;
      v168->__r_.__value_.__r.__words[2] = 0;
      v168->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(a2, v207, 315, v205);
      if (SHIBYTE(v206) < 0)
        operator delete(v205[0]);
      if ((v244[23] & 0x80000000) != 0)
        operator delete(*(void **)v244);
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v227.__r_.__value_.__l.__data_);
      v170 = v207;
LABEL_246:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v170);
    }
  }
LABEL_222:
  if (v228.__r_.__value_.__r.__words[0])
    operator delete(v228.__r_.__value_.__l.__data_);
  v155 = v239;
  if (v239)
  {
    v156 = (unint64_t *)&v239->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v229);
  *(_QWORD *)v244 = &v230;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v244);
LABEL_230:
  v158 = v237;
  if (v237)
  {
    v159 = (unint64_t *)&v237->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
}

void sub_1E06FA120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  char a69;
  uint64_t v69;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v69 - 169) < 0)
    operator delete(*(void **)(v69 - 192));
  if (a60 < 0)
    operator delete(a55);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a61)
    operator delete(a61);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v69 - 240);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a64);
  a64 = (uint64_t)&a69;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v69 - 256);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToPixelBuffer(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  const void *SingleValue;
  unsigned int v9;
  MIL::IRValueType **v10;
  MIL::IRValueType **v11;
  uint64_t v12;
  uint64_t v13;
  MIL::IRDimension **v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  MIL::IRValueType *SingleValueType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  MIL::IRValue *v31;
  uint64_t *v32;
  std::string::size_type v33;
  unint64_t v34;
  void (***v35)(MIL::MILContextImpl *__hidden);
  MIL::MILContext **v36;
  uint64_t Int64Scalar;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  MIL::IRValueType *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  MIL::IRValue *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  void (***v53)(MIL::MILContextImpl *__hidden);
  MIL::MILContext **v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (***v58)(MIL::MILContextImpl *__hidden);
  uint64_t v59;
  uint64_t *v60;
  void *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  void *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  void *exception;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  void *__p[2];
  __int128 v90;
  int v91;
  _QWORD v92[2];
  __int128 v93;
  std::string::size_type v94;
  _QWORD v95[2];
  _BYTE v96[56];
  std::string v97;
  std::string v98;
  __int128 v99;
  std::string::size_type v100;
  _QWORD v101[2];
  _BYTE v102[56];
  void *v103[3];
  _QWORD v104[3];
  _QWORD v105[2];
  _BYTE v106[56];
  _QWORD v107[3];
  _QWORD v108[2];
  _BYTE v109[56];
  MIL::IRDimension **v110;
  MIL::IRDimension **v111;
  uint64_t v112;
  MIL::IRValueType **v113;
  MIL::IRValueType **v114;
  _QWORD v115[3];
  _QWORD v116[2];
  _BYTE v117[56];

  if ((unint64_t)(a3[3] - 2) >= 3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v78 = a2[1];
    v116[0] = *a2;
    v116[1] = v78;
    if (v78)
    {
      v79 = (unint64_t *)(v78 + 8);
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    std::string::basic_string[abi:ne180100]<0>(v115, "Two or three inputs are expected.");
    MIL::ValidationResult::ValidationResult(v117, v116, 300, v115);
    MIL::ValidationError::ValidationError(exception, v117);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "input");
  MIL::ValueTypeInferenceUtils::GetVariadicValueTypes(a3, (unsigned __int8 *)__p, &v113);
  if (SBYTE7(v90) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v110, "pixel_format_type");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v110);
  MIL::IRValue::GetScalar<std::string>(SingleValue, (std::string *)__p);
  v9 = MIL::StringToIRPixelFormatType((unsigned __int8 *)__p);
  if (SBYTE7(v90) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v112) < 0)
    operator delete(v110);
  v11 = v113;
  v10 = v114;
  if (MIL::GetNumPlanesForFormat(v9) != v10 - v11)
  {
    v81 = __cxa_allocate_exception(0x48uLL);
    v82 = a2[1];
    v108[0] = *a2;
    v108[1] = v82;
    if (v82)
    {
      v83 = (unint64_t *)(v82 + 8);
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    std::string::basic_string[abi:ne180100]<0>(v107, "Mismatch between expected number of planes and pixel format.");
    MIL::ValidationResult::ValidationResult(v109, v108, 315, v107);
    MIL::ValidationError::ValidationError(v81, v109);
  }
  v12 = MIL::IRValueType::AsTensorType(*v113);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  v110 = 0;
  v111 = 0;
  v112 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v110, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3);
  v14 = v110;
  v15 = (char *)v111 - (char *)(v110 + 1);
  if (v111 != v110 + 1)
    memmove(v110, v110 + 1, (char *)v111 - (char *)(v110 + 1));
  v111 = (MIL::IRDimension **)((char *)v14 + v15);
  v16 = MIL::IRValueType::AsTensorType(*v113);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16);
  if (v17 != MIL::GetDTypeForPixelFormat(v9))
  {
    v85 = __cxa_allocate_exception(0x48uLL);
    v86 = a2[1];
    v105[0] = *a2;
    v105[1] = v86;
    if (v86)
    {
      v87 = (unint64_t *)(v86 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    std::string::basic_string[abi:ne180100]<0>(v104, "Unexpected pixel format type for the given tensor dtype.");
    MIL::ValidationResult::ValidationResult(v106, v105, 313, v104);
    MIL::ValidationError::ValidationError(v85, v106);
  }
  for (i = 1; MIL::GetNumPlanesForFormat(v9) > i; ++i)
  {
    v19 = MIL::IRValueType::AsTensorType(v113[i]);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v90 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v20, *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 3);
    MIL::GetShapeForPlane(*a1, 0, v9, &v110, i, v103);
    if ((MIL::Validation::IsEqualConstShape((uint64_t *)__p, v103) & 1) == 0)
    {
      v61 = __cxa_allocate_exception(0x48uLL);
      v62 = a2[1];
      v101[0] = *a2;
      v101[1] = v62;
      if (v62)
      {
        v63 = (unint64_t *)(v62 + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      std::to_string(&v97, i);
      v65 = std::string::insert(&v97, 0, "Plane index ");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = std::string::append(&v98, " has unexpected shape.");
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v100 = v67->__r_.__value_.__r.__words[2];
      v99 = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v102, v101, 315, &v99);
      MIL::ValidationError::ValidationError(v61, v102);
    }
    v21 = MIL::IRValueType::AsTensorType(v113[i]);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 88))(v21) != v17)
    {
      v69 = __cxa_allocate_exception(0x48uLL);
      v70 = a2[1];
      v95[0] = *a2;
      v95[1] = v70;
      if (v70)
      {
        v71 = (unint64_t *)(v70 + 8);
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      std::to_string(&v97, i);
      v73 = std::string::insert(&v97, 0, "Plane index ");
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      v75 = std::string::append(&v98, " has unexpected dtype.");
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v94 = v75->__r_.__value_.__r.__words[2];
      v93 = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      MIL::ValidationResult::ValidationResult(v96, v95, 315, &v93);
      MIL::ValidationError::ValidationError(v69, v96);
    }
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  memset(v103, 0, sizeof(v103));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v103, v110, (uint64_t)v111, v111 - v110);
  memset(&v98, 0, sizeof(v98));
  std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
  v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v23 = v22;
  if (SBYTE7(v90) < 0)
  {
    operator delete(__p[0]);
    if (!v23)
      goto LABEL_42;
  }
  else if (!v22)
  {
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v25 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SBYTE7(v90) < 0)
    operator delete(__p[0]);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 96))(v25);
  if (*(_QWORD *)(v26 + 8) == *(_QWORD *)v26)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v27 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v26);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
  std::vector<MIL::IRProperty const*>::vector(__p, v28);
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v98.__r_.__value_.__r.__words[2] = v90;
  std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
  v29 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  v30 = v29;
  if (SBYTE7(v90) < 0)
  {
    operator delete(__p[0]);
    if (v30)
      goto LABEL_32;
  }
  else if (v29)
  {
LABEL_32:
    std::string::basic_string[abi:ne180100]<0>(__p, "bytes_per_row");
    v31 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    v32 = (uint64_t *)MIL::IRValue::AsTensor(v31);
    v97.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<long long>(v32);
    v97.__r_.__value_.__l.__size_ = v33;
    if (SBYTE7(v90) < 0)
      operator delete(__p[0]);
    if (v98.__r_.__value_.__l.__size_ != v98.__r_.__value_.__r.__words[0])
    {
      v34 = 0;
      do
      {
        v35 = *a1;
        v36 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&v97, v34);
        Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v35, *v36);
        *(_QWORD *)(v98.__r_.__value_.__r.__words[0] + 8 * v34++) = Int64Scalar;
      }
      while (v34 < (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 3);
    }
    goto LABEL_42;
  }
  if (v98.__r_.__value_.__l.__size_ != v98.__r_.__value_.__r.__words[0])
  {
    v38 = 0;
    do
    {
      v39 = MIL::IRUnknownProperty::Make(*a1, 0);
      *(_QWORD *)(v98.__r_.__value_.__r.__words[0] + 8 * v38++) = v39;
    }
    while (v38 < (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 3);
  }
LABEL_42:
  memset(&v97, 0, sizeof(v97));
  std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
  v40 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  v41 = v40;
  if (SBYTE7(v90) < 0)
  {
    operator delete(__p[0]);
    if (!v41)
      goto LABEL_63;
  }
  else if (!v40)
  {
    goto LABEL_63;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
  v42 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v43 = MIL::IRValueType::AsTensorType(v42);
  if (SBYTE7(v90) < 0)
    operator delete(__p[0]);
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 96))(v43);
  if (*(_QWORD *)(v44 + 8) == *(_QWORD *)v44)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v45 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v44);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45);
  std::vector<MIL::IRProperty const*>::vector(__p, v46);
  if (v97.__r_.__value_.__r.__words[0])
  {
    v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  v97.__r_.__value_.__r.__words[2] = v90;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
  v47 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)__p);
  v48 = v47;
  if (SBYTE7(v90) < 0)
  {
    operator delete(__p[0]);
    if (v48)
      goto LABEL_53;
  }
  else if (v47)
  {
LABEL_53:
    std::string::basic_string[abi:ne180100]<0>(__p, "num_slices");
    v49 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
    v50 = (uint64_t *)MIL::IRValue::AsTensor(v49);
    v92[0] = MIL::IRTensorValue::GetDataView<long long>(v50);
    v92[1] = v51;
    if (SBYTE7(v90) < 0)
      operator delete(__p[0]);
    if (v97.__r_.__value_.__l.__size_ != v97.__r_.__value_.__r.__words[0])
    {
      v52 = 0;
      do
      {
        v53 = *a1;
        v54 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(v92, v52);
        v55 = MIL::IRConstantProperty::MakeInt64Scalar(v53, *v54);
        *(_QWORD *)(v97.__r_.__value_.__r.__words[0] + 8 * v52++) = v55;
      }
      while (v52 < (uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3);
    }
    goto LABEL_63;
  }
  if (v97.__r_.__value_.__l.__size_ != v97.__r_.__value_.__r.__words[0])
  {
    v56 = 0;
    do
    {
      v57 = MIL::IRUnknownProperty::Make(*a1, 0);
      *(_QWORD *)(v97.__r_.__value_.__r.__words[0] + 8 * v56++) = v57;
    }
    while (v56 < (uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3);
  }
LABEL_63:
  v58 = *a1;
  *(_OWORD *)__p = 0u;
  v90 = 0u;
  v91 = 1065353216;
  v59 = MIL::IRPixelBufferValueType::MakeWithShapeBytesPerRowNumSlices(v58, v9, (__int128 *)v103, (std::__shared_weak_count_vtbl **)&v98, (std::__shared_weak_count_vtbl **)&v97, (uint64_t *)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v60 = (uint64_t *)operator new(8uLL);
  *a4 = v60;
  *v60++ = v59;
  a4[1] = v60;
  a4[2] = v60;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  if (v97.__r_.__value_.__r.__words[0])
  {
    v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
}

void sub_1E06FB100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,char a61)
{
  void *v61;
  char v62;
  uint64_t v63;
  void *v65;
  void *v66;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a61);
  if (a58 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  if ((v62 & 1) != 0)
    __cxa_free_exception(v61);
  v65 = *(void **)(v63 - 208);
  if (v65)
  {
    *(_QWORD *)(v63 - 200) = v65;
    operator delete(v65);
  }
  v66 = *(void **)(v63 - 184);
  if (v66)
  {
    *(_QWORD *)(v63 - 176) = v66;
    operator delete(v66);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::`anonymous namespace'::ValidatePropertyVecPtr(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  _QWORD v21[6];
  int v22;
  void *__p;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  if (a1 || !a2)
  {
    if (!a1 || a2)
    {
      if (a1 && a2)
      {
        v15 = (std::__shared_weak_count *)a3[1];
        v20[0] = *a3;
        v20[1] = (uint64_t)v15;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        MIL::Operators::Common::Shared::ValidatePropertyVec(a1, a2, v20, (MIL::ValidationResult *)v21);
        if (v15)
        {
          v18 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (!(*(unsigned int (**)(_QWORD *))(v21[0] + 16))(v21))
        {
          MIL::MILResult::MILResult((std::string *)a4, (uint64_t)v21);
          *(_QWORD *)a4 = &off_1EA99F170;
          *(_DWORD *)(a4 + 48) = v22;
          MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v21);
          return;
        }
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v21);
      }
      MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a4);
      return;
    }
    v11 = a3[1];
    v25 = *a3;
    v26 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a4, &v25, 313, &__p);
    if (v24 < 0)
      operator delete(__p);
    v8 = v26;
    if (v26)
    {
      v14 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
      goto LABEL_22;
    }
  }
  else
  {
    v5 = a3[1];
    v29 = *a3;
    v30 = (std::__shared_weak_count *)v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a4, &v29, 313, &v27);
    if (v28 < 0)
      operator delete(v27);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
LABEL_22:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1E06FB68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<long long const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 8 * a2;
}

void sub_1E06FB754(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidateTensorBufferToTensor(MIL::Operators::Common::Shared::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRMemoryLayoutValueType *v6;
  MIL::IRTensorBufferValueType *v7;
  MIL::IRValueType *OutputType;
  uint64_t v9;
  uint64_t Shape;
  uint64_t v11;
  size_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *RowAlignmentInBytes;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  void *v26[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *v34;
  char v35;

  std::string::basic_string[abi:ne180100]<0>(&v34, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(ParameterType);
  v7 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v6);
  if (v35 < 0)
    operator delete(v34);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v9 = MIL::IRValueType::AsTensorType(OutputType);
  Shape = MIL::IRTensorBufferValueType::GetShape(v7);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v12 = *(_QWORD *)(Shape + 8) - *(_QWORD *)Shape;
  if (v12 == *(_QWORD *)(v11 + 8) - *(_QWORD *)v11 && !memcmp(*(const void **)Shape, *(const void **)v11, v12))
  {
    RowAlignmentInBytes = (void *)MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(v7);
    if (!MIL::IRProperty::TryAsUnknown(RowAlignmentInBytes))
    {
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v22 = (std::__shared_weak_count *)LocationPtr[1];
    v28 = *LocationPtr;
    v29 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v26, "Row_alignment_in_bytes in input cannot be unknown.");
    MIL::ValidationResult::ValidationResult(a2, &v28, 313, v26);
    if (v27 < 0)
      operator delete(v26[0]);
    v17 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v19 = __ldaxr(v25);
      while (__stlxr(v19 - 1, v25));
      goto LABEL_13;
    }
  }
  else
  {
    v13 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v14 = (std::__shared_weak_count *)v13[1];
    v32 = *v13;
    v33 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Output shape must match the input shape.");
    MIL::ValidationResult::ValidationResult(a2, &v32, 313, __p);
    if (v31 < 0)
      operator delete(__p[0]);
    v17 = v33;
    if (v33)
    {
      v18 = (unint64_t *)&v33->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_13:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
}

void sub_1E06FB95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorBufferToTensor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRMemoryLayoutValueType *v7;
  MIL::IRTensorBufferValueType *v8;
  uint64_t Shape;
  void (***v10)(MIL::MILContextImpl *__hidden);
  int DataType;
  uint64_t v12;
  uint64_t *v13;
  void *__p;
  void *v15;
  uint64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(SingleValueType);
  v8 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v7);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  Shape = MIL::IRTensorBufferValueType::GetShape(v8);
  v15 = 0;
  v16 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)Shape, *(_QWORD *)(Shape + 8), (uint64_t)(*(_QWORD *)(Shape + 8) - *(_QWORD *)Shape) >> 3);
  v10 = *a1;
  DataType = MIL::IRTensorBufferValueType::GetDataType(v8);
  v12 = MIL::IRTensorValueType::MakeWithShape(v10, DataType, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = (uint64_t *)operator new(8uLL);
  *a3 = v13;
  *v13++ = v12;
  a3[1] = v13;
  a3[2] = v13;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_1E06FBAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::Shared::CustomValidators::ValidateTensorToTensorBuffer(MIL::Operators::Common::Shared::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRTypedArgument *v6;
  MIL::IRValueType *v7;
  MIL::IRValueType *v8;
  MIL::IRTypedArgument *v9;
  MIL::IRValueType *OutputType;
  MIL::IRMemoryLayoutValueType *v11;
  MIL::IRTensorBufferValueType *v12;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  void **v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  void **v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  void **v29;
  MIL::IRTypedArgument *v30;
  _QWORD *v31;
  void **v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  void **v48;
  _QWORD *v49;
  unint64_t *v50;
  unint64_t v51;
  void **v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  void **v56;
  unint64_t *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  void **v61;
  _QWORD *v62;
  void **v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  void **v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  unint64_t *v79;
  unint64_t v80;
  void **v81;
  MIL::IRValueType **v82;
  _BYTE *v83;
  MIL::IRMemoryLayoutValueType *v84;
  MIL::IRTensorBufferValueType *v85;
  uint64_t Rank;
  uint64_t *Shape;
  _QWORD *v88;
  uint64_t *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *Strides;
  _QWORD *v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  void *RowAlignmentInBytes;
  _QWORD *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  MIL::IRProperty *v129;
  MIL::IRConstantProperty *v130;
  uint64_t UInt64ScalarValue;
  MIL::IRProperty *v132;
  MIL::IRConstantProperty *v133;
  uint64_t *InterleaveFactors;
  _QWORD *v135;
  uint64_t *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158[2];
  void *v159[2];
  char v160;
  _QWORD v161[2];
  void *v162[2];
  char v163;
  _QWORD v164[2];
  void *v165[2];
  char v166;
  _QWORD v167[2];
  uint64_t v168[2];
  void *v169[2];
  char v170;
  _QWORD v171[2];
  uint64_t v172[2];
  void *v173[2];
  char v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void *v177[2];
  char v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  _QWORD v181[2];
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  void **v188;
  void *v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192[2];
  char v193;
  _QWORD v194[5];
  void *__p[2];
  char v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  void **v209;
  std::__shared_weak_count *v210;
  _BYTE v211[32];
  int v212;
  int v213;
  void **v214;
  _QWORD *v215;
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v211, "input");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRTypedArgument *)MIL::IRValueType::AsTensorType(ParameterType);
  if ((v211[23] & 0x80000000) != 0)
    operator delete(*(void **)v211);
  std::string::basic_string[abi:ne180100]<0>(v211, "strides");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v211, 0, &v207);
  if ((v211[23] & 0x80000000) != 0)
    operator delete(*(void **)v211);
  std::string::basic_string[abi:ne180100]<0>(v211, "strides");
  v7 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType(this, (uint64_t)v211, 0);
  if ((v211[23] & 0x80000000) != 0)
    operator delete(*(void **)v211);
  std::string::basic_string[abi:ne180100]<0>(v211, "row_alignment_in_bytes");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v211, 0, &v205);
  if ((v211[23] & 0x80000000) != 0)
    operator delete(*(void **)v211);
  std::string::basic_string[abi:ne180100]<0>(v211, "interleave_factors");
  MIL::IROperation::TryGetParameterValueSharedPtr(this, (uint64_t)v211, 0, &v203);
  if ((v211[23] & 0x80000000) != 0)
    operator delete(*(void **)v211);
  std::string::basic_string[abi:ne180100]<0>(v211, "interleave_factors");
  v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v9 = (MIL::IRTypedArgument *)MIL::IRValueType::AsTensorType(v8);
  if ((v211[23] & 0x80000000) != 0)
    operator delete(*(void **)v211);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(this, 0);
  v11 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  v12 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v11);
  if (v7)
  {
    if (v205)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v14 = (std::__shared_weak_count *)LocationPtr[1];
      v197 = *LocationPtr;
      v198 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Both strides and row_alignment_in_bytes cannot be specified as an input parameter simultaneously in ios18 and above opsets.");
      MIL::ValidationResult::ValidationResult(a2, &v197, 315, __p);
      if (v196 < 0)
        operator delete(__p[0]);
      v17 = v198;
      if (v198)
      {
        v18 = (unint64_t *)&v198->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        goto LABEL_54;
      }
      goto LABEL_231;
    }
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(v192, "input");
    MIL::IRTypedArgument::Make(v6, &v188);
    v214 = v188;
    if (v188)
    {
      v20 = (_QWORD *)operator new();
      v21 = v188;
      *v20 = &unk_1EA994910;
      v20[1] = 0;
      v20[2] = 0;
      v20[3] = v21;
    }
    else
    {
      v20 = 0;
    }
    v215 = v20;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v209 = &v189;
    LOBYTE(v210) = 0;
    v22 = operator new(0x10uLL);
    v189 = v22;
    v191 = v22 + 2;
    *v22 = v214;
    v22[1] = v20;
    if (v20)
    {
      v23 = v20 + 1;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v190 = v22 + 2;
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v211, (__int128 *)v192, (_QWORD **)&v189);
    std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v194, v211, 1);
    v209 = (void **)&v211[24];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
    if ((v211[23] & 0x80000000) != 0)
      operator delete(*(void **)v211);
    v209 = &v189;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
    v25 = v188;
    v188 = 0;
    if (v25)
      (*((void (**)(void **))*v25 + 1))(v25);
    if (v193 < 0)
      operator delete(v192[0]);
    if (v207)
    {
      std::string::basic_string[abi:ne180100]<0>(v192, "strides");
      v186 = v207;
      v187 = v208;
      if (v208)
      {
        v26 = (unint64_t *)&v208->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      MIL::IRTypedArgument::Make(&v186, &v188);
      v214 = v188;
      if (v188)
      {
        v28 = (_QWORD *)operator new();
        v29 = v188;
        *v28 = &unk_1EA994910;
        v28[1] = 0;
        v28[2] = 0;
        v28[3] = v29;
      }
      else
      {
        v28 = 0;
      }
      v215 = v28;
      v188 = 0;
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v209 = &v189;
      LOBYTE(v210) = 0;
      v38 = operator new(0x10uLL);
      v189 = v38;
      v191 = v38 + 2;
      *v38 = v214;
      v38[1] = v28;
      if (v28)
      {
        v39 = v28 + 1;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v190 = v38 + 2;
      std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v211, (__int128 *)v192, (_QWORD **)&v189);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v194, v211, (__int128 *)v211);
      v209 = (void **)&v211[24];
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      if ((v211[23] & 0x80000000) != 0)
        operator delete(*(void **)v211);
      v209 = &v189;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
      v41 = v188;
      v188 = 0;
      if (v41)
        (*((void (**)(void **))*v41 + 1))(v41);
      v42 = v187;
      if (v187)
      {
        v43 = (unint64_t *)&v187->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        goto LABEL_67;
      }
    }
    else if (v7)
    {
      std::string::basic_string[abi:ne180100]<0>(v192, "strides");
      v30 = (MIL::IRTypedArgument *)MIL::IRValueType::AsTensorType(v7);
      MIL::IRTypedArgument::Make(v30, &v188);
      v214 = v188;
      if (v188)
      {
        v31 = (_QWORD *)operator new();
        v32 = v188;
        *v31 = &unk_1EA994910;
        v31[1] = 0;
        v31[2] = 0;
        v31[3] = v32;
      }
      else
      {
        v31 = 0;
      }
      v215 = v31;
      v188 = 0;
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v209 = &v189;
      LOBYTE(v210) = 0;
      v49 = operator new(0x10uLL);
      v189 = v49;
      v191 = v49 + 2;
      *v49 = v214;
      v49[1] = v31;
      if (v31)
      {
        v50 = v31 + 1;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v190 = v49 + 2;
      std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v211, (__int128 *)v192, (_QWORD **)&v189);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v194, v211, (__int128 *)v211);
      v209 = (void **)&v211[24];
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      if ((v211[23] & 0x80000000) != 0)
        operator delete(*(void **)v211);
      v209 = &v189;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
      v52 = v188;
      v188 = 0;
      if (v52)
        (*((void (**)(void **))*v52 + 1))(v52);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v192, "row_alignment_in_bytes");
      v184 = v205;
      v185 = v206;
      if (v206)
      {
        v45 = (unint64_t *)&v206->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      MIL::IRTypedArgument::Make(&v184, &v188);
      v214 = v188;
      if (v188)
      {
        v47 = (_QWORD *)operator new();
        v48 = v188;
        *v47 = &unk_1EA994910;
        v47[1] = 0;
        v47[2] = 0;
        v47[3] = v48;
      }
      else
      {
        v47 = 0;
      }
      v215 = v47;
      v188 = 0;
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v209 = &v189;
      LOBYTE(v210) = 0;
      v53 = operator new(0x10uLL);
      v189 = v53;
      v191 = v53 + 2;
      *v53 = v214;
      v53[1] = v47;
      if (v47)
      {
        v54 = v47 + 1;
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v190 = v53 + 2;
      std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v211, (__int128 *)v192, (_QWORD **)&v189);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v194, v211, (__int128 *)v211);
      v209 = (void **)&v211[24];
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      if ((v211[23] & 0x80000000) != 0)
        operator delete(*(void **)v211);
      v209 = &v189;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
      v56 = v188;
      v188 = 0;
      if (v56)
        (*((void (**)(void **))*v56 + 1))(v56);
      v42 = v185;
      if (v185)
      {
        v57 = (unint64_t *)&v185->__shared_owners_;
        do
          v44 = __ldaxr(v57);
        while (__stlxr(v44 - 1, v57));
LABEL_67:
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    if (v193 < 0)
      operator delete(v192[0]);
    if (v203)
    {
      std::string::basic_string[abi:ne180100]<0>(v192, "interleave_factors");
      v182 = v203;
      v183 = v204;
      if (v204)
      {
        v58 = (unint64_t *)&v204->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::IRTypedArgument::Make(&v182, &v188);
      v214 = v188;
      if (v188)
      {
        v60 = (_QWORD *)operator new();
        v61 = v188;
        *v60 = &unk_1EA994910;
        v60[1] = 0;
        v60[2] = 0;
        v60[3] = v61;
      }
      else
      {
        v60 = 0;
      }
      v215 = v60;
      v188 = 0;
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v209 = &v189;
      LOBYTE(v210) = 0;
      v64 = operator new(0x10uLL);
      v189 = v64;
      v191 = v64 + 2;
      *v64 = v214;
      v64[1] = v60;
      if (v60)
      {
        v65 = v60 + 1;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v190 = v64 + 2;
      std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v211, (__int128 *)v192, (_QWORD **)&v189);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v194, v211, (__int128 *)v211);
      v209 = (void **)&v211[24];
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      if ((v211[23] & 0x80000000) != 0)
        operator delete(*(void **)v211);
      v209 = &v189;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
      v67 = v188;
      v188 = 0;
      if (v67)
        (*((void (**)(void **))*v67 + 1))(v67);
      v68 = v183;
      if (v183)
      {
        v69 = (unint64_t *)&v183->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v192, "interleave_factors");
      MIL::IRTypedArgument::Make(v9, &v188);
      v214 = v188;
      if (v188)
      {
        v62 = (_QWORD *)operator new();
        v63 = v188;
        *v62 = &unk_1EA994910;
        v62[1] = 0;
        v62[2] = 0;
        v62[3] = v63;
      }
      else
      {
        v62 = 0;
      }
      v215 = v62;
      v188 = 0;
      v189 = 0;
      v190 = 0;
      v191 = 0;
      v209 = &v189;
      LOBYTE(v210) = 0;
      v71 = operator new(0x10uLL);
      v189 = v71;
      v191 = v71 + 2;
      *v71 = v214;
      v71[1] = v62;
      if (v62)
      {
        v72 = v62 + 1;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v190 = v71 + 2;
      std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v211, (__int128 *)v192, (_QWORD **)&v189);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>((uint64_t)v194, v211, (__int128 *)v211);
      v209 = (void **)&v211[24];
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      if ((v211[23] & 0x80000000) != 0)
        operator delete(*(void **)v211);
      v209 = &v189;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v209);
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v214);
      v74 = v188;
      v188 = 0;
      if (v74)
        (*((void (**)(void **))*v74 + 1))(v74);
    }
    if (v193 < 0)
      operator delete(v192[0]);
    MIL::MILContext::Make(v211);
    v209 = *(void ***)v211;
    if (*(_QWORD *)v211)
    {
      v75 = (std::__shared_weak_count *)operator new();
      v76 = *(std::__shared_weak_count_vtbl **)v211;
      v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F0A8;
      v75->__shared_owners_ = 0;
      v75->__shared_weak_owners_ = 0;
      v75[1].__vftable = v76;
    }
    else
    {
      v75 = 0;
    }
    v210 = v75;
    MIL::UnknownLocation::Make(&v188);
    v181[0] = v188;
    if (v188)
    {
      v77 = (std::__shared_weak_count *)operator new();
      v78 = (std::__shared_weak_count_vtbl *)v188;
      v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
      v77->__shared_owners_ = 0;
      v77->__shared_weak_owners_ = 0;
      v77[1].__vftable = v78;
    }
    else
    {
      v77 = 0;
    }
    v181[1] = v77;
    v188 = 0;
    v189 = 0;
    memset(v211, 0, sizeof(v211));
    v212 = 1065353216;
    v190 = 0;
    v191 = 0;
    MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer((void (****)(MIL::MILContextImpl *__hidden))&v209, v181, v194, (uint64_t **)v192);
    v214 = &v189;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v214);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v211);
    if (v77)
    {
      v79 = (unint64_t *)&v77->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v81 = v188;
    v188 = 0;
    if (v81)
      (*((void (**)(void **))*v81 + 1))(v81);
    v82 = (MIL::IRValueType **)v192[0];
    v83 = v192[1];
    if ((*(uint64_t (**)(MIL::Operators::Common::Shared::CustomValidators *))(*(_QWORD *)this + 192))(this) == (v83 - (_BYTE *)v82) >> 3)
    {
      v84 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(*v82);
      v85 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v84);
      Rank = MIL::IRTensorBufferValueType::GetRank(v12);
      if (Rank == MIL::IRTensorBufferValueType::GetRank(v85))
      {
        Shape = (uint64_t *)MIL::IRTensorBufferValueType::GetShape(v12);
        v88 = (_QWORD *)MIL::IRTensorBufferValueType::GetShape(v85);
        v89 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v90 = (std::__shared_weak_count *)v89[1];
        v172[0] = *v89;
        v172[1] = (uint64_t)v90;
        if (v90)
        {
          v91 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldxr(v91);
          while (__stxr(v92 + 1, v91));
        }
        if (v90)
        {
          v93 = (unint64_t *)&v90->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v211 + 16))(v211) & 1) != 0)
        {
          MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v211);
          if (v7)
          {
            if (!MIL::IRTensorBufferValueType::TryGetStrides(v12))
            {
              v121 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
              v122 = v121[1];
              v171[0] = *v121;
              v171[1] = v122;
              if (v122)
              {
                v123 = (unint64_t *)(v122 + 8);
                do
                  v124 = __ldxr(v123);
                while (__stxr(v124 + 1, v123));
              }
              std::string::basic_string[abi:ne180100]<0>(v169, "Strides is one of the op input params while the output type does not have strides specified.");
              MIL::ValidationResult::ValidationResult(a2, v171, 313, v169);
              if (v170 < 0)
                operator delete(v169[0]);
              v108 = v171;
              goto LABEL_209;
            }
            Strides = (uint64_t *)MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)v12);
            v96 = (_QWORD *)MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)v85);
            std::string::basic_string[abi:ne180100]<0>(&v189, "strides");
            v97 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
            v98 = (std::__shared_weak_count *)v97[1];
            v168[0] = *v97;
            v168[1] = (uint64_t)v98;
            if (v98)
            {
              v99 = (unint64_t *)&v98->__shared_owners_;
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            MIL::Operators::Common::Shared::ValidatePropertyVec(Strides, v96, v168, (MIL::ValidationResult *)v211);
            if (v98)
            {
              v101 = (unint64_t *)&v98->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
            }
            if (SHIBYTE(v191) < 0)
              operator delete(v189);
            if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v211 + 16))(v211) & 1) == 0)
            {
              MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v211);
              goto LABEL_195;
            }
            MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v211);
          }
          if (v205)
          {
            if (!MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(v12))
            {
              v125 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
              v126 = v125[1];
              v167[0] = *v125;
              v167[1] = v126;
              if (v126)
              {
                v127 = (unint64_t *)(v126 + 8);
                do
                  v128 = __ldxr(v127);
                while (__stxr(v128 + 1, v127));
              }
              std::string::basic_string[abi:ne180100]<0>(v165, "Row_alignment_in_bytes is one of the op input params while the output type does not have row_alignment_in_bytes specified.");
              MIL::ValidationResult::ValidationResult(a2, v167, 313, v165);
              if (v166 < 0)
                operator delete(v165[0]);
              v108 = v167;
              goto LABEL_209;
            }
            if (v205)
            {
              RowAlignmentInBytes = (void *)MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(v12);
              if (MIL::IRProperty::TryAsUnknown(RowAlignmentInBytes))
              {
                v104 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
                v105 = v104[1];
                v164[0] = *v104;
                v164[1] = v105;
                if (v105)
                {
                  v106 = (unint64_t *)(v105 + 8);
                  do
                    v107 = __ldxr(v106);
                  while (__stxr(v107 + 1, v106));
                }
                std::string::basic_string[abi:ne180100]<0>(v162, "Row_alignment_in_bytes in output cannot be unknown.");
                MIL::ValidationResult::ValidationResult(a2, v164, 313, v162);
                if (v163 < 0)
                  operator delete(v162[0]);
                v108 = v164;
LABEL_209:
                std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v108);
                goto LABEL_223;
              }
              v129 = (MIL::IRProperty *)MIL::IRTensorBufferValueType::GetRowAlignmentInBytes((MIL::IRTensorBufferValueTypeImpl **)v12);
              v130 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v129);
              UInt64ScalarValue = MIL::IRConstantProperty::GetUInt64ScalarValue(v130);
              v132 = (MIL::IRProperty *)MIL::IRTensorBufferValueType::GetRowAlignmentInBytes((MIL::IRTensorBufferValueTypeImpl **)v85);
              v133 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v132);
              if (UInt64ScalarValue != MIL::IRConstantProperty::GetUInt64ScalarValue(v133))
              {
                v154 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
                v155 = v154[1];
                v161[0] = *v154;
                v161[1] = v155;
                if (v155)
                {
                  v156 = (unint64_t *)(v155 + 8);
                  do
                    v157 = __ldxr(v156);
                  while (__stxr(v157 + 1, v156));
                }
                std::string::basic_string[abi:ne180100]<0>(v159, "Unexpected value for row_alignment_in_bytes in the output tensor_buffer.");
                MIL::ValidationResult::ValidationResult(a2, v161, 313, v159);
                if (v160 < 0)
                  operator delete(v159[0]);
                v108 = v161;
                goto LABEL_209;
              }
            }
          }
          InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(v12);
          v135 = (_QWORD *)MIL::IRTensorBufferValueType::GetInterleaveFactors(v85);
          std::string::basic_string[abi:ne180100]<0>(&v189, "interleave factors");
          v136 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          v137 = (std::__shared_weak_count *)v136[1];
          v158[0] = *v136;
          v158[1] = (uint64_t)v137;
          if (v137)
          {
            v138 = (unint64_t *)&v137->__shared_owners_;
            do
              v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }
          MIL::Operators::Common::Shared::ValidatePropertyVec(InterleaveFactors, v135, v158, (MIL::ValidationResult *)v211);
          if (v137)
          {
            v140 = (unint64_t *)&v137->__shared_owners_;
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          if (SHIBYTE(v191) < 0)
            operator delete(v189);
          if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v211 + 16))(v211) & 1) != 0)
          {
            MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v211);
            MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
            goto LABEL_223;
          }
          MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v211);
        }
        else
        {
          MIL::MILResult::MILResult((std::string *)a2, (uint64_t)v211);
        }
LABEL_195:
        *(_QWORD *)a2 = &off_1EA99F170;
        *(_DWORD *)(a2 + 48) = v213;
        MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v211);
LABEL_223:
        if (v192[0])
          operator delete(v192[0]);
        v142 = v210;
        if (v210)
        {
          v143 = (unint64_t *)&v210->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v194);
        goto LABEL_231;
      }
      v116 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v117 = (std::__shared_weak_count *)v116[1];
      v175 = *v116;
      v176 = v117;
      if (v117)
      {
        v118 = (unint64_t *)&v117->__shared_owners_;
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      std::string::basic_string[abi:ne180100]<0>(v173, "Unexpected output rank.");
      MIL::ValidationResult::ValidationResult(a2, &v175, 313, v173);
      if (v174 < 0)
        operator delete(v173[0]);
      v113 = v176;
      if (!v176)
        goto LABEL_223;
      v120 = (unint64_t *)&v176->__shared_owners_;
      do
        v115 = __ldaxr(v120);
      while (__stlxr(v115 - 1, v120));
    }
    else
    {
      v109 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v110 = (std::__shared_weak_count *)v109[1];
      v179 = *v109;
      v180 = v110;
      if (v110)
      {
        v111 = (unint64_t *)&v110->__shared_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      std::string::basic_string[abi:ne180100]<0>(v177, "Mismatch in the number of outputs.");
      MIL::ValidationResult::ValidationResult(a2, &v179, 313, v177);
      if (v178 < 0)
        operator delete(v177[0]);
      v113 = v180;
      if (!v180)
        goto LABEL_223;
      v114 = (unint64_t *)&v180->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
    }
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
    goto LABEL_223;
  }
  if (v205)
    goto LABEL_25;
  v33 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v34 = (std::__shared_weak_count *)v33[1];
  v201 = *v33;
  v202 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  std::string::basic_string[abi:ne180100]<0>(v199, "One of strides or row_alignment_in_bytes is a required input parameter in ios18 and above opsets.");
  MIL::ValidationResult::ValidationResult(a2, &v201, 316, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v17 = v202;
  if (v202)
  {
    v37 = (unint64_t *)&v202->__shared_owners_;
    do
      v19 = __ldaxr(v37);
    while (__stlxr(v19 - 1, v37));
LABEL_54:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_231:
  v145 = v204;
  if (v204)
  {
    v146 = (unint64_t *)&v204->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = v206;
  if (v206)
  {
    v149 = (unint64_t *)&v206->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v208;
  if (v208)
  {
    v152 = (unint64_t *)&v208->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
}

void sub_1E06FCDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a60)
    operator delete(a60);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v63 - 176);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a63);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v63 - 224);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v63 - 208);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v63 - 192);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::CustomValueTypeInference::ValueTypeInferenceTensorToTensorBuffer(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  MIL::IRValueType *v10;
  MIL::IRTensorValueType *v11;
  unsigned __int8 *v12;
  MIL::IRValueType *v13;
  MIL::IRTensorValueType *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t SingleValue;
  uint64_t v25;
  MIL::IRValue *v26;
  uint64_t *v27;
  std::string::size_type v28;
  unint64_t v29;
  _QWORD *v30;
  void (***v31)(MIL::MILContextImpl *__hidden);
  MIL::MILContext **v32;
  uint64_t Int64Scalar;
  MIL::IRValue *v34;
  const void *v35;
  MIL::MILContext *v36;
  int v37;
  BOOL v39;
  BOOL v41;
  uint8x8_t v42;
  uint64_t UInt64Scalar;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  MIL::IRValue *v51;
  void *v52;
  void *v53;
  unint64_t v54;
  void (***v55)(MIL::MILContextImpl *__hidden);
  unsigned __int8 *v56;
  uint64_t UInt8Scalar;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (***v61)(MIL::MILContextImpl *__hidden);
  int v62;
  uint64_t v63;
  uint64_t *v64;
  void *exception;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  void *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  void *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  void *__p[3];
  __int128 v95;
  std::string::size_type v96;
  __int128 v97;
  __int128 v98;
  std::string::size_type v99;
  __int128 v100;
  std::string v101;
  __int128 v102;
  std::string::size_type v103;
  __int128 v104;
  void *v105;
  _BYTE *v106;
  uint64_t v107;
  std::string v108[2];
  int v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  _BYTE v112[32];
  int v113;
  int v114;
  _QWORD v115[3];
  _QWORD v116[2];
  _BYTE v117[56];

  if (a3[3] != 3)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v66 = a2[1];
    v116[0] = *a2;
    v116[1] = v66;
    if (v66)
    {
      v67 = (unint64_t *)(v66 + 8);
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    std::string::basic_string[abi:ne180100]<0>(v115, "Three inputs are expected.");
    MIL::ValidationResult::ValidationResult(v117, v116, 300, v115);
    MIL::ValidationError::ValidationError(exception, v117);
  }
  std::string::basic_string[abi:ne180100]<0>(v112, "input");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v112);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  std::string::basic_string[abi:ne180100]<0>(v112, "interleave_factors");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v112);
  v11 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v10);
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  std::string::basic_string[abi:ne180100]<0>(v112, "strides");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v112);
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v112, "strides");
    v13 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v112);
    v14 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v13);
    if ((v112[23] & 0x80000000) != 0)
      operator delete(*(void **)v112);
    v15 = (std::__shared_weak_count *)a2[1];
    v110 = *a2;
    v111 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    MIL::Operators::Common::Shared::ValidateStridesAndInterleaveFactors(v9, v14, v11, (uint64_t)&v110, (MIL::ValidationResult *)v112);
    v18 = v111;
    if (v111)
    {
      v19 = (unint64_t *)&v111->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v112))
    {
      v69 = __cxa_allocate_exception(0x48uLL);
      MIL::MILResult::MILResult(v108, (uint64_t)v112);
      v108[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
      v109 = v114;
      MIL::ValidationError::ValidationError(v69, v108);
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v112);
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v21 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v14 + 96))(v14);
    if (*(_QWORD *)(v21 + 8) == *(_QWORD *)v21)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v22 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v21);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
    std::vector<MIL::IRProperty const*>::resize((uint64_t)&v105, v23);
    std::string::basic_string[abi:ne180100]<0>(v112, "strides");
    SingleValue = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v112);
    v25 = SingleValue;
    if ((v112[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v112);
      if (v25)
        goto LABEL_23;
    }
    else if (SingleValue)
    {
LABEL_23:
      std::string::basic_string[abi:ne180100]<0>(v112, "strides");
      v26 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v112);
      v27 = (uint64_t *)MIL::IRValue::AsTensor(v26);
      v101.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<long long>(v27);
      v101.__r_.__value_.__l.__size_ = v28;
      if ((v112[23] & 0x80000000) != 0)
        operator delete(*(void **)v112);
      if (v106 != v105)
      {
        v29 = 0;
        do
        {
          v30 = (_QWORD *)MIL::Util::Span<long long const,18446744073709551615ul>::At(&v101, v29);
          v31 = *a1;
          if (*v30 == -1)
          {
            Int64Scalar = MIL::IRUnknownProperty::Make(*a1, 0);
          }
          else
          {
            v32 = (MIL::MILContext **)MIL::Util::Span<long long const,18446744073709551615ul>::At(&v101, v29);
            Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v31, *v32);
          }
          *((_QWORD *)v105 + v29++) = Int64Scalar;
        }
        while (v29 < (v106 - (_BYTE *)v105) >> 3);
      }
LABEL_58:
      UInt64Scalar = 0;
      goto LABEL_59;
    }
    if (v106 != v105)
    {
      v44 = 0;
      do
      {
        v45 = MIL::IRUnknownProperty::Make(*a1, 0);
        *((_QWORD *)v105 + v44++) = v45;
      }
      while (v44 < (v106 - (_BYTE *)v105) >> 3);
    }
    goto LABEL_58;
  }
  v105 = 0;
  v106 = 0;
  v107 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "row_alignment_in_bytes");
  v34 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v112);
  v35 = (const void *)MIL::IRValue::AsTensor(v34);
  v36 = (MIL::MILContext *)MIL::IRValue::GetScalar<unsigned long long>(v35);
  if ((v112[23] & 0x80000000) != 0)
    operator delete(*(void **)v112);
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v39 = v37 == 15 || v37 == 10 || v37 == 4;
  if (v39 && (unint64_t)v36 <= 1)
  {
    v70 = __cxa_allocate_exception(0x48uLL);
    v71 = a2[1];
    *(_QWORD *)&v104 = *a2;
    *((_QWORD *)&v104 + 1) = v71;
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    std::to_string(&v101, (unint64_t)v36);
    v74 = std::string::insert(&v101, 0, "Row_alignment_in_bytes is ");
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    *(_QWORD *)&v112[16] = *((_QWORD *)&v74->__r_.__value_.__l + 2);
    *(_OWORD *)v112 = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    v76 = std::string::append((std::string *)v112, ", it needs to have a minimum value equal to the natural alignment 2 of the input datatype");
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v103 = v76->__r_.__value_.__r.__words[2];
    v102 = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v70, &v104, (uint64_t)&v102, 315);
  }
  v41 = v37 == 16 || v37 == 11 || v37 == 5;
  if (v41 && (unint64_t)v36 <= 3)
  {
    v78 = __cxa_allocate_exception(0x48uLL);
    v79 = a2[1];
    *(_QWORD *)&v100 = *a2;
    *((_QWORD *)&v100 + 1) = v79;
    if (v79)
    {
      v80 = (unint64_t *)(v79 + 8);
      do
        v81 = __ldxr(v80);
      while (__stxr(v81 + 1, v80));
    }
    std::to_string(&v101, (unint64_t)v36);
    v82 = std::string::insert(&v101, 0, "Row_alignment_in_bytes is ");
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    *(_QWORD *)&v112[16] = *((_QWORD *)&v82->__r_.__value_.__l + 2);
    *(_OWORD *)v112 = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    v84 = std::string::append((std::string *)v112, ", it needs to have a minimum value equal to the natural alignment 4 of the input datatype");
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v99 = v84->__r_.__value_.__r.__words[2];
    v98 = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v78, &v100, (uint64_t)&v98, 315);
  }
  v42 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
  v42.i16[0] = vaddlv_u8(v42);
  if (v42.u32[0] != 1)
  {
    v86 = __cxa_allocate_exception(0x48uLL);
    v87 = a2[1];
    *(_QWORD *)&v97 = *a2;
    *((_QWORD *)&v97 + 1) = v87;
    if (v87)
    {
      v88 = (unint64_t *)(v87 + 8);
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    std::to_string(&v101, (unint64_t)v36);
    v90 = std::string::insert(&v101, 0, "Row_alignment_in_bytes is ");
    v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    *(_QWORD *)&v112[16] = *((_QWORD *)&v90->__r_.__value_.__l + 2);
    *(_OWORD *)v112 = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    v92 = std::string::append((std::string *)v112, ", it needs to be a power-of-2.");
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v96 = v92->__r_.__value_.__r.__words[2];
    v95 = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)v86, &v97, (uint64_t)&v95, 315);
  }
  UInt64Scalar = MIL::IRConstantProperty::MakeUInt64Scalar(*a1, v36);
LABEL_59:
  v46 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v11 + 96))(v11);
  if (*(_QWORD *)(v46 + 8) == *(_QWORD *)v46)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v47 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v46);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 48))(v47);
  std::vector<MIL::IRProperty const*>::vector(&v101, v48);
  std::string::basic_string[abi:ne180100]<0>(v112, "interleave_factors");
  v49 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v112);
  v50 = v49;
  if ((v112[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v112);
    if (v50)
      goto LABEL_62;
  }
  else if (v49)
  {
LABEL_62:
    std::string::basic_string[abi:ne180100]<0>(v112, "interleave_factors");
    v51 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v112);
    v52 = (void *)MIL::IRValue::AsTensor(v51);
    __p[0] = (void *)MIL::IRTensorValue::GetDataView<unsigned char>(v52);
    __p[1] = v53;
    if ((v112[23] & 0x80000000) != 0)
      operator delete(*(void **)v112);
    if (v101.__r_.__value_.__l.__size_ != v101.__r_.__value_.__r.__words[0])
    {
      v54 = 0;
      do
      {
        v55 = *a1;
        v56 = (unsigned __int8 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::At(__p, v54);
        UInt8Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(v55, (MIL::MILContext *)*v56);
        *(_QWORD *)(v101.__r_.__value_.__r.__words[0] + 8 * v54++) = UInt8Scalar;
      }
      while (v54 < (uint64_t)(v101.__r_.__value_.__l.__size_ - v101.__r_.__value_.__r.__words[0]) >> 3);
    }
    goto LABEL_72;
  }
  if (v101.__r_.__value_.__l.__size_ != v101.__r_.__value_.__r.__words[0])
  {
    v58 = 0;
    do
    {
      v59 = MIL::IRUnknownProperty::Make(*a1, 0);
      *(_QWORD *)(v101.__r_.__value_.__r.__words[0] + 8 * v58++) = v59;
    }
    while (v58 < (uint64_t)(v101.__r_.__value_.__l.__size_ - v101.__r_.__value_.__r.__words[0]) >> 3);
  }
LABEL_72:
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  memset(__p, 0, sizeof(__p));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(__p, *(const void **)v60, *(_QWORD *)(v60 + 8), (uint64_t)(*(_QWORD *)(v60 + 8) - *(_QWORD *)v60) >> 3);
  v61 = *a1;
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  memset(v112, 0, sizeof(v112));
  v113 = 1065353216;
  if (v12)
    v63 = MIL::IRTensorBufferValueType::MakeWithShape(v61, v62, (__int128 *)__p, (uint64_t)&v105, (uint64_t)&v101, (uint64_t *)v112);
  else
    v63 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(v61, v62, (__int128 *)__p, UInt64Scalar, (uint64_t)&v101, (uint64_t *)v112);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v64 = (uint64_t *)operator new(8uLL);
  *a4 = v64;
  *v64++ = v63;
  a4[1] = v64;
  a4[2] = v64;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v112);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v101.__r_.__value_.__r.__words[0])
  {
    v101.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
}

void sub_1E06FDC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  char v49;
  uint64_t v50;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 217) < 0)
    operator delete(*(void **)(v50 - 240));
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if ((v49 & 1) != 0)
    __cxa_free_exception(v48);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void std::vector<MIL::IRProperty const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<MIL::IRProperty const*>::__append((void **)a1, a2 - v2);
  }
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, _QWORD **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((char *)&this[1], *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return this;
}

void sub_1E06FDFB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<char const(&)[6],std::vector<std::shared_ptr<MIL::IRTypedArgument>>&,0>(_QWORD *a1, char *a2, _QWORD **a3)
{
  char *v5;

  v5 = (char *)std::string::basic_string[abi:ne180100]<0>(a1, a2);
  *((_QWORD *)v5 + 3) = 0;
  *((_QWORD *)v5 + 4) = 0;
  v5 += 24;
  *((_QWORD *)v5 + 2) = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(v5, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1E06FE010(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>(a1, a2, (__int128 *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1E06FE090(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E06FE30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E06FE380(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((char *)&this[1], *((_QWORD **)a2 + 3), *((_QWORD **)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4);
  return this;
}

void sub_1E06FE400(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::shared_ptr<MIL::IRTypedArgument>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1E06FE484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1E06FE700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E06FE774(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<MIL::IRProperty const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void MIL::Operators::Common::Shared::ValidateTopkInputs(MIL::IRTensorValueType *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  unint64_t v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  uint64_t v50;
  std::string *v51;
  std::string::size_type size;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  unint64_t *v64;
  void *__p[2];
  std::string::size_type v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  void *v76[2];
  std::string::size_type v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::string v80;
  std::string v81;
  __int128 v82;
  std::string::size_type v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void *v86;
  void *v87;
  uint64_t v88;

  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 96))(a1);
  v87 = 0;
  v88 = 0;
  v86 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v86, *(const void **)v10, *(_QWORD *)(v10 + 8), (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  if (a3 <= 0 && a3 != -1)
  {
    v11 = (std::__shared_weak_count *)a4[1];
    v84 = *a4;
    v85 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::to_string(&v80, a3);
    v14 = std::string::insert(&v80, 0, "Provided k (");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v81, ") is invalid for TopK.");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v83 = v16->__r_.__value_.__r.__words[2];
    v82 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a5, &v84, 315, &v82);
    if (SHIBYTE(v83) < 0)
      operator delete((void *)v82);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    v18 = v85;
    if (v85)
    {
      v19 = (unint64_t *)&v85->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    goto LABEL_92;
  }
  if (((*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 104))(a1) & 1) == 0)
  {
    MIL::ValidationResult::ValidationResult(a5);
    goto LABEL_92;
  }
  v21 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 96))(a1);
  memset(&v81, 0, sizeof(v81));
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v81, *(const void **)v21, *(_QWORD *)(v21 + 8), (uint64_t)(*(_QWORD *)(v21 + 8) - *(_QWORD *)v21) >> 3);
  v22 = a2;
  if (a2 < 0)
    v22 = MIL::IRTensorValueType::Rank(a1) + a2;
  v23 = MIL::IRTensorValueType::Rank(a1);
  if (v22 < 0 || v23 <= v22)
  {
    v43 = (std::__shared_weak_count *)a4[1];
    v78 = *a4;
    v79 = v43;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    std::to_string(&v71, a2);
    v46 = std::string::insert(&v71, 0, "Provided axis (");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v72, ") is not within range [-");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    v50 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v70, v50);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v70;
    else
      v51 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      size = v70.__r_.__value_.__l.__size_;
    v53 = std::string::append(&v73, (const std::string::value_type *)v51, size);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v74, ", ");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = MIL::IRTensorValueType::Rank(a1);
    std::to_string(&v69, v57 - 1);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v69;
    else
      v58 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      v59 = v69.__r_.__value_.__l.__size_;
    v60 = std::string::append(&v75, (const std::string::value_type *)v58, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v80, "] for TopK");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v77 = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)v76 = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a5, &v78, 315, v76);
    if (SHIBYTE(v77) < 0)
      operator delete(v76[0]);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    v40 = v79;
    if (!v79)
      goto LABEL_90;
    v64 = (unint64_t *)&v79->__shared_owners_;
    do
      v42 = __ldaxr(v64);
    while (__stlxr(v42 - 1, v64));
LABEL_87:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
    goto LABEL_90;
  }
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v81.__r_.__value_.__r.__words[0] + 8 * v22) + 16))(*(_QWORD *)(v81.__r_.__value_.__r.__words[0] + 8 * v22));
  if (a3 != -1)
  {
    v25 = v24;
    if (v24)
    {
      if ((*(int (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24) < a3)
      {
        v26 = (std::__shared_weak_count *)a4[1];
        v67 = *a4;
        v68 = v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        std::to_string(&v73, a3);
        v29 = std::string::insert(&v73, 0, "Provided k (");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = std::string::append(&v74, ") exceed maximum dimension size (");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25);
        std::to_string(&v72, v33);
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v72;
        else
          v34 = (std::string *)v72.__r_.__value_.__r.__words[0];
        if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        else
          v35 = v72.__r_.__value_.__l.__size_;
        v36 = std::string::append(&v75, (const std::string::value_type *)v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v80, ") for TopK");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v66 = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a5, &v67, 315, __p);
        if (SHIBYTE(v66) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        v40 = v68;
        if (!v68)
          goto LABEL_90;
        v41 = (unint64_t *)&v68->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        goto LABEL_87;
      }
    }
  }
  MIL::ValidationResult::ValidationResult(a5);
LABEL_90:
  if (v81.__r_.__value_.__r.__words[0])
  {
    v81.__r_.__value_.__l.__size_ = v81.__r_.__value_.__r.__words[0];
    operator delete(v81.__r_.__value_.__l.__data_);
  }
LABEL_92:
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
}

void sub_1E06FEEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  void *v54;
  void *v55;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 169) < 0)
    operator delete(*(void **)(v52 - 192));
  if (a31 < 0)
    operator delete(a26);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  v54 = *(void **)(v52 - 160);
  if (v54)
  {
    *(_QWORD *)(v52 - 152) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v52 - 88);
  if (v55)
  {
    *(_QWORD *)(v52 - 80) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::Shared::ValueTypeInferenceTopkCommon(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  uint64_t v10;
  uint64_t SingleValue;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 *v17;
  const void *v18;
  const void *v19;
  signed int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  const void *v23;
  int v24;
  int v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  MIL::IRValue *v35;
  const void *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  void *exception;
  int v44;
  void *v45[2];
  char v46;
  std::string v47;
  std::string __p;
  std::string v49[2];
  int v50;
  uint64_t v51[2];
  void *v52[2];
  char v53;
  int v54;

  std::string::basic_string[abi:ne180100]<0>(v52, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)v52);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v53 < 0)
    operator delete(v52[0]);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v44 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  std::string::basic_string[abi:ne180100]<0>(v52, "k");
  SingleValue = MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v52);
  v12 = MIL::IRValue::TryGetScalar<int>(SingleValue);
  v13 = (int *)v12;
  if (v53 < 0)
  {
    operator delete(v52[0]);
    if (v13)
      goto LABEL_5;
  }
  else if (v12)
  {
LABEL_5:
    v14 = *v13;
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v52, "k");
  v15 = MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v52);
  v16 = MIL::IRValue::TryGetScalar<short>(v15);
  v17 = (__int16 *)v16;
  if (v53 < 0)
  {
    operator delete(v52[0]);
    if (v17)
      goto LABEL_9;
  }
  else if (v16)
  {
LABEL_9:
    v14 = *v17;
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v52, "k");
  v18 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v52);
  v14 = MIL::IRValue::GetScalar<signed char>(v18);
  if (v53 < 0)
    operator delete(v52[0]);
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(v52, "axis");
  v19 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v52);
  v20 = MIL::IRValue::GetScalar<int>(v19);
  if (v53 < 0)
    operator delete(v52[0]);
  std::string::basic_string[abi:ne180100]<0>(v52, "return_indices");
  v21 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v52);
  v22 = v21;
  if ((v53 & 0x80000000) == 0)
  {
    if (v21)
      goto LABEL_17;
LABEL_20:
    v24 = 1;
    goto LABEL_21;
  }
  operator delete(v52[0]);
  if (!v22)
    goto LABEL_20;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v52, "return_indices");
  v23 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v52);
  v24 = MIL::IRValue::GetScalar<BOOL>(v23);
  if (v53 < 0)
    operator delete(v52[0]);
LABEL_21:
  v25 = MIL::IRTensorValueType::Rank(v9);
  v26 = *a2;
  v27 = (std::__shared_weak_count *)a2[1];
  v51[0] = v26;
  v51[1] = (uint64_t)v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  MIL::Operators::Common::Shared::ValidateTopkInputs(v9, v20, v14, v51, (MIL::ValidationResult *)v52);
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v52))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v49, (uint64_t)v52);
    v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v50 = v54;
    MIL::ValidationError::ValidationError(exception, v49);
  }
  memset(&__p, 0, sizeof(__p));
  std::vector<std::string const*>::reserve((void **)&__p.__r_.__value_.__l.__data_, (uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3);
  v32 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v14);
  if (v14 == -1)
    v32 = *(_QWORD *)(*(_QWORD *)v10 + 8 * v20);
  MIL::ValueTypeInferenceUtils::GetTopkOutShape(a1, (char **)v10, v20, v32, v25, &v47);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p = v47;
  if (!v24)
  {
    v38 = MIL::IRTensorValueType::MakeWithShape(*a1, v44, (uint64_t)&__p);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v39 = (uint64_t *)operator new(8uLL);
    *a4 = v39;
    *v39++ = v38;
    a4[1] = v39;
    a4[2] = v39;
    goto LABEL_46;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "output_indices_dtype");
  v33 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&v47);
  v34 = v33;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v47.__r_.__value_.__l.__data_);
    if (v34)
      goto LABEL_37;
  }
  else if (v33)
  {
LABEL_37:
    std::string::basic_string[abi:ne180100]<0>(v45, "output_indices_dtype");
    v35 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v45);
    v36 = (const void *)MIL::IRValue::AsTensor(v35);
    MIL::IRValue::GetScalar<std::string>(v36, &v47);
    if (v46 < 0)
      operator delete(v45[0]);
    v37 = MIL::StringToIRDataType((const void **)&v47.__r_.__value_.__l.__data_, 0);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    goto LABEL_44;
  }
  v37 = 11;
LABEL_44:
  memset(&v47, 0, sizeof(v47));
  std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
  v40 = MIL::IRTensorValueType::MakeWithShape(*a1, v44, (uint64_t)&__p);
  v41 = MIL::IRTensorValueType::MakeWithShape(*a1, v37, (uint64_t)&v47);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v42 = (uint64_t *)operator new(0x10uLL);
  a4[1] = v42 + 2;
  a4[2] = v42 + 2;
  *v42 = v40;
  v42[1] = v41;
  *a4 = v42;
  if (v47.__r_.__value_.__r.__words[0])
  {
    v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
    operator delete(v47.__r_.__value_.__l.__data_);
  }
LABEL_46:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v52);
}

void sub_1E06FF59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a26);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v33 - 144));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidatePReLU(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRValueType *v6;
  void *v7;
  char v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  int v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  v6 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v9, "x");
  std::string::basic_string[abi:ne180100]<0>(&v7, "alpha");
  MIL::Validation::VerifyDimSizeIsNumChannels(ParameterType, v6, (uint64_t)v9, this, 1, (MIL::ValidationResult *)__p);
  if (v8 < 0)
    operator delete(v7);
  if (v10 < 0)
    operator delete(v9[0]);
  if (((*((uint64_t (**)(void **))__p[0] + 2))(__p) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    MIL::Validation::VerifyOutputShapeMatchesInput(this, a2);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a2, (uint64_t)__p);
    *(_QWORD *)a2 = &off_1EA99F170;
    *((_DWORD *)a2 + 12) = v13;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  }
}

void sub_1E06FF810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateSoftplusParametric(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  uint64_t v6;
  char *v7;
  MIL::IRValueType *v8;
  void *v9;
  char v10;
  void *v11[2];
  char v12;
  void *v13;
  char v14;
  void *__p[2];
  char v16;
  int v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  if (v16 < 0)
    operator delete(__p[0]);
  v6 = 0;
  v18[0] = "alpha";
  v18[1] = "beta";
  do
  {
    v7 = (char *)v18[v6];
    std::string::basic_string[abi:ne180100]<0>(&v13, v7);
    v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    std::string::basic_string[abi:ne180100]<0>(v11, "x");
    std::string::basic_string[abi:ne180100]<0>(&v9, v7);
    MIL::Validation::VerifyDimSizeIsNumChannels(ParameterType, v8, (uint64_t)v11, this, 1, (MIL::ValidationResult *)__p);
    if (v10 < 0)
      operator delete(v9);
    if (v12 < 0)
      operator delete(v11[0]);
    if (v14 < 0)
      operator delete(v13);
    if (((*((uint64_t (**)(void **))__p[0] + 2))(__p) & 1) == 0)
    {
      MIL::MILResult::MILResult((std::string *)a2, (uint64_t)__p);
      *(_QWORD *)a2 = &off_1EA99F170;
      *(_DWORD *)(a2 + 48) = v17;
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
      return;
    }
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
    ++v6;
  }
  while (v6 != 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  MIL::Validation::VerifyOutputShapeMatchesInput(this, (MIL::ValidationResult *)a2);
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_1E06FFA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseActivation::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  void **v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void **v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void **v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void **v84;
  uint64_t result;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void **v113;
  void **v114;
  void **v115;
  char *v116;
  char **v117;
  _BYTE v118[24];
  _BYTE *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  void *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD v127[3];

  v127[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v112 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  v113 = v10;
  *v10 = (void *)v9;
  v114 = v10 + 1;
  v115 = v10 + 1;
  v124 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v109 = v12 + 1;
  v110 = v12 + 1;
  v125 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v124, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v105);
  v13 = v105;
  v105 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v15 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v18 = v107;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v109 = v20 + 1;
  v110 = v20 + 1;
  v127[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v124 = v22;
  *v22 = v21;
  v125 = (uint64_t)(v22 + 1);
  v126 = v22 + 1;
  v127[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)v127, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v23 = v104;
  v105 = v104;
  if (v104)
  {
    v24 = (_QWORD *)operator new();
    v25 = v104;
    *v24 = &unk_1EA99F888;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  v106 = v24;
  v104 = 0;
  v26 = v18[2];
  v27 = v18[1];
  if (v27 >= v26)
  {
    v29 = (v27 - *v18) >> 4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v31 = v26 - *v18;
    if (v31 >> 3 > v30)
      v30 = v31 >> 3;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    v117 = v18 + 2;
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v32);
    v35 = (uint64_t *)&v33[16 * v29];
    *v35 = v23;
    v35[1] = (uint64_t)v24;
    v105 = 0;
    v106 = 0;
    v37 = *v18;
    v36 = v18[1];
    if (v36 == *v18)
    {
      v40 = (void **)v18[1];
      v38 = &v33[16 * v29];
    }
    else
    {
      v38 = &v33[16 * v29];
      do
      {
        v39 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v38 - 1) = v39;
        v38 -= 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
      }
      while (v36 != v37);
      v40 = (void **)*v18;
      v36 = v18[1];
    }
    v28 = (char *)(v35 + 2);
    *v18 = v38;
    v113 = v40;
    v114 = v40;
    v18[1] = (char *)(v35 + 2);
    v115 = (void **)v36;
    v41 = v18[2];
    v18[2] = &v33[16 * v34];
    v116 = v41;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v27 = v23;
    *((_QWORD *)v27 + 1) = v24;
    v28 = v27 + 16;
    v105 = 0;
    v106 = 0;
  }
  v18[1] = v28;
  v42 = v104;
  v104 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v44 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v124)
  {
    v125 = (uint64_t)v124;
    operator delete(v124);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v46 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v47 = (_QWORD *)operator new();
    *v47 = &unk_1EA99F8E8;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v46;
  }
  else
  {
    v47 = 0;
  }
  *((_QWORD *)&v100 + 1) = v47;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v48 = (_QWORD *)operator new();
    v49 = v107;
    *v48 = &unk_1EA99F948;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v99 + 1) = v48;
  v107 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v122, a3);
  v121 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v122, (uint64_t)v120, a4);
  v50 = v121;
  if (v121 == v120)
  {
    v51 = 4;
    v50 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_51;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_51:
  v52 = v123;
  if (v123 == v122)
  {
    v53 = 4;
    v52 = v122;
    goto LABEL_55;
  }
  if (v123)
  {
    v53 = 5;
LABEL_55:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v60 = *a4;
  v61 = std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v61, (uint64_t)v118);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 200))(v60, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_73;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*((void (**)(void **, void **, void **))*v64 + 3))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*((void (**)(void **, void **, void **))*v71 + 3))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a4;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = (std::__shared_weak_count_vtbl *)v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*((void (**)(void **))*v84 + 1))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0700400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = *(_QWORD *)(v54 - 248);
  *(_QWORD *)(v54 - 248) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *v53;
  *v53 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v54 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  void **v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void **v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  void *v76;
  void **v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void **v97;
  uint64_t result;
  uint64_t v99;
  void **v100;
  std::__shared_weak_count *v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  void *v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  __int128 v119;
  void *v120[2];
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char **v126;
  __n128 v127;
  void *__p;
  void *v129;
  _QWORD *v130;
  __n128 v131;
  _QWORD *v132;
  _BYTE v133[24];
  _BYTE *v134;
  _BYTE v135[24];
  _BYTE *v136;
  _BYTE v137[24];
  _BYTE *v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD v142[2];
  void **Scalar;
  void **v144;
  void **v145;
  char *v146;
  char **v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v132 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  Scalar = v10;
  *v10 = (void *)v9;
  v144 = v10 + 1;
  v145 = v10 + 1;
  v139 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v129 = v12 + 1;
  v130 = v12 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 2, &v131);
  MIL::IRParameter::Make(&v131, &v124);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v124);
  v13 = v124;
  v124 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v131.n128_u64[1];
  if (v131.n128_u64[1])
  {
    v15 = (unint64_t *)(v131.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v144 = Scalar;
    operator delete(Scalar);
  }
  v17 = v132;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v144 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v21 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v126 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v126, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v126, 1uLL);
  v24 = v126;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v129 = v26 + 1;
  v130 = v26 + 1;
  v142[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v139 = v28;
  *v28 = v27;
  v140 = (uint64_t)(v28 + 1);
  v141 = v28 + 1;
  v142[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v139);
  MIL::IRParameter::MakeTypeSet((uint64_t)v142, 2, &v122);
  MIL::IRParameter::Make(&v122, &v123);
  v29 = v123;
  v124 = v123;
  if (v123)
  {
    v30 = (_QWORD *)operator new();
    v31 = v123;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v125 = v30;
  v123 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v147 = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v124 = 0;
    v125 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = (void **)v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = (void **)*v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    Scalar = v46;
    v144 = v46;
    v24[1] = (char *)(v41 + 2);
    v145 = (void **)v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v146 = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v124 = 0;
    v125 = 0;
  }
  v24[1] = v34;
  v48 = v123;
  v123 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v122.n128_u64[1];
  if (v122.n128_u64[1])
  {
    v50 = (unint64_t *)(v122.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v139)
  {
    v140 = (uint64_t)v139;
    operator delete(v139);
  }
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v120 = *(_OWORD *)a2;
  v121 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v132;
  *(_QWORD *)&v119 = v132;
  if (v132)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v119 + 1) = v53;
  v132 = 0;
  *(_QWORD *)&v118 = v126;
  if (v126)
  {
    v54 = (_QWORD *)operator new();
    v55 = v126;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v118 + 1) = v54;
  v126 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v137, a3);
  v136 = 0;
  MIL::IROperator::Make((__int128 *)v120, &v119, &v118, (uint64_t)v137, (uint64_t)v135, a4);
  v56 = v136;
  if (v136 == v135)
  {
    v57 = 4;
    v56 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v138;
  if (v138 == v137)
  {
    v59 = 4;
    v58 = v137;
    goto LABEL_62;
  }
  if (v138)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (*((_QWORD *)&v118 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v121) < 0)
    operator delete(v120[0]);
  v66 = *a4;
  v67 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v67, (uint64_t)v133);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 200))(v66, v133);
  v68 = v134;
  if (v134 == v133)
  {
    v69 = 4;
    v68 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_80;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_80:
  if (SHIBYTE(v145) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v70 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v114, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v114, 0, (uint64_t *)&__p);
  v116 = __p;
  if (__p)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v72 = (std::__shared_weak_count_vtbl *)__p;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = v72;
  }
  else
  {
    v71 = 0;
  }
  v117 = v71;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*((void (**)(void **, void **, void **))*v70 + 3))(v70, &v116, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v73 = v117;
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = __p;
  __p = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  if (v115 < 0)
    operator delete(v114[0]);
  v77 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v108, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&__p);
  v110 = __p;
  if (__p)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = (std::__shared_weak_count_vtbl *)__p;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v111 = v78;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v77 + 3))(v77, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v80 = v111;
  if (v111)
  {
    v81 = (unint64_t *)&v111->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = __p;
  __p = 0;
  if (v83)
    (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
  if (v109 < 0)
    operator delete(v108[0]);
  v84 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v104 = __p;
  if (__p)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = (std::__shared_weak_count_vtbl *)__p;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v105 = v85;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v102, "T");
  (*((void (**)(void **, void **, void **))*v84 + 3))(v84, &v104, v102);
  if (v103 < 0)
    operator delete(v102[0]);
  v87 = v105;
  if (v105)
  {
    v88 = (unint64_t *)&v105->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = *a4;
  v100 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v101 = v92;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v91 + 56))(v91, &v100);
  v94 = v101;
  if (v101)
  {
    v95 = (unint64_t *)&v101->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(void **))*v97 + 1))(v97);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v126, 0);
  result = (uint64_t)v132;
  if (v132)
  {
    v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v132);
    return MEMORY[0x1E0C023A0](v99, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07011CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;

  v48 = *(_QWORD *)(v46 - 112);
  *(_QWORD *)(v46 - 112) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *v45;
  *v45 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v46 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  void **v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  void *v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  uint64_t result;
  uint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  char v116;
  void *v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  void *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  void *v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  __int128 v138;
  void *v139[2];
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char **v145;
  __n128 v146;
  __n128 v147;
  void *__p;
  void *v149;
  _QWORD *v150;
  __n128 v151;
  _QWORD *v152;
  _BYTE v153[24];
  _BYTE *v154;
  _BYTE v155[24];
  _BYTE *v156;
  _BYTE v157[24];
  _BYTE *v158;
  void *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD v162[2];
  void **Scalar;
  void **v164;
  void **v165;
  char *v166;
  char **v167;
  uint64_t v168;

  v168 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v152 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  Scalar = v10;
  *v10 = (void *)v9;
  v164 = v10 + 1;
  v165 = v10 + 1;
  v159 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v149 = v12 + 1;
  v150 = v12 + 1;
  v160 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v159, 2, &v151);
  MIL::IRParameter::Make(&v151, &v143);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v143);
  v13 = v143;
  v143 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v15 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v149 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v164 = Scalar;
    operator delete(Scalar);
  }
  v17 = v152;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v164 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v21 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v152;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v164 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v146);
  MIL::IRParameter::Make(&v146, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v23, "beta", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v27 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v145 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v145, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v145, 1uLL);
  v30 = v145;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v149 = v32 + 1;
  v150 = v32 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v159 = v34;
  *v34 = v33;
  v160 = (uint64_t)(v34 + 1);
  v161 = v34 + 1;
  v162[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v159);
  MIL::IRParameter::MakeTypeSet((uint64_t)v162, 2, &v141);
  MIL::IRParameter::Make(&v141, &v142);
  v35 = v142;
  v143 = v142;
  if (v142)
  {
    v36 = (_QWORD *)operator new();
    v37 = v142;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v144 = v36;
  v142 = 0;
  v38 = v30[2];
  v39 = v30[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v30) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v30;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v167 = v30 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v143 = 0;
    v144 = 0;
    v49 = *v30;
    v48 = v30[1];
    if (v48 == *v30)
    {
      v52 = (void **)v30[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = (void **)*v30;
      v48 = v30[1];
    }
    v40 = (char *)(v47 + 2);
    *v30 = v50;
    Scalar = v52;
    v164 = v52;
    v30[1] = (char *)(v47 + 2);
    v165 = (void **)v48;
    v53 = v30[2];
    v30[2] = &v45[16 * v46];
    v166 = v53;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v143 = 0;
    v144 = 0;
  }
  v30[1] = v40;
  v54 = v142;
  v142 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v141.n128_u64[1];
  if (v141.n128_u64[1])
  {
    v56 = (unint64_t *)(v141.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v159)
  {
    v160 = (uint64_t)v159;
    operator delete(v159);
  }
  if (__p)
  {
    v149 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v139 = *(_OWORD *)a2;
  v140 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v152;
  *(_QWORD *)&v138 = v152;
  if (v152)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v138 + 1) = v59;
  v152 = 0;
  *(_QWORD *)&v137 = v145;
  if (v145)
  {
    v60 = (_QWORD *)operator new();
    v61 = v145;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v137 + 1) = v60;
  v145 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v157, a3);
  v156 = 0;
  MIL::IROperator::Make((__int128 *)v139, &v138, &v137, (uint64_t)v157, (uint64_t)v155, a4);
  v62 = v156;
  if (v156 == v155)
  {
    v63 = 4;
    v62 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_65;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_65:
  v64 = v158;
  if (v158 == v157)
  {
    v65 = 4;
    v64 = v157;
    goto LABEL_69;
  }
  if (v158)
  {
    v65 = 5;
LABEL_69:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v140) < 0)
    operator delete(v139[0]);
  v72 = *a4;
  v73 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v73, (uint64_t)v153);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v72 + 200))(v72, v153);
  v74 = v154;
  if (v154 == v153)
  {
    v75 = 4;
    v74 = v153;
  }
  else
  {
    if (!v154)
      goto LABEL_87;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_87:
  if (SHIBYTE(v165) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v76 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&__p);
  v135 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v136 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*((void (**)(void **, void **, void **))*v76 + 3))(v76, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v79 = v136;
  if (v136)
  {
    p_shared_owners = (unint64_t *)&v136->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v134 < 0)
    operator delete(v133[0]);
  v83 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v127, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&__p);
  v129 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v130 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "T");
  (*((void (**)(void **, void **, void **))*v83 + 3))(v83, &v129, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v86 = v130;
  if (v130)
  {
    v87 = (unint64_t *)&v130->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v121, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v121, 0, (uint64_t *)&__p);
  v123 = __p;
  if (__p)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)__p;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v124 = v91;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v119, "T");
  (*((void (**)(void **, void **, void **))*v90 + 3))(v90, &v123, v119);
  if (v120 < 0)
    operator delete(v119[0]);
  v93 = v124;
  if (v124)
  {
    v94 = (unint64_t *)&v124->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = __p;
  __p = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  if (v122 < 0)
    operator delete(v121[0]);
  v97 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v117 = __p;
  if (__p)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)__p;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v118 = v98;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v115, "T");
  (*((void (**)(void **, void **, void **))*v97 + 3))(v97, &v117, v115);
  if (v116 < 0)
    operator delete(v115[0]);
  v100 = v118;
  if (v118)
  {
    v101 = (unint64_t *)&v118->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = __p;
  __p = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  v104 = *a4;
  v113 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v114 = v105;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v113);
  v107 = v114;
  if (v114)
  {
    v108 = (unint64_t *)&v114->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(void **))*v110 + 1))(v110);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v145, 0);
  result = (uint64_t)v152;
  if (v152)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v152);
    return MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07021EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53)
{
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = *(_QWORD *)(v54 - 112);
  *(_QWORD *)(v54 - 112) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *v53;
  *v53 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v54 - 256), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ClampedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07026A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::LinearActivation::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07027A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ScaledTanh::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07028A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::SigmoidHard::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlphaBeta::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07029A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ELU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0702AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::LeakyReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0702BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ThresholdedReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivationWithAlpha::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0702CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ERF::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0702DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0702EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::ReLU6::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E0702FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Sigmoid::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07030A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::SiLU::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07031A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Softplus::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07032A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::Softsign::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios15::BaseActivation::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E07033A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::GeLU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  void *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t i;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t result;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void *v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  void *v119[2];
  char v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  __int128 v123;
  __int128 v124;
  void *v125[2];
  uint64_t v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char **v131;
  __n128 v132;
  __n128 v133;
  _QWORD *v134;
  void *__p;
  void *v136;
  char *v137;
  _QWORD v138[3];
  _QWORD v139[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v141;
  void (__cdecl **v142)(std::__shared_weak_count *__hidden);
  _BYTE v143[24];
  _BYTE *v144;
  _BYTE v145[24];
  _BYTE *v146;
  _BYTE v147[24];
  _BYTE *v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  void (__cdecl **v151)(std::__shared_weak_count *__hidden);
  _QWORD v152[3];

  v152[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v134 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v136 = v8 + 1;
  v137 = (char *)(v8 + 1);
  v149 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v141 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v142 = &v10->~__shared_weak_count_0;
  v150 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v149, 2, &v133);
  MIL::IRParameter::Make(&v133, &v129);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v129);
  v11 = v129;
  v129 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v133.n128_u64[1];
  if (v133.n128_u64[1])
  {
    v13 = (unint64_t *)(v133.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v141 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  v15 = v134;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v132);
  MIL::IRParameter::Make(&v132, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "mode", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v132.n128_u64[1];
  if (v132.n128_u64[1])
  {
    v19 = (unint64_t *)(v132.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v131 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v131, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v131, 1uLL);
  v22 = v131;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v24;
  v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  v141 = (std::__shared_weak_count_vtbl *)&v24->~__shared_weak_count_0;
  v142 = &v24->~__shared_weak_count_0;
  v152[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v149 = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v150 = (uint64_t)&v26->~__shared_weak_count_0;
  v151 = &v26->~__shared_weak_count_0;
  v152[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v149);
  MIL::IRParameter::MakeTypeSet((uint64_t)v152, 2, &v127);
  MIL::IRParameter::Make(&v127, &v128);
  v27 = v128;
  v129 = v128;
  if (v128)
  {
    v28 = (_QWORD *)operator new();
    v29 = v128;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v130 = v28;
  v128 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v138[1] = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v129 = 0;
    v130 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    __p = v44;
    v136 = v44;
    v22[1] = (char *)(v39 + 2);
    v137 = v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v138[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v129 = 0;
    v130 = 0;
  }
  v22[1] = v32;
  v46 = v128;
  v128 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v48 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v149)
  {
    v150 = (uint64_t)v149;
    operator delete(v149);
  }
  if (Scalar)
  {
    v141 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v125 = *(_OWORD *)a2;
  v126 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v134;
  *(_QWORD *)&v124 = v134;
  if (v134)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v124 + 1) = v51;
  v134 = 0;
  *(_QWORD *)&v123 = v131;
  if (v131)
  {
    v52 = (_QWORD *)operator new();
    v53 = v131;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v123 + 1) = v52;
  v131 = 0;
  v148 = 0;
  v146 = 0;
  MIL::IROperator::Make((__int128 *)v125, &v124, &v123, (uint64_t)v147, (uint64_t)v145, a3);
  v54 = v146;
  if (v146 == v145)
  {
    v55 = 4;
    v54 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v148;
  if (v148 == v147)
  {
    v57 = 4;
    v56 = v147;
    goto LABEL_62;
  }
  if (v148)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v126) < 0)
    operator delete(v125[0]);
  v64 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v143);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v64 + 200))(v64, v143);
  v65 = v144;
  if (v144 == v143)
  {
    v66 = 4;
    v65 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_80;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_80:
  if (SHIBYTE(v137) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v67 = __p;
  std::string::basic_string[abi:ne180100]<0>(v119, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v119, 0, (uint64_t *)&Scalar);
  v121 = Scalar;
  if (Scalar)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = Scalar;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v122 = v68;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v117, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v67 + 24))(v67, &v121, v117);
  if (v118 < 0)
    operator delete(v117[0]);
  v70 = v122;
  if (v122)
  {
    p_shared_owners = (unint64_t *)&v122->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = Scalar;
  Scalar = 0;
  if (v73)
    (*((void (**)(std::__shared_weak_count_vtbl *))v73->~__shared_weak_count + 1))(v73);
  if (v120 < 0)
    operator delete(v119[0]);
  v74 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v115 = Scalar;
  if (Scalar)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = Scalar;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v116 = v75;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v113, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v74 + 24))(v74, &v115, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v77 = v116;
  if (v116)
  {
    v78 = (unint64_t *)&v116->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = Scalar;
  Scalar = 0;
  if (v80)
    (*((void (**)(std::__shared_weak_count_vtbl *))v80->~__shared_weak_count + 1))(v80);
  v81 = *a3;
  v111 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v112 = v82;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 56))(v81, &v111);
  v84 = v112;
  if (v112)
  {
    v85 = (unint64_t *)&v112->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v149);
  v88 = v149;
  std::string::basic_string[abi:ne180100]<0>(v107, "mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v107, 0, &v129);
  v109 = v129;
  if (v129)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v129;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v90;
  }
  else
  {
    v89 = 0;
  }
  v110 = v89;
  v129 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "EXACT");
  std::string::basic_string[abi:ne180100]<0>(v138, "SIGMOID_APPROXIMATION");
  std::string::basic_string[abi:ne180100]<0>(v139, "TANH_APPROXIMATION");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v88->~__shared_weak_count
   + 3))(v88, &v109, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v139[i + 2]) < 0)
      operator delete((void *)v139[i]);
  }
  v92 = v110;
  if (v110)
  {
    v93 = (unint64_t *)&v110->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v129;
  v129 = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  if (v108 < 0)
    operator delete(v107[0]);
  v96 = *a3;
  v105 = v149;
  if (v149)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v149;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v106 = v97;
  v149 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v96 + 56))(v96, &v105);
  v99 = v106;
  if (v106)
  {
    v100 = (unint64_t *)&v106->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v149;
  v149 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v131, 0);
  result = (uint64_t)v134;
  if (v134)
  {
    v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v134);
    return MEMORY[0x1E0C023A0](v104, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0703FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v51 = *(_QWORD *)(v49 - 112);
  *(_QWORD *)(v49 - 112) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *v48;
  *v48 = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a43, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::PReLU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  void **v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  void **v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  void *v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void **v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  void **v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void **v114;
  uint64_t result;
  uint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void **v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  void *v137;
  std::__shared_weak_count *v138;
  __int128 v139;
  __int128 v140;
  void *v141[2];
  uint64_t v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char **v147;
  __n128 v148;
  void *__p;
  void *v150;
  _QWORD *v151;
  __n128 v152;
  _QWORD *v153;
  void **v154;
  void **v155;
  void **v156;
  char *v157;
  char **v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _QWORD v163[3];
  _QWORD *v164;
  void *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v153 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v155 = (void **)(v10 + 24);
  v156 = (void **)(v10 + 24);
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v154 = (void **)v10;
  v165 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v154);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v150 = v14 + 3;
  v151 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v152);
  MIL::IRParameter::Make(&v152, &v145);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v145);
  v15 = v145;
  v145 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v17 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  v19 = v153;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v154 = v21;
  *v21 = (void *)v20;
  v155 = v21 + 1;
  v156 = v21 + 1;
  v165 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v154);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v150 = v23 + 1;
  v151 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v148);
  MIL::IRParameter::Make(&v148, &v145);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", &v145);
  v25 = v145;
  v145 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v27 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v147 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  v154 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v154, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v30 = v147;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(0x18uLL);
  v150 = v34 + 3;
  v151 = v34 + 3;
  *v34 = v31;
  v34[1] = v32;
  v34[2] = v33;
  __p = v34;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(0x18uLL);
  v166 = (uint64_t)(v38 + 3);
  v167 = v38 + 3;
  *v38 = v35;
  v38[1] = v36;
  v38[2] = v37;
  v165 = v38;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v143);
  MIL::IRParameter::Make(&v143, &v144);
  v39 = v144;
  v145 = v144;
  if (v144)
  {
    v40 = (_QWORD *)operator new();
    v41 = v144;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v146 = v40;
  v144 = 0;
  v42 = v30[2];
  v43 = v30[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v30) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v30;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v158 = v30 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v145 = 0;
    v146 = 0;
    v53 = *v30;
    v52 = v30[1];
    if (v52 == *v30)
    {
      v56 = (void **)v30[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = (void **)*v30;
      v52 = v30[1];
    }
    v44 = (char *)(v51 + 2);
    *v30 = v54;
    v154 = v56;
    v155 = v56;
    v30[1] = (char *)(v51 + 2);
    v156 = (void **)v52;
    v57 = v30[2];
    v30[2] = &v49[16 * v50];
    v157 = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v154);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v145 = 0;
    v146 = 0;
  }
  v30[1] = v44;
  v58 = v144;
  v144 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v60 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v141 = *(_OWORD *)a2;
  v142 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v153;
  *(_QWORD *)&v140 = v153;
  if (v153)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v140 + 1) = v63;
  v153 = 0;
  *(_QWORD *)&v139 = v147;
  if (v147)
  {
    v64 = (_QWORD *)operator new();
    v65 = v147;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v139 + 1) = v64;
  v147 = 0;
  v163[0] = &unk_1EA99FAC8;
  v163[1] = MIL::Operators::Common::ios15::CustomValidators::ValidatePReLU;
  v164 = v163;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v141, &v140, &v139, (uint64_t)v163, (uint64_t)v161, a3);
  v66 = v162;
  if (v162 == v161)
  {
    v67 = 4;
    v66 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_62;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_62:
  v68 = v164;
  if (v164 == v163)
  {
    v69 = 4;
    v68 = v163;
    goto LABEL_66;
  }
  if (v164)
  {
    v69 = 5;
LABEL_66:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v142) < 0)
    operator delete(v141[0]);
  v76 = *a3;
  v77 = std::string::basic_string[abi:ne180100]<0>(&v154, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v77, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v159);
  v78 = v160;
  if (v160 == v159)
  {
    v79 = 4;
    v78 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_84;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_84:
  if (SHIBYTE(v156) < 0)
    operator delete(v154);
  MIL::Validation::TensorDTypeConstraints::Make(&v154);
  v80 = v154;
  std::string::basic_string[abi:ne180100]<0>(v135, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v135, 0, (uint64_t *)&__p);
  v137 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = (std::__shared_weak_count_vtbl *)__p;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v138 = v81;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "T");
  (*((void (**)(void **, void **, void **))*v80 + 3))(v80, &v137, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v83 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = __p;
  __p = 0;
  if (v86)
    (*(void (**)(void *))(*(_QWORD *)v86 + 8))(v86);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v154;
  std::string::basic_string[abi:ne180100]<0>(v129, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = (std::__shared_weak_count_vtbl *)__p;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v132 = v88;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*((void (**)(void **, void **, void **))*v87 + 3))(v87, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v132;
  if (v132)
  {
    v91 = (unint64_t *)&v132->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = __p;
  __p = 0;
  if (v93)
    (*(void (**)(void *))(*(_QWORD *)v93 + 8))(v93);
  if (v130 < 0)
    operator delete(v129[0]);
  v94 = *a3;
  v125 = v154;
  if (v154)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v154;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v154 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v154;
  v154 = 0;
  if (v100)
    (*((void (**)(void **))*v100 + 1))(v100);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v154);
  v101 = v154;
  std::string::basic_string[abi:ne180100]<0>(v121, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v121, 0, (uint64_t *)&__p);
  v123 = __p;
  if (__p)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)__p;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v119, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v101 + 3))(v101, &v123, 0, v119);
  if (v120 < 0)
    operator delete(v119[0]);
  v104 = v124;
  if (v124)
  {
    v105 = (unint64_t *)&v124->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = __p;
  __p = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v122 < 0)
    operator delete(v121[0]);
  v108 = *a3;
  v117 = v154;
  if (v154)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v154;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v118 = v109;
  v154 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v108 + 56))(v108, &v117);
  v111 = v118;
  if (v118)
  {
    v112 = (unint64_t *)&v118->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v154;
  v154 = 0;
  if (v114)
    (*((void (**)(void **))*v114 + 1))(v114);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v153;
  if (v153)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v153);
    return MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07050D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49)
{
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)(v50 - 248);
  *(_QWORD *)(v50 - 248) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v50 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Softmax::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  uint64_t result;
  uint64_t v105;
  void *v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  void *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  __int128 v127;
  void *v128[2];
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char **v134;
  __n128 v135;
  __n128 v136;
  _QWORD *v137;
  void *__p;
  void *v139;
  char *v140;
  char *v141;
  char **v142;
  _BYTE v143[24];
  _BYTE *v144;
  _BYTE v145[24];
  _BYTE *v146;
  _BYTE v147[24];
  _BYTE *v148;
  void *v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD v152[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v137 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v139 = v9 + 2;
  v140 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  __p = v9;
  v149 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v155 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v150 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v149, 2, &v136);
  MIL::IRParameter::Make(&v136, &v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v136.n128_u64[1];
  if (v136.n128_u64[1])
  {
    v15 = (unint64_t *)(v136.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v139 = __p;
    operator delete(__p);
  }
  v17 = v137;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "axis", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v21 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v134 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v134, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v134, 1uLL);
  v24 = v134;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v26->~__shared_weak_count_0;
  v155 = &v26->~__shared_weak_count_0;
  v152[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v149 = v28;
  *v28 = v27;
  v150 = (uint64_t)(v28 + 1);
  v151 = v28 + 1;
  v152[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v149);
  MIL::IRParameter::MakeTypeSet((uint64_t)v152, 2, &v130);
  MIL::IRParameter::Make(&v130, &v131);
  v29 = v131;
  v132 = v131;
  if (v131)
  {
    v30 = (_QWORD *)operator new();
    v31 = v131;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v133 = v30;
  v131 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v142 = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v132 = 0;
    v133 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    __p = v46;
    v139 = v46;
    v24[1] = (char *)(v41 + 2);
    v140 = v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v141 = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v132 = 0;
    v133 = 0;
  }
  v24[1] = v34;
  v48 = v131;
  v131 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v130.n128_u64[1];
  if (v130.n128_u64[1])
  {
    v50 = (unint64_t *)(v130.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v149)
  {
    v150 = (uint64_t)v149;
    operator delete(v149);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v128 = *(_OWORD *)a2;
  v129 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v137;
  *(_QWORD *)&v127 = v137;
  if (v137)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v127 + 1) = v53;
  v137 = 0;
  *(_QWORD *)&v126 = v134;
  if (v134)
  {
    v54 = (_QWORD *)operator new();
    v55 = v134;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v126 + 1) = v54;
  v134 = 0;
  v148 = 0;
  v146 = 0;
  MIL::IROperator::Make((__int128 *)v128, &v127, &v126, (uint64_t)v147, (uint64_t)v145, a3);
  v56 = v146;
  if (v146 == v145)
  {
    v57 = 4;
    v56 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v148;
  if (v148 == v147)
  {
    v59 = 4;
    v58 = v147;
    goto LABEL_62;
  }
  if (v148)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
  if (*((_QWORD *)&v126 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v129) < 0)
    operator delete(v128[0]);
  v66 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v143);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 200))(v66, v143);
  v67 = v144;
  if (v144 == v143)
  {
    v68 = 4;
    v67 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_80;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_80:
  if (SHIBYTE(v140) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v69 = __p;
  std::string::basic_string[abi:ne180100]<0>(v122, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v122, 0, (uint64_t *)&Scalar);
  v124 = Scalar;
  if (Scalar)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = Scalar;
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v71;
  }
  else
  {
    v70 = 0;
  }
  v125 = v70;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v120, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v69 + 24))(v69, &v124, v120);
  if (v121 < 0)
    operator delete(v120[0]);
  v72 = v125;
  if (v125)
  {
    p_shared_owners = (unint64_t *)&v125->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = Scalar;
  Scalar = 0;
  if (v75)
    (*((void (**)(std::__shared_weak_count_vtbl *))v75->~__shared_weak_count + 1))(v75);
  if (v123 < 0)
    operator delete(v122[0]);
  v76 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v118 = Scalar;
  if (Scalar)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = Scalar;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v119 = v77;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v76 + 24))(v76, &v118, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v79 = v119;
  if (v119)
  {
    v80 = (unint64_t *)&v119->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = Scalar;
  Scalar = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  v83 = *a3;
  v114 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v115 = v84;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v83 + 56))(v83, &v114);
  v86 = v115;
  if (v115)
  {
    v87 = (unint64_t *)&v115->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v90 = __p;
  std::string::basic_string[abi:ne180100]<0>(v110, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v110, 0, (uint64_t *)&Scalar);
  v112 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v113 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v108, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v90 + 24))(v90, &v112, 0, v108);
  if (v109 < 0)
    operator delete(v108[0]);
  v93 = v113;
  if (v113)
  {
    v94 = (unint64_t *)&v113->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v111 < 0)
    operator delete(v110[0]);
  v97 = *a3;
  v106 = __p;
  if (__p)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)__p;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v107 = v98;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v97 + 56))(v97, &v106);
  v100 = v107;
  if (v107)
  {
    v101 = (unint64_t *)&v107->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = __p;
  __p = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v134, 0);
  result = (uint64_t)v137;
  if (v137)
  {
    v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v137);
    return MEMORY[0x1E0C023A0](v105, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E070604C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  uint64_t *v53;
  void *v55;
  uint64_t v56;

  v55 = a53;
  a53 = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = *v53;
  *v53 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  _Unwind_Resume(a1);
}

void sub_1E07063D0()
{
  JUMPOUT(0x1E0706388);
}

uint64_t MIL::Operators::Common::ios15::SoftplusParametric::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  void **v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  void *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  void *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  void *v153;
  std::__shared_weak_count *v154;
  void **v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  void *v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  void *v165[2];
  char v166;
  void *v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  void *v173;
  std::__shared_weak_count *v174;
  __int128 v175;
  __int128 v176;
  void *v177[2];
  uint64_t v178;
  __n128 v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  char **v183;
  __n128 v184;
  __n128 v185;
  void *__p;
  void *v187;
  _QWORD *v188;
  __n128 v189;
  _QWORD *v190;
  void **v191;
  void **v192;
  void **v193;
  char *v194;
  char **v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _QWORD v200[3];
  _QWORD *v201;
  void *v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD v205[3];

  v205[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v190 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v192 = (void **)(v10 + 24);
  v193 = (void **)(v10 + 24);
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v191 = (void **)v10;
  v202 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v191);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v187 = v14 + 3;
  v188 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 2, &v189);
  MIL::IRParameter::Make(&v189, &v181);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v181);
  v15 = v181;
  v181 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v17 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v187 = __p;
    operator delete(__p);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  v19 = v190;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  v191 = v21;
  *v21 = (void *)v20;
  v192 = v21 + 1;
  v193 = v21 + 1;
  v202 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v191);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v187 = v23 + 1;
  v188 = v23 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 2, &v185);
  MIL::IRParameter::Make(&v185, &v181);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "alpha", &v181);
  v25 = v181;
  v181 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v27 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v187 = __p;
    operator delete(__p);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v190;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (void **)operator new(8uLL);
  v191 = v31;
  *v31 = (void *)v30;
  v192 = v31 + 1;
  v193 = v31 + 1;
  v202 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v191);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v187 = v33 + 1;
  v188 = v33 + 1;
  v203 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v202, 2, &v184);
  MIL::IRParameter::Make(&v184, &v181);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v29, "beta", &v181);
  v35 = v181;
  v181 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v37 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v187 = __p;
    operator delete(__p);
  }
  if (v191)
  {
    v192 = v191;
    operator delete(v191);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v183 = 0;
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  v191 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v183, (void **)v39);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v191, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v183, 1uLL);
  v40 = v183;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(0x18uLL);
  v187 = v44 + 3;
  v188 = v44 + 3;
  *v44 = v41;
  v44[1] = v42;
  v44[2] = v43;
  __p = v44;
  v205[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(0x18uLL);
  v203 = (uint64_t)(v48 + 3);
  v204 = v48 + 3;
  *v48 = v45;
  v48[1] = v46;
  v48[2] = v47;
  v202 = v48;
  v205[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v202);
  MIL::IRParameter::MakeTypeSet((uint64_t)v205, 2, &v179);
  MIL::IRParameter::Make(&v179, &v180);
  v49 = v180;
  v181 = v180;
  if (v180)
  {
    v50 = (_QWORD *)operator new();
    v51 = v180;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v182 = v50;
  v180 = 0;
  v52 = v40[2];
  v53 = v40[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v40) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v40;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v195 = v40 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v40 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v181 = 0;
    v182 = 0;
    v63 = *v40;
    v62 = v40[1];
    if (v62 == *v40)
    {
      v66 = (void **)v40[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = (void **)*v40;
      v62 = v40[1];
    }
    v54 = (char *)(v61 + 2);
    *v40 = v64;
    v191 = v66;
    v192 = v66;
    v40[1] = (char *)(v61 + 2);
    v193 = (void **)v62;
    v67 = v40[2];
    v40[2] = &v59[16 * v60];
    v194 = v67;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v191);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v181 = 0;
    v182 = 0;
  }
  v40[1] = v54;
  v68 = v180;
  v180 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v179.n128_u64[1];
  if (v179.n128_u64[1])
  {
    v70 = (unint64_t *)(v179.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v202)
  {
    v203 = (uint64_t)v202;
    operator delete(v202);
  }
  if (__p)
  {
    v187 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v177 = *(_OWORD *)a2;
  v178 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v190;
  *(_QWORD *)&v176 = v190;
  if (v190)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v176 + 1) = v73;
  v190 = 0;
  *(_QWORD *)&v175 = v183;
  if (v183)
  {
    v74 = (_QWORD *)operator new();
    v75 = v183;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v175 + 1) = v74;
  v183 = 0;
  v200[0] = &unk_1EA99FAC8;
  v200[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateSoftplusParametric;
  v201 = v200;
  v199 = 0;
  MIL::IROperator::Make((__int128 *)v177, &v176, &v175, (uint64_t)v200, (uint64_t)v198, a3);
  v76 = v199;
  if (v199 == v198)
  {
    v77 = 4;
    v76 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_73;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_73:
  v78 = v201;
  if (v201 == v200)
  {
    v79 = 4;
    v78 = v200;
    goto LABEL_77;
  }
  if (v201)
  {
    v79 = 5;
LABEL_77:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
  if (*((_QWORD *)&v175 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (*((_QWORD *)&v176 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v178) < 0)
    operator delete(v177[0]);
  v86 = *a3;
  v87 = std::string::basic_string[abi:ne180100]<0>(&v191, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v87, (uint64_t)v196);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v86 + 200))(v86, v196);
  v88 = v197;
  if (v197 == v196)
  {
    v89 = 4;
    v88 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_95;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_95:
  if (SHIBYTE(v193) < 0)
    operator delete(v191);
  MIL::Validation::TensorDTypeConstraints::Make(&v191);
  v90 = v191;
  std::string::basic_string[abi:ne180100]<0>(v171, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 0, (uint64_t *)&__p);
  v173 = __p;
  if (__p)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)__p;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v174 = v91;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "T");
  (*((void (**)(void **, void **, void **))*v90 + 3))(v90, &v173, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v93 = v174;
  if (v174)
  {
    p_shared_owners = (unint64_t *)&v174->__shared_owners_;
    do
      v95 = __ldaxr(p_shared_owners);
    while (__stlxr(v95 - 1, p_shared_owners));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = __p;
  __p = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  if (v172 < 0)
    operator delete(v171[0]);
  v97 = v191;
  std::string::basic_string[abi:ne180100]<0>(v165, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 0, (uint64_t *)&__p);
  v167 = __p;
  if (__p)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)__p;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v168 = v98;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v163, "T");
  (*((void (**)(void **, void **, void **))*v97 + 3))(v97, &v167, v163);
  if (v164 < 0)
    operator delete(v163[0]);
  v100 = v168;
  if (v168)
  {
    v101 = (unint64_t *)&v168->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = __p;
  __p = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  if (v166 < 0)
    operator delete(v165[0]);
  v104 = v191;
  std::string::basic_string[abi:ne180100]<0>(v159, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&__p);
  v161 = __p;
  if (__p)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)__p;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v162 = v105;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "T");
  (*((void (**)(void **, void **, void **))*v104 + 3))(v104, &v161, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v107 = v162;
  if (v162)
  {
    v108 = (unint64_t *)&v162->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = __p;
  __p = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  if (v160 < 0)
    operator delete(v159[0]);
  v111 = *a3;
  v155 = v191;
  if (v191)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v191;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v156 = v112;
  v191 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v111 + 56))(v111, &v155);
  v114 = v156;
  if (v156)
  {
    v115 = (unint64_t *)&v156->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v191;
  v191 = 0;
  if (v117)
    (*((void (**)(void **))*v117 + 1))(v117);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v191);
  v118 = v191;
  std::string::basic_string[abi:ne180100]<0>(v151, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&__p);
  v153 = __p;
  if (__p)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)__p;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v154 = v119;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v118 + 3))(v118, &v153, 0, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v121 = v154;
  if (v154)
  {
    v122 = (unint64_t *)&v154->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = __p;
  __p = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  if (v152 < 0)
    operator delete(v151[0]);
  v125 = v191;
  std::string::basic_string[abi:ne180100]<0>(v145, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&__p);
  v147 = __p;
  if (__p)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)__p;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v148 = v126;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v125 + 3))(v125, &v147, 0, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v148;
  if (v148)
  {
    v129 = (unint64_t *)&v148->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = __p;
  __p = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  if (v146 < 0)
    operator delete(v145[0]);
  v132 = *a3;
  v141 = v191;
  if (v191)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v191;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  v191 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v191;
  v191 = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v183, 0);
  result = (uint64_t)v190;
  if (v190)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v190);
    return MEMORY[0x1E0C023A0](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07073F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a65;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;

  v68 = *(_QWORD *)(v66 - 248);
  *(_QWORD *)(v66 - 248) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *v65;
  *v65 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v66 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0707944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E07079DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0707A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1E0C023A0](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = a2;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x1E0C023A0](a2, 0x20C40960023A9);
  }
  return result;
}

uint64_t *std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a1 = *a2;
  if (v4)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA99F888;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  a1[1] = (uint64_t)v5;
  *a2 = 0;
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRParameter  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(result);
    JUMPOUT(0x1E0C023A0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0707E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0707ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0707F1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0707F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E070802C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0708078(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99FAC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99FAC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

void std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t OUTLINED_FUNCTION_1_1@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  uint64_t v0;

  return std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v0);
}

uint64_t OUTLINED_FUNCTION_5@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConv(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Operators::Common::Shared::ValidateConvolution(this, 0, 0, a2);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConvTranspose(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Operators::Common::Shared::ValidateConvolution(this, (const MIL::IROperation *)1, 0, a2);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConv(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  MIL::IRValue *SingleValue;
  uint64_t *v11;
  MIL::IRValue *v12;
  uint64_t *v13;
  const void *v14;
  MIL::IRValue *v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  const void *Data;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  void (***v26)(MIL::MILContextImpl *__hidden);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32[3];
  void *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  char *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  std::string v47;

  std::string::basic_string[abi:ne180100]<0>(&v47, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&v47);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v47, "weight");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&v47);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v47, "strides");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v47);
  v11 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v47, "dilations");
  v12 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v47);
  v13 = (uint64_t *)MIL::IRValue::AsTensor(v12);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pad_type");
  v14 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  MIL::IRValue::GetScalar<std::string>(v14, &v47);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pad");
  v15 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v16 = (uint64_t *)MIL::IRValue::AsTensor(v15);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v18 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v19 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  Data = (const void *)MIL::IRTensorValue::GetDataView<int>(v11);
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&__p, Data, (uint64_t)Data + 4 * v21, (4 * v21) >> 2);
  v22 = (const void *)MIL::IRTensorValue::GetDataView<int>(v13);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v41, v22, (uint64_t)v22 + 4 * v23, (4 * v23) >> 2);
  v24 = (const void *)MIL::IRTensorValue::GetDataView<int>(v16);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v38, v24, (uint64_t)v24 + 4 * v25, (4 * v25) >> 2);
  v26 = *a1;
  MIL::ValueTypeInferenceUtils::SliceShape(v18, 2uLL, (v18[1] - *v18) >> 3, &v33);
  MIL::ValueTypeInferenceUtils::SliceShape(v19, 2uLL, (v19[1] - *v19) >> 3, v32);
  MIL::ValueTypeInferenceUtils::GetSpatialDimensionsOutShape(v26, &v33, (uint64_t *)v32, &__p, &v41, (int **)&v47, (uint64_t)&v38, 0, &v36);
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v18[1] == *v18 || v19[1] == *v19)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v27 = *(_QWORD *)*v18;
  v28 = *(_QWORD *)*v19;
  v29 = operator new(0x10uLL);
  v34 = v29 + 2;
  v35 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  v33 = v29;
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&v33, (uint64_t)(v29 + 2), (char *)v36, v37, (v37 - (_BYTE *)v36) >> 3);
  v30 = MIL::IRTensorValueType::MakeWithShape(*a1, v17, (uint64_t)&v33);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31 = (uint64_t *)operator new(8uLL);
  *a3 = v31;
  *v31++ = v30;
  a3[1] = v31;
  a3[2] = v31;
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    v37 = (char *)v36;
    operator delete(v36);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_1E0708668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  if (*(char *)(v30 - 81) < 0)
    operator delete(*(void **)(v30 - 104));
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConvTranspose(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  MIL::IRValue *SingleValue;
  uint64_t *v12;
  int *Data;
  unint64_t v14;
  unint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type size;
  std::string::size_type v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  MIL::IRValueType *v32;
  uint64_t v33;
  MIL::IRValue *v34;
  uint64_t *v35;
  MIL::IRValue *v36;
  uint64_t *v37;
  const void *v38;
  MIL::IRValue *v39;
  uint64_t *v40;
  const void *v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  const void *v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void *v56;
  void (***v57)(MIL::MILContextImpl *__hidden);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void (***v78)(MIL::MILContextImpl *__hidden);
  uint64_t v79;
  uint64_t *v80;
  void *v81[3];
  void *v82[3];
  void *v83;
  char *v84;
  void *__p;
  void *__dst;
  unint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  std::string v97;

  std::string::basic_string[abi:ne180100]<0>(&v97, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&v97);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(&v97, "output_shape");
  v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v97);
  v10 = v9;
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v97.__r_.__value_.__l.__data_);
    if (v10)
    {
LABEL_5:
      std::string::basic_string[abi:ne180100]<0>(&v97, "output_shape");
      SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v97);
      v12 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      Data = (int *)MIL::IRTensorValue::GetDataView<int>(v12);
      v15 = v14;
      memset(&v97, 0, sizeof(v97));
      std::vector<std::string const*>::reserve((void **)&v97.__r_.__value_.__l.__data_, v14);
      if (v15)
      {
        v16 = &Data[v15];
        do
        {
          v17 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)*Data);
          v18 = v17;
          size = v97.__r_.__value_.__l.__size_;
          if (v97.__r_.__value_.__l.__size_ >= v97.__r_.__value_.__r.__words[2])
          {
            v21 = (uint64_t)(v97.__r_.__value_.__l.__size_ - v97.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v22 = (uint64_t)(v97.__r_.__value_.__r.__words[2] - v97.__r_.__value_.__r.__words[0]) >> 2;
            if (v22 <= v21 + 1)
              v22 = v21 + 1;
            if (v97.__r_.__value_.__r.__words[2] - v97.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v97.__r_.__value_.__r.__words[2], v23);
            else
              v24 = 0;
            v25 = (uint64_t *)&v24[8 * v21];
            *v25 = v18;
            v20 = (std::string::size_type)(v25 + 1);
            v26 = (char *)v97.__r_.__value_.__l.__size_;
            v27 = v97.__r_.__value_.__r.__words[0];
            if (v97.__r_.__value_.__l.__size_ != v97.__r_.__value_.__r.__words[0])
            {
              do
              {
                v28 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *--v25 = v28;
              }
              while (v26 != (char *)v27);
              v26 = (char *)v97.__r_.__value_.__r.__words[0];
            }
            v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
            v97.__r_.__value_.__l.__size_ = v20;
            v97.__r_.__value_.__r.__words[2] = (std::string::size_type)&v24[8 * v23];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_QWORD *)v97.__r_.__value_.__l.__size_ = v17;
            v20 = size + 8;
          }
          v97.__r_.__value_.__l.__size_ = v20;
          ++Data;
        }
        while (Data != v16);
      }
      v29 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&v97);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v30 = (uint64_t *)operator new(8uLL);
      *a3 = v30;
      *v30++ = v29;
      a3[1] = v30;
      a3[2] = v30;
      v31 = (void *)v97.__r_.__value_.__r.__words[0];
      if (v97.__r_.__value_.__r.__words[0])
      {
        v97.__r_.__value_.__l.__size_ = v97.__r_.__value_.__r.__words[0];
LABEL_89:
        operator delete(v31);
        return;
      }
      return;
    }
  }
  else if (v9)
  {
    goto LABEL_5;
  }
  std::string::basic_string[abi:ne180100]<0>(&v97, "weight");
  v32 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&v97);
  v33 = MIL::IRValueType::AsTensorType(v32);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v97, "strides");
  v34 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v97);
  v35 = (uint64_t *)MIL::IRValue::AsTensor(v34);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v97, "dilations");
  v36 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v97);
  v37 = (uint64_t *)MIL::IRValue::AsTensor(v36);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v94, "pad_type");
  v38 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v94);
  MIL::IRValue::GetScalar<std::string>(v38, &v97);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  std::string::basic_string[abi:ne180100]<0>(&v94, "pad");
  v39 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v94);
  v40 = (uint64_t *)MIL::IRValue::AsTensor(v39);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  std::string::basic_string[abi:ne180100]<0>(&v94, "groups");
  v41 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&v94);
  v42 = MIL::IRValue::GetScalar<int>(v41);
  if (SHIBYTE(v96) < 0)
    operator delete(v94);
  v43 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v44 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 96))(v33);
  v45 = (const void *)MIL::IRTensorValue::GetDataView<int>(v35);
  v94 = 0;
  v95 = 0;
  v96 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v94, v45, (uint64_t)v45 + 4 * v46, (4 * v46) >> 2);
  v47 = (const void *)MIL::IRTensorValue::GetDataView<int>(v37);
  v91 = 0;
  v92 = 0;
  v93 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v91, v47, (uint64_t)v47 + 4 * v48, (4 * v48) >> 2);
  v49 = (const void *)MIL::IRTensorValue::GetDataView<int>(v40);
  v88 = 0;
  v89 = 0;
  v90 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v88, v49, (uint64_t)v49 + 4 * v50, (4 * v50) >> 2);
  if (v43[1] == *v43)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  v51 = *(_QWORD *)*v43;
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  __dst = v52 + 1;
  v87 = (unint64_t)(v52 + 1);
  v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v44 + 8) + 24))(*(_QWORD *)(*v44 + 8));
  v54 = v53;
  if (v53)
  {
    v55 = (char *)__dst;
    if ((unint64_t)__dst < v87)
    {
      *(_QWORD *)__dst = v53;
      v56 = v55 + 8;
      goto LABEL_73;
    }
    v63 = ((_BYTE *)__dst - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v63 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v64 = (uint64_t)(v87 - (_QWORD)__p) >> 2;
    if (v64 <= v63 + 1)
      v64 = v63 + 1;
    if (v87 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v64;
    if (v65)
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v87, v65);
    else
      v66 = 0;
    v71 = &v66[8 * v63];
    v72 = &v66[8 * v65];
    *(_QWORD *)v71 = v54;
    v56 = v71 + 8;
    v74 = (char *)__p;
    v73 = (char *)__dst;
    if (__dst == __p)
      goto LABEL_71;
    do
    {
      v75 = *((_QWORD *)v73 - 1);
      v73 -= 8;
      *((_QWORD *)v71 - 1) = v75;
      v71 -= 8;
    }
    while (v73 != v74);
    goto LABEL_70;
  }
  v57 = *a1;
  v58 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*v44 + 8));
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58);
  v60 = MIL::IRConstantDimension::Make(v57, (MIL::MILContext *)(v59 * v42));
  v61 = v60;
  v62 = (char *)__dst;
  if ((unint64_t)__dst < v87)
  {
    *(_QWORD *)__dst = v60;
    v56 = v62 + 8;
    goto LABEL_73;
  }
  v67 = ((_BYTE *)__dst - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v67 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v68 = (uint64_t)(v87 - (_QWORD)__p) >> 2;
  if (v68 <= v67 + 1)
    v68 = v67 + 1;
  if (v87 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
    v69 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v69 = v68;
  if (v69)
    v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v87, v69);
  else
    v70 = 0;
  v71 = &v70[8 * v67];
  v72 = &v70[8 * v69];
  *(_QWORD *)v71 = v61;
  v56 = v71 + 8;
  v76 = (char *)__p;
  v73 = (char *)__dst;
  if (__dst != __p)
  {
    do
    {
      v77 = *((_QWORD *)v73 - 1);
      v73 -= 8;
      *((_QWORD *)v71 - 1) = v77;
      v71 -= 8;
    }
    while (v73 != v76);
LABEL_70:
    v73 = (char *)__p;
  }
LABEL_71:
  __p = v71;
  __dst = v56;
  v87 = (unint64_t)v72;
  if (v73)
    operator delete(v73);
LABEL_73:
  __dst = v56;
  v78 = *a1;
  MIL::ValueTypeInferenceUtils::SliceShape(v43, 2uLL, (v43[1] - *v43) >> 3, v82);
  MIL::ValueTypeInferenceUtils::SliceShape(v44, 2uLL, (v44[1] - *v44) >> 3, v81);
  MIL::ValueTypeInferenceUtils::ConvTransposeSpatialDimensionsOutShape(v78, v82, (uint64_t *)v81, &v94, &v91, (uint64_t)&v97, &v88, &v83);
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  if (v82[0])
  {
    v82[1] = v82[0];
    operator delete(v82[0]);
  }
  std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>((uint64_t)&__p, (uint64_t)__dst, (char *)v83, v84, (v84 - (_BYTE *)v83) >> 3);
  v79 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v80 = (uint64_t *)operator new(8uLL);
  *a3 = v80;
  *v80++ = v79;
  a3[1] = v80;
  a3[2] = v80;
  if (v83)
  {
    v84 = (char *)v83;
    operator delete(v83);
  }
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (void *)v97.__r_.__value_.__r.__words[0];
    goto LABEL_89;
  }
}

void sub_1E0708E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(_QWORD *)(v26 - 128) = v28;
    operator delete(v28);
  }
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios15::Conv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  void *v106;
  _QWORD *v107;
  void *v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  _QWORD *v120;
  char *v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  void *v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  void *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *p_shared_owners;
  unint64_t v151;
  void *v152;
  void *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  void *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  void *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  void *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *v208;
  void *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void *v215;
  void *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  void *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  uint64_t i;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count_vtbl *v251;
  uint64_t result;
  uint64_t v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  void *v256[2];
  char v257;
  void *v258;
  std::__shared_weak_count *v259;
  void *v260;
  std::__shared_weak_count *v261;
  void *v262[2];
  char v263;
  void *v264[2];
  char v265;
  void *v266;
  std::__shared_weak_count *v267;
  void *v268[2];
  char v269;
  void *v270[2];
  char v271;
  void *v272;
  std::__shared_weak_count *v273;
  void *v274[2];
  char v275;
  void *v276[2];
  char v277;
  void *v278;
  std::__shared_weak_count *v279;
  void *v280[2];
  char v281;
  void *v282[2];
  char v283;
  void *v284;
  std::__shared_weak_count *v285;
  void *v286[2];
  char v287;
  void *v288[2];
  char v289;
  void *v290;
  std::__shared_weak_count *v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294[2];
  char v295;
  void *v296;
  std::__shared_weak_count *v297;
  void *v298;
  std::__shared_weak_count *v299;
  void *v300[2];
  char v301;
  void *v302;
  std::__shared_weak_count *v303;
  void *v304[2];
  char v305;
  void *v306[2];
  char v307;
  void *v308;
  std::__shared_weak_count *v309;
  void *v310[2];
  char v311;
  void *v312[2];
  char v313;
  void *v314;
  std::__shared_weak_count *v315;
  void *v316[2];
  char v317;
  void *v318[2];
  char v319;
  void *v320;
  std::__shared_weak_count *v321;
  __int128 v322;
  __int128 v323;
  void *v324[2];
  uint64_t v325;
  __n128 v326;
  __n128 v327;
  __n128 v328;
  __n128 v329;
  __n128 v330;
  __n128 v331;
  __n128 v332;
  void *v333;
  void *v334;
  _QWORD *v335;
  void *v336;
  void *v337;
  _QWORD *v338;
  void *v339;
  void *v340;
  _QWORD *v341;
  __n128 v342;
  uint64_t v343;
  __n128 v344;
  _QWORD *v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352[3];
  void *__p;
  void *v354;
  _QWORD *v355;
  _QWORD v356[3];
  _QWORD *v357;
  _BYTE v358[24];
  _BYTE *v359;
  _QWORD v360[3];
  _QWORD *v361;
  void *v362;
  uint64_t v363;
  _QWORD *v364;
  std::__shared_weak_count_vtbl *v365;
  uint64_t p_get_deleter;
  _QWORD *v367;
  uint64_t v368;

  v368 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v345 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v348 = (uint64_t)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  v346 = v10;
  v347 = (uint64_t)(v10 + 3);
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v346);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v355 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v354 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 2, &v344);
  MIL::IRParameter::Make(&v344, (uint64_t *)&v339);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v339);
  v15 = v339;
  v339 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v344.n128_u64[1];
  if (v344.n128_u64[1])
  {
    v17 = (unint64_t *)(v344.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v354 = __p;
    operator delete(__p);
  }
  if (v346)
  {
    v347 = (uint64_t)v346;
    operator delete(v346);
  }
  v19 = v345;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x18uLL);
  v355 = v23 + 3;
  *v23 = v20;
  v23[1] = v21;
  v23[2] = v22;
  __p = v23;
  v354 = v23 + 3;
  v346 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v367 = &v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v365 = v27;
  v347 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x20uLL);
  v341 = v32 + 4;
  *v32 = v28;
  v32[1] = v29;
  v32[2] = v30;
  v32[3] = v31;
  v339 = v32;
  v340 = v32 + 4;
  v348 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v339);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = operator new(0x20uLL);
  v363 = (uint64_t)(v37 + 4);
  v364 = v37 + 4;
  *v37 = v33;
  v37[1] = v34;
  v37[2] = v35;
  v37[3] = v36;
  v362 = v37;
  v349 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v362);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x28uLL);
  v338 = v43 + 5;
  *v43 = v38;
  v43[1] = v39;
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = v42;
  v336 = v43;
  v337 = v43 + 5;
  v350 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v336);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = operator new(0x28uLL);
  v335 = v49 + 5;
  *v49 = v44;
  v49[1] = v45;
  v49[2] = v46;
  v49[3] = v47;
  v49[4] = v48;
  v333 = v49;
  v334 = v49 + 5;
  v351 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v333);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v346, 6, &v342);
  MIL::IRParameter::Make(&v342, &v343);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "weight", &v343);
  v50 = v343;
  v343 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v342.n128_u64[1];
  if (v342.n128_u64[1])
  {
    v52 = (unint64_t *)(v342.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
  if (v336)
  {
    v337 = v336;
    operator delete(v336);
  }
  if (v362)
  {
    v363 = (uint64_t)v362;
    operator delete(v362);
  }
  if (v339)
  {
    v340 = v339;
    operator delete(v339);
  }
  if (v365)
  {
    p_get_deleter = (uint64_t)v365;
    operator delete(v365);
  }
  if (__p)
  {
    v354 = __p;
    operator delete(__p);
  }
  v54 = v345;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v346 = v56;
  *v56 = v55;
  v348 = (uint64_t)(v56 + 1);
  v347 = (uint64_t)(v56 + 1);
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v346);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v355 = v58 + 1;
  v354 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 2, &v332);
  MIL::IRParameter::Make(&v332, (uint64_t *)&v339);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", (uint64_t *)&v339);
  v60 = v339;
  v339 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v332.n128_u64[1];
  if (v332.n128_u64[1])
  {
    v62 = (unint64_t *)(v332.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v354 = __p;
    operator delete(__p);
  }
  if (v346)
  {
    v347 = (uint64_t)v346;
    operator delete(v346);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v345;
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = operator new(8uLL);
  v346 = v66;
  *v66 = v65;
  v348 = (uint64_t)(v66 + 1);
  v347 = (uint64_t)(v66 + 1);
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v346);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 1, &v331);
  MIL::IRParameter::Make(&v331, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v64, "strides", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v331.n128_u64[1];
  if (v331.n128_u64[1])
  {
    v70 = (unint64_t *)(v331.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v346)
  {
    v347 = (uint64_t)v346;
    operator delete(v346);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  v72 = v345;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v330);
  MIL::IRParameter::Make(&v330, (uint64_t *)&v346);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v72, "pad_type", (uint64_t *)&v346);
  v74 = v346;
  v346 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v330.n128_u64[1];
  if (v330.n128_u64[1])
  {
    v76 = (unint64_t *)(v330.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  v78 = v345;
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v346 = v80;
  *v80 = v79;
  v348 = (uint64_t)(v80 + 1);
  v347 = (uint64_t)(v80 + 1);
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v346);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 1, &v329);
  MIL::IRParameter::Make(&v329, (uint64_t *)&__p);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v78, "pad", (uint64_t *)&__p);
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v329.n128_u64[1];
  if (v329.n128_u64[1])
  {
    v84 = (unint64_t *)(v329.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v346)
  {
    v347 = (uint64_t)v346;
    operator delete(v346);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v86 = v345;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v346 = v88;
  *v88 = v87;
  v348 = (uint64_t)(v88 + 1);
  v347 = (uint64_t)(v88 + 1);
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v346);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 1, &v328);
  MIL::IRParameter::Make(&v328, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v86, "dilations", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v328.n128_u64[1];
  if (v328.n128_u64[1])
  {
    v92 = (unint64_t *)(v328.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v346)
  {
    v347 = (uint64_t)v346;
    operator delete(v346);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  v94 = v345;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v327);
  MIL::IRParameter::Make(&v327, (uint64_t *)&v346);
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v94, "groups", (uint64_t *)&v346);
  v96 = v346;
  v346 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v327.n128_u64[1];
  if (v327.n128_u64[1])
  {
    v98 = (unint64_t *)(v327.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  v336 = 0;
  v100 = operator new();
  *(_QWORD *)v100 = 0;
  *(_QWORD *)(v100 + 8) = 0;
  *(_QWORD *)(v100 + 16) = 0;
  v346 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v336, (void **)v100);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v346, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v336, 1uLL);
  v101 = v336;
  v102 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v103 = operator new(8uLL);
  __p = v103;
  *v103 = v102;
  v355 = v103 + 1;
  v354 = v103 + 1;
  v362 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v104 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v105 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v105;
  v105->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v104;
  p_get_deleter = (uint64_t)&v105->~__shared_weak_count_0;
  v367 = &v105->~__shared_weak_count_0;
  v363 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v362, 2, &v326);
  MIL::IRParameter::Make(&v326, (uint64_t *)&v333);
  v106 = v333;
  v339 = v333;
  if (v333)
  {
    v107 = (_QWORD *)operator new();
    v108 = v333;
    *v107 = &unk_1EA99F888;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v108;
  }
  else
  {
    v107 = 0;
  }
  v340 = v107;
  v333 = 0;
  v109 = v101[2];
  v110 = (_QWORD *)v101[1];
  if ((unint64_t)v110 >= v109)
  {
    v112 = ((uint64_t)v110 - *v101) >> 4;
    v113 = v112 + 1;
    if ((unint64_t)(v112 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v114 = v109 - *v101;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
      v115 = 0xFFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    v350 = (uint64_t)(v101 + 2);
    v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v101 + 2), v115);
    v118 = &v116[16 * v112];
    *(_QWORD *)v118 = v106;
    *((_QWORD *)v118 + 1) = v107;
    v340 = 0;
    v339 = 0;
    v120 = (_QWORD *)*v101;
    v119 = (_QWORD *)v101[1];
    if (v119 == (_QWORD *)*v101)
    {
      v123 = (_QWORD *)v101[1];
      v121 = &v116[16 * v112];
    }
    else
    {
      v121 = &v116[16 * v112];
      do
      {
        v122 = *((_OWORD *)v119 - 1);
        v119 -= 2;
        *((_OWORD *)v121 - 1) = v122;
        v121 -= 16;
        *v119 = 0;
        v119[1] = 0;
      }
      while (v119 != v120);
      v123 = (_QWORD *)*v101;
      v119 = (_QWORD *)v101[1];
    }
    v111 = v118 + 16;
    *v101 = v121;
    v347 = (uint64_t)v123;
    v101[1] = v118 + 16;
    v348 = (uint64_t)v119;
    v124 = v101[2];
    v101[2] = &v116[16 * v117];
    v349 = v124;
    v346 = v123;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v346);
  }
  else
  {
    *v110 = v106;
    v110[1] = v107;
    v111 = v110 + 2;
    v340 = 0;
    v339 = 0;
  }
  v101[1] = v111;
  v125 = v333;
  v333 = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v326.n128_u64[1];
  if (v326.n128_u64[1])
  {
    v127 = (unint64_t *)(v326.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (v365)
  {
    p_get_deleter = (uint64_t)v365;
    operator delete(v365);
  }
  if (__p)
  {
    v354 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v324 = *(_OWORD *)a2;
  v325 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v129 = (uint64_t)v345;
  *(_QWORD *)&v323 = v345;
  if (v345)
  {
    v130 = (_QWORD *)operator new();
    *v130 = &unk_1EA99F8E8;
    v130[1] = 0;
    v130[2] = 0;
    v130[3] = v129;
  }
  else
  {
    v130 = 0;
  }
  *((_QWORD *)&v323 + 1) = v130;
  v345 = 0;
  *(_QWORD *)&v322 = v336;
  if (v336)
  {
    v131 = (_QWORD *)operator new();
    v132 = v336;
    *v131 = &unk_1EA99F948;
    v131[1] = 0;
    v131[2] = 0;
    v131[3] = v132;
  }
  else
  {
    v131 = 0;
  }
  *((_QWORD *)&v322 + 1) = v131;
  v336 = 0;
  v360[0] = &unk_1EA99FAC8;
  v360[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateConv;
  v361 = v360;
  v359 = 0;
  MIL::IROperator::Make((__int128 *)v324, &v323, &v322, (uint64_t)v360, (uint64_t)v358, a3);
  v133 = v359;
  if (v359 == v358)
  {
    v134 = 4;
    v133 = v358;
  }
  else
  {
    if (!v359)
      goto LABEL_122;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_122:
  v135 = v361;
  if (v361 == v360)
  {
    v136 = 4;
    v135 = v360;
    goto LABEL_126;
  }
  if (v361)
  {
    v136 = 5;
LABEL_126:
    (*(void (**)(void))(*v135 + 8 * v136))();
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
  if (*((_QWORD *)&v323 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  if (SHIBYTE(v325) < 0)
    operator delete(v324[0]);
  v143 = *a3;
  v356[0] = &off_1EA99FBD8;
  v356[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConv;
  v357 = v356;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v143 + 200))(v143, v356);
  v144 = v357;
  if (v357 == v356)
  {
    v145 = 4;
    v144 = v356;
  }
  else
  {
    if (!v357)
      goto LABEL_144;
    v145 = 5;
  }
  (*(void (**)(void))(*v144 + 8 * v145))();
LABEL_144:
  MIL::Validation::TensorDTypeConstraints::Make(&v346);
  v146 = v346;
  std::string::basic_string[abi:ne180100]<0>(v318, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v318, 0, (uint64_t *)&__p);
  v320 = __p;
  if (__p)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)__p;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v321 = v147;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v316, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v146 + 24))(v146, &v320, v316);
  if (v317 < 0)
    operator delete(v316[0]);
  v149 = v321;
  if (v321)
  {
    p_shared_owners = (unint64_t *)&v321->__shared_owners_;
    do
      v151 = __ldaxr(p_shared_owners);
    while (__stlxr(v151 - 1, p_shared_owners));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = __p;
  __p = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  if (v319 < 0)
    operator delete(v318[0]);
  v153 = v346;
  std::string::basic_string[abi:ne180100]<0>(v312, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v312, 0, (uint64_t *)&__p);
  v314 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v315 = v154;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v310, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v153 + 24))(v153, &v314, v310);
  if (v311 < 0)
    operator delete(v310[0]);
  v156 = v315;
  if (v315)
  {
    v157 = (unint64_t *)&v315->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = __p;
  __p = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  if (v313 < 0)
    operator delete(v312[0]);
  v160 = v346;
  std::string::basic_string[abi:ne180100]<0>(v306, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v306, 1, (uint64_t *)&__p);
  v308 = __p;
  if (__p)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)__p;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v309 = v161;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v304, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v160 + 24))(v160, &v308, v304);
  if (v305 < 0)
    operator delete(v304[0]);
  v163 = v309;
  if (v309)
  {
    v164 = (unint64_t *)&v309->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = __p;
  __p = 0;
  if (v166)
    (*(void (**)(void *))(*(_QWORD *)v166 + 8))(v166);
  if (v307 < 0)
    operator delete(v306[0]);
  v167 = v346;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v302 = __p;
  if (__p)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = (std::__shared_weak_count_vtbl *)__p;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v303 = v168;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v300, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v167 + 24))(v167, &v302, v300);
  if (v301 < 0)
    operator delete(v300[0]);
  v170 = v303;
  if (v303)
  {
    v171 = (unint64_t *)&v303->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = __p;
  __p = 0;
  if (v173)
    (*(void (**)(void *))(*(_QWORD *)v173 + 8))(v173);
  v174 = *a3;
  v298 = v346;
  if (v346)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)v346;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v299 = v175;
  v346 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v174 + 56))(v174, &v298);
  v177 = v299;
  if (v299)
  {
    v178 = (unint64_t *)&v299->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v346;
  v346 = 0;
  if (v180)
    (*(void (**)(void *))(*(_QWORD *)v180 + 8))(v180);
  MIL::Validation::TensorRankValueConstraints::Make(&v346);
  v181 = v346;
  std::string::basic_string[abi:ne180100]<0>(v294, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v294, 0, (uint64_t *)&__p);
  v296 = __p;
  if (__p)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = (std::__shared_weak_count_vtbl *)__p;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v297 = v182;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v181 + 32))(v181, &v296, 3, 5);
  v184 = v297;
  if (v297)
  {
    v185 = (unint64_t *)&v297->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = __p;
  __p = 0;
  if (v187)
    (*(void (**)(void *))(*(_QWORD *)v187 + 8))(v187);
  if (v295 < 0)
    operator delete(v294[0]);
  v188 = *a3;
  v292 = v346;
  if (v346)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = (std::__shared_weak_count_vtbl *)v346;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v293 = v189;
  v346 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v188 + 56))(v188, &v292);
  v191 = v293;
  if (v293)
  {
    v192 = (unint64_t *)&v293->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v346;
  v346 = 0;
  if (v194)
    (*(void (**)(void *))(*(_QWORD *)v194 + 8))(v194);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v346);
  v195 = v346;
  std::string::basic_string[abi:ne180100]<0>(v288, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v288, 0, (uint64_t *)&__p);
  v290 = __p;
  if (__p)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)__p;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v291 = v196;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v286, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v195 + 24))(v195, &v290, 1, v286);
  if (v287 < 0)
    operator delete(v286[0]);
  v198 = v291;
  if (v291)
  {
    v199 = (unint64_t *)&v291->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = __p;
  __p = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  if (v289 < 0)
    operator delete(v288[0]);
  v202 = v346;
  std::string::basic_string[abi:ne180100]<0>(v282, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v282, 1, (uint64_t *)&__p);
  v284 = __p;
  if (__p)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = (std::__shared_weak_count_vtbl *)__p;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v285 = v203;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v280, "C_out");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v202 + 24))(v202, &v284, 0, v280);
  if (v281 < 0)
    operator delete(v280[0]);
  v205 = v285;
  if (v285)
  {
    v206 = (unint64_t *)&v285->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = __p;
  __p = 0;
  if (v208)
    (*(void (**)(void *))(*(_QWORD *)v208 + 8))(v208);
  if (v283 < 0)
    operator delete(v282[0]);
  v209 = v346;
  std::string::basic_string[abi:ne180100]<0>(v276, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v276, 0, (uint64_t *)&__p);
  v278 = __p;
  if (__p)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = (std::__shared_weak_count_vtbl *)__p;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v279 = v210;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v274, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v209 + 24))(v209, &v278, 0, v274);
  if (v275 < 0)
    operator delete(v274[0]);
  v212 = v279;
  if (v279)
  {
    v213 = (unint64_t *)&v279->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = __p;
  __p = 0;
  if (v215)
    (*(void (**)(void *))(*(_QWORD *)v215 + 8))(v215);
  if (v277 < 0)
    operator delete(v276[0]);
  v216 = v346;
  std::string::basic_string[abi:ne180100]<0>(v270, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v270, 0, (uint64_t *)&__p);
  v272 = __p;
  if (__p)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = (std::__shared_weak_count_vtbl *)__p;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v273 = v217;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v268, "P");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v216 + 24))(v216, &v272, 0, v268);
  if (v269 < 0)
    operator delete(v268[0]);
  v219 = v273;
  if (v273)
  {
    v220 = (unint64_t *)&v273->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = __p;
  __p = 0;
  if (v222)
    (*(void (**)(void *))(*(_QWORD *)v222 + 8))(v222);
  if (v271 < 0)
    operator delete(v270[0]);
  v223 = v346;
  std::string::basic_string[abi:ne180100]<0>(v264, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v264, 0, (uint64_t *)&__p);
  v266 = __p;
  if (__p)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = (std::__shared_weak_count_vtbl *)__p;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v267 = v224;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v262, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v223 + 24))(v223, &v266, 0, v262);
  if (v263 < 0)
    operator delete(v262[0]);
  v226 = v267;
  if (v267)
  {
    v227 = (unint64_t *)&v267->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = __p;
  __p = 0;
  if (v229)
    (*(void (**)(void *))(*(_QWORD *)v229 + 8))(v229);
  if (v265 < 0)
    operator delete(v264[0]);
  v230 = *a3;
  v260 = v346;
  if (v346)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = (std::__shared_weak_count_vtbl *)v346;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v261 = v231;
  v346 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v230 + 56))(v230, &v260);
  v233 = v261;
  if (v261)
  {
    v234 = (unint64_t *)&v261->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = v346;
  v346 = 0;
  if (v236)
    (*(void (**)(void *))(*(_QWORD *)v236 + 8))(v236);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v365);
  v237 = v365;
  std::string::basic_string[abi:ne180100]<0>(v256, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v256, 0, (uint64_t *)&v339);
  v258 = v339;
  if (v339)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = (std::__shared_weak_count_vtbl *)v339;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = v239;
  }
  else
  {
    v238 = 0;
  }
  v259 = v238;
  v339 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v346, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v349, "same");
  std::string::basic_string[abi:ne180100]<0>(v352, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v346, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, void **, _QWORD))v237->~__shared_weak_count + 3))(v237, &v258, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v352[i + 2]) < 0)
      operator delete(v352[i]);
  }
  v241 = v259;
  if (v259)
  {
    v242 = (unint64_t *)&v259->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v339;
  v339 = 0;
  if (v244)
    (*(void (**)(void *))(*(_QWORD *)v244 + 8))(v244);
  if (v257 < 0)
    operator delete(v256[0]);
  v245 = *a3;
  v254 = v365;
  if (v365)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = v365;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = v247;
  }
  else
  {
    v246 = 0;
  }
  v255 = v246;
  v365 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v245 + 56))(v245, &v254);
  v248 = v255;
  if (v255)
  {
    v249 = (unint64_t *)&v255->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = v365;
  v365 = 0;
  if (v251)
    (*((void (**)(std::__shared_weak_count_vtbl *))v251->~__shared_weak_count + 1))(v251);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v336, 0);
  result = (uint64_t)v345;
  if (v345)
  {
    v253 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v345);
    return MEMORY[0x1E0C023A0](v253, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E070AE08(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x388], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3E0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ConvTranspose::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  void *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  unsigned __int8 *v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void *v114;
  _QWORD *v115;
  void *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  _QWORD *v128;
  char *v129;
  __int128 v130;
  _QWORD *v131;
  uint64_t v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  void *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  void *v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *p_shared_owners;
  unint64_t v159;
  void *v160;
  void *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  void *v167;
  void *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  void *v174;
  void *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  void *v188;
  void *v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  void *v202;
  void *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void *v209;
  void *v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  void *v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  void *v223;
  void *v224;
  std::__shared_weak_count *v225;
  std::__shared_weak_count_vtbl *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  void *v231;
  std::__shared_weak_count *v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  void *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  std::__shared_weak_count_vtbl *v247;
  uint64_t i;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count_vtbl *v259;
  uint64_t result;
  uint64_t v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  void *v266;
  std::__shared_weak_count *v267;
  void *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  void *v272[2];
  char v273;
  void *v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  void *v278[2];
  char v279;
  void *v280;
  std::__shared_weak_count *v281;
  void *v282[2];
  char v283;
  void *v284[2];
  char v285;
  void *v286;
  std::__shared_weak_count *v287;
  void *v288[2];
  char v289;
  void *v290[2];
  char v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294[2];
  char v295;
  void *v296[2];
  char v297;
  void *v298;
  std::__shared_weak_count *v299;
  void *v300;
  std::__shared_weak_count *v301;
  void *v302[2];
  char v303;
  void *v304;
  std::__shared_weak_count *v305;
  void *v306;
  std::__shared_weak_count *v307;
  void *v308[2];
  char v309;
  void *v310;
  std::__shared_weak_count *v311;
  void *v312[2];
  char v313;
  void *v314[2];
  char v315;
  void *v316;
  std::__shared_weak_count *v317;
  void *v318[2];
  char v319;
  void *v320[2];
  char v321;
  void *v322;
  std::__shared_weak_count *v323;
  void *v324[2];
  char v325;
  void *v326[2];
  char v327;
  void *v328;
  std::__shared_weak_count *v329;
  __int128 v330;
  __int128 v331;
  void *v332[2];
  uint64_t v333;
  __n128 v334;
  __n128 v335;
  __n128 v336;
  __n128 v337;
  __n128 v338;
  __n128 v339;
  __n128 v340;
  __n128 v341;
  void *v342;
  void *v343;
  _QWORD *v344;
  void *v345;
  void *v346;
  _QWORD *v347;
  void *v348;
  void *v349;
  _QWORD *v350;
  __n128 v351;
  uint64_t v352;
  __n128 v353;
  _QWORD *v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void *v361[3];
  void *__p;
  void *v363;
  _QWORD *v364;
  _QWORD v365[3];
  _QWORD *v366;
  _BYTE v367[24];
  _BYTE *v368;
  _QWORD v369[3];
  _QWORD *v370;
  void *v371;
  uint64_t v372;
  _QWORD *v373;
  std::__shared_weak_count_vtbl *v374;
  uint64_t p_get_deleter;
  _QWORD *v376;
  uint64_t v377;

  v377 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v354 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(0x18uLL);
  v357 = (uint64_t)(v10 + 3);
  *v10 = v7;
  v10[1] = v8;
  v10[2] = v9;
  v355 = v10;
  v356 = (uint64_t)(v10 + 3);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v355);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v364 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v363 = v14 + 3;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v353);
  MIL::IRParameter::Make(&v353, (uint64_t *)&v348);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v348);
  v15 = v348;
  v348 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v353.n128_u64[1];
  if (v353.n128_u64[1])
  {
    v17 = (unint64_t *)(v353.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v363 = __p;
    operator delete(__p);
  }
  if (v355)
  {
    v356 = (uint64_t)v355;
    operator delete(v355);
  }
  v19 = v354;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(0x18uLL);
  v364 = v23 + 3;
  *v23 = v20;
  v23[1] = v21;
  v23[2] = v22;
  __p = v23;
  v363 = v23 + 3;
  v355 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, 0);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (uint64_t)&v27->__get_deleter;
  v376 = &v27->__get_deleter;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v26;
  v374 = v27;
  v356 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v374);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = operator new(0x20uLL);
  v350 = v32 + 4;
  *v32 = v28;
  v32[1] = v29;
  v32[2] = v30;
  v32[3] = v31;
  v348 = v32;
  v349 = v32 + 4;
  v357 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v348);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = operator new(0x20uLL);
  v372 = (uint64_t)(v37 + 4);
  v373 = v37 + 4;
  *v37 = v33;
  v37[1] = v34;
  v37[2] = v35;
  v37[3] = v36;
  v371 = v37;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v371);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(0x28uLL);
  v347 = v43 + 5;
  *v43 = v38;
  v43[1] = v39;
  v43[2] = v40;
  v43[3] = v41;
  v43[4] = v42;
  v345 = v43;
  v346 = v43 + 5;
  v359 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v345);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, 0);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = operator new(0x28uLL);
  v344 = v49 + 5;
  *v49 = v44;
  v49[1] = v45;
  v49[2] = v46;
  v49[3] = v47;
  v49[4] = v48;
  v342 = v49;
  v343 = v49 + 5;
  v360 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v342);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v355, 6, &v351);
  MIL::IRParameter::Make(&v351, &v352);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "weight", &v352);
  v50 = v352;
  v352 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v351.n128_u64[1];
  if (v351.n128_u64[1])
  {
    v52 = (unint64_t *)(v351.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v342)
  {
    v343 = v342;
    operator delete(v342);
  }
  if (v345)
  {
    v346 = v345;
    operator delete(v345);
  }
  if (v371)
  {
    v372 = (uint64_t)v371;
    operator delete(v371);
  }
  if (v348)
  {
    v349 = v348;
    operator delete(v348);
  }
  if (v374)
  {
    p_get_deleter = (uint64_t)v374;
    operator delete(v374);
  }
  if (__p)
  {
    v363 = __p;
    operator delete(__p);
  }
  v54 = v354;
  v55 = MIL::IRUnknownDimension::Make(a1, 0);
  v56 = operator new(8uLL);
  v355 = v56;
  *v56 = v55;
  v357 = (uint64_t)(v56 + 1);
  v356 = (uint64_t)(v56 + 1);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v355);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = operator new(8uLL);
  __p = v58;
  *v58 = v57;
  v364 = v58 + 1;
  v363 = v58 + 1;
  p_get_deleter = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v341);
  MIL::IRParameter::Make(&v341, (uint64_t *)&v348);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "bias", (uint64_t *)&v348);
  v60 = v348;
  v348 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v341.n128_u64[1];
  if (v341.n128_u64[1])
  {
    v62 = (unint64_t *)(v341.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (__p)
  {
    v363 = __p;
    operator delete(__p);
  }
  if (v355)
  {
    v356 = (uint64_t)v355;
    operator delete(v355);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = v354;
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = operator new(8uLL);
  v355 = v66;
  *v66 = v65;
  v357 = (uint64_t)(v66 + 1);
  v356 = (uint64_t)(v66 + 1);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v355);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 1, &v340);
  MIL::IRParameter::Make(&v340, (uint64_t *)&__p);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v64, "strides", (uint64_t *)&__p);
  v68 = __p;
  __p = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v340.n128_u64[1];
  if (v340.n128_u64[1])
  {
    v70 = (unint64_t *)(v340.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v355)
  {
    v356 = (uint64_t)v355;
    operator delete(v355);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  v72 = v354;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v339);
  MIL::IRParameter::Make(&v339, (uint64_t *)&v355);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v72, "pad_type", (uint64_t *)&v355);
  v74 = v355;
  v355 = 0;
  if (v74)
    (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v339.n128_u64[1];
  if (v339.n128_u64[1])
  {
    v76 = (unint64_t *)(v339.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  v78 = v354;
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(8uLL);
  v355 = v80;
  *v80 = v79;
  v357 = (uint64_t)(v80 + 1);
  v356 = (uint64_t)(v80 + 1);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v355);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 1, &v338);
  MIL::IRParameter::Make(&v338, (uint64_t *)&__p);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v78, "pad", (uint64_t *)&__p);
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v338.n128_u64[1];
  if (v338.n128_u64[1])
  {
    v84 = (unint64_t *)(v338.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (v355)
  {
    v356 = (uint64_t)v355;
    operator delete(v355);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v86 = v354;
  v87 = MIL::IRUnknownDimension::Make(a1, 0);
  v88 = operator new(8uLL);
  v355 = v88;
  *v88 = v87;
  v357 = (uint64_t)(v88 + 1);
  v356 = (uint64_t)(v88 + 1);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v355);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 1, &v337);
  MIL::IRParameter::Make(&v337, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v86, "dilations", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v337.n128_u64[1];
  if (v337.n128_u64[1])
  {
    v92 = (unint64_t *)(v337.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v355)
  {
    v356 = (uint64_t)v355;
    operator delete(v355);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  v94 = v354;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v336);
  MIL::IRParameter::Make(&v336, (uint64_t *)&v355);
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v94, "groups", (uint64_t *)&v355);
  v96 = v355;
  v355 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  v97 = (std::__shared_weak_count *)v336.n128_u64[1];
  if (v336.n128_u64[1])
  {
    v98 = (unint64_t *)(v336.n128_u64[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v95 + 5) + 32))(*((_QWORD *)v95 + 5), 1);
  v100 = v354;
  v101 = MIL::IRUnknownDimension::Make(a1, 0);
  v102 = operator new(8uLL);
  v355 = v102;
  *v102 = v101;
  v357 = (uint64_t)(v102 + 1);
  v356 = (uint64_t)(v102 + 1);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v355);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 1, &v335);
  MIL::IRParameter::Make(&v335, (uint64_t *)&__p);
  v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v100, "output_shape", (uint64_t *)&__p);
  v104 = __p;
  __p = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  v105 = (std::__shared_weak_count *)v335.n128_u64[1];
  if (v335.n128_u64[1])
  {
    v106 = (unint64_t *)(v335.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v355)
  {
    v356 = (uint64_t)v355;
    operator delete(v355);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 32))(*((_QWORD *)v103 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v103 + 5) + 48))(*((_QWORD *)v103 + 5), 1);
  v345 = 0;
  v108 = operator new();
  *(_QWORD *)v108 = 0;
  *(_QWORD *)(v108 + 8) = 0;
  *(_QWORD *)(v108 + 16) = 0;
  v355 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v345, (void **)v108);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v355, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v345, 1uLL);
  v109 = v345;
  v110 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v111 = operator new(8uLL);
  __p = v111;
  *v111 = v110;
  v364 = v111 + 1;
  v363 = v111 + 1;
  v371 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v112 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v113 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v374 = v113;
  v113->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v112;
  p_get_deleter = (uint64_t)&v113->~__shared_weak_count_0;
  v376 = &v113->~__shared_weak_count_0;
  v372 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v374);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v371, 2, &v334);
  MIL::IRParameter::Make(&v334, (uint64_t *)&v342);
  v114 = v342;
  v348 = v342;
  if (v342)
  {
    v115 = (_QWORD *)operator new();
    v116 = v342;
    *v115 = &unk_1EA99F888;
    v115[1] = 0;
    v115[2] = 0;
    v115[3] = v116;
  }
  else
  {
    v115 = 0;
  }
  v349 = v115;
  v342 = 0;
  v117 = v109[2];
  v118 = (_QWORD *)v109[1];
  if ((unint64_t)v118 >= v117)
  {
    v120 = ((uint64_t)v118 - *v109) >> 4;
    v121 = v120 + 1;
    if ((unint64_t)(v120 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v122 = v117 - *v109;
    if (v122 >> 3 > v121)
      v121 = v122 >> 3;
    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0)
      v123 = 0xFFFFFFFFFFFFFFFLL;
    else
      v123 = v121;
    v359 = (uint64_t)(v109 + 2);
    v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v109 + 2), v123);
    v126 = &v124[16 * v120];
    *(_QWORD *)v126 = v114;
    *((_QWORD *)v126 + 1) = v115;
    v349 = 0;
    v348 = 0;
    v128 = (_QWORD *)*v109;
    v127 = (_QWORD *)v109[1];
    if (v127 == (_QWORD *)*v109)
    {
      v131 = (_QWORD *)v109[1];
      v129 = &v124[16 * v120];
    }
    else
    {
      v129 = &v124[16 * v120];
      do
      {
        v130 = *((_OWORD *)v127 - 1);
        v127 -= 2;
        *((_OWORD *)v129 - 1) = v130;
        v129 -= 16;
        *v127 = 0;
        v127[1] = 0;
      }
      while (v127 != v128);
      v131 = (_QWORD *)*v109;
      v127 = (_QWORD *)v109[1];
    }
    v119 = v126 + 16;
    *v109 = v129;
    v356 = (uint64_t)v131;
    v109[1] = v126 + 16;
    v357 = (uint64_t)v127;
    v132 = v109[2];
    v109[2] = &v124[16 * v125];
    v358 = v132;
    v355 = v131;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v355);
  }
  else
  {
    *v118 = v114;
    v118[1] = v115;
    v119 = v118 + 2;
    v349 = 0;
    v348 = 0;
  }
  v109[1] = v119;
  v133 = v342;
  v342 = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  v134 = (std::__shared_weak_count *)v334.n128_u64[1];
  if (v334.n128_u64[1])
  {
    v135 = (unint64_t *)(v334.n128_u64[1] + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (v374)
  {
    p_get_deleter = (uint64_t)v374;
    operator delete(v374);
  }
  if (__p)
  {
    v363 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v332 = *(_OWORD *)a2;
  v333 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v137 = (uint64_t)v354;
  *(_QWORD *)&v331 = v354;
  if (v354)
  {
    v138 = (_QWORD *)operator new();
    *v138 = &unk_1EA99F8E8;
    v138[1] = 0;
    v138[2] = 0;
    v138[3] = v137;
  }
  else
  {
    v138 = 0;
  }
  *((_QWORD *)&v331 + 1) = v138;
  v354 = 0;
  *(_QWORD *)&v330 = v345;
  if (v345)
  {
    v139 = (_QWORD *)operator new();
    v140 = v345;
    *v139 = &unk_1EA99F948;
    v139[1] = 0;
    v139[2] = 0;
    v139[3] = v140;
  }
  else
  {
    v139 = 0;
  }
  *((_QWORD *)&v330 + 1) = v139;
  v345 = 0;
  v369[0] = &unk_1EA99FAC8;
  v369[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateConvTranspose;
  v370 = v369;
  v368 = 0;
  MIL::IROperator::Make((__int128 *)v332, &v331, &v330, (uint64_t)v369, (uint64_t)v367, a3);
  v141 = v368;
  if (v368 == v367)
  {
    v142 = 4;
    v141 = v367;
  }
  else
  {
    if (!v368)
      goto LABEL_131;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_131:
  v143 = v370;
  if (v370 == v369)
  {
    v144 = 4;
    v143 = v369;
    goto LABEL_135;
  }
  if (v370)
  {
    v144 = 5;
LABEL_135:
    (*(void (**)(void))(*v143 + 8 * v144))();
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v330 + 1);
  if (*((_QWORD *)&v330 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v330 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
  if (*((_QWORD *)&v331 + 1))
  {
    v149 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  if (SHIBYTE(v333) < 0)
    operator delete(v332[0]);
  v151 = *a3;
  v365[0] = &off_1EA99FBD8;
  v365[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceConvTranspose;
  v366 = v365;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v151 + 200))(v151, v365);
  v152 = v366;
  if (v366 == v365)
  {
    v153 = 4;
    v152 = v365;
  }
  else
  {
    if (!v366)
      goto LABEL_153;
    v153 = 5;
  }
  (*(void (**)(void))(*v152 + 8 * v153))();
LABEL_153:
  MIL::Validation::TensorDTypeConstraints::Make(&v355);
  v154 = v355;
  std::string::basic_string[abi:ne180100]<0>(v326, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v326, 0, (uint64_t *)&__p);
  v328 = __p;
  if (__p)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = (std::__shared_weak_count_vtbl *)__p;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v329 = v155;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v324, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v154 + 24))(v154, &v328, v324);
  if (v325 < 0)
    operator delete(v324[0]);
  v157 = v329;
  if (v329)
  {
    p_shared_owners = (unint64_t *)&v329->__shared_owners_;
    do
      v159 = __ldaxr(p_shared_owners);
    while (__stlxr(v159 - 1, p_shared_owners));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = __p;
  __p = 0;
  if (v160)
    (*(void (**)(void *))(*(_QWORD *)v160 + 8))(v160);
  if (v327 < 0)
    operator delete(v326[0]);
  v161 = v355;
  std::string::basic_string[abi:ne180100]<0>(v320, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v320, 0, (uint64_t *)&__p);
  v322 = __p;
  if (__p)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = (std::__shared_weak_count_vtbl *)__p;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v323 = v162;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v318, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v161 + 24))(v161, &v322, v318);
  if (v319 < 0)
    operator delete(v318[0]);
  v164 = v323;
  if (v323)
  {
    v165 = (unint64_t *)&v323->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = __p;
  __p = 0;
  if (v167)
    (*(void (**)(void *))(*(_QWORD *)v167 + 8))(v167);
  if (v321 < 0)
    operator delete(v320[0]);
  v168 = v355;
  std::string::basic_string[abi:ne180100]<0>(v314, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v314, 1, (uint64_t *)&__p);
  v316 = __p;
  if (__p)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = (std::__shared_weak_count_vtbl *)__p;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v317 = v169;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v312, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v168 + 24))(v168, &v316, v312);
  if (v313 < 0)
    operator delete(v312[0]);
  v171 = v317;
  if (v317)
  {
    v172 = (unint64_t *)&v317->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = __p;
  __p = 0;
  if (v174)
    (*(void (**)(void *))(*(_QWORD *)v174 + 8))(v174);
  if (v315 < 0)
    operator delete(v314[0]);
  v175 = v355;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v310 = __p;
  if (__p)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = (std::__shared_weak_count_vtbl *)__p;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v311 = v176;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v308, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v175 + 24))(v175, &v310, v308);
  if (v309 < 0)
    operator delete(v308[0]);
  v178 = v311;
  if (v311)
  {
    v179 = (unint64_t *)&v311->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = __p;
  __p = 0;
  if (v181)
    (*(void (**)(void *))(*(_QWORD *)v181 + 8))(v181);
  v182 = *a3;
  v306 = v355;
  if (v355)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = (std::__shared_weak_count_vtbl *)v355;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v307 = v183;
  v355 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v182 + 56))(v182, &v306);
  v185 = v307;
  if (v307)
  {
    v186 = (unint64_t *)&v307->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v355;
  v355 = 0;
  if (v188)
    (*(void (**)(void *))(*(_QWORD *)v188 + 8))(v188);
  MIL::Validation::TensorRankValueConstraints::Make(&v355);
  v189 = v355;
  std::string::basic_string[abi:ne180100]<0>(v302, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v302, 0, (uint64_t *)&__p);
  v304 = __p;
  if (__p)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = (std::__shared_weak_count_vtbl *)__p;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v305 = v190;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v189 + 32))(v189, &v304, 3, 5);
  v192 = v305;
  if (v305)
  {
    v193 = (unint64_t *)&v305->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = __p;
  __p = 0;
  if (v195)
    (*(void (**)(void *))(*(_QWORD *)v195 + 8))(v195);
  if (v303 < 0)
    operator delete(v302[0]);
  v196 = *a3;
  v300 = v355;
  if (v355)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = (std::__shared_weak_count_vtbl *)v355;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v301 = v197;
  v355 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v196 + 56))(v196, &v300);
  v199 = v301;
  if (v301)
  {
    v200 = (unint64_t *)&v301->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = v355;
  v355 = 0;
  if (v202)
    (*(void (**)(void *))(*(_QWORD *)v202 + 8))(v202);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v355);
  v203 = v355;
  std::string::basic_string[abi:ne180100]<0>(v296, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v296, 0, (uint64_t *)&__p);
  v298 = __p;
  if (__p)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = (std::__shared_weak_count_vtbl *)__p;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v299 = v204;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v294, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v203 + 24))(v203, &v298, 1, v294);
  if (v295 < 0)
    operator delete(v294[0]);
  v206 = v299;
  if (v299)
  {
    v207 = (unint64_t *)&v299->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = __p;
  __p = 0;
  if (v209)
    (*(void (**)(void *))(*(_QWORD *)v209 + 8))(v209);
  if (v297 < 0)
    operator delete(v296[0]);
  v210 = v355;
  std::string::basic_string[abi:ne180100]<0>(v290, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v290, 1, (uint64_t *)&__p);
  v292 = __p;
  if (__p)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = (std::__shared_weak_count_vtbl *)__p;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v293 = v211;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v288, "C_out");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v210 + 24))(v210, &v292, 0, v288);
  if (v289 < 0)
    operator delete(v288[0]);
  v213 = v293;
  if (v293)
  {
    v214 = (unint64_t *)&v293->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = __p;
  __p = 0;
  if (v216)
    (*(void (**)(void *))(*(_QWORD *)v216 + 8))(v216);
  if (v291 < 0)
    operator delete(v290[0]);
  v217 = v355;
  std::string::basic_string[abi:ne180100]<0>(v284, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v284, 0, (uint64_t *)&__p);
  v286 = __p;
  if (__p)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = (std::__shared_weak_count_vtbl *)__p;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v287 = v218;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v282, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v217 + 24))(v217, &v286, 0, v282);
  if (v283 < 0)
    operator delete(v282[0]);
  v220 = v287;
  if (v287)
  {
    v221 = (unint64_t *)&v287->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = __p;
  __p = 0;
  if (v223)
    (*(void (**)(void *))(*(_QWORD *)v223 + 8))(v223);
  if (v285 < 0)
    operator delete(v284[0]);
  v224 = v355;
  std::string::basic_string[abi:ne180100]<0>(v278, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v278, 0, (uint64_t *)&__p);
  v280 = __p;
  if (__p)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = (std::__shared_weak_count_vtbl *)__p;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = v226;
  }
  else
  {
    v225 = 0;
  }
  v281 = v225;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v276, "P");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v224 + 24))(v224, &v280, 0, v276);
  if (v277 < 0)
    operator delete(v276[0]);
  v227 = v281;
  if (v281)
  {
    v228 = (unint64_t *)&v281->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = __p;
  __p = 0;
  if (v230)
    (*(void (**)(void *))(*(_QWORD *)v230 + 8))(v230);
  if (v279 < 0)
    operator delete(v278[0]);
  v231 = v355;
  std::string::basic_string[abi:ne180100]<0>(v272, "dilations");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 0, (uint64_t *)&__p);
  v274 = __p;
  if (__p)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = (std::__shared_weak_count_vtbl *)__p;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = v233;
  }
  else
  {
    v232 = 0;
  }
  v275 = v232;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v270, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v231 + 24))(v231, &v274, 0, v270);
  if (v271 < 0)
    operator delete(v270[0]);
  v234 = v275;
  if (v275)
  {
    v235 = (unint64_t *)&v275->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = __p;
  __p = 0;
  if (v237)
    (*(void (**)(void *))(*(_QWORD *)v237 + 8))(v237);
  if (v273 < 0)
    operator delete(v272[0]);
  v238 = *a3;
  v268 = v355;
  if (v355)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = (std::__shared_weak_count_vtbl *)v355;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = v240;
  }
  else
  {
    v239 = 0;
  }
  v269 = v239;
  v355 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v238 + 56))(v238, &v268);
  v241 = v269;
  if (v269)
  {
    v242 = (unint64_t *)&v269->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v355;
  v355 = 0;
  if (v244)
    (*(void (**)(void *))(*(_QWORD *)v244 + 8))(v244);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v374);
  v245 = v374;
  std::string::basic_string[abi:ne180100]<0>(v264, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v264, 0, (uint64_t *)&v348);
  v266 = v348;
  if (v348)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = (std::__shared_weak_count_vtbl *)v348;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = v247;
  }
  else
  {
    v246 = 0;
  }
  v267 = v246;
  v348 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v355, "custom");
  std::string::basic_string[abi:ne180100]<0>(&v358, "same");
  std::string::basic_string[abi:ne180100]<0>(v361, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v355, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, void **, _QWORD))v245->~__shared_weak_count + 3))(v245, &v266, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v361[i + 2]) < 0)
      operator delete(v361[i]);
  }
  v249 = v267;
  if (v267)
  {
    v250 = (unint64_t *)&v267->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v348;
  v348 = 0;
  if (v252)
    (*(void (**)(void *))(*(_QWORD *)v252 + 8))(v252);
  if (v265 < 0)
    operator delete(v264[0]);
  v253 = *a3;
  v262 = v374;
  if (v374)
  {
    v254 = (std::__shared_weak_count *)operator new();
    v255 = v374;
    v254->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v254->__shared_owners_ = 0;
    v254->__shared_weak_owners_ = 0;
    v254[1].__vftable = v255;
  }
  else
  {
    v254 = 0;
  }
  v263 = v254;
  v374 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v253 + 56))(v253, &v262);
  v256 = v263;
  if (v263)
  {
    v257 = (unint64_t *)&v263->__shared_owners_;
    do
      v258 = __ldaxr(v257);
    while (__stlxr(v258 - 1, v257));
    if (!v258)
    {
      ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
      std::__shared_weak_count::__release_weak(v256);
    }
  }
  v259 = v374;
  v374 = 0;
  if (v259)
    (*((void (**)(std::__shared_weak_count_vtbl *))v259->~__shared_weak_count + 1))(v259);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v345, 0);
  result = (uint64_t)v354;
  if (v354)
  {
    v261 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v354);
    return MEMORY[0x1E0C023A0](v261, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E070D630(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x398], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3F0], 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E070DFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E070E064(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E070E0B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E070E128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E070E1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E070E20C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E070E284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E070E31C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E070E368(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E070E3E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E070E478(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E070E4C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E070E53C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E070E5D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E070E620(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA99FBD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA99FBD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__invoke_void_return_wrapper<std::vector<MIL::IRValueType const*>,false>::__call[abi:ne180100]<std::vector<MIL::IRValueType const*> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&>((void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::allocator<std::vector<MIL::IRValueType const*> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__invoke_void_return_wrapper<std::vector<MIL::IRValueType const*>,false>::__call[abi:ne180100]<std::vector<MIL::IRValueType const*> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&>(void (**a1)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t), uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v6)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t);
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v6 = *a1;
  v10 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6(a2, &v10, a4, a5, a6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E070E778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__invoke_void_return_wrapper<std::vector<MIL::IRValueType const*>,false>::__call[abi:ne180100]<std::vector<MIL::IRValueType const*> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&>(a10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1E0C023A0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E070E86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E070E904(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E070E950(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  __int128 *i;
  MIL::IRValueType *SingleValueType;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::string __p;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  void **v19;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<std::vector<MIL::IRDimension const*>>::reserve(&v16, a2[3]);
  for (i = (__int128 *)a2[2]; i; i = *(__int128 **)i)
  {
    std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100](&__p, i + 1);
    SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
    v8 = MIL::IRValueType::AsTensorType(SingleValueType);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
    v10 = v17;
    if ((unint64_t)v17 >= v18)
    {
      v11 = std::vector<std::vector<MIL::IRDimension const*>>::__push_back_slow_path<std::vector<MIL::IRDimension const*> const&>(&v16, v9);
    }
    else
    {
      *v17 = 0;
      v10[1] = 0;
      v10[2] = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v10, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 3);
      v11 = (uint64_t)(v10 + 3);
    }
    v17 = (_QWORD *)v11;
    v19 = (void **)&v15;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  MIL::ValueTypeInferenceUtils::BroadcastShape(*a1, &v16, (unint64_t *)&__p);
  v12 = MIL::IRTensorValueType::MakeWithShape(*a1, 2, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v13 = (uint64_t *)operator new(8uLL);
  *a3 = v13;
  *v13++ = v12;
  a3[1] = v13;
  a3[2] = v13;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1E070EABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a15;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAdd(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "add");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E070EC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::BinaryOpHelper(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, unsigned __int16 **a4@<X3>, _OWORD *a5@<X8>)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 **v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t i;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t j;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  MIL *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  const MIL::IRTensorValueType *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  const MIL::IRTensorValueType *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  const MIL::IRTensorValueType *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  int v102;
  unsigned __int16 *v106;
  unsigned __int16 *v107;
  int v110;
  int v111;
  unsigned __int16 *v114;
  unsigned __int16 *v115;
  int v118;
  int v119;
  unsigned __int16 *v122;
  unsigned __int16 *v123;
  int v126;
  int v127;
  uint64_t (*v130)(__int16, __int16);
  uint64_t (*v132)(__int16, __int16);
  uint64_t (*v138)(__int16, __int16);
  int *v148;
  int v150;
  int v151;
  int *v153;
  int v155;
  int v156;
  int *v158;
  int v160;
  int v161;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  __int128 ***v167;
  uint64_t v168;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  __int128 ***v173;
  uint64_t v174;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  __int128 ***v179;
  uint64_t v180;
  __int128 *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::logic_error *exception;
  std::logic_error *v190;
  std::logic_error *v191;
  std::logic_error *v192;
  std::logic_error *v193;
  std::logic_error *v194;
  std::logic_error *v195;
  void *v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  void *v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  void *v210;
  void *v211;
  uint64_t v212;
  __int128 *p_p;
  _QWORD *v214;
  _QWORD *v215;
  void *v216;
  _BYTE *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  __int128 __p;
  uint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  _BYTE v232[40];
  uint64_t v233;
  std::__shared_weak_count *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  _QWORD v237[3];
  _QWORD *v238;
  _QWORD v239[3];
  _QWORD *v240;
  _QWORD v241[3];
  _QWORD *v242;
  __int128 **p_p_p;
  uint64_t (*v244)(__int16, __int16);
  _QWORD *v245;
  __int128 ***p_p_p_p;
  __int128 v247;
  char v248;
  __int128 *v249;
  _QWORD v250[2];
  _QWORD v251[2];
  _BYTE v252[32];
  int v253;
  char v254;
  std::string v255[2];
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v252, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v252);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)v10 + 5) + 40))(**((_QWORD **)v10 + 5));
  if ((v252[23] & 0x80000000) != 0)
    operator delete(*(void **)v252);
  if (!v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input Tensor x is not an IRTensor object.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::string::basic_string[abi:ne180100]<0>(v252, "y");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v252);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v13 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)v12 + 5) + 40))(**((_QWORD **)v12 + 5));
  if ((v252[23] & 0x80000000) != 0)
    operator delete(*(void **)v252);
  if (!v13)
  {
    v190 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v190, "Input Tensor y is not an IRTensor object.");
    __cxa_throw(v190, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::string::basic_string[abi:ne180100]<0>(v252, "x");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v252);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (uint64_t *)*((_QWORD *)v14 + 5);
  v16 = *v15;
  v17 = v15[1];
  v235 = *v15;
  v236 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if ((v252[23] & 0x80000000) != 0)
    operator delete(*(void **)v252);
  std::string::basic_string[abi:ne180100]<0>(v252, "y");
  v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v252);
  if (!v20)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v21 = (uint64_t *)*((_QWORD *)v20 + 5);
  v22 = *v21;
  v23 = v21[1];
  v233 = *v21;
  v234 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if ((v252[23] & 0x80000000) != 0)
    operator delete(*(void **)v252);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  if (v27 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 88))(v28))
  {
    v191 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v191, "Datatype do not match for input tensors x and Tensor y.");
    v191->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v191, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  v229 = v16;
  v230 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v29 = (unint64_t *)(v17 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  MIL::IRTypedArgument::Make(&v229, &v231);
  v251[0] = v231;
  if (v231)
  {
    v31 = (_QWORD *)operator new();
    v32 = v231;
    *v31 = &unk_1EA994910;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v251[1] = v31;
  v231 = 0;
  v214 = 0;
  v215 = 0;
  p_p = 0;
  *(_QWORD *)&v247 = &p_p;
  BYTE8(v247) = 0;
  v33 = (__int128 *)operator new(0x10uLL);
  p_p = v33;
  v215 = v33 + 1;
  *(_QWORD *)v33 = v251[0];
  *((_QWORD *)v33 + 1) = v31;
  if (v31)
  {
    v34 = v31 + 1;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v214 = v33 + 1;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v252, &__p, (_QWORD **)&p_p);
  std::string::basic_string[abi:ne180100]<0>(&v247, "y");
  v226 = v22;
  v227 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v36 = (unint64_t *)(v23 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  MIL::IRTypedArgument::Make(&v226, &v228);
  v250[0] = v228;
  if (v228)
  {
    v38 = (_QWORD *)operator new();
    v39 = v228;
    *v38 = &unk_1EA994910;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v250[1] = v38;
  v228 = 0;
  v245 = 0;
  p_p_p = 0;
  v244 = 0;
  v216 = &p_p_p;
  LOBYTE(v217) = 0;
  v40 = (__int128 **)operator new(0x10uLL);
  p_p_p = v40;
  v245 = v40 + 2;
  *v40 = (__int128 *)v250[0];
  v40[1] = (__int128 *)v38;
  if (v38)
  {
    v41 = v38 + 1;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v244 = (uint64_t (*)(__int16, __int16))(v40 + 2);
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v255, &v247, &p_p_p);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v232, v252, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v216 = &v255[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
    if (SHIBYTE(v255[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v255[i / 3].__r_.__value_.__l.__data_);
  }
  v216 = &p_p_p;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v250);
  v44 = v228;
  v228 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v227;
  if (v227)
  {
    p_shared_owners = (unint64_t *)&v227->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v248 < 0)
    operator delete((void *)v247);
  *(_QWORD *)&v247 = &p_p;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v247);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v251);
  v48 = v231;
  v231 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = v230;
  if (v230)
  {
    v50 = (unint64_t *)&v230->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (SHIBYTE(v221) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(v252, "x");
  std::string::basic_string[abi:ne180100]<0>(&v252[24], "y");
  __p = 0uLL;
  v221 = 0;
  p_p = &__p;
  LOBYTE(v214) = 0;
  *(_QWORD *)&__p = operator new(0x30uLL);
  *((_QWORD *)&__p + 1) = __p;
  v221 = __p + 48;
  *((_QWORD *)&__p + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v221, (__int128 *)v252, (__int128 *)v255, (std::string *)__p);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&__p, (uint64_t)&v247);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  for (j = 0; j != -48; j -= 24)
  {
    if (*(&v254 + j) < 0)
      operator delete(*(void **)&v252[j + 24]);
  }
  v53 = (std::__shared_weak_count *)a2[1];
  v224 = *a2;
  v225 = v53;
  if (v53)
  {
    v54 = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  memset(v252, 0, sizeof(v252));
  v253 = 1065353216;
  p_p = 0;
  v214 = 0;
  v215 = 0;
  if (!v249)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(__int128 *__return_ptr, __int128 *, void (****)(MIL::MILContextImpl *__hidden), uint64_t *, _BYTE *, _BYTE *, __int128 **))(*(_QWORD *)v249 + 48))(&__p, v249, a1, &v224, v232, v252, &p_p);
  v56 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)__p);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  p_p_p = &p_p;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v252);
  v57 = v225;
  if (v225)
  {
    v58 = (unint64_t *)&v225->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (*(uint64_t (**)(MIL *))(*(_QWORD *)v56 + 88))(v56);
  if (v60 == 4)
  {
    v208 = v235;
    v209 = v236;
    if (v236)
    {
      v91 = (unint64_t *)&v236->__shared_owners_;
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
    MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v208, (uint64_t)v252);
    v93 = v209;
    if (v209)
    {
      v94 = (unint64_t *)&v209->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v206 = v233;
    v207 = v234;
    if (v234)
    {
      v96 = (unint64_t *)&v234->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v206, (uint64_t)&__p);
    v99 = v207;
    if (v207)
    {
      v100 = (unint64_t *)&v207->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      v102 = *((unsigned __int8 *)a4 + 23);
      switch(*((_BYTE *)a4 + 23))
      {
        case 3:
          if (*(_WORD *)a4 == 25697 && *((_BYTE *)a4 + 2) == 100)
            goto LABEL_294;
          if (*(_WORD *)a4 == 30061 && *((_BYTE *)a4 + 2) == 108)
            goto LABEL_475;
          if (*(_WORD *)a4 == 28528 && *((_BYTE *)a4 + 2) == 119)
            goto LABEL_478;
LABEL_314:
          if (*(_WORD *)a4 == 30067 && *((_BYTE *)a4 + 2) == 98)
            goto LABEL_329;
          if ((v102 & 0x80) != 0)
            goto LABEL_321;
          if (v102 != 3)
            goto LABEL_489;
          goto LABEL_323;
        case 7:
          if (*(_DWORD *)a4 == 1769496941 && *(_DWORD *)((char *)a4 + 3) == 1836412265)
            goto LABEL_368;
          if (*(_DWORD *)a4 != 1768843629 || *(_DWORD *)((char *)a4 + 3) != 1836412265)
            goto LABEL_489;
          goto LABEL_367;
        case 8:
          if (*a4 == (unsigned __int16 *)0x7669645F6C616572)
            goto LABEL_253;
          if (v102 == 3)
            goto LABEL_314;
          goto LABEL_489;
        case 9:
          if (*a4 != (unsigned __int16 *)0x69645F726F6F6C66 || *((_BYTE *)a4 + 8) != 118)
            goto LABEL_489;
          goto LABEL_411;
        default:
          goto LABEL_489;
      }
    }
    v114 = a4[1];
    switch((unint64_t)v114)
    {
      case 3uLL:
        v115 = *a4;
        if (**a4 == 25697 && *((_BYTE *)*a4 + 2) == 100)
        {
LABEL_294:
          v132 = MIL::MathOps::AddOp<MIL::Fp16>;
        }
        else if (*v115 == 30061 && *((_BYTE *)v115 + 2) == 108)
        {
LABEL_475:
          v132 = MIL::MathOps::MulOp<MIL::Fp16>;
        }
        else
        {
          v118 = *v115;
          v119 = *((unsigned __int8 *)v115 + 2);
          if (v118 == 28528 && v119 == 119)
          {
LABEL_478:
            v132 = MIL::MathOps::PowOp<MIL::Fp16>;
          }
          else
          {
            if (v114 == (unsigned __int16 *)8)
            {
LABEL_213:
              if (*(_QWORD *)*a4 == 0x7669645F6C616572)
              {
LABEL_253:
                v132 = MIL::MathOps::RealDivOp<MIL::Fp16>;
                goto LABEL_412;
              }
              v114 = a4[1];
            }
LABEL_215:
            if (v114 != (unsigned __int16 *)3)
              goto LABEL_489;
            if (**a4 == 30067 && *((_BYTE *)*a4 + 2) == 98)
            {
LABEL_329:
              v132 = MIL::MathOps::SubOp<MIL::Fp16>;
            }
            else
            {
LABEL_321:
              if (a4[1] != (unsigned __int16 *)3)
                goto LABEL_489;
              a4 = (unsigned __int16 **)*a4;
LABEL_323:
              if (*(_WORD *)a4 != 28525 || *((_BYTE *)a4 + 2) != 100)
              {
LABEL_489:
                v193 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v193, "Invalid OpName specified");
                v193->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
                __cxa_throw(v193, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
              }
              v132 = MIL::MathOps::ModOp<MIL::Fp16>;
            }
          }
        }
LABEL_412:
        p_p_p = (__int128 **)&unk_1EA99FCD8;
        v244 = v132;
        p_p_p_p = &p_p_p;
        MIL::GetTensorShapeWithDimensionsAllKnown(v56, v98, (uint64_t)&v216);
        v170 = (uint64_t)p_p_p_p;
        if (p_p_p_p)
        {
          if (p_p_p_p == &p_p_p)
          {
            v240 = v239;
            ((void (*)(uint64_t, _QWORD *))p_p_p[3])((uint64_t)&p_p_p, v239);
LABEL_417:
            v203 = 0;
            v204 = 0;
            v205 = 0;
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v203, v216, (uint64_t)v217, (v217 - (_BYTE *)v216) >> 3);
            MIL::ValueInference::BinaryOp<MIL::Fp16,MIL::Fp16>(v252, &__p, (uint64_t)v239, &v203, (uint64_t)&p_p);
            if (v203)
            {
              v204 = v203;
              operator delete(v203);
            }
            v171 = v240;
            if (v240 == v239)
            {
              v172 = 4;
              v171 = v239;
            }
            else
            {
              if (!v240)
                goto LABEL_424;
              v172 = 5;
            }
            (*(void (**)(void))(*v171 + 8 * v172))();
LABEL_424:
            MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)&p_p, *a1, a5);
            MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&p_p);
            if (v216)
            {
              v217 = v216;
              operator delete(v216);
            }
            v173 = p_p_p_p;
            if (p_p_p_p == &p_p_p)
            {
              v174 = 4;
              v173 = &p_p_p;
            }
            else
            {
              if (!p_p_p_p)
              {
LABEL_431:
                MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&__p);
                MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v252);
                goto LABEL_458;
              }
              v174 = 5;
            }
            ((void (*)(void))(*v173)[v174])();
            goto LABEL_431;
          }
          v170 = ((uint64_t (*)(void))(*p_p_p_p)[2])();
        }
        v240 = (_QWORD *)v170;
        goto LABEL_417;
      case 7uLL:
        v153 = (int *)*a4;
        if (*(_DWORD *)*a4 == 1769496941 && *(_DWORD *)((char *)*a4 + 3) == 1836412265)
        {
LABEL_368:
          v132 = MIL::MathOps::MaximumOp<MIL::Fp16>;
        }
        else
        {
          v155 = *v153;
          v156 = *(int *)((char *)v153 + 3);
          if (v155 != 1768843629 || v156 != 1836412265)
            goto LABEL_489;
LABEL_367:
          v132 = MIL::MathOps::MinimumOp<MIL::Fp16>;
        }
        goto LABEL_412;
      case 8uLL:
        goto LABEL_213;
      case 9uLL:
        if (*(_QWORD *)*a4 != 0x69645F726F6F6C66 || *((_BYTE *)*a4 + 8) != 118)
          goto LABEL_489;
LABEL_411:
        v132 = MIL::MathOps::FloorDivOp<MIL::Fp16>;
        goto LABEL_412;
      default:
        goto LABEL_215;
    }
  }
  if (v60 == 5)
  {
    v222 = v235;
    v223 = v236;
    if (v236)
    {
      v76 = (unint64_t *)&v236->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v222, (uint64_t)v252);
    v78 = v223;
    if (v223)
    {
      v79 = (unint64_t *)&v223->__shared_owners_;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v218 = v233;
    v219 = v234;
    if (v234)
    {
      v81 = (unint64_t *)&v234->__shared_owners_;
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v218, (uint64_t)&__p);
    v84 = v219;
    if (v219)
    {
      v85 = (unint64_t *)&v219->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      v87 = *((unsigned __int8 *)a4 + 23);
      switch(*((_BYTE *)a4 + 23))
      {
        case 3:
          if (*(_WORD *)a4 == 25697 && *((_BYTE *)a4 + 2) == 100)
            goto LABEL_293;
          if (*(_WORD *)a4 == 30061 && *((_BYTE *)a4 + 2) == 108)
            goto LABEL_474;
          if (*(_WORD *)a4 == 28528 && *((_BYTE *)a4 + 2) == 119)
            goto LABEL_477;
LABEL_297:
          if (*(_WORD *)a4 == 30067 && *((_BYTE *)a4 + 2) == 98)
            goto LABEL_312;
          if ((v87 & 0x80) != 0)
            goto LABEL_304;
          if (v87 != 3)
            goto LABEL_488;
          goto LABEL_306;
        case 7:
          if (*(_DWORD *)a4 == 1769496941 && *(_DWORD *)((char *)a4 + 3) == 1836412265)
            goto LABEL_357;
          if (*(_DWORD *)a4 != 1768843629 || *(_DWORD *)((char *)a4 + 3) != 1836412265)
            goto LABEL_488;
          goto LABEL_356;
        case 8:
          if (*a4 == (unsigned __int16 *)0x7669645F6C616572)
            goto LABEL_246;
          if (v87 == 3)
            goto LABEL_297;
          goto LABEL_488;
        case 9:
          if (*a4 != (unsigned __int16 *)0x69645F726F6F6C66 || *((_BYTE *)a4 + 8) != 118)
            goto LABEL_488;
          goto LABEL_385;
        default:
          goto LABEL_488;
      }
    }
    v106 = a4[1];
    switch((unint64_t)v106)
    {
      case 3uLL:
        v107 = *a4;
        if (**a4 == 25697 && *((_BYTE *)*a4 + 2) == 100)
        {
LABEL_293:
          v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::AddOp<float>;
        }
        else if (*v107 == 30061 && *((_BYTE *)v107 + 2) == 108)
        {
LABEL_474:
          v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::MulOp<float>;
        }
        else
        {
          v110 = *v107;
          v111 = *((unsigned __int8 *)v107 + 2);
          if (v110 == 28528 && v111 == 119)
          {
LABEL_477:
            v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::PowOp<float>;
          }
          else
          {
            if (v106 == (unsigned __int16 *)8)
            {
LABEL_190:
              if (*(_QWORD *)*a4 == 0x7669645F6C616572)
              {
LABEL_246:
                v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::RealDivOp<float>;
                goto LABEL_386;
              }
              v106 = a4[1];
            }
LABEL_192:
            if (v106 != (unsigned __int16 *)3)
              goto LABEL_488;
            if (**a4 == 30067 && *((_BYTE *)*a4 + 2) == 98)
            {
LABEL_312:
              v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::SubOp<float>;
            }
            else
            {
LABEL_304:
              if (a4[1] != (unsigned __int16 *)3)
                goto LABEL_488;
              a4 = (unsigned __int16 **)*a4;
LABEL_306:
              if (*(_WORD *)a4 != 28525 || *((_BYTE *)a4 + 2) != 100)
              {
LABEL_488:
                v192 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v192, "Invalid OpName specified");
                v192->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
                __cxa_throw(v192, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
              }
              v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::ModOp<float>;
            }
          }
        }
LABEL_386:
        p_p_p = (__int128 **)&unk_1EA99BD50;
        v244 = v130;
        p_p_p_p = &p_p_p;
        MIL::GetTensorShapeWithDimensionsAllKnown(v56, v83, (uint64_t)&v216);
        v164 = (uint64_t)p_p_p_p;
        if (p_p_p_p)
        {
          if (p_p_p_p == &p_p_p)
          {
            v242 = v241;
            ((void (*)(uint64_t, _QWORD *))p_p_p[3])((uint64_t)&p_p_p, v241);
LABEL_391:
            v210 = 0;
            v211 = 0;
            v212 = 0;
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v210, v216, (uint64_t)v217, (v217 - (_BYTE *)v216) >> 3);
            MIL::ValueInference::BinaryOp<float,float>(v252, &__p, (uint64_t)v241, &v210, (uint64_t)&p_p);
            if (v210)
            {
              v211 = v210;
              operator delete(v210);
            }
            v165 = v242;
            if (v242 == v241)
            {
              v166 = 4;
              v165 = v241;
            }
            else
            {
              if (!v242)
                goto LABEL_398;
              v166 = 5;
            }
            (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_398:
            MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)&p_p, *a1, a5);
            MIL::ValueInference::Tensor<float>::~Tensor(&p_p);
            if (v216)
            {
              v217 = v216;
              operator delete(v216);
            }
            v167 = p_p_p_p;
            if (p_p_p_p == &p_p_p)
            {
              v168 = 4;
              v167 = &p_p_p;
            }
            else
            {
              if (!p_p_p_p)
              {
LABEL_405:
                MIL::ValueInference::Tensor<float>::~Tensor(&__p);
                MIL::ValueInference::Tensor<float>::~Tensor(v252);
                goto LABEL_458;
              }
              v168 = 5;
            }
            ((void (*)(void))(*v167)[v168])();
            goto LABEL_405;
          }
          v164 = ((uint64_t (*)(void))(*p_p_p_p)[2])();
        }
        v242 = (_QWORD *)v164;
        goto LABEL_391;
      case 7uLL:
        v148 = (int *)*a4;
        if (*(_DWORD *)*a4 == 1769496941 && *(_DWORD *)((char *)*a4 + 3) == 1836412265)
        {
LABEL_357:
          v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::MaximumOp<float>;
        }
        else
        {
          v150 = *v148;
          v151 = *(int *)((char *)v148 + 3);
          if (v150 != 1768843629 || v151 != 1836412265)
            goto LABEL_488;
LABEL_356:
          v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::MinimumOp<float>;
        }
        goto LABEL_386;
      case 8uLL:
        goto LABEL_190;
      case 9uLL:
        if (*(_QWORD *)*a4 != 0x69645F726F6F6C66 || *((_BYTE *)*a4 + 8) != 118)
          goto LABEL_488;
LABEL_385:
        v130 = (uint64_t (*)(__int16, __int16))MIL::MathOps::FloorDivOp<float>;
        goto LABEL_386;
      default:
        goto LABEL_192;
    }
  }
  if (v60 != 11)
  {
    v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v195, "Unsupported Datatype for the output IRTensor.");
    v195->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v195, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v201 = v235;
  v202 = v236;
  if (v236)
  {
    v61 = (unint64_t *)&v236->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v201, (uint64_t)v252);
  v63 = v202;
  if (v202)
  {
    v64 = (unint64_t *)&v202->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v199 = v233;
  v200 = v234;
  if (v234)
  {
    v66 = (unint64_t *)&v234->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v199, (uint64_t)&__p);
  v69 = v200;
  if (v200)
  {
    v70 = (unint64_t *)&v200->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if ((*((char *)a4 + 23) & 0x80000000) == 0)
  {
    v72 = *((unsigned __int8 *)a4 + 23);
    switch(*((_BYTE *)a4 + 23))
    {
      case 3:
        if (*(_WORD *)a4 == 25697 && *((_BYTE *)a4 + 2) == 100)
          goto LABEL_295;
        if (*(_WORD *)a4 == 30061 && *((_BYTE *)a4 + 2) == 108)
          goto LABEL_476;
        if (*(_WORD *)a4 == 28528 && *((_BYTE *)a4 + 2) == 119)
          goto LABEL_479;
LABEL_331:
        if (*(_WORD *)a4 == 30067 && *((_BYTE *)a4 + 2) == 98)
          goto LABEL_346;
        if ((v72 & 0x80) != 0)
          goto LABEL_338;
        if (v72 != 3)
          goto LABEL_490;
        goto LABEL_340;
      case 7:
        if (*(_DWORD *)a4 == 1769496941 && *(_DWORD *)((char *)a4 + 3) == 1836412265)
          goto LABEL_379;
        if (*(_DWORD *)a4 != 1768843629 || *(_DWORD *)((char *)a4 + 3) != 1836412265)
          goto LABEL_490;
        goto LABEL_378;
      case 8:
        if (*a4 == (unsigned __int16 *)0x7669645F6C616572)
          goto LABEL_278;
        if (v72 == 3)
          goto LABEL_331;
        goto LABEL_490;
      case 9:
        if (*a4 != (unsigned __int16 *)0x69645F726F6F6C66 || *((_BYTE *)a4 + 8) != 118)
          goto LABEL_490;
        goto LABEL_437;
      default:
        goto LABEL_490;
    }
  }
  v122 = a4[1];
  switch((unint64_t)v122)
  {
    case 3uLL:
      v123 = *a4;
      if (**a4 == 25697 && *((_BYTE *)*a4 + 2) == 100)
      {
LABEL_295:
        v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::AddOp<int>;
      }
      else if (*v123 == 30061 && *((_BYTE *)v123 + 2) == 108)
      {
LABEL_476:
        v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::MulOp<int>;
      }
      else
      {
        v126 = *v123;
        v127 = *((unsigned __int8 *)v123 + 2);
        if (v126 == 28528 && v127 == 119)
        {
LABEL_479:
          v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::PowOp<int>;
        }
        else
        {
          if (v122 == (unsigned __int16 *)8)
          {
LABEL_236:
            if (*(_QWORD *)*a4 == 0x7669645F6C616572)
            {
LABEL_278:
              v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::RealDivOp<int>;
              goto LABEL_438;
            }
            v122 = a4[1];
          }
LABEL_238:
          if (v122 != (unsigned __int16 *)3)
            goto LABEL_490;
          if (**a4 == 30067 && *((_BYTE *)*a4 + 2) == 98)
          {
LABEL_346:
            v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::SubOp<int>;
          }
          else
          {
LABEL_338:
            if (a4[1] != (unsigned __int16 *)3)
              goto LABEL_490;
            a4 = (unsigned __int16 **)*a4;
LABEL_340:
            if (*(_WORD *)a4 != 28525 || *((_BYTE *)a4 + 2) != 100)
            {
LABEL_490:
              v194 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v194, "Invalid OpName specified");
              v194->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(v194, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
            }
            v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::ModOp<int>;
          }
        }
      }
LABEL_438:
      p_p_p = (__int128 **)&unk_1EA99FD88;
      v244 = v138;
      p_p_p_p = &p_p_p;
      MIL::GetTensorShapeWithDimensionsAllKnown(v56, v68, (uint64_t)&v216);
      v176 = (uint64_t)p_p_p_p;
      if (!p_p_p_p)
        goto LABEL_441;
      if (p_p_p_p == &p_p_p)
      {
        v238 = v237;
        ((void (*)(uint64_t, _QWORD *))p_p_p[3])((uint64_t)&p_p_p, v237);
      }
      else
      {
        v176 = ((uint64_t (*)(void))(*p_p_p_p)[2])();
LABEL_441:
        v238 = (_QWORD *)v176;
      }
      v196 = 0;
      v197 = 0;
      v198 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v196, v216, (uint64_t)v217, (v217 - (_BYTE *)v216) >> 3);
      MIL::ValueInference::BinaryOp<int,int>(v252, &__p, (uint64_t)v237, &v196, (uint64_t)&p_p);
      if (v196)
      {
        v197 = v196;
        operator delete(v196);
      }
      v177 = v238;
      if (v238 == v237)
      {
        v178 = 4;
        v177 = v237;
      }
      else
      {
        if (!v238)
          goto LABEL_450;
        v178 = 5;
      }
      (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_450:
      MIL::ValueInference::Tensor<int>::ToIRTensorValue((uint64_t)&p_p, *a1, a5);
      MIL::ValueInference::Tensor<int>::~Tensor(&p_p);
      if (v216)
      {
        v217 = v216;
        operator delete(v216);
      }
      v179 = p_p_p_p;
      if (p_p_p_p == &p_p_p)
      {
        v180 = 4;
        v179 = &p_p_p;
      }
      else
      {
        if (!p_p_p_p)
          goto LABEL_457;
        v180 = 5;
      }
      ((void (*)(void))(*v179)[v180])();
LABEL_457:
      MIL::ValueInference::Tensor<int>::~Tensor(&__p);
      MIL::ValueInference::Tensor<int>::~Tensor(v252);
      break;
    case 7uLL:
      v158 = (int *)*a4;
      if (*(_DWORD *)*a4 == 1769496941 && *(_DWORD *)((char *)*a4 + 3) == 1836412265)
      {
LABEL_379:
        v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::MaximumOp<int>;
      }
      else
      {
        v160 = *v158;
        v161 = *(int *)((char *)v158 + 3);
        if (v160 != 1768843629 || v161 != 1836412265)
          goto LABEL_490;
LABEL_378:
        v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::MinimumOp<int>;
      }
      goto LABEL_438;
    case 8uLL:
      goto LABEL_236;
    case 9uLL:
      if (*(_QWORD *)*a4 != 0x69645F726F6F6C66 || *((_BYTE *)*a4 + 8) != 118)
        goto LABEL_490;
LABEL_437:
      v138 = (uint64_t (*)(__int16, __int16))MIL::MathOps::FloorDivOp<int>;
      goto LABEL_438;
    default:
      goto LABEL_238;
  }
LABEL_458:
  v181 = v249;
  if (v249 == &v247)
  {
    v182 = 4;
    v181 = &v247;
    goto LABEL_462;
  }
  if (v249)
  {
    v182 = 5;
LABEL_462:
    (*(void (**)(void))(*(_QWORD *)v181 + 8 * v182))();
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v232);
  v183 = v234;
  if (v234)
  {
    v184 = (unint64_t *)&v234->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = v236;
  if (v236)
  {
    v187 = (unint64_t *)&v236->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
}

void sub_1E07105EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a65;
  void *v65;
  uint64_t v66;
  _QWORD *v68;
  uint64_t v69;

  __cxa_free_exception(v65);
  v68 = *(_QWORD **)(v66 - 232);
  if (v68 == (_QWORD *)(v66 - 256))
  {
    v69 = 4;
    v68 = (_QWORD *)(v66 - 256);
  }
  else
  {
    if (!v68)
      goto LABEL_6;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a58);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_1E0710BA0()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  JUMPOUT(0x1E0710B98);
}

void sub_1E0710BBC()
{
  JUMPOUT(0x1E0710B98);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloorDiv(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "floor_div");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E0710D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMaximum(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "maximum");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E0710F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMinimum(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "minimum");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E07110DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMul(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mul");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E07112A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

