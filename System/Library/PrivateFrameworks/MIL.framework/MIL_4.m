void MIL::Operators::Common::ios15::CustomValueInference::ValueInferencePow(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pow");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E0711474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRealDiv(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "real_div");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E0711640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSub(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sub");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E071180C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMod(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  _OWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v22 = *a2;
  v23 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mod");
  v10 = v24;
  v27 = v24;
  v24 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v25 = a4;
  v26 = 0;
  v11 = operator new(0x10uLL);
  *a4 = v11;
  a4[1] = v11;
  a4[2] = v11 + 1;
  *v11 = v10;
  if (*((_QWORD *)&v10 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a4[1] = v11 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v27);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v21 < 0)
    operator delete(__p[0]);
  v17 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1E07119D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v19 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceEqual@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "equal");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0712054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E07122BC()
{
  JUMPOUT(0x1E071226CLL);
}

void `anonymous namespace'::BinaryOpBoolOutputHelper(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, MIL *a3@<X2>, _DWORD *a4@<X3>, _OWORD *a5@<X8>)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const MIL::IRTensorValueType *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const MIL::IRTensorValueType *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  const MIL::IRTensorValueType *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  const MIL::IRTensorValueType *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  BOOL (*v77)(float, float);
  BOOL (*v78)(int, int);
  BOOL (*v79)(__int16, __int16);
  uint64_t v80;
  BOOL (*v83)(MIL::MathOps *, int);
  std::logic_error *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  void **v126;
  uint64_t v127;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  void **v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::logic_error *exception;
  std::logic_error *v141;
  std::logic_error *v142;
  std::logic_error *v143;
  std::logic_error *v144;
  std::logic_error *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  _QWORD v170[8];
  void *v171;
  _BYTE *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  _QWORD v175[8];
  uint64_t v176;
  std::__shared_weak_count *v177;
  void *__p[2];
  char v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  _BYTE v184[24];
  _BYTE *v185;
  _BYTE v186[24];
  _BYTE *v187;
  _BYTE v188[24];
  _BYTE *v189;
  _BYTE v190[24];
  _BYTE *v191;
  void (**v192)(void **, _BYTE *);
  void *v193;
  void **v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)v10 + 5) + 40))(**((_QWORD **)v10 + 5));
  if (v179 < 0)
    operator delete(__p[0]);
  if (!v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input Tensor x is not an IRTensor object.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v12)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v13 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)v12 + 5) + 40))(**((_QWORD **)v12 + 5));
  if (v179 < 0)
    operator delete(__p[0]);
  if (!v13)
  {
    v141 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v141, "Input Tensor y is not an IRTensor object.");
    __cxa_throw(v141, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v15 = (uint64_t *)*((_QWORD *)v14 + 5);
  v16 = *v15;
  v17 = (std::__shared_weak_count *)v15[1];
  v182 = *v15;
  v183 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (v179 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v20 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v20)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v21 = (uint64_t *)*((_QWORD *)v20 + 5);
  v23 = *v21;
  v22 = (std::__shared_weak_count *)v21[1];
  v180 = v23;
  v181 = v22;
  if (v22)
  {
    v24 = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (v179 < 0)
    operator delete(__p[0]);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 88))(v26);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  if (v27 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 88))(v28))
  {
    v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v142, "Datatypes do not match for input tensors x and Tensor y.");
    goto LABEL_390;
  }
  if ((*(unsigned int (**)(MIL *))(*(_QWORD *)a3 + 88))(a3) != 2)
  {
    v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v142, "Unsupported Datatype for the output IRTensor.");
LABEL_390:
    v142->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v142, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  switch(v27)
  {
    case 2:
      v151 = v16;
      v152 = v17;
      if (v17)
      {
        v29 = (unint64_t *)&v17->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v151, (uint64_t)__p);
      v31 = v152;
      if (v152)
      {
        v32 = (unint64_t *)&v152->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v149 = v180;
      v150 = v181;
      if (v181)
      {
        v34 = (unint64_t *)&v181->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v149, (uint64_t)v175);
      v37 = v150;
      if (v150)
      {
        v38 = (unint64_t *)&v150->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (*((char *)a4 + 23) < 0)
      {
        v80 = *((_QWORD *)a4 + 1);
        if (v80 != 10)
        {
          if (v80 != 11)
            goto LABEL_136;
          a4 = *(_DWORD **)a4;
          goto LABEL_116;
        }
        if (**(_QWORD **)a4 != 0x5F6C616369676F6CLL || *(_WORD *)(*(_QWORD *)a4 + 8) != 29295)
        {
LABEL_136:
          v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v86, "Invalid OpName specified");
          v86->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v86, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
LABEL_131:
        v83 = MIL::MathOps::LogicalOrOp;
        goto LABEL_138;
      }
      v40 = *((unsigned __int8 *)a4 + 23);
      if (v40 == 10)
      {
        if (*(_QWORD *)a4 != 0x5F6C616369676F6CLL || *((_WORD *)a4 + 4) != 29295)
          goto LABEL_136;
        goto LABEL_131;
      }
      if (v40 != 11)
        goto LABEL_136;
LABEL_116:
      if (*(_QWORD *)a4 == 0x5F6C616369676F6CLL && *(_QWORD *)((char *)a4 + 3) == 0x646E615F6C616369)
      {
        v83 = MIL::MathOps::LogicalAndOp;
      }
      else
      {
        if (*(_QWORD *)a4 != 0x5F6C616369676F6CLL || *(_QWORD *)((char *)a4 + 3) != 0x726F785F6C616369)
          goto LABEL_136;
        v83 = MIL::MathOps::LogicalXorOp;
      }
LABEL_138:
      v192 = (void (**)(void **, _BYTE *))&unk_1EA9A0048;
      v193 = v83;
      v194 = (void **)&v192;
      MIL::GetTensorShapeWithDimensionsAllKnown(a3, v36, (uint64_t)&v171);
      v87 = (uint64_t)v194;
      if (!v194)
      {
LABEL_141:
        v185 = (_BYTE *)v87;
        goto LABEL_143;
      }
      if (v194 != (void **)&v192)
      {
        v87 = (*((uint64_t (**)(void **))*v194 + 2))(v194);
        goto LABEL_141;
      }
      v185 = v184;
      v192[3]((void **)&v192, v184);
LABEL_143:
      v146 = 0;
      v147 = 0;
      v148 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v146, v171, (uint64_t)v172, (v172 - (_BYTE *)v171) >> 3);
      MIL::ValueInference::BinaryOp<BOOL,BOOL>(__p, v175, (uint64_t)v184, &v146, (uint64_t)v170);
      if (v146)
      {
        v147 = v146;
        operator delete(v146);
      }
      v88 = v185;
      if (v185 == v184)
      {
        v89 = 4;
        v88 = v184;
      }
      else
      {
        if (!v185)
          goto LABEL_150;
        v89 = 5;
      }
      (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_150:
      MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v170, *a1, a5);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v170);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v90 = v194;
      if (v194 == (void **)&v192)
      {
        v91 = 4;
        v90 = (void **)&v192;
        goto LABEL_156;
      }
      if (v194)
      {
        v91 = 5;
LABEL_156:
        (*((void (**)(void))*v90 + v91))();
      }
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v175);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(__p);
LABEL_371:
      v134 = v181;
      if (v181)
      {
        v135 = (unint64_t *)&v181->__shared_owners_;
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
      v137 = v183;
      if (v183)
      {
        v138 = (unint64_t *)&v183->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      return;
    case 4:
      v158 = v16;
      v159 = v17;
      if (v17)
      {
        v65 = (unint64_t *)&v17->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v158, (uint64_t)__p);
      v67 = v159;
      if (v159)
      {
        v68 = (unint64_t *)&v159->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v156 = v180;
      v157 = v181;
      if (v181)
      {
        v70 = (unint64_t *)&v181->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v156, (uint64_t)v175);
      v73 = v157;
      if (v157)
      {
        v74 = (unint64_t *)&v157->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if ((*((char *)a4 + 23) & 0x80000000) == 0)
      {
        switch(*((_BYTE *)a4 + 23))
        {
          case 4:
            v76 = *a4;
            goto LABEL_111;
          case 5:
            if (*a4 != 1635086693 || *((_BYTE *)a4 + 4) != 108)
              goto LABEL_393;
            goto LABEL_253;
          case 7:
            if (*a4 != 1634038375 || *(_DWORD *)((char *)a4 + 3) != 1919251553)
              goto LABEL_393;
            goto LABEL_316;
          case 9:
            goto LABEL_345;
          case 0xA:
            if (*(_QWORD *)a4 != 0x7571655F7373656CLL || *((_WORD *)a4 + 4) != 27745)
              goto LABEL_393;
            goto LABEL_241;
          case 0xD:
            if (*(_QWORD *)a4 != 0x5F72657461657267 || *(_QWORD *)((char *)a4 + 5) != 0x6C617571655F7265)
              goto LABEL_393;
            goto LABEL_271;
          default:
            goto LABEL_393;
        }
      }
      switch(*((_QWORD *)a4 + 1))
      {
        case 4:
          v76 = **(_DWORD **)a4;
LABEL_111:
          if (v76 != 1936942444)
            goto LABEL_393;
          v79 = MIL::MathOps::LessOp<MIL::Fp16>;
          break;
        case 5:
          if (**(_DWORD **)a4 != 1635086693 || *(_BYTE *)(*(_QWORD *)a4 + 4) != 108)
            goto LABEL_393;
LABEL_253:
          v79 = MIL::MathOps::EqualOp<MIL::Fp16>;
          break;
        case 7:
          if (**(_DWORD **)a4 != 1634038375 || *(_DWORD *)(*(_QWORD *)a4 + 3) != 1919251553)
            goto LABEL_393;
LABEL_316:
          v79 = MIL::MathOps::GreaterOp<MIL::Fp16>;
          break;
        case 9:
          a4 = *(_DWORD **)a4;
LABEL_345:
          if (*(_QWORD *)a4 != 0x617571655F746F6ELL || *((_BYTE *)a4 + 8) != 108)
            goto LABEL_393;
          v79 = MIL::MathOps::NotEqualOp<MIL::Fp16>;
          break;
        case 0xALL:
          if (**(_QWORD **)a4 != 0x7571655F7373656CLL || *(_WORD *)(*(_QWORD *)a4 + 8) != 27745)
            goto LABEL_393;
LABEL_241:
          v79 = MIL::MathOps::LessEqualOp<MIL::Fp16>;
          break;
        case 0xDLL:
          if (**(_QWORD **)a4 != 0x5F72657461657267 || *(_QWORD *)(*(_QWORD *)a4 + 5) != 0x6C617571655F7265)
            goto LABEL_393;
LABEL_271:
          v79 = MIL::MathOps::GreaterEqualOp<MIL::Fp16>;
          break;
        default:
LABEL_393:
          v145 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v145, "Invalid OpName specified");
          v145->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v145, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      v192 = (void (**)(void **, _BYTE *))&unk_1EA99FF98;
      v193 = v79;
      v194 = (void **)&v192;
      MIL::GetTensorShapeWithDimensionsAllKnown(a3, v72, (uint64_t)&v171);
      v129 = (uint64_t)v194;
      if (!v194)
        goto LABEL_354;
      if (v194 == (void **)&v192)
      {
        v187 = v186;
        v192[3]((void **)&v192, v186);
      }
      else
      {
        v129 = (*((uint64_t (**)(void **))*v194 + 2))(v194);
LABEL_354:
        v187 = (_BYTE *)v129;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v153, v171, (uint64_t)v172, (v172 - (_BYTE *)v171) >> 3);
      MIL::ValueInference::BinaryOp<MIL::Fp16,BOOL>(__p, v175, (uint64_t)v186, &v153, (uint64_t)v170);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v130 = v187;
      if (v187 == v186)
      {
        v131 = 4;
        v130 = v186;
      }
      else
      {
        if (!v187)
          goto LABEL_363;
        v131 = 5;
      }
      (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_363:
      MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v170, *a1, a5);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v170);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v132 = v194;
      if (v194 == (void **)&v192)
      {
        v133 = 4;
        v132 = (void **)&v192;
      }
      else
      {
        if (!v194)
          goto LABEL_370;
        v133 = 5;
      }
      (*((void (**)(void))*v132 + v133))();
LABEL_370:
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v175);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(__p);
      goto LABEL_371;
    case 5:
      v176 = v16;
      v177 = v17;
      if (v17)
      {
        v41 = (unint64_t *)&v17->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v176, (uint64_t)__p);
      v43 = v177;
      if (v177)
      {
        v44 = (unint64_t *)&v177->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v173 = v180;
      v174 = v181;
      if (v181)
      {
        v46 = (unint64_t *)&v181->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v173, (uint64_t)v175);
      v49 = v174;
      if (v174)
      {
        v50 = (unint64_t *)&v174->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if ((*((char *)a4 + 23) & 0x80000000) == 0)
      {
        switch(*((_BYTE *)a4 + 23))
        {
          case 4:
            v52 = *a4;
            goto LABEL_103;
          case 5:
            if (*a4 != 1635086693 || *((_BYTE *)a4 + 4) != 108)
              goto LABEL_391;
            goto LABEL_235;
          case 7:
            if (*a4 != 1634038375 || *(_DWORD *)((char *)a4 + 3) != 1919251553)
              goto LABEL_391;
            goto LABEL_277;
          case 9:
            goto LABEL_279;
          case 0xA:
            if (*(_QWORD *)a4 != 0x7571655F7373656CLL || *((_WORD *)a4 + 4) != 27745)
              goto LABEL_391;
            goto LABEL_223;
          case 0xD:
            if (*(_QWORD *)a4 != 0x5F72657461657267 || *(_QWORD *)((char *)a4 + 5) != 0x6C617571655F7265)
              goto LABEL_391;
            goto LABEL_259;
          default:
            goto LABEL_391;
        }
      }
      switch(*((_QWORD *)a4 + 1))
      {
        case 4:
          v52 = **(_DWORD **)a4;
LABEL_103:
          if (v52 != 1936942444)
            goto LABEL_391;
          v77 = MIL::MathOps::LessOp<float>;
          break;
        case 5:
          if (**(_DWORD **)a4 != 1635086693 || *(_BYTE *)(*(_QWORD *)a4 + 4) != 108)
            goto LABEL_391;
LABEL_235:
          v77 = MIL::MathOps::EqualOp<float>;
          break;
        case 7:
          if (**(_DWORD **)a4 != 1634038375 || *(_DWORD *)(*(_QWORD *)a4 + 3) != 1919251553)
            goto LABEL_391;
LABEL_277:
          v77 = MIL::MathOps::GreaterOp<float>;
          break;
        case 9:
          a4 = *(_DWORD **)a4;
LABEL_279:
          if (*(_QWORD *)a4 != 0x617571655F746F6ELL || *((_BYTE *)a4 + 8) != 108)
            goto LABEL_391;
          v77 = MIL::MathOps::NotEqualOp<float>;
          break;
        case 0xALL:
          if (**(_QWORD **)a4 != 0x7571655F7373656CLL || *(_WORD *)(*(_QWORD *)a4 + 8) != 27745)
            goto LABEL_391;
LABEL_223:
          v77 = MIL::MathOps::LessEqualOp<float>;
          break;
        case 0xDLL:
          if (**(_QWORD **)a4 != 0x5F72657461657267 || *(_QWORD *)(*(_QWORD *)a4 + 5) != 0x6C617571655F7265)
            goto LABEL_391;
LABEL_259:
          v77 = MIL::MathOps::GreaterEqualOp<float>;
          break;
        default:
LABEL_391:
          v143 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v143, "Invalid OpName specified");
          v143->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v143, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      v192 = (void (**)(void **, _BYTE *))&unk_1EA99FE38;
      v193 = v77;
      v194 = (void **)&v192;
      MIL::GetTensorShapeWithDimensionsAllKnown(a3, v48, (uint64_t)&v171);
      v115 = (uint64_t)v194;
      if (!v194)
        goto LABEL_288;
      if (v194 == (void **)&v192)
      {
        v191 = v190;
        v192[3]((void **)&v192, v190);
      }
      else
      {
        v115 = (*((uint64_t (**)(void **))*v194 + 2))(v194);
LABEL_288:
        v191 = (_BYTE *)v115;
      }
      v167 = 0;
      v168 = 0;
      v169 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v167, v171, (uint64_t)v172, (v172 - (_BYTE *)v171) >> 3);
      MIL::ValueInference::BinaryOp<float,BOOL>(__p, v175, (uint64_t)v190, &v167, (uint64_t)v170);
      if (v167)
      {
        v168 = v167;
        operator delete(v167);
      }
      v116 = v191;
      if (v191 == v190)
      {
        v117 = 4;
        v116 = v190;
      }
      else
      {
        if (!v191)
          goto LABEL_297;
        v117 = 5;
      }
      (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_297:
      MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v170, *a1, a5);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v170);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v118 = v194;
      if (v194 == (void **)&v192)
      {
        v119 = 4;
        v118 = (void **)&v192;
      }
      else
      {
        if (!v194)
          goto LABEL_304;
        v119 = 5;
      }
      (*((void (**)(void))*v118 + v119))();
LABEL_304:
      MIL::ValueInference::Tensor<float>::~Tensor(v175);
      MIL::ValueInference::Tensor<float>::~Tensor(__p);
      goto LABEL_371;
    case 11:
      v165 = v16;
      v166 = v17;
      if (v17)
      {
        v53 = (unint64_t *)&v17->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v165, (uint64_t)__p);
      v55 = v166;
      if (v166)
      {
        v56 = (unint64_t *)&v166->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v163 = v180;
      v164 = v181;
      if (v181)
      {
        v58 = (unint64_t *)&v181->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v163, (uint64_t)v175);
      v61 = v164;
      if (v164)
      {
        v62 = (unint64_t *)&v164->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if ((*((char *)a4 + 23) & 0x80000000) == 0)
      {
        switch(*((_BYTE *)a4 + 23))
        {
          case 4:
            v64 = *a4;
            goto LABEL_107;
          case 5:
            if (*a4 != 1635086693 || *((_BYTE *)a4 + 4) != 108)
              goto LABEL_392;
            goto LABEL_247;
          case 7:
            if (*a4 != 1634038375 || *(_DWORD *)((char *)a4 + 3) != 1919251553)
              goto LABEL_392;
            goto LABEL_310;
          case 9:
            goto LABEL_318;
          case 0xA:
            if (*(_QWORD *)a4 != 0x7571655F7373656CLL || *((_WORD *)a4 + 4) != 27745)
              goto LABEL_392;
            goto LABEL_229;
          case 0xD:
            if (*(_QWORD *)a4 != 0x5F72657461657267 || *(_QWORD *)((char *)a4 + 5) != 0x6C617571655F7265)
              goto LABEL_392;
            goto LABEL_265;
          default:
            goto LABEL_392;
        }
      }
      switch(*((_QWORD *)a4 + 1))
      {
        case 4:
          v64 = **(_DWORD **)a4;
LABEL_107:
          if (v64 != 1936942444)
            goto LABEL_392;
          v78 = MIL::MathOps::LessOp<int>;
          break;
        case 5:
          if (**(_DWORD **)a4 != 1635086693 || *(_BYTE *)(*(_QWORD *)a4 + 4) != 108)
            goto LABEL_392;
LABEL_247:
          v78 = MIL::MathOps::EqualOp<int>;
          break;
        case 7:
          if (**(_DWORD **)a4 != 1634038375 || *(_DWORD *)(*(_QWORD *)a4 + 3) != 1919251553)
            goto LABEL_392;
LABEL_310:
          v78 = MIL::MathOps::GreaterOp<int>;
          break;
        case 9:
          a4 = *(_DWORD **)a4;
LABEL_318:
          if (*(_QWORD *)a4 != 0x617571655F746F6ELL || *((_BYTE *)a4 + 8) != 108)
            goto LABEL_392;
          v78 = MIL::MathOps::NotEqualOp<int>;
          break;
        case 0xALL:
          if (**(_QWORD **)a4 != 0x7571655F7373656CLL || *(_WORD *)(*(_QWORD *)a4 + 8) != 27745)
            goto LABEL_392;
LABEL_229:
          v78 = MIL::MathOps::LessEqualOp<int>;
          break;
        case 0xDLL:
          if (**(_QWORD **)a4 != 0x5F72657461657267 || *(_QWORD *)(*(_QWORD *)a4 + 5) != 0x6C617571655F7265)
            goto LABEL_392;
LABEL_265:
          v78 = MIL::MathOps::GreaterEqualOp<int>;
          break;
        default:
LABEL_392:
          v144 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v144, "Invalid OpName specified");
          v144->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v144, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      v192 = (void (**)(void **, _BYTE *))&unk_1EA99FEE8;
      v193 = v78;
      v194 = (void **)&v192;
      MIL::GetTensorShapeWithDimensionsAllKnown(a3, v60, (uint64_t)&v171);
      v123 = (uint64_t)v194;
      if (!v194)
        goto LABEL_327;
      if (v194 == (void **)&v192)
      {
        v189 = v188;
        v192[3]((void **)&v192, v188);
      }
      else
      {
        v123 = (*((uint64_t (**)(void **))*v194 + 2))(v194);
LABEL_327:
        v189 = (_BYTE *)v123;
      }
      v160 = 0;
      v161 = 0;
      v162 = 0;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v160, v171, (uint64_t)v172, (v172 - (_BYTE *)v171) >> 3);
      MIL::ValueInference::BinaryOp<int,BOOL>(__p, v175, (uint64_t)v188, &v160, (uint64_t)v170);
      if (v160)
      {
        v161 = v160;
        operator delete(v160);
      }
      v124 = v189;
      if (v189 == v188)
      {
        v125 = 4;
        v124 = v188;
      }
      else
      {
        if (!v189)
          goto LABEL_336;
        v125 = 5;
      }
      (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_336:
      MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v170, *a1, a5);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v170);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v126 = v194;
      if (v194 == (void **)&v192)
      {
        v127 = 4;
        v126 = (void **)&v192;
      }
      else
      {
        if (!v194)
          goto LABEL_343;
        v127 = 5;
      }
      (*((void (**)(void))*v126 + v127))();
LABEL_343:
      MIL::ValueInference::Tensor<int>::~Tensor(v175);
      MIL::ValueInference::Tensor<int>::~Tensor(__p);
      goto LABEL_371;
    default:
      v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v142, "Unsupported Datatype for the input IRTensor.");
      goto LABEL_390;
  }
}

void sub_1E0713798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a66;
  void *v66;

  __cxa_free_exception(v66);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreater@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "greater");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0714230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E0714498()
{
  JUMPOUT(0x1E0714448);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreaterEqual@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "greater_equal");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0714AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E0714D40()
{
  JUMPOUT(0x1E0714CF0);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLess@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "less");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0715380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E07155E8()
{
  JUMPOUT(0x1E0715598);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLessEqual@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "less_equal");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0715C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E0715E90()
{
  JUMPOUT(0x1E0715E40);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceNotEqual@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "not_equal");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E07164D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E0716738()
{
  JUMPOUT(0x1E07166E8);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalAnd@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "logical_and");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0716D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E0716FE0()
{
  JUMPOUT(0x1E0716F90);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalOr@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "logical_or");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0717620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E0717888()
{
  JUMPOUT(0x1E0717838);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalXor@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  void *v41;
  MIL *v42;
  unint64_t *v43;
  unint64_t v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  void *v76[2];
  char v77;
  _QWORD v78[5];
  std::string *v79;
  char v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  _BYTE v86[32];
  int v87;
  std::string v88[2];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v76, "x");
  std::string::basic_string[abi:ne180100]<0>(v71, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v71);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  v73 = v11;
  v74 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  MIL::IRTypedArgument::Make(&v73, &v75);
  v82[0] = v75;
  if (v75)
  {
    v14 = (_QWORD *)operator new();
    v15 = v75;
    *v14 = &unk_1EA994910;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
  }
  else
  {
    v14 = 0;
  }
  v82[1] = v14;
  v83 = 0;
  v75 = 0;
  v84 = 0;
  v85 = 0;
  v69[0] = &v83;
  LOBYTE(v69[1]) = 0;
  v16 = operator new(0x10uLL);
  v83 = v16;
  v85 = v16 + 2;
  *v16 = v82[0];
  v16[1] = v14;
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v84 = v16 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v86, (__int128 *)v76, &v83);
  std::string::basic_string[abi:ne180100]<0>(v69, "y");
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v19 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v19)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v20 = (uint64_t *)*((_QWORD *)v19 + 5);
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  v63 = v22;
  v64 = v21;
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  MIL::IRTypedArgument::Make(&v63, &v65);
  v81[0] = v65;
  if (v65)
  {
    v25 = (_QWORD *)operator new();
    v26 = v65;
    *v25 = &unk_1EA994910;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v81[1] = v25;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v79 = (std::string *)&v66;
  v80 = 0;
  v27 = operator new(0x10uLL);
  v66 = v27;
  v68 = v27 + 2;
  *v27 = v81[0];
  v27[1] = v25;
  if (v25)
  {
    v28 = v25 + 1;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v67 = v27 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v88, (__int128 *)v69, &v66);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v78, v86, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v79 = &v88[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v88[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v88[i / 3].__r_.__value_.__l.__data_);
  }
  v79 = (std::string *)&v66;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v81);
  v31 = v65;
  v65 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v62 < 0)
    operator delete(__p[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  v69[0] = &v83;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v35 = v75;
  v75 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = v74;
  if (v74)
  {
    v37 = (unint64_t *)&v74->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (v77 < 0)
    operator delete(v76[0]);
  MIL::UnknownLocation::Make(v69);
  if (v69[0])
  {
    v39 = (std::__shared_weak_count *)operator new();
    v40 = (std::__shared_weak_count_vtbl *)v69[0];
    v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9940C8;
    v39->__shared_owners_ = 0;
    v39->__shared_weak_owners_ = 0;
    v39[1].__vftable = v40;
  }
  else
  {
    v39 = 0;
  }
  v69[0] = 0;
  memset(v86, 0, sizeof(v86));
  v87 = 1065353216;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, v78, (uint64_t **)v76);
  v41 = v76[0];
  v42 = (MIL *)MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v76[0]);
  v76[1] = v41;
  operator delete(v41);
  v71[0] = &v83;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v71);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v86);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = v69[0];
  v69[0] = 0;
  if (v45)
    (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
  v46 = *(std::__shared_weak_count **)(a2 + 8);
  v60 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(v86, "logical_xor");
  v50 = v71[0];
  v49 = (char *)v71[1];
  v83 = v71[0];
  v84 = v71[1];
  v71[0] = 0;
  v71[1] = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v76[0] = a4;
  LOBYTE(v76[1]) = 0;
  v51 = operator new(0x10uLL);
  *a4 = v51;
  a4[1] = v51;
  a4[2] = v51 + 2;
  *v51 = v50;
  v51[1] = v49;
  if (v49)
  {
    v52 = (unint64_t *)(v49 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  a4[1] = v51 + 2;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v83);
  v54 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v55 = (unint64_t *)((char *)v71[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if ((v86[23] & 0x80000000) != 0)
    operator delete(*(void **)v86);
  if (v60)
  {
    v57 = (unint64_t *)&v60->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v78);
}

void sub_1E0717EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26)
    (*(void (**)(void *))(*(_QWORD *)a26 + 8))(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_1E0718130()
{
  JUMPOUT(0x1E07180E0);
}

float MIL::MathOps::FloorDivOp<float>(float a1, float a2)
{
  return floorf(a1 / a2);
}

uint64_t MIL::MathOps::AddOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  float v3;
  MIL::Fp16 *v4;
  __int16 v6;
  __int16 v7;

  v7 = a1;
  v6 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float + v3);
}

uint64_t MIL::MathOps::FloorDivOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  float v3;
  MIL::Fp16 *v4;
  __int16 v6;
  __int16 v7;

  v7 = a1;
  v6 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, floorf(Float / v3));
}

uint64_t MIL::MathOps::MaximumOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  MIL::Fp16 *v3;
  float v4;
  __int16 v6;
  __int16 v7;

  v7 = a1;
  v6 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v4 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  if (Float >= v4)
    v4 = Float;
  return MIL::Fp16::FromFloat(v3, v4);
}

uint64_t MIL::MathOps::MinimumOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  MIL::Fp16 *v3;
  float v4;
  __int16 v6;
  __int16 v7;

  v7 = a1;
  v6 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v4 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  if (v4 >= Float)
    v4 = Float;
  return MIL::Fp16::FromFloat(v3, v4);
}

uint64_t MIL::MathOps::MulOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  float v3;
  MIL::Fp16 *v4;
  __int16 v6;
  __int16 v7;

  v7 = a1;
  v6 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float * v3);
}

uint64_t MIL::MathOps::PowOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  float v3;
  float v4;
  MIL::Fp16 *v5;
  __int16 v7;
  __int16 v8;

  v8 = a1;
  v7 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v8);
  v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v4 = powf(Float, v3);
  return MIL::Fp16::FromFloat(v5, v4);
}

uint64_t MIL::MathOps::RealDivOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  float v3;
  MIL::Fp16 *v4;
  __int16 v6;
  __int16 v7;

  v7 = a1;
  v6 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float / v3);
}

uint64_t MIL::MathOps::SubOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  float v3;
  MIL::Fp16 *v4;
  __int16 v6;
  __int16 v7;

  v7 = a1;
  v6 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v6);
  return MIL::Fp16::FromFloat(v4, Float - v3);
}

uint64_t MIL::MathOps::ModOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  float v3;
  float v4;
  MIL::Fp16 *v5;
  __int16 v7;
  __int16 v8;

  v8 = a1;
  v7 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v8);
  v3 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v4 = fmodf(Float, v3);
  return MIL::Fp16::FromFloat(v5, v4);
}

void std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99FCD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99FCD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16,MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16,MIL::Fp16)>::target_type()
{
}

uint64_t MIL::MathOps::AddOp<int>(int a1, int a2)
{
  return (a2 + a1);
}

uint64_t MIL::MathOps::FloorDivOp<int>(int a1, int a2)
{
  return (a1 / a2);
}

uint64_t MIL::MathOps::MaximumOp<int>(uint64_t result, int a2)
{
  if ((int)result <= a2)
    return a2;
  else
    return result;
}

uint64_t MIL::MathOps::MinimumOp<int>(uint64_t result, int a2)
{
  if (a2 >= (int)result)
    return result;
  else
    return a2;
}

uint64_t MIL::MathOps::MulOp<int>(int a1, int a2)
{
  return (a2 * a1);
}

uint64_t MIL::MathOps::PowOp<int>(int a1, int a2)
{
  return (int)pow((double)a1, (double)a2);
}

uint64_t MIL::MathOps::RealDivOp<int>(int a1, int a2)
{
  return (a1 / a2);
}

uint64_t MIL::MathOps::SubOp<int>(int a1, int a2)
{
  return (a1 - a2);
}

uint64_t MIL::MathOps::ModOp<int>(int a1, int a2)
{
  return (a1 % a2);
}

void std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99FD88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99FD88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<int (*)(int,int),std::allocator<int (*)(int,int)>,int ()(int,int)>::target_type()
{
}

BOOL MIL::MathOps::EqualOp<float>(float a1, float a2)
{
  return a1 == a2;
}

BOOL MIL::MathOps::GreaterOp<float>(float a1, float a2)
{
  return a1 > a2;
}

BOOL MIL::MathOps::GreaterEqualOp<float>(float a1, float a2)
{
  return a1 >= a2;
}

BOOL MIL::MathOps::LessOp<float>(float a1, float a2)
{
  return a1 < a2;
}

BOOL MIL::MathOps::LessEqualOp<float>(float a1, float a2)
{
  return a1 <= a2;
}

BOOL MIL::MathOps::NotEqualOp<float>(float a1, float a2)
{
  return a1 != a2;
}

void std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99FE38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99FE38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return (*(uint64_t (**)(float, float))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<unsigned char (*)(float,float),std::allocator<unsigned char (*)(float,float)>,unsigned char ()(float,float)>::target_type()
{
}

BOOL MIL::MathOps::EqualOp<int>(int a1, int a2)
{
  return a1 == a2;
}

BOOL MIL::MathOps::GreaterOp<int>(int a1, int a2)
{
  return a1 > a2;
}

BOOL MIL::MathOps::GreaterEqualOp<int>(int a1, int a2)
{
  return a1 >= a2;
}

BOOL MIL::MathOps::LessOp<int>(int a1, int a2)
{
  return a1 < a2;
}

BOOL MIL::MathOps::LessEqualOp<int>(int a1, int a2)
{
  return a1 <= a2;
}

BOOL MIL::MathOps::NotEqualOp<int>(int a1, int a2)
{
  return a1 != a2;
}

void std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99FEE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99FEE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<unsigned char (*)(int,int),std::allocator<unsigned char (*)(int,int)>,unsigned char ()(int,int)>::target_type()
{
}

BOOL MIL::MathOps::EqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

BOOL MIL::MathOps::GreaterOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  __int16 v4;
  __int16 v5;

  v5 = a1;
  v4 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float > MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::GreaterEqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  __int16 v4;
  __int16 v5;

  v5 = a1;
  v4 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float >= MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::LessOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  __int16 v4;
  __int16 v5;

  v5 = a1;
  v4 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float < MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::LessEqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  float Float;
  __int16 v4;
  __int16 v5;

  v5 = a1;
  v4 = a2;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  return Float <= MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
}

BOOL MIL::MathOps::NotEqualOp<MIL::Fp16>(__int16 a1, __int16 a2)
{
  return a1 != a2;
}

void std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA99FF98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA99FF98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<unsigned char (*)(MIL::Fp16,MIL::Fp16),std::allocator<unsigned char (*)(MIL::Fp16,MIL::Fp16)>,unsigned char ()(MIL::Fp16,MIL::Fp16)>::target_type()
{
}

void std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA9A0048;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA9A0048;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<unsigned char (*)(unsigned char,unsigned char),std::allocator<unsigned char (*)(unsigned char,unsigned char)>,unsigned char ()(unsigned char,unsigned char)>::target_type()
{
}

uint64_t MIL::Operators::Common::ios15::ElementwiseBinary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  char **v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  std::__shared_weak_count *v80;
  std::string *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  std::string *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::string *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::string *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::string *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::string *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t result;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void *v111[2];
  char v112;
  std::string *v113;
  std::__shared_weak_count *v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  std::string *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123[2];
  char v124;
  std::string *v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  __int128 v128;
  void *v129[2];
  uint64_t v130;
  void *v131;
  void *v132;
  _QWORD *v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char **v138;
  __n128 v139;
  void *__p;
  void *v141;
  _QWORD *v142;
  void *v143;
  void *v144;
  _QWORD *v145;
  __n128 v146;
  _QWORD *v147;
  __int128 v148;
  uint64_t v149;
  _QWORD v150[3];
  __int128 v151;
  __int128 *v152;
  _BYTE v153[24];
  _BYTE *v154;
  _BYTE v155[24];
  _BYTE *v156;
  std::string *v157;
  std::string *v158;
  _QWORD v159[2];

  v159[1] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v147 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (__int128 *)operator new(8uLL);
  v157 = (std::string *)v10;
  *(_QWORD *)v10 = v9;
  v158 = (std::string *)((char *)v10 + 8);
  v159[0] = (char *)v10 + 8;
  *(_QWORD *)&v148 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v157);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v143 = v12;
  *v12 = v11;
  v144 = v12 + 1;
  v145 = v12 + 1;
  *((_QWORD *)&v148 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v143);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v141 = v14 + 1;
  v142 = v14 + 1;
  v149 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v148, 3, &v146);
  MIL::IRParameter::Make(&v146, (uint64_t *)&v131);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v131);
  v15 = v131;
  v131 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v17 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v141 = __p;
    operator delete(__p);
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  v19 = v147;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  v157 = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v158 = (std::string *)((char *)v21 + 8);
  v159[0] = (char *)v21 + 8;
  *(_QWORD *)&v148 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v157);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v143 = v23;
  *v23 = v22;
  v144 = v23 + 1;
  v145 = v23 + 1;
  *((_QWORD *)&v148 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v143);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v141 = v25 + 1;
  v142 = v25 + 1;
  v149 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v148, 3, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v131);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v131);
  v26 = v131;
  v131 = 0;
  if (v26)
    (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v28 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v141 = __p;
    operator delete(__p);
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  v138 = 0;
  v30 = operator new();
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)&v148 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v138, (void **)v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v148, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v138, 1uLL);
  v31 = v138;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v143 = v33;
  *v33 = v32;
  v144 = v33 + 1;
  v145 = v33 + 1;
  v157 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v143);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  __p = v35;
  *v35 = v34;
  v141 = v35 + 1;
  v142 = v35 + 1;
  v158 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v131 = v37;
  *v37 = v36;
  v132 = v37 + 1;
  v133 = v37 + 1;
  v159[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v131);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v157, 3, &v134);
  MIL::IRParameter::Make(&v134, &v135);
  v38 = v135;
  v136 = v135;
  if (v135)
  {
    v39 = (_QWORD *)operator new();
    v40 = v135;
    *v39 = &unk_1EA99F888;
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = v40;
  }
  else
  {
    v39 = 0;
  }
  v137 = v39;
  v135 = 0;
  v41 = v31[2];
  v42 = v31[1];
  if (v42 >= v41)
  {
    v44 = (v42 - *v31) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v46 = v41 - *v31;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v150[1] = v31 + 2;
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v31 + 2), v47);
    v50 = (uint64_t *)&v48[16 * v44];
    *v50 = v38;
    v50[1] = (uint64_t)v39;
    v136 = 0;
    v137 = 0;
    v52 = *v31;
    v51 = v31[1];
    if (v51 == *v31)
    {
      v55 = v31[1];
      v53 = &v48[16 * v44];
    }
    else
    {
      v53 = &v48[16 * v44];
      do
      {
        v54 = *((_OWORD *)v51 - 1);
        v51 -= 16;
        *((_OWORD *)v53 - 1) = v54;
        v53 -= 16;
        *(_QWORD *)v51 = 0;
        *((_QWORD *)v51 + 1) = 0;
      }
      while (v51 != v52);
      v55 = *v31;
      v51 = v31[1];
    }
    v43 = (char *)(v50 + 2);
    *v31 = v53;
    *(_QWORD *)&v148 = v55;
    *((_QWORD *)&v148 + 1) = v55;
    v31[1] = (char *)(v50 + 2);
    v149 = (uint64_t)v51;
    v56 = v31[2];
    v31[2] = &v48[16 * v49];
    v150[0] = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v148);
  }
  else
  {
    *(_QWORD *)v42 = v38;
    *((_QWORD *)v42 + 1) = v39;
    v43 = v42 + 16;
    v136 = 0;
    v137 = 0;
  }
  v31[1] = v43;
  v57 = v135;
  v135 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v59 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  if (__p)
  {
    v141 = __p;
    operator delete(__p);
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  *(_OWORD *)v129 = *(_OWORD *)a2;
  v130 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v61 = (uint64_t)v147;
  *(_QWORD *)&v128 = v147;
  if (v147)
  {
    v62 = (_QWORD *)operator new();
    *v62 = &unk_1EA99F8E8;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v61;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v128 + 1) = v62;
  v147 = 0;
  *(_QWORD *)&v127 = v138;
  if (v138)
  {
    v63 = (_QWORD *)operator new();
    v64 = v138;
    *v63 = &unk_1EA99F948;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v64;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v127 + 1) = v63;
  v138 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v155, a3);
  v154 = 0;
  MIL::IROperator::Make((__int128 *)v129, &v128, &v127, (uint64_t)v155, (uint64_t)v153, a4);
  v65 = v154;
  if (v154 == v153)
  {
    v66 = 4;
    v65 = v153;
  }
  else
  {
    if (!v154)
      goto LABEL_68;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_68:
  v67 = v156;
  if (v156 == v155)
  {
    v68 = 4;
    v67 = v155;
    goto LABEL_72;
  }
  if (v156)
  {
    v68 = 5;
LABEL_72:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (SHIBYTE(v130) < 0)
    operator delete(v129[0]);
  v75 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v148, "x");
  std::string::basic_string[abi:ne180100]<0>(v150, "y");
  v157 = 0;
  v158 = 0;
  v159[0] = 0;
  v143 = &v157;
  LOBYTE(v144) = 0;
  v157 = (std::string *)operator new(0x30uLL);
  v158 = v157;
  v159[0] = v157 + 2;
  v158 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v159, &v148, &v151, v157);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v157, (uint64_t)&v151);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v75 + 200))(v75, &v151);
  v76 = v152;
  if (v152 == &v151)
  {
    v77 = 4;
    v76 = &v151;
    goto LABEL_89;
  }
  if (v152)
  {
    v77 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v76 + 8 * v77))();
  }
  v143 = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v150[i + 2]) < 0)
      operator delete((void *)v150[i]);
  }
  MIL::Validation::TensorDTypeConstraints::Make(&v148);
  v79 = v148;
  std::string::basic_string[abi:ne180100]<0>(v123, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v123, 0, (uint64_t *)&v157);
  v125 = v157;
  if (v157)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = v157;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = (std::__shared_weak_count_vtbl *)v81;
  }
  else
  {
    v80 = 0;
  }
  v126 = v80;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v121, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v79 + 24))(v79, &v125, v121);
  if (v122 < 0)
    operator delete(v121[0]);
  v82 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v157;
  v157 = 0;
  if (v85)
    (*(void (**)(std::string *))(v85->__r_.__value_.__r.__words[0] + 8))(v85);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v148;
  std::string::basic_string[abi:ne180100]<0>(v117, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v117, 0, (uint64_t *)&v157);
  v119 = v157;
  if (v157)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = v157;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = (std::__shared_weak_count_vtbl *)v88;
  }
  else
  {
    v87 = 0;
  }
  v120 = v87;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v115, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v86 + 24))(v86, &v119, v115);
  if (v116 < 0)
    operator delete(v115[0]);
  v89 = v120;
  if (v120)
  {
    v90 = (unint64_t *)&v120->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v157;
  v157 = 0;
  if (v92)
    (*(void (**)(std::string *))(v92->__r_.__value_.__r.__words[0] + 8))(v92);
  if (v118 < 0)
    operator delete(v117[0]);
  v93 = v148;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v157);
  v113 = v157;
  if (v157)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = v157;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v114 = v94;
  v157 = 0;
  std::string::basic_string[abi:ne180100]<0>(v111, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v93 + 24))(v93, &v113, v111);
  if (v112 < 0)
    operator delete(v111[0]);
  v96 = v114;
  if (v114)
  {
    v97 = (unint64_t *)&v114->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v157;
  v157 = 0;
  if (v99)
    (*(void (**)(std::string *))(v99->__r_.__value_.__r.__words[0] + 8))(v99);
  v100 = *a4;
  v109 = v148;
  if ((_QWORD)v148)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v148;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v110 = v101;
  *(_QWORD *)&v148 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v100 + 56))(v100, &v109);
  v103 = v110;
  if (v110)
  {
    v104 = (unint64_t *)&v110->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v148;
  *(_QWORD *)&v148 = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v138, 0);
  result = (uint64_t)v147;
  if (v147)
  {
    v108 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v147);
    return MEMORY[0x1E0C023A0](v108, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0719758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49)
{
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)(v50 - 240);
  *(_QWORD *)(v50 - 240) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v50 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Add::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAdd;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E071A878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ElementwiseBinaryBoolOutput::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void ***v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void **v47;
  void **v48;
  char *v49;
  __int128 v50;
  void **v51;
  void **v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void **v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  void *v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void **v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void **v94;
  uint64_t result;
  uint64_t v96;
  void **v97;
  std::__shared_weak_count *v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103;
  std::__shared_weak_count *v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  void *v109;
  std::__shared_weak_count *v110;
  __int128 v111;
  __int128 v112;
  void *v113[2];
  uint64_t v114;
  __n128 v115;
  __n128 v116;
  void *__p;
  void *v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  _QWORD *v122;
  void *v123;
  void *v124;
  _QWORD *v125;
  __n128 v126;
  void *v127;
  _QWORD *v128;
  _QWORD v129[3];
  _QWORD *v130;
  _BYTE v131[24];
  _BYTE *v132;
  _BYTE v133[24];
  _BYTE *v134;
  uint64_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  void **v139;
  _QWORD *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v128 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v123 = v10;
  *v10 = v9;
  v124 = v10 + 1;
  v125 = v10 + 1;
  v136 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v123);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v120 = v12;
  *v12 = v11;
  v121 = v12 + 1;
  v122 = v12 + 1;
  v137 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v120);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v118 = v14 + 1;
  v119 = v14 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v136, 3, &v126);
  MIL::IRParameter::Make(&v126, (uint64_t *)&v127);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v127);
  v15 = v127;
  v127 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v126.n128_u64[1];
  if (v126.n128_u64[1])
  {
    v17 = (unint64_t *)(v126.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  v19 = v128;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v123 = v21;
  *v21 = v20;
  v124 = v21 + 1;
  v125 = v21 + 1;
  v136 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v123);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v120 = v23;
  *v23 = v22;
  v121 = v23 + 1;
  v122 = v23 + 1;
  v137 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v120);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v118 = v25 + 1;
  v119 = v25 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v136, 3, &v116);
  MIL::IRParameter::Make(&v116, (uint64_t *)&v127);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v127);
  v26 = v127;
  v127 = 0;
  if (v26)
    (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v116.n128_u64[1];
  if (v116.n128_u64[1])
  {
    v28 = (unint64_t *)(v116.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  __p = 0;
  v30 = operator new();
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  v136 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v136, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v31 = (void ***)__p;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  v123 = v33;
  *v33 = v32;
  v124 = v33 + 1;
  v125 = v33 + 1;
  v135 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v123);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v135, 1, &v115);
  MIL::IRParameter::Make(&v115, (uint64_t *)&v127);
  v34 = v127;
  v120 = v127;
  if (v127)
  {
    v35 = (_QWORD *)operator new();
    v36 = v127;
    *v35 = &unk_1EA99F888;
    v35[1] = 0;
    v35[2] = 0;
    v35[3] = v36;
  }
  else
  {
    v35 = 0;
  }
  v121 = v35;
  v127 = 0;
  v37 = (unint64_t)v31[2];
  v38 = v31[1];
  if ((unint64_t)v38 >= v37)
  {
    v40 = ((char *)v38 - (char *)*v31) >> 4;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v42 = v37 - (_QWORD)*v31;
    if (v42 >> 3 > v41)
      v41 = v42 >> 3;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    v140 = v31 + 2;
    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v31 + 2), v43);
    v46 = &v44[16 * v40];
    *(_QWORD *)v46 = v34;
    *((_QWORD *)v46 + 1) = v35;
    v120 = 0;
    v121 = 0;
    v48 = *v31;
    v47 = v31[1];
    if (v47 == *v31)
    {
      v51 = v31[1];
      v49 = &v44[16 * v40];
    }
    else
    {
      v49 = &v44[16 * v40];
      do
      {
        v50 = *((_OWORD *)v47 - 1);
        v47 -= 2;
        *((_OWORD *)v49 - 1) = v50;
        v49 -= 16;
        *v47 = 0;
        v47[1] = 0;
      }
      while (v47 != v48);
      v51 = *v31;
      v47 = v31[1];
    }
    v39 = (void **)(v46 + 16);
    *v31 = (void **)v49;
    v136 = v51;
    v137 = (uint64_t)v51;
    v31[1] = (void **)(v46 + 16);
    v138 = (uint64_t)v47;
    v52 = v31[2];
    v31[2] = (void **)&v44[16 * v45];
    v139 = v52;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v136);
  }
  else
  {
    *v38 = v34;
    v38[1] = v35;
    v39 = v38 + 2;
    v120 = 0;
    v121 = 0;
  }
  v31[1] = v39;
  v53 = v127;
  v127 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v115.n128_u64[1];
  if (v115.n128_u64[1])
  {
    v55 = (unint64_t *)(v115.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  *(_OWORD *)v113 = *(_OWORD *)a2;
  v114 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v57 = (uint64_t)v128;
  *(_QWORD *)&v112 = v128;
  if (v128)
  {
    v58 = (_QWORD *)operator new();
    *v58 = &unk_1EA99F8E8;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v57;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v112 + 1) = v58;
  v128 = 0;
  *(_QWORD *)&v111 = __p;
  if (__p)
  {
    v59 = (_QWORD *)operator new();
    v60 = __p;
    *v59 = &unk_1EA99F948;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v60;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v111 + 1) = v59;
  __p = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v133, a3);
  v132 = 0;
  MIL::IROperator::Make((__int128 *)v113, &v112, &v111, (uint64_t)v133, (uint64_t)v131, a4);
  v61 = v132;
  if (v132 == v131)
  {
    v62 = 4;
    v61 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_64;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_64:
  v63 = v134;
  if (v134 == v133)
  {
    v64 = 4;
    v63 = v133;
    goto LABEL_68;
  }
  if (v134)
  {
    v64 = 5;
LABEL_68:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
  v71 = *a4;
  v129[0] = &off_1EA99FBD8;
  v129[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v130 = v129;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v71 + 200))(v71, v129);
  v72 = v130;
  if (v130 == v129)
  {
    v73 = 4;
    v72 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_86;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_86:
  MIL::Validation::TensorDTypeConstraints::Make(&v136);
  v74 = v136;
  std::string::basic_string[abi:ne180100]<0>(v107, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v107, 0, (uint64_t *)&v123);
  v109 = v123;
  if (v123)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = (std::__shared_weak_count_vtbl *)v123;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v110 = v75;
  v123 = 0;
  std::string::basic_string[abi:ne180100]<0>(v105, "T");
  (*((void (**)(void **, void **, void **))*v74 + 3))(v74, &v109, v105);
  if (v106 < 0)
    operator delete(v105[0]);
  v77 = v110;
  if (v110)
  {
    p_shared_owners = (unint64_t *)&v110->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v123;
  v123 = 0;
  if (v80)
    (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  if (v108 < 0)
    operator delete(v107[0]);
  v81 = v136;
  std::string::basic_string[abi:ne180100]<0>(v101, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v101, 0, (uint64_t *)&v123);
  v103 = v123;
  if (v123)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)v123;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v104 = v82;
  v123 = 0;
  std::string::basic_string[abi:ne180100]<0>(v99, "T");
  (*((void (**)(void **, void **, void **))*v81 + 3))(v81, &v103, v99);
  if (v100 < 0)
    operator delete(v99[0]);
  v84 = v104;
  if (v104)
  {
    v85 = (unint64_t *)&v104->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  if (v102 < 0)
    operator delete(v101[0]);
  v88 = *a4;
  v97 = v136;
  if (v136)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v136;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v90;
  }
  else
  {
    v89 = 0;
  }
  v98 = v89;
  v136 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v88 + 56))(v88, &v97);
  v91 = v98;
  if (v98)
  {
    v92 = (unint64_t *)&v98->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v136;
  v136 = 0;
  if (v94)
    (*((void (**)(void **))*v94 + 1))(v94);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v128;
  if (v128)
  {
    v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v128);
    return MEMORY[0x1E0C023A0](v96, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E071B760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,char a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  v64 = *(_QWORD *)(v62 - 112);
  *(_QWORD *)(v62 - 112) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v61;
  *v61 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a54, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v62 - 224), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ElementwiseBinaryLogical::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  void **v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char **v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  void **v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count_vtbl *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  void *v72;
  void **v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  void **v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void **v86;
  uint64_t result;
  uint64_t v88;
  void **v89;
  std::__shared_weak_count *v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95;
  std::__shared_weak_count *v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  __int128 v104;
  void *v105[2];
  uint64_t v106;
  void *__p;
  void *v108;
  _QWORD *v109;
  __n128 v110;
  uint64_t v111;
  char **v112;
  __n128 v113;
  __n128 v114;
  _QWORD *v115;
  void **v116;
  void **v117;
  void **v118;
  char *v119;
  char **v120;
  _QWORD v121[3];
  _QWORD *v122;
  _BYTE v123[24];
  _BYTE *v124;
  _BYTE v125[24];
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v115 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  v116 = v10;
  *v10 = (void *)v9;
  v117 = v10 + 1;
  v118 = v10 + 1;
  v128 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v116);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v128, 1, &v114);
  MIL::IRParameter::Make(&v114, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&__p);
  v11 = __p;
  __p = 0;
  if (v11)
    (*(void (**)(void *))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v114.n128_u64[1];
  if (v114.n128_u64[1])
  {
    v13 = (unint64_t *)(v114.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v15 = v115;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = (void **)operator new(8uLL);
  v116 = v17;
  *v17 = (void *)v16;
  v117 = v17 + 1;
  v118 = v17 + 1;
  v128 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v116);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v128, 1, &v113);
  MIL::IRParameter::Make(&v113, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v15, "y", (uint64_t *)&__p);
  v18 = __p;
  __p = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v113.n128_u64[1];
  if (v113.n128_u64[1])
  {
    v20 = (unint64_t *)(v113.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v112 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  v116 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v112, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v116, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v112, 1uLL);
  v23 = v112;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v108 = v25 + 1;
  v109 = v25 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v127, 1, &v110);
  MIL::IRParameter::Make(&v110, &v111);
  v26 = v111;
  v128 = v111;
  if (v111)
  {
    v27 = (_QWORD *)operator new();
    v28 = v111;
    *v27 = &unk_1EA99F888;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
  }
  else
  {
    v27 = 0;
  }
  v129 = v27;
  v111 = 0;
  v29 = v23[2];
  v30 = v23[1];
  if (v30 >= v29)
  {
    v32 = (v30 - *v23) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v34 = v29 - *v23;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v120 = v23 + 2;
    v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v35);
    v38 = (uint64_t *)&v36[16 * v32];
    *v38 = v26;
    v38[1] = (uint64_t)v27;
    v128 = 0;
    v129 = 0;
    v40 = *v23;
    v39 = v23[1];
    if (v39 == *v23)
    {
      v43 = (void **)v23[1];
      v41 = &v36[16 * v32];
    }
    else
    {
      v41 = &v36[16 * v32];
      do
      {
        v42 = *((_OWORD *)v39 - 1);
        v39 -= 16;
        *((_OWORD *)v41 - 1) = v42;
        v41 -= 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
      }
      while (v39 != v40);
      v43 = (void **)*v23;
      v39 = v23[1];
    }
    v31 = (char *)(v38 + 2);
    *v23 = v41;
    v116 = v43;
    v117 = v43;
    v23[1] = (char *)(v38 + 2);
    v118 = (void **)v39;
    v44 = v23[2];
    v23[2] = &v36[16 * v37];
    v119 = v44;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v116);
  }
  else
  {
    *(_QWORD *)v30 = v26;
    *((_QWORD *)v30 + 1) = v27;
    v31 = v30 + 16;
    v128 = 0;
    v129 = 0;
  }
  v23[1] = v31;
  v45 = v111;
  v111 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v110.n128_u64[1];
  if (v110.n128_u64[1])
  {
    v47 = (unint64_t *)(v110.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v108 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v105 = *(_OWORD *)a2;
  v106 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v49 = (uint64_t)v115;
  *(_QWORD *)&v104 = v115;
  if (v115)
  {
    v50 = (_QWORD *)operator new();
    *v50 = &unk_1EA99F8E8;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v49;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v104 + 1) = v50;
  v115 = 0;
  *(_QWORD *)&v103 = v112;
  if (v112)
  {
    v51 = (_QWORD *)operator new();
    v52 = v112;
    *v51 = &unk_1EA99F948;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v103 + 1) = v51;
  v112 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v125, a3);
  v124 = 0;
  MIL::IROperator::Make((__int128 *)v105, &v104, &v103, (uint64_t)v125, (uint64_t)v123, a4);
  v53 = v124;
  if (v124 == v123)
  {
    v54 = 4;
    v53 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_56;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_56:
  v55 = v126;
  if (v126 == v125)
  {
    v56 = 4;
    v55 = v125;
    goto LABEL_60;
  }
  if (v126)
  {
    v56 = 5;
LABEL_60:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v106) < 0)
    operator delete(v105[0]);
  v63 = *a4;
  v121[0] = &off_1EA99FBD8;
  v121[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v122 = v121;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v63 + 200))(v63, v121);
  v64 = v122;
  if (v122 == v121)
  {
    v65 = 4;
    v64 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_78;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_78:
  MIL::Validation::TensorDTypeConstraints::Make(&v116);
  v66 = v116;
  std::string::basic_string[abi:ne180100]<0>(v99, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v99, 0, (uint64_t *)&__p);
  v101 = __p;
  if (__p)
  {
    v67 = (std::__shared_weak_count *)operator new();
    v68 = (std::__shared_weak_count_vtbl *)__p;
    v67->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v67->__shared_owners_ = 0;
    v67->__shared_weak_owners_ = 0;
    v67[1].__vftable = v68;
  }
  else
  {
    v67 = 0;
  }
  v102 = v67;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v97, "T");
  (*((void (**)(void **, void **, void **))*v66 + 3))(v66, &v101, v97);
  if (v98 < 0)
    operator delete(v97[0]);
  v69 = v102;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = __p;
  __p = 0;
  if (v72)
    (*(void (**)(void *))(*(_QWORD *)v72 + 8))(v72);
  if (v100 < 0)
    operator delete(v99[0]);
  v73 = v116;
  std::string::basic_string[abi:ne180100]<0>(v93, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v93, 0, (uint64_t *)&__p);
  v95 = __p;
  if (__p)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v75 = (std::__shared_weak_count_vtbl *)__p;
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v75;
  }
  else
  {
    v74 = 0;
  }
  v96 = v74;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v91, "T");
  (*((void (**)(void **, void **, void **))*v73 + 3))(v73, &v95, v91);
  if (v92 < 0)
    operator delete(v91[0]);
  v76 = v96;
  if (v96)
  {
    v77 = (unint64_t *)&v96->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = __p;
  __p = 0;
  if (v79)
    (*(void (**)(void *))(*(_QWORD *)v79 + 8))(v79);
  if (v94 < 0)
    operator delete(v93[0]);
  v80 = *a4;
  v89 = v116;
  if (v116)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v116;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v90 = v81;
  v116 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v80 + 56))(v80, &v89);
  v83 = v90;
  if (v90)
  {
    v84 = (unint64_t *)&v90->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v116;
  v116 = 0;
  if (v86)
    (*((void (**)(void **))*v86 + 1))(v86);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v112, 0);
  result = (uint64_t)v115;
  if (v115)
  {
    v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v115);
    return MEMORY[0x1E0C023A0](v88, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E071C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void **a55,__int16 a56,char a57,char a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 232);
  *(_QWORD *)(v59 - 232) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

void sub_1E071C6A0()
{
  JUMPOUT(0x1E071C6A8);
}

uint64_t MIL::Operators::Common::ios15::LogicalAnd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  void *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t result;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  char **v113;
  __n128 v114;
  __n128 v115;
  _QWORD *v116;
  void *__p;
  void *v118;
  char *v119;
  char *v120;
  char **v121;
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v116 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v118 = v8 + 1;
  v119 = (char *)(v8 + 1);
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v131, 1, &v115);
  MIL::IRParameter::Make(&v115, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v108);
  v9 = v108;
  v108 = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v115.n128_u64[1];
  if (v115.n128_u64[1])
  {
    v11 = (unint64_t *)(v115.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v13 = v116;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v118 = v15 + 1;
  v119 = (char *)(v15 + 1);
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v131, 1, &v114);
  MIL::IRParameter::Make(&v114, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&v108);
  v16 = v108;
  v108 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v114.n128_u64[1];
  if (v114.n128_u64[1])
  {
    v18 = (unint64_t *)(v114.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v113 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v113, 1uLL);
  v21 = v113;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v108 = v23;
  *v23 = v22;
  v109 = v23 + 1;
  v110 = v23 + 1;
  v130 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v108);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v130, 1, &v111);
  MIL::IRParameter::Make(&v111, &v112);
  v24 = v112;
  v131 = v112;
  if (v112)
  {
    v25 = (_QWORD *)operator new();
    v26 = v112;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v132 = v25;
  v112 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v121 = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v131 = 0;
    v132 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v118 = v41;
    v21[1] = (char *)(v36 + 2);
    v119 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v120 = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v131 = 0;
    v132 = 0;
  }
  v21[1] = v29;
  v43 = v112;
  v112 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v45 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  *(_OWORD *)v106 = *(_OWORD *)a2;
  v107 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v116;
  *(_QWORD *)&v105 = v116;
  if (v116)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v105 + 1) = v48;
  v116 = 0;
  *(_QWORD *)&v104 = v113;
  if (v113)
  {
    v49 = (_QWORD *)operator new();
    v50 = v113;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v104 + 1) = v49;
  v113 = 0;
  v129 = 0;
  v127 = 0;
  MIL::IROperator::Make((__int128 *)v106, &v105, &v104, (uint64_t)v128, (uint64_t)v126, a3);
  v51 = v127;
  if (v127 == v126)
  {
    v52 = 4;
    v51 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v129;
  if (v129 == v128)
  {
    v54 = 4;
    v53 = v128;
    goto LABEL_60;
  }
  if (v129)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  v61 = *a3;
  v124[0] = &off_1EA99FBD8;
  v124[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 200))(v61, v124);
  v62 = v125;
  if (v125 == v124)
  {
    v63 = 4;
    v62 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_78;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_78:
  v64 = *a3;
  v122[0] = &off_1EA9A00F8;
  v122[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalAnd;
  v123 = v122;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v64 + 216))(v64, v122);
  v65 = v123;
  if (v123 == v122)
  {
    v66 = 4;
    v65 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_83;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_83:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v67 = __p;
  std::string::basic_string[abi:ne180100]<0>(v100, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, (uint64_t *)&v108);
  v102 = v108;
  if (v108)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = (std::__shared_weak_count_vtbl *)v108;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v103 = v68;
  v108 = 0;
  std::string::basic_string[abi:ne180100]<0>(v98, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v67 + 24))(v67, &v102, v98);
  if (v99 < 0)
    operator delete(v98[0]);
  v70 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v108;
  v108 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  if (v101 < 0)
    operator delete(v100[0]);
  v74 = __p;
  std::string::basic_string[abi:ne180100]<0>(v94, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v94, 0, (uint64_t *)&v108);
  v96 = v108;
  if (v108)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = (std::__shared_weak_count_vtbl *)v108;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v97 = v75;
  v108 = 0;
  std::string::basic_string[abi:ne180100]<0>(v92, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v74 + 24))(v74, &v96, v92);
  if (v93 < 0)
    operator delete(v92[0]);
  v77 = v97;
  if (v97)
  {
    v78 = (unint64_t *)&v97->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v108;
  v108 = 0;
  if (v80)
    (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  if (v95 < 0)
    operator delete(v94[0]);
  v81 = *a3;
  v90 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v91 = v82;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 56))(v81, &v90);
  v84 = v91;
  if (v91)
  {
    v85 = (unint64_t *)&v91->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  result = (uint64_t)v116;
  if (v116)
  {
    v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v116);
    return MEMORY[0x1E0C023A0](v89, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E071D088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  uint64_t *v46;
  void *v48;
  uint64_t v49;

  v48 = a46;
  a46 = 0;
  if (v48)
    (*(void (**)(void))(*(_QWORD *)v48 + 8))();
  v49 = *v46;
  *v46 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  _Unwind_Resume(a1);
}

void sub_1E071D354()
{
  JUMPOUT(0x1E071D35CLL);
}

uint64_t MIL::Operators::Common::ios15::LogicalOr::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  void *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t result;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  char **v113;
  __n128 v114;
  __n128 v115;
  _QWORD *v116;
  void *__p;
  void *v118;
  char *v119;
  char *v120;
  char **v121;
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v116 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v118 = v8 + 1;
  v119 = (char *)(v8 + 1);
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v131, 1, &v115);
  MIL::IRParameter::Make(&v115, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v108);
  v9 = v108;
  v108 = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v115.n128_u64[1];
  if (v115.n128_u64[1])
  {
    v11 = (unint64_t *)(v115.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v13 = v116;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v118 = v15 + 1;
  v119 = (char *)(v15 + 1);
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v131, 1, &v114);
  MIL::IRParameter::Make(&v114, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&v108);
  v16 = v108;
  v108 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v114.n128_u64[1];
  if (v114.n128_u64[1])
  {
    v18 = (unint64_t *)(v114.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v113 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v113, 1uLL);
  v21 = v113;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v108 = v23;
  *v23 = v22;
  v109 = v23 + 1;
  v110 = v23 + 1;
  v130 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v108);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v130, 1, &v111);
  MIL::IRParameter::Make(&v111, &v112);
  v24 = v112;
  v131 = v112;
  if (v112)
  {
    v25 = (_QWORD *)operator new();
    v26 = v112;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v132 = v25;
  v112 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v121 = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v131 = 0;
    v132 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v118 = v41;
    v21[1] = (char *)(v36 + 2);
    v119 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v120 = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v131 = 0;
    v132 = 0;
  }
  v21[1] = v29;
  v43 = v112;
  v112 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v45 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  *(_OWORD *)v106 = *(_OWORD *)a2;
  v107 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v116;
  *(_QWORD *)&v105 = v116;
  if (v116)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v105 + 1) = v48;
  v116 = 0;
  *(_QWORD *)&v104 = v113;
  if (v113)
  {
    v49 = (_QWORD *)operator new();
    v50 = v113;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v104 + 1) = v49;
  v113 = 0;
  v129 = 0;
  v127 = 0;
  MIL::IROperator::Make((__int128 *)v106, &v105, &v104, (uint64_t)v128, (uint64_t)v126, a3);
  v51 = v127;
  if (v127 == v126)
  {
    v52 = 4;
    v51 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v129;
  if (v129 == v128)
  {
    v54 = 4;
    v53 = v128;
    goto LABEL_60;
  }
  if (v129)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  v61 = *a3;
  v124[0] = &off_1EA99FBD8;
  v124[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 200))(v61, v124);
  v62 = v125;
  if (v125 == v124)
  {
    v63 = 4;
    v62 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_78;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_78:
  v64 = *a3;
  v122[0] = &off_1EA9A00F8;
  v122[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalOr;
  v123 = v122;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v64 + 216))(v64, v122);
  v65 = v123;
  if (v123 == v122)
  {
    v66 = 4;
    v65 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_83;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_83:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v67 = __p;
  std::string::basic_string[abi:ne180100]<0>(v100, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, (uint64_t *)&v108);
  v102 = v108;
  if (v108)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = (std::__shared_weak_count_vtbl *)v108;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v103 = v68;
  v108 = 0;
  std::string::basic_string[abi:ne180100]<0>(v98, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v67 + 24))(v67, &v102, v98);
  if (v99 < 0)
    operator delete(v98[0]);
  v70 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v108;
  v108 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  if (v101 < 0)
    operator delete(v100[0]);
  v74 = __p;
  std::string::basic_string[abi:ne180100]<0>(v94, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v94, 0, (uint64_t *)&v108);
  v96 = v108;
  if (v108)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = (std::__shared_weak_count_vtbl *)v108;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v97 = v75;
  v108 = 0;
  std::string::basic_string[abi:ne180100]<0>(v92, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v74 + 24))(v74, &v96, v92);
  if (v93 < 0)
    operator delete(v92[0]);
  v77 = v97;
  if (v97)
  {
    v78 = (unint64_t *)&v97->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v108;
  v108 = 0;
  if (v80)
    (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  if (v95 < 0)
    operator delete(v94[0]);
  v81 = *a3;
  v90 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v91 = v82;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 56))(v81, &v90);
  v84 = v91;
  if (v91)
  {
    v85 = (unint64_t *)&v91->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  result = (uint64_t)v116;
  if (v116)
  {
    v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v116);
    return MEMORY[0x1E0C023A0](v89, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E071DD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  uint64_t *v46;
  void *v48;
  uint64_t v49;

  v48 = a46;
  a46 = 0;
  if (v48)
    (*(void (**)(void))(*(_QWORD *)v48 + 8))();
  v49 = *v46;
  *v46 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  _Unwind_Resume(a1);
}

void sub_1E071E008()
{
  JUMPOUT(0x1E071E010);
}

uint64_t MIL::Operators::Common::ios15::LogicalXor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  void *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  uint64_t result;
  uint64_t v89;
  void *v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  char **v113;
  __n128 v114;
  __n128 v115;
  _QWORD *v116;
  void *__p;
  void *v118;
  char *v119;
  char *v120;
  char **v121;
  _QWORD v122[3];
  _QWORD *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v116 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v118 = v8 + 1;
  v119 = (char *)(v8 + 1);
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v131, 1, &v115);
  MIL::IRParameter::Make(&v115, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v108);
  v9 = v108;
  v108 = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v115.n128_u64[1];
  if (v115.n128_u64[1])
  {
    v11 = (unint64_t *)(v115.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v13 = v116;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v118 = v15 + 1;
  v119 = (char *)(v15 + 1);
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v131, 1, &v114);
  MIL::IRParameter::Make(&v114, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&v108);
  v16 = v108;
  v108 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v114.n128_u64[1];
  if (v114.n128_u64[1])
  {
    v18 = (unint64_t *)(v114.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v118 = __p;
    operator delete(__p);
  }
  v113 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v113, 1uLL);
  v21 = v113;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v108 = v23;
  *v23 = v22;
  v109 = v23 + 1;
  v110 = v23 + 1;
  v130 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v108);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v130, 1, &v111);
  MIL::IRParameter::Make(&v111, &v112);
  v24 = v112;
  v131 = v112;
  if (v112)
  {
    v25 = (_QWORD *)operator new();
    v26 = v112;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v132 = v25;
  v112 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v121 = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v131 = 0;
    v132 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v118 = v41;
    v21[1] = (char *)(v36 + 2);
    v119 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v120 = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v131 = 0;
    v132 = 0;
  }
  v21[1] = v29;
  v43 = v112;
  v112 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v45 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  *(_OWORD *)v106 = *(_OWORD *)a2;
  v107 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v116;
  *(_QWORD *)&v105 = v116;
  if (v116)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v105 + 1) = v48;
  v116 = 0;
  *(_QWORD *)&v104 = v113;
  if (v113)
  {
    v49 = (_QWORD *)operator new();
    v50 = v113;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v104 + 1) = v49;
  v113 = 0;
  v129 = 0;
  v127 = 0;
  MIL::IROperator::Make((__int128 *)v106, &v105, &v104, (uint64_t)v128, (uint64_t)v126, a3);
  v51 = v127;
  if (v127 == v126)
  {
    v52 = 4;
    v51 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v129;
  if (v129 == v128)
  {
    v54 = 4;
    v53 = v128;
    goto LABEL_60;
  }
  if (v129)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  v61 = *a3;
  v124[0] = &off_1EA99FBD8;
  v124[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 200))(v61, v124);
  v62 = v125;
  if (v125 == v124)
  {
    v63 = 4;
    v62 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_78;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_78:
  v64 = *a3;
  v122[0] = &off_1EA9A00F8;
  v122[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalXor;
  v123 = v122;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v64 + 216))(v64, v122);
  v65 = v123;
  if (v123 == v122)
  {
    v66 = 4;
    v65 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_83;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_83:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v67 = __p;
  std::string::basic_string[abi:ne180100]<0>(v100, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, (uint64_t *)&v108);
  v102 = v108;
  if (v108)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v69 = (std::__shared_weak_count_vtbl *)v108;
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v69;
  }
  else
  {
    v68 = 0;
  }
  v103 = v68;
  v108 = 0;
  std::string::basic_string[abi:ne180100]<0>(v98, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v67 + 24))(v67, &v102, v98);
  if (v99 < 0)
    operator delete(v98[0]);
  v70 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v108;
  v108 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  if (v101 < 0)
    operator delete(v100[0]);
  v74 = __p;
  std::string::basic_string[abi:ne180100]<0>(v94, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v94, 0, (uint64_t *)&v108);
  v96 = v108;
  if (v108)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = (std::__shared_weak_count_vtbl *)v108;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v97 = v75;
  v108 = 0;
  std::string::basic_string[abi:ne180100]<0>(v92, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v74 + 24))(v74, &v96, v92);
  if (v93 < 0)
    operator delete(v92[0]);
  v77 = v97;
  if (v97)
  {
    v78 = (unint64_t *)&v97->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v108;
  v108 = 0;
  if (v80)
    (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  if (v95 < 0)
    operator delete(v94[0]);
  v81 = *a3;
  v90 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v91 = v82;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 56))(v81, &v90);
  v84 = v91;
  if (v91)
  {
    v85 = (unint64_t *)&v91->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  result = (uint64_t)v116;
  if (v116)
  {
    v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v116);
    return MEMORY[0x1E0C023A0](v89, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E071E9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46)
{
  uint64_t *v46;
  void *v48;
  uint64_t v49;

  v48 = a46;
  a46 = 0;
  if (v48)
    (*(void (**)(void))(*(_QWORD *)v48 + 8))();
  v49 = *v46;
  *v46 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  _Unwind_Resume(a1);
}

void sub_1E071ECBC()
{
  JUMPOUT(0x1E071ECC4);
}

uint64_t MIL::Operators::Common::ios15::Equal::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  uint64_t result;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  uint64_t v115;
  __n128 v116;
  __n128 v117;
  void *__p;
  void *v119;
  _QWORD *v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  __n128 v127;
  void *v128;
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v129 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v124 = v8;
  *v8 = v7;
  v125 = v8 + 1;
  v126 = v8 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v121 = v10;
  *v10 = v9;
  v122 = v10 + 1;
  v123 = v10 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v119 = v12 + 1;
  v120 = v12 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v128);
  v13 = v128;
  v128 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v15 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  v17 = v129;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v124 = v19;
  *v19 = v18;
  v125 = v19 + 1;
  v126 = v19 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v121 = v21;
  *v21 = v20;
  v122 = v21 + 1;
  v123 = v21 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v119 = v23 + 1;
  v120 = v23 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v117);
  MIL::IRParameter::Make(&v117, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v128);
  v24 = v128;
  v128 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v117.n128_u64[1];
  if (v117.n128_u64[1])
  {
    v26 = (unint64_t *)(v117.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v139 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v139, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v124 = v31;
  *v31 = v30;
  v125 = v31 + 1;
  v126 = v31 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v138, 1, &v116);
  MIL::IRParameter::Make(&v116, (uint64_t *)&v128);
  v32 = v128;
  v121 = v128;
  if (v128)
  {
    v33 = (_QWORD *)operator new();
    v34 = v128;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v122 = v33;
  v128 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v143 = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v121 = 0;
    v122 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v139 = v49;
    v140 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v141 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v142 = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v139);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v121 = 0;
    v122 = 0;
  }
  v29[1] = v37;
  v51 = v128;
  v128 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v116.n128_u64[1];
  if (v116.n128_u64[1])
  {
    v53 = (unint64_t *)(v116.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  *(_OWORD *)v114 = *(_OWORD *)a2;
  v115 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v129;
  *(_QWORD *)&v113 = v129;
  if (v129)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v113 + 1) = v56;
  v129 = 0;
  *(_QWORD *)&v112 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v112 + 1) = v57;
  __p = 0;
  v137 = 0;
  v135 = 0;
  MIL::IROperator::Make((__int128 *)v114, &v113, &v112, (uint64_t)v136, (uint64_t)v134, a3);
  v59 = v135;
  if (v135 == v134)
  {
    v60 = 4;
    v59 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v137;
  if (v137 == v136)
  {
    v62 = 4;
    v61 = v136;
    goto LABEL_68;
  }
  if (v137)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
  v69 = *a3;
  v132[0] = &off_1EA99FBD8;
  v132[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v133 = v132;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 200))(v69, v132);
  v70 = v133;
  if (v133 == v132)
  {
    v71 = 4;
    v70 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_86;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_86:
  v72 = *a3;
  v130[0] = &off_1EA9A00F8;
  v130[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceEqual;
  v131 = v130;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 216))(v72, v130);
  v73 = v131;
  if (v131 == v130)
  {
    v74 = 4;
    v73 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_91;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v139);
  v75 = v139;
  std::string::basic_string[abi:ne180100]<0>(v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&v124);
  v110 = v124;
  if (v124)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)v124;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v111 = v76;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v75 + 3))(v75, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v78 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v124;
  v124 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v109 < 0)
    operator delete(v108[0]);
  v82 = v139;
  std::string::basic_string[abi:ne180100]<0>(v102, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v102, 0, (uint64_t *)&v124);
  v104 = v124;
  if (v124)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)v124;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v105 = v83;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v100, "T");
  (*((void (**)(void **, void **, void **))*v82 + 3))(v82, &v104, v100);
  if (v101 < 0)
    operator delete(v100[0]);
  v85 = v105;
  if (v105)
  {
    v86 = (unint64_t *)&v105->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v103 < 0)
    operator delete(v102[0]);
  v89 = *a3;
  v98 = v139;
  if (v139)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v139;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v99 = v90;
  v139 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v89 + 56))(v89, &v98);
  v92 = v99;
  if (v99)
  {
    v93 = (unint64_t *)&v99->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v139;
  v139 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v129;
  if (v129)
  {
    v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v129);
    return MEMORY[0x1E0C023A0](v97, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E071F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v42 = *(_QWORD *)(v40 - 112);
  *(_QWORD *)(v40 - 112) = 0;
  if (v42)
    (*(void (**)(void))(*(_QWORD *)v42 + 8))();
  v43 = *v39;
  *v39 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v40 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Greater::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  uint64_t result;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  uint64_t v115;
  __n128 v116;
  __n128 v117;
  void *__p;
  void *v119;
  _QWORD *v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  __n128 v127;
  void *v128;
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v129 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v124 = v8;
  *v8 = v7;
  v125 = v8 + 1;
  v126 = v8 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v121 = v10;
  *v10 = v9;
  v122 = v10 + 1;
  v123 = v10 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v119 = v12 + 1;
  v120 = v12 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v128);
  v13 = v128;
  v128 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v15 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  v17 = v129;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v124 = v19;
  *v19 = v18;
  v125 = v19 + 1;
  v126 = v19 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v121 = v21;
  *v21 = v20;
  v122 = v21 + 1;
  v123 = v21 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v119 = v23 + 1;
  v120 = v23 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v117);
  MIL::IRParameter::Make(&v117, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v128);
  v24 = v128;
  v128 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v117.n128_u64[1];
  if (v117.n128_u64[1])
  {
    v26 = (unint64_t *)(v117.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v139 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v139, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v124 = v31;
  *v31 = v30;
  v125 = v31 + 1;
  v126 = v31 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v138, 1, &v116);
  MIL::IRParameter::Make(&v116, (uint64_t *)&v128);
  v32 = v128;
  v121 = v128;
  if (v128)
  {
    v33 = (_QWORD *)operator new();
    v34 = v128;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v122 = v33;
  v128 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v143 = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v121 = 0;
    v122 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v139 = v49;
    v140 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v141 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v142 = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v139);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v121 = 0;
    v122 = 0;
  }
  v29[1] = v37;
  v51 = v128;
  v128 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v116.n128_u64[1];
  if (v116.n128_u64[1])
  {
    v53 = (unint64_t *)(v116.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  *(_OWORD *)v114 = *(_OWORD *)a2;
  v115 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v129;
  *(_QWORD *)&v113 = v129;
  if (v129)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v113 + 1) = v56;
  v129 = 0;
  *(_QWORD *)&v112 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v112 + 1) = v57;
  __p = 0;
  v137 = 0;
  v135 = 0;
  MIL::IROperator::Make((__int128 *)v114, &v113, &v112, (uint64_t)v136, (uint64_t)v134, a3);
  v59 = v135;
  if (v135 == v134)
  {
    v60 = 4;
    v59 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v137;
  if (v137 == v136)
  {
    v62 = 4;
    v61 = v136;
    goto LABEL_68;
  }
  if (v137)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
  v69 = *a3;
  v132[0] = &off_1EA99FBD8;
  v132[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v133 = v132;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 200))(v69, v132);
  v70 = v133;
  if (v133 == v132)
  {
    v71 = 4;
    v70 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_86;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_86:
  v72 = *a3;
  v130[0] = &off_1EA9A00F8;
  v130[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreater;
  v131 = v130;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 216))(v72, v130);
  v73 = v131;
  if (v131 == v130)
  {
    v74 = 4;
    v73 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_91;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v139);
  v75 = v139;
  std::string::basic_string[abi:ne180100]<0>(v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&v124);
  v110 = v124;
  if (v124)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)v124;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v111 = v76;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v75 + 3))(v75, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v78 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v124;
  v124 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v109 < 0)
    operator delete(v108[0]);
  v82 = v139;
  std::string::basic_string[abi:ne180100]<0>(v102, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v102, 0, (uint64_t *)&v124);
  v104 = v124;
  if (v124)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)v124;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v105 = v83;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v100, "T");
  (*((void (**)(void **, void **, void **))*v82 + 3))(v82, &v104, v100);
  if (v101 < 0)
    operator delete(v100[0]);
  v85 = v105;
  if (v105)
  {
    v86 = (unint64_t *)&v105->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v103 < 0)
    operator delete(v102[0]);
  v89 = *a3;
  v98 = v139;
  if (v139)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v139;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v99 = v90;
  v139 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v89 + 56))(v89, &v98);
  v92 = v99;
  if (v99)
  {
    v93 = (unint64_t *)&v99->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v139;
  v139 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v129;
  if (v129)
  {
    v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v129);
    return MEMORY[0x1E0C023A0](v97, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07205F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v42 = *(_QWORD *)(v40 - 112);
  *(_QWORD *)(v40 - 112) = 0;
  if (v42)
    (*(void (**)(void))(*(_QWORD *)v42 + 8))();
  v43 = *v39;
  *v39 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v40 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::GreaterEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  uint64_t result;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  uint64_t v115;
  __n128 v116;
  __n128 v117;
  void *__p;
  void *v119;
  _QWORD *v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  __n128 v127;
  void *v128;
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v129 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v124 = v8;
  *v8 = v7;
  v125 = v8 + 1;
  v126 = v8 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v121 = v10;
  *v10 = v9;
  v122 = v10 + 1;
  v123 = v10 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v119 = v12 + 1;
  v120 = v12 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v128);
  v13 = v128;
  v128 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v15 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  v17 = v129;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v124 = v19;
  *v19 = v18;
  v125 = v19 + 1;
  v126 = v19 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v121 = v21;
  *v21 = v20;
  v122 = v21 + 1;
  v123 = v21 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v119 = v23 + 1;
  v120 = v23 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v117);
  MIL::IRParameter::Make(&v117, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v128);
  v24 = v128;
  v128 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v117.n128_u64[1];
  if (v117.n128_u64[1])
  {
    v26 = (unint64_t *)(v117.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v139 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v139, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v124 = v31;
  *v31 = v30;
  v125 = v31 + 1;
  v126 = v31 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v138, 1, &v116);
  MIL::IRParameter::Make(&v116, (uint64_t *)&v128);
  v32 = v128;
  v121 = v128;
  if (v128)
  {
    v33 = (_QWORD *)operator new();
    v34 = v128;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v122 = v33;
  v128 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v143 = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v121 = 0;
    v122 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v139 = v49;
    v140 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v141 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v142 = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v139);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v121 = 0;
    v122 = 0;
  }
  v29[1] = v37;
  v51 = v128;
  v128 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v116.n128_u64[1];
  if (v116.n128_u64[1])
  {
    v53 = (unint64_t *)(v116.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  *(_OWORD *)v114 = *(_OWORD *)a2;
  v115 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v129;
  *(_QWORD *)&v113 = v129;
  if (v129)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v113 + 1) = v56;
  v129 = 0;
  *(_QWORD *)&v112 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v112 + 1) = v57;
  __p = 0;
  v137 = 0;
  v135 = 0;
  MIL::IROperator::Make((__int128 *)v114, &v113, &v112, (uint64_t)v136, (uint64_t)v134, a3);
  v59 = v135;
  if (v135 == v134)
  {
    v60 = 4;
    v59 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v137;
  if (v137 == v136)
  {
    v62 = 4;
    v61 = v136;
    goto LABEL_68;
  }
  if (v137)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
  v69 = *a3;
  v132[0] = &off_1EA99FBD8;
  v132[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v133 = v132;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 200))(v69, v132);
  v70 = v133;
  if (v133 == v132)
  {
    v71 = 4;
    v70 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_86;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_86:
  v72 = *a3;
  v130[0] = &off_1EA9A00F8;
  v130[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreaterEqual;
  v131 = v130;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 216))(v72, v130);
  v73 = v131;
  if (v131 == v130)
  {
    v74 = 4;
    v73 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_91;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v139);
  v75 = v139;
  std::string::basic_string[abi:ne180100]<0>(v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&v124);
  v110 = v124;
  if (v124)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)v124;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v111 = v76;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v75 + 3))(v75, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v78 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v124;
  v124 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v109 < 0)
    operator delete(v108[0]);
  v82 = v139;
  std::string::basic_string[abi:ne180100]<0>(v102, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v102, 0, (uint64_t *)&v124);
  v104 = v124;
  if (v124)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)v124;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v105 = v83;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v100, "T");
  (*((void (**)(void **, void **, void **))*v82 + 3))(v82, &v104, v100);
  if (v101 < 0)
    operator delete(v100[0]);
  v85 = v105;
  if (v105)
  {
    v86 = (unint64_t *)&v105->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v103 < 0)
    operator delete(v102[0]);
  v89 = *a3;
  v98 = v139;
  if (v139)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v139;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v99 = v90;
  v139 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v89 + 56))(v89, &v98);
  v92 = v99;
  if (v99)
  {
    v93 = (unint64_t *)&v99->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v139;
  v139 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v129;
  if (v129)
  {
    v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v129);
    return MEMORY[0x1E0C023A0](v97, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E072141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v42 = *(_QWORD *)(v40 - 112);
  *(_QWORD *)(v40 - 112) = 0;
  if (v42)
    (*(void (**)(void))(*(_QWORD *)v42 + 8))();
  v43 = *v39;
  *v39 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v40 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Less::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  uint64_t result;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  uint64_t v115;
  __n128 v116;
  __n128 v117;
  void *__p;
  void *v119;
  _QWORD *v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  __n128 v127;
  void *v128;
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v129 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v124 = v8;
  *v8 = v7;
  v125 = v8 + 1;
  v126 = v8 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v121 = v10;
  *v10 = v9;
  v122 = v10 + 1;
  v123 = v10 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v119 = v12 + 1;
  v120 = v12 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v128);
  v13 = v128;
  v128 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v15 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  v17 = v129;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v124 = v19;
  *v19 = v18;
  v125 = v19 + 1;
  v126 = v19 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v121 = v21;
  *v21 = v20;
  v122 = v21 + 1;
  v123 = v21 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v119 = v23 + 1;
  v120 = v23 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v117);
  MIL::IRParameter::Make(&v117, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v128);
  v24 = v128;
  v128 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v117.n128_u64[1];
  if (v117.n128_u64[1])
  {
    v26 = (unint64_t *)(v117.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v139 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v139, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v124 = v31;
  *v31 = v30;
  v125 = v31 + 1;
  v126 = v31 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v138, 1, &v116);
  MIL::IRParameter::Make(&v116, (uint64_t *)&v128);
  v32 = v128;
  v121 = v128;
  if (v128)
  {
    v33 = (_QWORD *)operator new();
    v34 = v128;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v122 = v33;
  v128 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v143 = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v121 = 0;
    v122 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v139 = v49;
    v140 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v141 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v142 = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v139);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v121 = 0;
    v122 = 0;
  }
  v29[1] = v37;
  v51 = v128;
  v128 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v116.n128_u64[1];
  if (v116.n128_u64[1])
  {
    v53 = (unint64_t *)(v116.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  *(_OWORD *)v114 = *(_OWORD *)a2;
  v115 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v129;
  *(_QWORD *)&v113 = v129;
  if (v129)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v113 + 1) = v56;
  v129 = 0;
  *(_QWORD *)&v112 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v112 + 1) = v57;
  __p = 0;
  v137 = 0;
  v135 = 0;
  MIL::IROperator::Make((__int128 *)v114, &v113, &v112, (uint64_t)v136, (uint64_t)v134, a3);
  v59 = v135;
  if (v135 == v134)
  {
    v60 = 4;
    v59 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v137;
  if (v137 == v136)
  {
    v62 = 4;
    v61 = v136;
    goto LABEL_68;
  }
  if (v137)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
  v69 = *a3;
  v132[0] = &off_1EA99FBD8;
  v132[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v133 = v132;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 200))(v69, v132);
  v70 = v133;
  if (v133 == v132)
  {
    v71 = 4;
    v70 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_86;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_86:
  v72 = *a3;
  v130[0] = &off_1EA9A00F8;
  v130[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLess;
  v131 = v130;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 216))(v72, v130);
  v73 = v131;
  if (v131 == v130)
  {
    v74 = 4;
    v73 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_91;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v139);
  v75 = v139;
  std::string::basic_string[abi:ne180100]<0>(v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&v124);
  v110 = v124;
  if (v124)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)v124;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v111 = v76;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v75 + 3))(v75, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v78 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v124;
  v124 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v109 < 0)
    operator delete(v108[0]);
  v82 = v139;
  std::string::basic_string[abi:ne180100]<0>(v102, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v102, 0, (uint64_t *)&v124);
  v104 = v124;
  if (v124)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)v124;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v105 = v83;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v100, "T");
  (*((void (**)(void **, void **, void **))*v82 + 3))(v82, &v104, v100);
  if (v101 < 0)
    operator delete(v100[0]);
  v85 = v105;
  if (v105)
  {
    v86 = (unint64_t *)&v105->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v103 < 0)
    operator delete(v102[0]);
  v89 = *a3;
  v98 = v139;
  if (v139)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v139;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v99 = v90;
  v139 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v89 + 56))(v89, &v98);
  v92 = v99;
  if (v99)
  {
    v93 = (unint64_t *)&v99->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v139;
  v139 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v129;
  if (v129)
  {
    v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v129);
    return MEMORY[0x1E0C023A0](v97, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0722248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v42 = *(_QWORD *)(v40 - 112);
  *(_QWORD *)(v40 - 112) = 0;
  if (v42)
    (*(void (**)(void))(*(_QWORD *)v42 + 8))();
  v43 = *v39;
  *v39 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v40 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::LessEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  uint64_t result;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  uint64_t v115;
  __n128 v116;
  __n128 v117;
  void *__p;
  void *v119;
  _QWORD *v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  __n128 v127;
  void *v128;
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v129 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v124 = v8;
  *v8 = v7;
  v125 = v8 + 1;
  v126 = v8 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v121 = v10;
  *v10 = v9;
  v122 = v10 + 1;
  v123 = v10 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v119 = v12 + 1;
  v120 = v12 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v128);
  v13 = v128;
  v128 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v15 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  v17 = v129;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v124 = v19;
  *v19 = v18;
  v125 = v19 + 1;
  v126 = v19 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v121 = v21;
  *v21 = v20;
  v122 = v21 + 1;
  v123 = v21 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v119 = v23 + 1;
  v120 = v23 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v117);
  MIL::IRParameter::Make(&v117, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v128);
  v24 = v128;
  v128 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v117.n128_u64[1];
  if (v117.n128_u64[1])
  {
    v26 = (unint64_t *)(v117.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v139 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v139, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v124 = v31;
  *v31 = v30;
  v125 = v31 + 1;
  v126 = v31 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v138, 1, &v116);
  MIL::IRParameter::Make(&v116, (uint64_t *)&v128);
  v32 = v128;
  v121 = v128;
  if (v128)
  {
    v33 = (_QWORD *)operator new();
    v34 = v128;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v122 = v33;
  v128 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v143 = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v121 = 0;
    v122 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v139 = v49;
    v140 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v141 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v142 = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v139);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v121 = 0;
    v122 = 0;
  }
  v29[1] = v37;
  v51 = v128;
  v128 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v116.n128_u64[1];
  if (v116.n128_u64[1])
  {
    v53 = (unint64_t *)(v116.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  *(_OWORD *)v114 = *(_OWORD *)a2;
  v115 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v129;
  *(_QWORD *)&v113 = v129;
  if (v129)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v113 + 1) = v56;
  v129 = 0;
  *(_QWORD *)&v112 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v112 + 1) = v57;
  __p = 0;
  v137 = 0;
  v135 = 0;
  MIL::IROperator::Make((__int128 *)v114, &v113, &v112, (uint64_t)v136, (uint64_t)v134, a3);
  v59 = v135;
  if (v135 == v134)
  {
    v60 = 4;
    v59 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v137;
  if (v137 == v136)
  {
    v62 = 4;
    v61 = v136;
    goto LABEL_68;
  }
  if (v137)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
  v69 = *a3;
  v132[0] = &off_1EA99FBD8;
  v132[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v133 = v132;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 200))(v69, v132);
  v70 = v133;
  if (v133 == v132)
  {
    v71 = 4;
    v70 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_86;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_86:
  v72 = *a3;
  v130[0] = &off_1EA9A00F8;
  v130[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLessEqual;
  v131 = v130;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 216))(v72, v130);
  v73 = v131;
  if (v131 == v130)
  {
    v74 = 4;
    v73 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_91;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v139);
  v75 = v139;
  std::string::basic_string[abi:ne180100]<0>(v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&v124);
  v110 = v124;
  if (v124)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)v124;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v111 = v76;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v75 + 3))(v75, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v78 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v124;
  v124 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v109 < 0)
    operator delete(v108[0]);
  v82 = v139;
  std::string::basic_string[abi:ne180100]<0>(v102, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v102, 0, (uint64_t *)&v124);
  v104 = v124;
  if (v124)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)v124;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v105 = v83;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v100, "T");
  (*((void (**)(void **, void **, void **))*v82 + 3))(v82, &v104, v100);
  if (v101 < 0)
    operator delete(v100[0]);
  v85 = v105;
  if (v105)
  {
    v86 = (unint64_t *)&v105->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v103 < 0)
    operator delete(v102[0]);
  v89 = *a3;
  v98 = v139;
  if (v139)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v139;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v99 = v90;
  v139 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v89 + 56))(v89, &v98);
  v92 = v99;
  if (v99)
  {
    v93 = (unint64_t *)&v99->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v139;
  v139 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v129;
  if (v129)
  {
    v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v129);
    return MEMORY[0x1E0C023A0](v97, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0723074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v42 = *(_QWORD *)(v40 - 112);
  *(_QWORD *)(v40 - 112) = 0;
  if (v42)
    (*(void (**)(void))(*(_QWORD *)v42 + 8))();
  v43 = *v39;
  *v39 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v40 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::NotEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  uint64_t result;
  uint64_t v97;
  void **v98;
  std::__shared_weak_count *v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  uint64_t v115;
  __n128 v116;
  __n128 v117;
  void *__p;
  void *v119;
  _QWORD *v120;
  void *v121;
  void *v122;
  _QWORD *v123;
  void *v124;
  void *v125;
  _QWORD *v126;
  __n128 v127;
  void *v128;
  _QWORD *v129;
  _QWORD v130[3];
  _QWORD *v131;
  _QWORD v132[3];
  _QWORD *v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  void **v142;
  _QWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v129 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v124 = v8;
  *v8 = v7;
  v125 = v8 + 1;
  v126 = v8 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v121 = v10;
  *v10 = v9;
  v122 = v10 + 1;
  v123 = v10 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v119 = v12 + 1;
  v120 = v12 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v128);
  v13 = v128;
  v128 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v15 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  v17 = v129;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v124 = v19;
  *v19 = v18;
  v125 = v19 + 1;
  v126 = v19 + 1;
  v139 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v124);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v121 = v21;
  *v21 = v20;
  v122 = v21 + 1;
  v123 = v21 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v121);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v119 = v23 + 1;
  v120 = v23 + 1;
  v141 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 3, &v117);
  MIL::IRParameter::Make(&v117, (uint64_t *)&v128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v128);
  v24 = v128;
  v128 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v117.n128_u64[1];
  if (v117.n128_u64[1])
  {
    v26 = (unint64_t *)(v117.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v119 = __p;
    operator delete(__p);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v139 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v139, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v124 = v31;
  *v31 = v30;
  v125 = v31 + 1;
  v126 = v31 + 1;
  v138 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v138, 1, &v116);
  MIL::IRParameter::Make(&v116, (uint64_t *)&v128);
  v32 = v128;
  v121 = v128;
  if (v128)
  {
    v33 = (_QWORD *)operator new();
    v34 = v128;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v122 = v33;
  v128 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v143 = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v121 = 0;
    v122 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v139 = v49;
    v140 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v141 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v142 = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v139);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v121 = 0;
    v122 = 0;
  }
  v29[1] = v37;
  v51 = v128;
  v128 = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v116.n128_u64[1];
  if (v116.n128_u64[1])
  {
    v53 = (unint64_t *)(v116.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  *(_OWORD *)v114 = *(_OWORD *)a2;
  v115 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v129;
  *(_QWORD *)&v113 = v129;
  if (v129)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v113 + 1) = v56;
  v129 = 0;
  *(_QWORD *)&v112 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v112 + 1) = v57;
  __p = 0;
  v137 = 0;
  v135 = 0;
  MIL::IROperator::Make((__int128 *)v114, &v113, &v112, (uint64_t)v136, (uint64_t)v134, a3);
  v59 = v135;
  if (v135 == v134)
  {
    v60 = 4;
    v59 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v137;
  if (v137 == v136)
  {
    v62 = 4;
    v61 = v136;
    goto LABEL_68;
  }
  if (v137)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
  v69 = *a3;
  v132[0] = &off_1EA99FBD8;
  v132[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v133 = v132;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 200))(v69, v132);
  v70 = v133;
  if (v133 == v132)
  {
    v71 = 4;
    v70 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_86;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_86:
  v72 = *a3;
  v130[0] = &off_1EA9A00F8;
  v130[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceNotEqual;
  v131 = v130;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 216))(v72, v130);
  v73 = v131;
  if (v131 == v130)
  {
    v74 = 4;
    v73 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_91;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v139);
  v75 = v139;
  std::string::basic_string[abi:ne180100]<0>(v108, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&v124);
  v110 = v124;
  if (v124)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)v124;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v111 = v76;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v75 + 3))(v75, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v78 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v124;
  v124 = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v109 < 0)
    operator delete(v108[0]);
  v82 = v139;
  std::string::basic_string[abi:ne180100]<0>(v102, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v102, 0, (uint64_t *)&v124);
  v104 = v124;
  if (v124)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)v124;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v105 = v83;
  v124 = 0;
  std::string::basic_string[abi:ne180100]<0>(v100, "T");
  (*((void (**)(void **, void **, void **))*v82 + 3))(v82, &v104, v100);
  if (v101 < 0)
    operator delete(v100[0]);
  v85 = v105;
  if (v105)
  {
    v86 = (unint64_t *)&v105->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v103 < 0)
    operator delete(v102[0]);
  v89 = *a3;
  v98 = v139;
  if (v139)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v139;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v99 = v90;
  v139 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v89 + 56))(v89, &v98);
  v92 = v99;
  if (v99)
  {
    v93 = (unint64_t *)&v99->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v139;
  v139 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v129;
  if (v129)
  {
    v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v129);
    return MEMORY[0x1E0C023A0](v97, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0723EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v42 = *(_QWORD *)(v40 - 112);
  *(_QWORD *)(v40 - 112) = 0;
  if (v42)
    (*(void (**)(void))(*(_QWORD *)v42 + 8))();
  v43 = *v39;
  *v39 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a39, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v40 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::FloorDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloorDiv;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0724EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Maximum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMaximum;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0726034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Minimum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMinimum;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0727188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Mul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMul;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07282DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Pow::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferencePow;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0729430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::RealDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRealDiv;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E072A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Sub::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSub;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E072B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Mod::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t i;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::string *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::string *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t result;
  uint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  std::string *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::string *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124[2];
  char v125;
  std::string *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  __int128 v129;
  void *v130[2];
  uint64_t v131;
  void *v132;
  void *v133;
  _QWORD *v134;
  __n128 v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char **v139;
  __n128 v140;
  void *__p;
  void *v142;
  _QWORD *v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _QWORD v149[3];
  _QWORD *v150;
  __int128 v151;
  uint64_t v152;
  _QWORD v153[3];
  __int128 v154;
  __int128 *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  std::string *v160;
  std::string *v161;
  _QWORD v162[2];

  v162[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v148 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v161 = (std::string *)((char *)v8 + 8);
  v162[0] = (char *)v8 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v144 = v10;
  *v10 = v9;
  v145 = v10 + 1;
  v146 = v10 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v142 = v12 + 1;
  v143 = v12 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v132);
  v13 = v132;
  v132 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v15 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v17 = v148;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  v160 = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v161 = (std::string *)((char *)v19 + 8);
  v162[0] = (char *)v19 + 8;
  *(_QWORD *)&v151 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v144 = v21;
  *v21 = v20;
  v145 = v21 + 1;
  v146 = v21 + 1;
  *((_QWORD *)&v151 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v144);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v142 = v23 + 1;
  v143 = v23 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&v132);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v132);
  v24 = v132;
  v132 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v26 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  v139 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v151 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v139, 1uLL);
  v29 = v139;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  v144 = v31;
  *v31 = v30;
  v145 = v31 + 1;
  v146 = v31 + 1;
  v160 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v144);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v142 = v33 + 1;
  v143 = v33 + 1;
  v161 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v132 = v35;
  *v35 = v34;
  v133 = v35 + 1;
  v134 = v35 + 1;
  v162[0] = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v132);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v135);
  MIL::IRParameter::Make(&v135, &v136);
  v36 = v136;
  v137 = v136;
  if (v136)
  {
    v37 = (_QWORD *)operator new();
    v38 = v136;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v138 = v37;
  v136 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v153[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v137 = 0;
    v138 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v151 = v53;
    *((_QWORD *)&v151 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v152 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v153[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v151);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v137 = 0;
    v138 = 0;
  }
  v29[1] = v41;
  v55 = v136;
  v136 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v57 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (__p)
  {
    v142 = __p;
    operator delete(__p);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  *(_OWORD *)v130 = *(_OWORD *)a2;
  v131 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v148;
  *(_QWORD *)&v129 = v148;
  if (v148)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v129 + 1) = v60;
  v148 = 0;
  *(_QWORD *)&v128 = v139;
  if (v139)
  {
    v61 = (_QWORD *)operator new();
    v62 = v139;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v128 + 1) = v61;
  v139 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v130, &v129, &v128, (uint64_t)v158, (uint64_t)v156, a3);
  v63 = v157;
  if (v157 == v156)
  {
    v64 = 4;
    v63 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v159;
  if (v159 == v158)
  {
    v66 = 4;
    v65 = v158;
    goto LABEL_72;
  }
  if (v159)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
  if (*((_QWORD *)&v129 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v131) < 0)
    operator delete(v130[0]);
  v73 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v151, "x");
  std::string::basic_string[abi:ne180100]<0>(v153, "y");
  v160 = 0;
  v161 = 0;
  v162[0] = 0;
  v144 = &v160;
  LOBYTE(v145) = 0;
  v160 = (std::string *)operator new(0x30uLL);
  v161 = v160;
  v162[0] = v160 + 2;
  v161 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v162, &v151, &v154, v160);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&v160, (uint64_t)&v154);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v73 + 200))(v73, &v154);
  v74 = v155;
  if (v155 == &v154)
  {
    v75 = 4;
    v74 = &v154;
    goto LABEL_89;
  }
  if (v155)
  {
    v75 = 5;
LABEL_89:
    (*(void (**)(void))(*(_QWORD *)v74 + 8 * v75))();
  }
  v144 = &v160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete((void *)v153[i]);
  }
  v77 = *a3;
  v149[0] = &off_1EA9A00F8;
  v149[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMod;
  v150 = v149;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v149);
  v78 = v150;
  if (v150 == v149)
  {
    v79 = 4;
    v78 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v151);
  v80 = v151;
  std::string::basic_string[abi:ne180100]<0>(v124, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v124, 0, (uint64_t *)&v160);
  v126 = v160;
  if (v160)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v160;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v127 = v81;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v80 + 24))(v80, &v126, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v83 = v127;
  if (v127)
  {
    p_shared_owners = (unint64_t *)&v127->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v160;
  v160 = 0;
  if (v86)
    (*(void (**)(std::string *))(v86->__r_.__value_.__r.__words[0] + 8))(v86);
  if (v125 < 0)
    operator delete(v124[0]);
  v87 = v151;
  std::string::basic_string[abi:ne180100]<0>(v118, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v160);
  v120 = v160;
  if (v160)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v160;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v121 = v88;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v87 + 24))(v87, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v90 = v121;
  if (v121)
  {
    v91 = (unint64_t *)&v121->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v160;
  v160 = 0;
  if (v93)
    (*(void (**)(std::string *))(v93->__r_.__value_.__r.__words[0] + 8))(v93);
  if (v119 < 0)
    operator delete(v118[0]);
  v94 = v151;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v160);
  v114 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v115 = v95;
  v160 = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v94 + 24))(v94, &v114, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v97 = v115;
  if (v115)
  {
    v98 = (unint64_t *)&v115->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(std::string *))(v100->__r_.__value_.__r.__words[0] + 8))(v100);
  v101 = *a3;
  v110 = v151;
  if ((_QWORD)v151)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v151;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v111 = v102;
  *(_QWORD *)&v151 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 56))(v101, &v110);
  v104 = v111;
  if (v111)
  {
    v105 = (unint64_t *)&v111->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v151;
  *(_QWORD *)&v151 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v139, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v109, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E072C82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 240);
  *(_QWORD *)(v61 - 240) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1EA9A00F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1EA9A00F8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator()(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  std::__invoke_void_return_wrapper<std::vector<std::shared_ptr<MIL::IRValue const>>,false>::__call[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRValue const>> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int>((void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 8), a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::allocator<std::vector<std::shared_ptr<MIL::IRValue const>> (*)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target_type()
{
}

void std::__invoke_void_return_wrapper<std::vector<std::shared_ptr<MIL::IRValue const>>,false>::__call[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRValue const>> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int>(void (**a1)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  void (*v7)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD);
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v7 = *a1;
  v11 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7(a2, &v11, a4, a5, a6, *a7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1E072CDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__invoke_void_return_wrapper<std::vector<std::shared_ptr<MIL::IRValue const>>,false>::__call[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRValue const>> (*&)(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int),std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int>(a10);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateCast(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValue *ParameterValue;
  const void *v6;
  int v7;
  uint64_t v8;
  MIL::IRValueType *Type;
  uint64_t v10;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  std::string v24;

  std::string::basic_string[abi:ne180100]<0>(&__p, "dtype");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue(this);
  v6 = (const void *)MIL::IRValue::AsTensor(ParameterValue);
  MIL::IRValue::GetScalar<std::string>(v6, &v24);
  if (v23 < 0)
    operator delete(__p);
  v7 = MIL::StringToIRDataType((const void **)&v24.__r_.__value_.__l.__data_, 0);
  v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 176))(this);
  if (*(_QWORD *)(v8 + 8) == *(_QWORD *)v8)
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v8);
  v10 = MIL::IRValueType::AsTensorType(Type);
  if (v7 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10))
  {
    MIL::ValidationResult::ValidationResult(a2);
  }
  else
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v12 = (std::__shared_weak_count *)LocationPtr[1];
    v20 = *LocationPtr;
    v21 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "Specified dtype of cast does not match that of output tensor.");
    MIL::ValidationResult::ValidationResult(a2, &v20, 313, v18);
    if (v19 < 0)
      operator delete(v18[0]);
    v15 = v21;
    if (v21)
    {
      v16 = (unint64_t *)&v21->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1E072CF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t Value;
  const void *v8;
  int v9;
  unsigned __int8 *v10;
  MIL::IRValueType *ValueType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16[2];
  char v17;
  void *__p;
  void *v19;
  uint64_t v20;
  std::string v21;

  std::string::basic_string[abi:ne180100]<0>(&__p, "dtype");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  Value = MIL::IRTypedArgument::TryGetValue(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v6 + 5));
  v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Value + 40))(Value);
  MIL::IRValue::GetScalar<std::string>(v8, &v21);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v9 = MIL::StringToIRDataType((const void **)&v21.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(v16, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v16);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::TryGetValueType(**((MIL::IRTypedArgument::IRTypedArgumentImpl ****)v10
                                                                         + 5));
  v12 = MIL::IRValueType::AsTensorType(ValueType);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 96))(v12);
  __p = 0;
  v19 = 0;
  v20 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v13, *(_QWORD *)(v13 + 8), (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3);
  if (v17 < 0)
    operator delete(v16[0]);
  v14 = MIL::IRTensorValueType::MakeWithShape(*a1, v9, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v15 = (uint64_t *)operator new(8uLL);
  *a3 = v15;
  *v15++ = v14;
  a3[1] = v15;
  a3[2] = v15;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1E072D118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcos(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "acos");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E072D3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::UnaryOpHelper(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X4>, _OWORD *a6@<X8>)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  void **v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int8 *i;
  void *v41;
  unsigned __int8 v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned __int8 *k;
  const void *v50;
  float v51;
  int v52;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned __int8 *m;
  const void *v62;
  int v63;
  int v64;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned __int8 *j;
  const void *v74;
  __int16 v75;
  int v76;
  uint64_t v80;
  int *v81;
  int v84;
  int v85;
  uint64_t v87;
  int *v88;
  int v91;
  int v92;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int v100;
  int v101;
  _QWORD *v103;
  uint64_t v104;
  void ***v105;
  uint64_t v106;
  int v107;
  _DWORD *v108;
  int v110;
  _DWORD *v111;
  int v113;
  _DWORD *v114;
  _DWORD *v116;
  BOOL (*v118)(MIL::MathOps *);
  _DWORD *v119;
  uint64_t (*v121)(int);
  _DWORD *v122;
  uint64_t (*v124)(__int16);
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  void ***v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  void ***v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  void ***v138;
  uint64_t v139;
  void ***v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::logic_error *exception;
  std::logic_error *v146;
  std::logic_error *v147;
  std::logic_error *v148;
  std::logic_error *v149;
  std::logic_error *v150;
  _BYTE v151[40];
  uint64_t v152;
  std::__shared_weak_count *v153;
  _BYTE v154[40];
  uint64_t v155;
  std::__shared_weak_count *v156;
  _BYTE v157[40];
  uint64_t v158;
  std::__shared_weak_count *v159;
  void *__p[2];
  char v161;
  _BYTE v162[40];
  __int128 v163;
  __int128 v164;
  int v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  void **v172;
  _BYTE v173[40];
  uint64_t v174;
  std::__shared_weak_count *v175;
  _BYTE v176[24];
  _BYTE *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  _BYTE v182[24];
  _BYTE *v183;
  void **v184;
  BOOL (*v185)(MIL::MathOps *);
  void ***v186;
  _BYTE v187[32];
  int v188;
  void **v189;
  char v190;
  void ***v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 40))(*a3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "IRValue x is not an IRTensor object.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  v13 = *a3;
  v12 = (std::__shared_weak_count *)a3[1];
  v174 = v13;
  v175 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  v170 = v13;
  v171 = v12;
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  MIL::IRTypedArgument::Make(&v170, &v172);
  v184 = v172;
  if (v172)
  {
    v18 = (_QWORD *)operator new();
    v19 = v172;
    *v18 = &unk_1EA994910;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v185 = (BOOL (*)(MIL::MathOps *))v18;
  v172 = 0;
  *(_QWORD *)&v164 = 0;
  v163 = 0uLL;
  v189 = (void **)&v163;
  v190 = 0;
  v20 = operator new(0x10uLL);
  *(_QWORD *)&v163 = v20;
  *(_QWORD *)&v164 = v20 + 2;
  *v20 = v184;
  v20[1] = v18;
  if (v18)
  {
    v21 = v18 + 1;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)&v163 + 1) = v20 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v187, (__int128 *)__p, (_QWORD **)&v163);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v173, v187, 1);
  v189 = (void **)&v187[24];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v189);
  if ((v187[23] & 0x80000000) != 0)
    operator delete(*(void **)v187);
  v189 = (void **)&v163;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v189);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v184);
  v23 = v172;
  v172 = 0;
  if (v23)
    (*((void (**)(void **))*v23 + 1))(v23);
  v24 = v171;
  if (v171)
  {
    v25 = (unint64_t *)&v171->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v161 < 0)
    operator delete(__p[0]);
  v27 = std::string::basic_string[abi:ne180100]<0>(v187, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v27, (uint64_t)&v189);
  if ((v187[23] & 0x80000000) != 0)
    operator delete(*(void **)v187);
  v28 = (std::__shared_weak_count *)a2[1];
  v168 = *a2;
  v169 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  memset(v187, 0, sizeof(v187));
  v188 = 1065353216;
  v163 = 0uLL;
  *(_QWORD *)&v164 = 0;
  if (!v191)
    std::__throw_bad_function_call[abi:ne180100]();
  ((void (*)(void **__return_ptr, void ***, void (****)(MIL::MILContextImpl *__hidden), uint64_t *, _BYTE *, _BYTE *, __int128 *))(*v191)[6])(__p, v191, a1, &v168, v173, v187, &v163);
  v31 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)__p[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v184 = (void **)&v163;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v184);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v187);
  v32 = v169;
  if (v169)
  {
    v33 = (unint64_t *)&v169->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 88))(v31))
  {
    case 2u:
      v152 = v174;
      v153 = v175;
      if (v175)
      {
        v35 = (unint64_t *)&v175->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      MIL::ValueInference::Tensor<BOOL>::FromIRTensorValue(&v152, (uint64_t)v187);
      v37 = v153;
      if (v153)
      {
        v38 = (unint64_t *)&v153->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v163 = 0u;
      v164 = 0u;
      v165 = 1065353216;
      for (i = *(unsigned __int8 **)(a4 + 16); i; i = *(unsigned __int8 **)i)
      {
        v41 = (void *)(*(uint64_t (**)(uint64_t))(**((_QWORD **)i + 5) + 40))(*((_QWORD *)i + 5));
        if (v41)
        {
          v42 = MIL::IRValue::GetScalar<unsigned char>(v41);
          __p[0] = i + 16;
          std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v163, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p)[40] = v42;
        }
      }
      std::unordered_map<std::string,unsigned char>::unordered_map((uint64_t)v151, (uint64_t)&v163);
      v43 = *((char *)a5 + 23);
      if (v43 < 0)
      {
        if (*((_QWORD *)a5 + 1) != 11)
          goto LABEL_483;
        a5 = *(_DWORD **)a5;
      }
      else if (v43 != 11)
      {
        goto LABEL_483;
      }
      if (*(_QWORD *)a5 != 0x5F6C616369676F6CLL || *(_QWORD *)((char *)a5 + 3) != 0x746F6E5F6C616369)
      {
LABEL_483:
        v146 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v146, "Invalid OpName specified");
        v146->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v146, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
      }
      v184 = (void **)&unk_1EA9A0A88;
      v185 = MIL::MathOps::LogicalNotOp;
      v186 = &v184;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v151);
      v95 = (uint64_t)v186;
      if (!v186)
        goto LABEL_184;
      if (v186 == &v184)
      {
        v177 = v176;
        ((void (*)(void ***, _BYTE *))v184[3])(&v184, v176);
      }
      else
      {
        v95 = ((uint64_t (*)(void))(*v186)[2])();
LABEL_184:
        v177 = (_BYTE *)v95;
      }
      MIL::ValueInference::Tensor<BOOL>::ForEach((uint64_t)v187, (uint64_t)v176, (uint64_t)__p);
      v103 = v177;
      if (v177 == v176)
      {
        v104 = 4;
        v103 = v176;
      }
      else
      {
        if (!v177)
          goto LABEL_206;
        v104 = 5;
      }
      (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_206:
      MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)__p, *a1, a6);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(__p);
      v105 = v186;
      if (v186 == &v184)
      {
        v106 = 4;
        v105 = &v184;
      }
      else
      {
        if (!v186)
          goto LABEL_211;
        v106 = 5;
      }
      ((void (*)(void))(*v105)[v106])();
LABEL_211:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v163);
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v187);
      goto LABEL_437;
    case 4u:
      v158 = v174;
      v159 = v175;
      if (v175)
      {
        v68 = (unint64_t *)&v175->__shared_owners_;
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::FromIRTensorValue(&v158, (uint64_t)v187);
      v70 = v159;
      if (v159)
      {
        v71 = (unint64_t *)&v159->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      v163 = 0u;
      v164 = 0u;
      v165 = 1065353216;
      for (j = *(unsigned __int8 **)(a4 + 16); j; j = *(unsigned __int8 **)j)
      {
        v74 = (const void *)(*(uint64_t (**)(uint64_t))(**((_QWORD **)j + 5) + 40))(*((_QWORD *)j + 5));
        if (v74)
        {
          v75 = MIL::IRValue::GetScalar<MIL::Fp16>(v74);
          __p[0] = j + 16;
          *((_WORD *)std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v163, j + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 20) = v75;
        }
      }
      std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)v157, (uint64_t)&v163);
      if (*((char *)a5 + 23) < 0)
      {
        v96 = *((_QWORD *)a5 + 1);
        if (v96 == 4)
        {
          v122 = *(_DWORD **)a5;
          if (**(_DWORD **)a5 == 1936679777)
            goto LABEL_310;
          if (*v122 == 1852404577)
          {
LABEL_313:
            v124 = MIL::MathOps::AsinOp<MIL::Fp16>;
            goto LABEL_420;
          }
          if (*v122 == 1851880545)
          {
LABEL_316:
            v124 = MIL::MathOps::AtanOp<MIL::Fp16>;
            goto LABEL_420;
          }
          if (**(_DWORD **)a5 == 1818846563)
            goto LABEL_328;
          v96 = *((_QWORD *)a5 + 1);
        }
        else if (v96 == 5)
        {
          v97 = *(int **)a5;
          if (**(_DWORD **)a5 == 1936679777 && *(_BYTE *)(*(_QWORD *)a5 + 4) == 104)
            goto LABEL_298;
          if (*v97 == 1852404577 && *((_BYTE *)v97 + 4) == 104)
            goto LABEL_304;
          v100 = *v97;
          v101 = *((unsigned __int8 *)v97 + 4);
          if (v100 == 1851880545 && v101 == 104)
            goto LABEL_325;
        }
        if (v96 == 3)
        {
          if (**(_WORD **)a5 == 28515 && *(_BYTE *)(*(_QWORD *)a5 + 2) == 115)
            goto LABEL_307;
          v96 = *((_QWORD *)a5 + 1);
        }
        if (v96 != 4)
          goto LABEL_292;
        v114 = *(_DWORD **)a5;
        goto LABEL_291;
      }
      v76 = *((unsigned __int8 *)a5 + 23);
      switch(v76)
      {
        case 3:
          if (*(_WORD *)a5 != 28515 || *((_BYTE *)a5 + 2) != 115)
            break;
LABEL_307:
          v124 = MIL::MathOps::CosOp<MIL::Fp16>;
          goto LABEL_420;
        case 4:
          v113 = *a5;
          if (*a5 != 1851880545)
          {
            if (v113 != 1852404577)
            {
              if (v113 != 1936679777)
              {
                if (*a5 != 1818846563)
                {
                  v114 = a5;
LABEL_291:
                  if (*v114 == 1752395619)
                  {
                    v124 = MIL::MathOps::CoshOp<MIL::Fp16>;
                    goto LABEL_420;
                  }
                  break;
                }
LABEL_328:
                v124 = MIL::MathOps::CeilOp<MIL::Fp16>;
                goto LABEL_420;
              }
LABEL_310:
              v124 = MIL::MathOps::AcosOp<MIL::Fp16>;
              goto LABEL_420;
            }
            goto LABEL_313;
          }
          goto LABEL_316;
        case 5:
          if (*a5 != 1936679777 || *((_BYTE *)a5 + 4) != 104)
          {
            if (*a5 == 1852404577 && *((_BYTE *)a5 + 4) == 104)
              goto LABEL_304;
            if (*a5 != 1851880545 || *((_BYTE *)a5 + 4) != 104)
              break;
LABEL_325:
            v124 = MIL::MathOps::AtanhOp<MIL::Fp16>;
            goto LABEL_420;
          }
LABEL_298:
          v124 = MIL::MathOps::AcoshOp<MIL::Fp16>;
          goto LABEL_420;
      }
LABEL_292:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "exp"))
      {
        v124 = MIL::MathOps::ExpOp<MIL::Fp16>;
LABEL_420:
        v184 = (void **)&unk_1EA9A0428;
        v185 = (BOOL (*)(MIL::MathOps *))v124;
        v186 = &v184;
        goto LABEL_421;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "floor"))
      {
        v124 = MIL::MathOps::FloorOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "asinh"))
      {
LABEL_304:
        v124 = MIL::MathOps::AsinhOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "round"))
      {
        v124 = MIL::MathOps::RoundOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sin"))
      {
        v124 = MIL::MathOps::SinOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sinh"))
      {
        v124 = MIL::MathOps::SinhOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sqrt"))
      {
        v124 = MIL::MathOps::SqrtOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "tan"))
      {
        v124 = MIL::MathOps::TanOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "tanh"))
      {
        v124 = MIL::MathOps::TanhOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "abs"))
      {
        v124 = MIL::MathOps::AbsOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "exp2"))
      {
        v124 = MIL::MathOps::Exp2Op<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sign"))
      {
        v124 = MIL::MathOps::SignOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "square"))
      {
        v124 = MIL::MathOps::SquareOp<MIL::Fp16>;
        goto LABEL_420;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "inverse"))
      {
        std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)__p, (uint64_t)v157);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "log"))
      {
        std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)__p, (uint64_t)v157);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "rsqrt"))
      {
        std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)__p, (uint64_t)v157);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "clip"))
      {
        std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)__p, (uint64_t)v157);
      }
      else
      {
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "threshold"))
        {
          v150 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v150, "Invalid OpName specified");
          v150->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v150, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
        }
        std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)__p, (uint64_t)v157);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
LABEL_421:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v157);
      v135 = (uint64_t)v186;
      if (!v186)
        goto LABEL_424;
      if (v186 != &v184)
      {
        v135 = ((uint64_t (*)(void))(*v186)[2])();
LABEL_424:
        v181 = (_BYTE *)v135;
        goto LABEL_426;
      }
      v181 = v180;
      ((void (*)(void ***, _BYTE *))v184[3])(&v184, v180);
LABEL_426:
      MIL::ValueInference::Tensor<MIL::Fp16>::ForEach((uint64_t)v187, (uint64_t)v180, (uint64_t)__p);
      v136 = v181;
      if (v181 == v180)
      {
        v137 = 4;
        v136 = v180;
      }
      else
      {
        if (!v181)
          goto LABEL_431;
        v137 = 5;
      }
      (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_431:
      MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)__p, *a1, a6);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(__p);
      v138 = v186;
      if (v186 == &v184)
      {
        v139 = 4;
        v138 = &v184;
        goto LABEL_435;
      }
      if (v186)
      {
        v139 = 5;
LABEL_435:
        ((void (*)(void))(*v138)[v139])();
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v163);
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v187);
LABEL_437:
      v140 = v191;
      if (v191 == &v189)
      {
        v141 = 4;
        v140 = &v189;
      }
      else
      {
        if (!v191)
          goto LABEL_442;
        v141 = 5;
      }
      ((void (*)(void))(*v140)[v141])();
LABEL_442:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v173);
      v142 = v175;
      if (v175)
      {
        v143 = (unint64_t *)&v175->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      return;
    case 5u:
      v166 = v174;
      v167 = v175;
      if (v175)
      {
        v44 = (unint64_t *)&v175->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v166, (uint64_t)v187);
      v46 = v167;
      if (v167)
      {
        v47 = (unint64_t *)&v167->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v163 = 0u;
      v164 = 0u;
      v165 = 1065353216;
      for (k = *(unsigned __int8 **)(a4 + 16); k; k = *(unsigned __int8 **)k)
      {
        v50 = (const void *)(*(uint64_t (**)(uint64_t))(**((_QWORD **)k + 5) + 40))(*((_QWORD *)k + 5));
        if (v50)
        {
          v51 = MIL::IRValue::GetScalar<float>(v50);
          __p[0] = k + 16;
          *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v163, k + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 10) = v51;
        }
      }
      std::unordered_map<std::string,float>::unordered_map((uint64_t)v162, (uint64_t)&v163);
      if ((*((char *)a5 + 23) & 0x80000000) == 0)
      {
        v52 = *((unsigned __int8 *)a5 + 23);
        if (v52 != 3)
        {
          if (v52 != 4)
          {
            if (v52 == 5)
            {
              if (*a5 != 1936679777 || *((_BYTE *)a5 + 4) != 104)
              {
                if (*a5 == 1852404577 && *((_BYTE *)a5 + 4) == 104)
                  goto LABEL_300;
                if (*a5 != 1851880545 || *((_BYTE *)a5 + 4) != 104)
                  goto LABEL_256;
LABEL_323:
                v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::AtanhOp<float>;
                goto LABEL_382;
              }
LABEL_296:
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::AcoshOp<float>;
              goto LABEL_382;
            }
LABEL_256:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "exp"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::ExpOp<float>;
LABEL_382:
              v184 = (void **)&unk_1EA99BE00;
              v185 = v118;
              v186 = &v184;
              goto LABEL_383;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "floor"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::FloorOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "asinh"))
            {
LABEL_300:
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::AsinhOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "round"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::RoundOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sin"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::SinOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sinh"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::SinhOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sqrt"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::SqrtOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "tan"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::TanOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "tanh"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::TanhOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "abs"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::AbsOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "exp2"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::Exp2Op<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sign"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::SignOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "square"))
            {
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::SquareOp<float>;
              goto LABEL_382;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "inverse"))
            {
              std::unordered_map<std::string,float>::unordered_map((uint64_t)__p, (uint64_t)v162);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "log"))
            {
              std::unordered_map<std::string,float>::unordered_map((uint64_t)__p, (uint64_t)v162);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "rsqrt"))
            {
              std::unordered_map<std::string,float>::unordered_map((uint64_t)__p, (uint64_t)v162);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "clip"))
            {
              std::unordered_map<std::string,float>::unordered_map((uint64_t)__p, (uint64_t)v162);
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "threshold"))
              {
                v148 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v148, "Invalid OpName specified");
                v148->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
                __cxa_throw(v148, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
              }
              std::unordered_map<std::string,float>::unordered_map((uint64_t)__p, (uint64_t)v162);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
LABEL_383:
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v162);
            v125 = (uint64_t)v186;
            if (v186)
            {
              if (v186 == &v184)
              {
                v183 = v182;
                ((void (*)(void ***, _BYTE *))v184[3])(&v184, v182);
LABEL_388:
                MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v187, (uint64_t)v182, (uint64_t)__p);
                v126 = v183;
                if (v183 == v182)
                {
                  v127 = 4;
                  v126 = v182;
                }
                else
                {
                  if (!v183)
                    goto LABEL_393;
                  v127 = 5;
                }
                (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_393:
                MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)__p, *a1, a6);
                MIL::ValueInference::Tensor<float>::~Tensor(__p);
                v128 = v186;
                if (v186 == &v184)
                {
                  v129 = 4;
                  v128 = &v184;
                }
                else
                {
                  if (!v186)
                  {
LABEL_398:
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v163);
                    MIL::ValueInference::Tensor<float>::~Tensor(v187);
                    goto LABEL_437;
                  }
                  v129 = 5;
                }
                ((void (*)(void))(*v128)[v129])();
                goto LABEL_398;
              }
              v125 = ((uint64_t (*)(void))(*v186)[2])();
            }
            v183 = (_BYTE *)v125;
            goto LABEL_388;
          }
          v107 = *a5;
          if (*a5 != 1851880545)
          {
            if (v107 != 1852404577)
            {
              if (v107 != 1936679777)
              {
                if (*a5 != 1818846563)
                {
                  v108 = a5;
LABEL_255:
                  if (*v108 == 1752395619)
                  {
                    v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::CoshOp<float>;
                    goto LABEL_382;
                  }
                  goto LABEL_256;
                }
LABEL_326:
                v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::CeilOp<float>;
                goto LABEL_382;
              }
LABEL_308:
              v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::AcosOp<float>;
              goto LABEL_382;
            }
            goto LABEL_311;
          }
          goto LABEL_314;
        }
        if (*(_WORD *)a5 != 28515 || *((_BYTE *)a5 + 2) != 115)
          goto LABEL_256;
LABEL_305:
        v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::CosOp<float>;
        goto LABEL_382;
      }
      v80 = *((_QWORD *)a5 + 1);
      if (v80 == 4)
      {
        v116 = *(_DWORD **)a5;
        if (**(_DWORD **)a5 == 1936679777)
          goto LABEL_308;
        if (*v116 == 1852404577)
        {
LABEL_311:
          v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::AsinOp<float>;
          goto LABEL_382;
        }
        if (*v116 == 1851880545)
        {
LABEL_314:
          v118 = (BOOL (*)(MIL::MathOps *))MIL::MathOps::AtanOp<float>;
          goto LABEL_382;
        }
        if (**(_DWORD **)a5 == 1818846563)
          goto LABEL_326;
        v80 = *((_QWORD *)a5 + 1);
      }
      else if (v80 == 5)
      {
        v81 = *(int **)a5;
        if (**(_DWORD **)a5 == 1936679777 && *(_BYTE *)(*(_QWORD *)a5 + 4) == 104)
          goto LABEL_296;
        if (*v81 == 1852404577 && *((_BYTE *)v81 + 4) == 104)
          goto LABEL_300;
        v84 = *v81;
        v85 = *((unsigned __int8 *)v81 + 4);
        if (v84 == 1851880545 && v85 == 104)
          goto LABEL_323;
      }
      if (v80 == 3)
      {
        if (**(_WORD **)a5 == 28515 && *(_BYTE *)(*(_QWORD *)a5 + 2) == 115)
          goto LABEL_305;
        v80 = *((_QWORD *)a5 + 1);
      }
      if (v80 != 4)
        goto LABEL_256;
      v108 = *(_DWORD **)a5;
      goto LABEL_255;
    case 0xBu:
      v155 = v174;
      v156 = v175;
      if (v175)
      {
        v56 = (unint64_t *)&v175->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      MIL::ValueInference::Tensor<int>::FromIRTensorValue(&v155, (uint64_t)v187);
      v58 = v156;
      if (v156)
      {
        v59 = (unint64_t *)&v156->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v163 = 0u;
      v164 = 0u;
      v165 = 1065353216;
      for (m = *(unsigned __int8 **)(a4 + 16); m; m = *(unsigned __int8 **)m)
      {
        v62 = (const void *)(*(uint64_t (**)(uint64_t))(**((_QWORD **)m + 5) + 40))(*((_QWORD *)m + 5));
        if (v62)
        {
          v63 = MIL::IRValue::GetScalar<int>(v62);
          __p[0] = m + 16;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v163, m + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 10) = v63;
        }
      }
      std::unordered_map<std::string,int>::unordered_map((uint64_t)v154, (uint64_t)&v163);
      if ((*((char *)a5 + 23) & 0x80000000) == 0)
      {
        v64 = *((unsigned __int8 *)a5 + 23);
        if (v64 != 3)
        {
          if (v64 != 4)
          {
            if (v64 == 5)
            {
              if (*a5 != 1936679777 || *((_BYTE *)a5 + 4) != 104)
              {
                if (*a5 == 1852404577 && *((_BYTE *)a5 + 4) == 104)
                  goto LABEL_302;
                if (*a5 != 1851880545 || *((_BYTE *)a5 + 4) != 104)
                  goto LABEL_274;
LABEL_324:
                v121 = MIL::MathOps::AtanhOp<int>;
                goto LABEL_401;
              }
LABEL_297:
              v121 = MIL::MathOps::AcoshOp<int>;
              goto LABEL_401;
            }
LABEL_274:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "exp"))
            {
              v121 = MIL::MathOps::ExpOp<int>;
LABEL_401:
              v184 = (void **)&unk_1EA9A0758;
              v185 = (BOOL (*)(MIL::MathOps *))v121;
              v186 = &v184;
              goto LABEL_402;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "floor"))
            {
              v121 = (uint64_t (*)(int))MIL::MathOps::FloorOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "asinh"))
            {
LABEL_302:
              v121 = MIL::MathOps::AsinhOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "round"))
            {
              v121 = (uint64_t (*)(int))MIL::MathOps::RoundOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sin"))
            {
              v121 = MIL::MathOps::SinOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sinh"))
            {
              v121 = MIL::MathOps::SinhOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sqrt"))
            {
              v121 = MIL::MathOps::SqrtOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "tan"))
            {
              v121 = MIL::MathOps::TanOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "tanh"))
            {
              v121 = MIL::MathOps::TanhOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "abs"))
            {
              v121 = MIL::MathOps::AbsOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "exp2"))
            {
              v121 = MIL::MathOps::Exp2Op<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "sign"))
            {
              v121 = MIL::MathOps::SignOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "square"))
            {
              v121 = MIL::MathOps::SquareOp<int>;
              goto LABEL_401;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "inverse"))
            {
              std::unordered_map<std::string,int>::unordered_map((uint64_t)__p, (uint64_t)v154);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "log"))
            {
              std::unordered_map<std::string,int>::unordered_map((uint64_t)__p, (uint64_t)v154);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "rsqrt"))
            {
              std::unordered_map<std::string,int>::unordered_map((uint64_t)__p, (uint64_t)v154);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "clip"))
            {
              std::unordered_map<std::string,int>::unordered_map((uint64_t)__p, (uint64_t)v154);
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "threshold"))
              {
                v149 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v149, "Invalid OpName specified");
                v149->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
                __cxa_throw(v149, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
              }
              std::unordered_map<std::string,int>::unordered_map((uint64_t)__p, (uint64_t)v154);
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
LABEL_402:
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v154);
            v130 = (uint64_t)v186;
            if (v186)
            {
              if (v186 == &v184)
              {
                v179 = v178;
                ((void (*)(void ***, _BYTE *))v184[3])(&v184, v178);
LABEL_407:
                MIL::ValueInference::Tensor<int>::ForEach((uint64_t)v187, (uint64_t)v178, (uint64_t)__p);
                v131 = v179;
                if (v179 == v178)
                {
                  v132 = 4;
                  v131 = v178;
                }
                else
                {
                  if (!v179)
                    goto LABEL_412;
                  v132 = 5;
                }
                (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_412:
                MIL::ValueInference::Tensor<int>::ToIRTensorValue((uint64_t)__p, *a1, a6);
                MIL::ValueInference::Tensor<int>::~Tensor(__p);
                v133 = v186;
                if (v186 == &v184)
                {
                  v134 = 4;
                  v133 = &v184;
                }
                else
                {
                  if (!v186)
                  {
LABEL_417:
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v163);
                    MIL::ValueInference::Tensor<int>::~Tensor(v187);
                    goto LABEL_437;
                  }
                  v134 = 5;
                }
                ((void (*)(void))(*v133)[v134])();
                goto LABEL_417;
              }
              v130 = ((uint64_t (*)(void))(*v186)[2])();
            }
            v179 = (_BYTE *)v130;
            goto LABEL_407;
          }
          v110 = *a5;
          if (*a5 != 1851880545)
          {
            if (v110 != 1852404577)
            {
              if (v110 != 1936679777)
              {
                if (*a5 != 1818846563)
                {
                  v111 = a5;
LABEL_273:
                  if (*v111 == 1752395619)
                  {
                    v121 = MIL::MathOps::CoshOp<int>;
                    goto LABEL_401;
                  }
                  goto LABEL_274;
                }
LABEL_327:
                v121 = (uint64_t (*)(int))MIL::MathOps::CeilOp<int>;
                goto LABEL_401;
              }
LABEL_309:
              v121 = MIL::MathOps::AcosOp<int>;
              goto LABEL_401;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        }
        if (*(_WORD *)a5 != 28515 || *((_BYTE *)a5 + 2) != 115)
          goto LABEL_274;
LABEL_306:
        v121 = MIL::MathOps::CosOp<int>;
        goto LABEL_401;
      }
      v87 = *((_QWORD *)a5 + 1);
      if (v87 == 4)
      {
        v119 = *(_DWORD **)a5;
        if (**(_DWORD **)a5 == 1936679777)
          goto LABEL_309;
        if (*v119 == 1852404577)
        {
LABEL_312:
          v121 = MIL::MathOps::AsinOp<int>;
          goto LABEL_401;
        }
        if (*v119 == 1851880545)
        {
LABEL_315:
          v121 = MIL::MathOps::AtanOp<int>;
          goto LABEL_401;
        }
        if (**(_DWORD **)a5 == 1818846563)
          goto LABEL_327;
        v87 = *((_QWORD *)a5 + 1);
      }
      else if (v87 == 5)
      {
        v88 = *(int **)a5;
        if (**(_DWORD **)a5 == 1936679777 && *(_BYTE *)(*(_QWORD *)a5 + 4) == 104)
          goto LABEL_297;
        if (*v88 == 1852404577 && *((_BYTE *)v88 + 4) == 104)
          goto LABEL_302;
        v91 = *v88;
        v92 = *((unsigned __int8 *)v88 + 4);
        if (v91 == 1851880545 && v92 == 104)
          goto LABEL_324;
      }
      if (v87 == 3)
      {
        if (**(_WORD **)a5 == 28515 && *(_BYTE *)(*(_QWORD *)a5 + 2) == 115)
          goto LABEL_306;
        v87 = *((_QWORD *)a5 + 1);
      }
      if (v87 != 4)
        goto LABEL_274;
      v111 = *(_DWORD **)a5;
      goto LABEL_273;
    default:
      v147 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v147, "Unsupported Datatype for the output IRTensor.");
      v147->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v147, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
}

void sub_1E072F388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;
  uint64_t v62;
  _QWORD *v64;
  uint64_t v65;

  __cxa_free_exception(v61);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a43);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor((_QWORD *)(v62 - 192));
  v64 = *(_QWORD **)(v62 - 96);
  if (v64 == (_QWORD *)(v62 - 120))
  {
    v65 = 4;
    v64 = (_QWORD *)(v62 - 120);
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_6:
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcosh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "acosh");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E072FA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsin(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "asin");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E072FD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t i;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  void *v59;
  _QWORD *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  void *v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  void *v85;
  _QWORD *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  void *v98;
  _QWORD *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  void *v111;
  _QWORD *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  char *v123;
  void *v124;
  _QWORD *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  char *v136;
  void *v137;
  _QWORD *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char *v149;
  void *v150;
  _QWORD *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  char *v162;
  void *v163;
  _QWORD *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::logic_error *exception;
  std::logic_error *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  void *__p[2];
  char v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  uint64_t v208;
  void *v209[2];
  char v210;
  _QWORD v211[6];
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  std::string *v215;
  char v216;
  _QWORD v217[2];
  _QWORD v218[2];
  _QWORD *v219;
  void *v220;
  _QWORD *v221;
  _BYTE v222[32];
  int v223;
  std::string v224[2];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v222, "x");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v222);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (*(uint64_t (**)(_QWORD))(***((_QWORD ***)v8 + 5) + 40))(**((_QWORD **)v8 + 5));
  if ((v222[23] & 0x80000000) != 0)
    operator delete(*(void **)v222);
  if (!v9)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "IRValue x is not an IRTensor object.");
    __cxa_throw(exception, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::string::basic_string[abi:ne180100]<0>(v222, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v222);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v213 = *v11;
  v214 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if ((v222[23] & 0x80000000) != 0)
    operator delete(*(void **)v222);
  std::string::basic_string[abi:ne180100]<0>(v222, "dtype");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v222);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (uint64_t *)*((_QWORD *)v16 + 5);
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v211[5] = *v17;
  v212 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if ((v222[23] & 0x80000000) != 0)
    operator delete(*(void **)v222);
  std::string::basic_string[abi:ne180100]<0>(v209, "x");
  v206 = v13;
  v207 = v12;
  if (v12)
  {
    v22 = (unint64_t *)&v12->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  MIL::IRTypedArgument::Make(&v206, &v208);
  v218[0] = v208;
  if (v208)
  {
    v24 = (_QWORD *)operator new();
    v25 = v208;
    *v24 = &unk_1EA994910;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  v218[1] = v24;
  v219 = 0;
  v208 = 0;
  v220 = 0;
  v221 = 0;
  __p[0] = &v219;
  LOBYTE(__p[1]) = 0;
  v26 = operator new(0x10uLL);
  v219 = v26;
  v221 = v26 + 2;
  *v26 = v218[0];
  v26[1] = v24;
  if (v24)
  {
    v27 = v24 + 1;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v220 = v26 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>((std::string *)v222, (__int128 *)v209, &v219);
  std::string::basic_string[abi:ne180100]<0>(__p, "dtype");
  v198 = v19;
  v199 = v18;
  if (v18)
  {
    v29 = (unint64_t *)&v18->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  MIL::IRTypedArgument::Make(&v198, &v200);
  v217[0] = v200;
  if (v200)
  {
    v31 = (_QWORD *)operator new();
    v32 = v200;
    *v31 = &unk_1EA994910;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v217[1] = v31;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v203 = 0;
  v215 = (std::string *)&v201;
  v216 = 0;
  v33 = operator new(0x10uLL);
  v201 = v33;
  v203 = v33 + 2;
  *v33 = v217[0];
  v33[1] = v31;
  if (v31)
  {
    v34 = v31 + 1;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v202 = v33 + 2;
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::pair[abi:ne180100]<true,0>(v224, (__int128 *)__p, &v201);
  std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>::unordered_map((uint64_t)v211, v222, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFF4; i -= 6)
  {
    v215 = &v224[i / 3 + 1];
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
    if (SHIBYTE(v224[0].__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(v224[i / 3].__r_.__value_.__l.__data_);
  }
  v215 = (std::string *)&v201;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v215);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v217);
  v37 = v200;
  v200 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = v199;
  if (v199)
  {
    v39 = (unint64_t *)&v199->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v205 < 0)
    operator delete(__p[0]);
  __p[0] = &v219;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v218);
  v41 = v208;
  v208 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = v207;
  if (v207)
  {
    v43 = (unint64_t *)&v207->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v210 < 0)
    operator delete(v209[0]);
  v45 = *a2;
  v46 = (std::__shared_weak_count *)a2[1];
  v196 = v45;
  v197 = v46;
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  memset(v222, 0, sizeof(v222));
  v223 = 1065353216;
  v219 = 0;
  v220 = 0;
  v221 = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast(a1, v211, (uint64_t **)v209);
  v49 = v209[0];
  v50 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)v209[0]);
  v209[1] = v49;
  operator delete(v49);
  __p[0] = &v219;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v222);
  if (v46)
  {
    v51 = (unint64_t *)&v46->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 88))(v50))
  {
    case 2u:
      v178 = v213;
      v179 = v214;
      if (v214)
      {
        v53 = (unint64_t *)&v214->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<BOOL>(&v178, v222);
      v55 = v179;
      if (v179)
      {
        v56 = (unint64_t *)&v179->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v59 = __p[0];
      v58 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v60 = operator new(0x10uLL);
      *a4 = v60;
      a4[1] = v60;
      a4[2] = v60 + 2;
      *v60 = v59;
      v60[1] = v58;
      if (v58)
      {
        v61 = (unint64_t *)(v58 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      a4[1] = v60 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v63 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v64 = (unint64_t *)((char *)__p[1] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      MIL::ValueInference::Tensor<BOOL>::~Tensor(v222);
      break;
    case 4u:
      v192 = v213;
      v193 = v214;
      if (v214)
      {
        v144 = (unint64_t *)&v214->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<MIL::Fp16>(&v192, v222);
      v146 = v193;
      if (v193)
      {
        v147 = (unint64_t *)&v193->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v150 = __p[0];
      v149 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v151 = operator new(0x10uLL);
      *a4 = v151;
      a4[1] = v151;
      a4[2] = v151 + 2;
      *v151 = v150;
      v151[1] = v149;
      if (v149)
      {
        v152 = (unint64_t *)(v149 + 8);
        do
          v153 = __ldxr(v152);
        while (__stxr(v153 + 1, v152));
      }
      a4[1] = v151 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v154 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v155 = (unint64_t *)((char *)__p[1] + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(v222);
      break;
    case 5u:
      v194 = v213;
      v195 = v214;
      if (v214)
      {
        v105 = (unint64_t *)&v214->__shared_owners_;
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<float>(&v194, v222);
      v107 = v195;
      if (v195)
      {
        v108 = (unint64_t *)&v195->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v111 = __p[0];
      v110 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v112 = operator new(0x10uLL);
      *a4 = v112;
      a4[1] = v112;
      a4[2] = v112 + 2;
      *v112 = v111;
      v112[1] = v110;
      if (v110)
      {
        v113 = (unint64_t *)(v110 + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      a4[1] = v112 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v115 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v116 = (unint64_t *)((char *)__p[1] + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      MIL::ValueInference::Tensor<float>::~Tensor(v222);
      break;
    case 7u:
      v190 = v213;
      v191 = v214;
      if (v214)
      {
        v131 = (unint64_t *)&v214->__shared_owners_;
        do
          v132 = __ldxr(v131);
        while (__stxr(v132 + 1, v131));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<MIL::Bf16>(&v190, v222);
      v133 = v191;
      if (v191)
      {
        v134 = (unint64_t *)&v191->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v137 = __p[0];
      v136 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v138 = operator new(0x10uLL);
      *a4 = v138;
      a4[1] = v138;
      a4[2] = v138 + 2;
      *v138 = v137;
      v138[1] = v136;
      if (v136)
      {
        v139 = (unint64_t *)(v136 + 8);
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      a4[1] = v138 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v141 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v142 = (unint64_t *)((char *)__p[1] + 8);
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
      MIL::ValueInference::Tensor<MIL::Bf16>::~Tensor(v222);
      break;
    case 9u:
      v182 = v213;
      v183 = v214;
      if (v214)
      {
        v79 = (unint64_t *)&v214->__shared_owners_;
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<signed char>(&v182, v222);
      v81 = v183;
      if (v183)
      {
        v82 = (unint64_t *)&v183->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      MIL::ValueInference::Tensor<signed char>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v85 = __p[0];
      v84 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v86 = operator new(0x10uLL);
      *a4 = v86;
      a4[1] = v86;
      a4[2] = v86 + 2;
      *v86 = v85;
      v86[1] = v84;
      if (v84)
      {
        v87 = (unint64_t *)(v84 + 8);
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      a4[1] = v86 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v89 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v90 = (unint64_t *)((char *)__p[1] + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      MIL::ValueInference::Tensor<signed char>::~Tensor(v222);
      break;
    case 0xAu:
      v186 = v213;
      v187 = v214;
      if (v214)
      {
        v92 = (unint64_t *)&v214->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<short>(&v186, v222);
      v94 = v187;
      if (v187)
      {
        v95 = (unint64_t *)&v187->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      MIL::ValueInference::Tensor<short>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v98 = __p[0];
      v97 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v99 = operator new(0x10uLL);
      *a4 = v99;
      a4[1] = v99;
      a4[2] = v99 + 2;
      *v99 = v98;
      v99[1] = v97;
      if (v97)
      {
        v100 = (unint64_t *)(v97 + 8);
        do
          v101 = __ldxr(v100);
        while (__stxr(v101 + 1, v100));
      }
      a4[1] = v99 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v102 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v103 = (unint64_t *)((char *)__p[1] + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      MIL::ValueInference::Tensor<short>::~Tensor(v222);
      break;
    case 0xBu:
      v188 = v213;
      v189 = v214;
      if (v214)
      {
        v157 = (unint64_t *)&v214->__shared_owners_;
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<int>(&v188, v222);
      v159 = v189;
      if (v189)
      {
        v160 = (unint64_t *)&v189->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      MIL::ValueInference::Tensor<int>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v163 = __p[0];
      v162 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v164 = operator new(0x10uLL);
      *a4 = v164;
      a4[1] = v164;
      a4[2] = v164 + 2;
      *v164 = v163;
      v164[1] = v162;
      if (v162)
      {
        v165 = (unint64_t *)(v162 + 8);
        do
          v166 = __ldxr(v165);
        while (__stxr(v166 + 1, v165));
      }
      a4[1] = v164 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v167 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v168 = (unint64_t *)((char *)__p[1] + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      MIL::ValueInference::Tensor<int>::~Tensor(v222);
      break;
    case 0xEu:
      v180 = v213;
      v181 = v214;
      if (v214)
      {
        v118 = (unint64_t *)&v214->__shared_owners_;
        do
          v119 = __ldxr(v118);
        while (__stxr(v119 + 1, v118));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<unsigned char>(&v180, v222);
      v120 = v181;
      if (v181)
      {
        v121 = (unint64_t *)&v181->__shared_owners_;
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v124 = __p[0];
      v123 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v125 = operator new(0x10uLL);
      *a4 = v125;
      a4[1] = v125;
      a4[2] = v125 + 2;
      *v125 = v124;
      v125[1] = v123;
      if (v123)
      {
        v126 = (unint64_t *)(v123 + 8);
        do
          v127 = __ldxr(v126);
        while (__stxr(v127 + 1, v126));
      }
      a4[1] = v125 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v128 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v129 = (unint64_t *)((char *)__p[1] + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(v222);
      break;
    case 0xFu:
      v184 = v213;
      v185 = v214;
      if (v214)
      {
        v66 = (unint64_t *)&v214->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      MIL::ValueInferenceUtils::GetCastedTensor<unsigned short>(&v184, v222);
      v68 = v185;
      if (v185)
      {
        v69 = (unint64_t *)&v185->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::ToIRTensorValue((uint64_t)v222, *a1, __p);
      v72 = __p[0];
      v71 = (char *)__p[1];
      v219 = __p[0];
      v220 = __p[1];
      __p[0] = 0;
      __p[1] = 0;
      a4[1] = 0;
      a4[2] = 0;
      *a4 = 0;
      v209[0] = a4;
      LOBYTE(v209[1]) = 0;
      v73 = operator new(0x10uLL);
      *a4 = v73;
      a4[1] = v73;
      a4[2] = v73 + 2;
      *v73 = v72;
      v73[1] = v71;
      if (v71)
      {
        v74 = (unint64_t *)(v71 + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      a4[1] = v73 + 2;
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v219);
      v76 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v77 = (unint64_t *)((char *)__p[1] + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      MIL::ValueInference::Tensor<unsigned short>::~Tensor(v222);
      break;
    default:
      v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v177, "Unsupported Datatype for the output tensor.");
      v177->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v177, (struct type_info *)off_1EA992598, MEMORY[0x1E0DE4360]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v211);
  v170 = v212;
  if (v212)
  {
    v171 = (unint64_t *)&v212->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = v214;
  if (v214)
  {
    v174 = (unint64_t *)&v214->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
}

void sub_1E0730DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60)
{
  void *v60;

  __cxa_free_exception(v60);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&a51);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_1E07311C0()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  JUMPOUT(0x1E07311B0);
}

void sub_1E07311D8()
{
  uint64_t v0;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  JUMPOUT(0x1E07311B8);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsinh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "asinh");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0731434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtan(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "atan");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E07316E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtanh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "atanh");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E073199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCeil(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "ceil");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0731C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCos(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "cos");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0731F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCosh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "cosh");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E07321B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "exp");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E073246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "floor");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0732720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRound(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "round");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E07329D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSin(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "sin");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0732C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSinh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "sinh");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0732F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSqrt(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "sqrt");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E07331F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTan(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "tan");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E07334A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTanh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "tanh");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0733758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAbs(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "abs");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0733A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp2(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "exp2");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0733CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSign(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "sign");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0733F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSquare(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "square");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E0734228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceInverse@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  _OWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE v36[40];
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  void *__p[2];
  char v43;
  _BYTE v44[40];
  _QWORD *v45;
  char v46;
  __int128 v47;
  void *v48[2];
  char v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (_QWORD *)*((_QWORD *)v8 + 5);
  std::string::basic_string[abi:ne180100]<0>(v48, "epsilon");
  v50[0] = *v9;
  v10 = v9[1];
  v50[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v44, (unsigned __int8 *)v48, 1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v50);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v43 < 0)
    operator delete(__p[0]);
  v13 = a2[1];
  v39 = *a2;
  v40 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::string::basic_string[abi:ne180100]<0>(v48, "x");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v48);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (uint64_t *)*((_QWORD *)v16 + 5);
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v37 = v19;
  v38 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v36, (uint64_t)v44);
  std::string::basic_string[abi:ne180100]<0>(__p, "inverse");
  v22 = v41;
  v47 = v41;
  v41 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v45 = a4;
  v46 = 0;
  v23 = operator new(0x10uLL);
  *a4 = v23;
  a4[1] = v23;
  a4[2] = v23 + 1;
  *v23 = v22;
  if (*((_QWORD *)&v22 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  a4[1] = v23 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v43 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v36);
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v49 < 0)
    operator delete(v48[0]);
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v44);
}

void sub_1E073459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 128);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLog@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  _OWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE v36[40];
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  void *__p[2];
  char v43;
  _BYTE v44[40];
  _QWORD *v45;
  char v46;
  __int128 v47;
  void *v48[2];
  char v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (_QWORD *)*((_QWORD *)v8 + 5);
  std::string::basic_string[abi:ne180100]<0>(v48, "epsilon");
  v50[0] = *v9;
  v10 = v9[1];
  v50[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v44, (unsigned __int8 *)v48, 1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v50);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v43 < 0)
    operator delete(__p[0]);
  v13 = a2[1];
  v39 = *a2;
  v40 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::string::basic_string[abi:ne180100]<0>(v48, "x");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v48);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (uint64_t *)*((_QWORD *)v16 + 5);
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v37 = v19;
  v38 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v36, (uint64_t)v44);
  std::string::basic_string[abi:ne180100]<0>(__p, "log");
  v22 = v41;
  v47 = v41;
  v41 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v45 = a4;
  v46 = 0;
  v23 = operator new(0x10uLL);
  *a4 = v23;
  a4[1] = v23;
  a4[2] = v23 + 1;
  *v23 = v22;
  if (*((_QWORD *)&v22 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  a4[1] = v23 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v43 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v36);
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v49 < 0)
    operator delete(v48[0]);
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v44);
}

void sub_1E0734950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 128);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRsqrt@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  _OWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE v36[40];
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  void *__p[2];
  char v43;
  _BYTE v44[40];
  _QWORD *v45;
  char v46;
  __int128 v47;
  void *v48[2];
  char v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (_QWORD *)*((_QWORD *)v8 + 5);
  std::string::basic_string[abi:ne180100]<0>(v48, "epsilon");
  v50[0] = *v9;
  v10 = v9[1];
  v50[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v44, (unsigned __int8 *)v48, 1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v50);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v43 < 0)
    operator delete(__p[0]);
  v13 = a2[1];
  v39 = *a2;
  v40 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::string::basic_string[abi:ne180100]<0>(v48, "x");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v48);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (uint64_t *)*((_QWORD *)v16 + 5);
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v37 = v19;
  v38 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v36, (uint64_t)v44);
  std::string::basic_string[abi:ne180100]<0>(__p, "rsqrt");
  v22 = v41;
  v47 = v41;
  v41 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v45 = a4;
  v46 = 0;
  v23 = operator new(0x10uLL);
  *a4 = v23;
  a4[1] = v23;
  a4[2] = v23 + 1;
  *v23 = v22;
  if (*((_QWORD *)&v22 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  a4[1] = v23 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v43 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v36);
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v49 < 0)
    operator delete(v48[0]);
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v44);
}

void sub_1E0734D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 128);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceClip@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t i;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  _OWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE v42[40];
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  void *__p;
  char v49;
  char v50;
  void *v51[2];
  char v52;
  _BYTE v53[40];
  __int128 v54;
  void *v55[2];
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  _QWORD v60[3];

  v60[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v51, "alpha");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v51);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (uint64_t *)*((_QWORD *)v8 + 5);
  std::string::basic_string[abi:ne180100]<0>(v55, "alpha");
  v57 = *v9;
  v10 = v9[1];
  v58 = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "beta");
  v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v13)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v14 = (_QWORD *)*((_QWORD *)v13 + 5);
  std::string::basic_string[abi:ne180100]<0>(v59, "beta");
  v60[0] = *v14;
  v15 = v14[1];
  v60[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v53, (unsigned __int8 *)v55, 2);
  for (i = 0; i != -10; i -= 5)
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v60[i]);
    if (SHIBYTE(v59[i + 2]) < 0)
      operator delete((void *)v59[i]);
  }
  if (v50 < 0)
    operator delete(__p);
  if (v52 < 0)
    operator delete(v51[0]);
  v19 = a2[1];
  v45 = *a2;
  v46 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  std::string::basic_string[abi:ne180100]<0>(v55, "x");
  v22 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v55);
  if (!v22)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v23 = (uint64_t *)*((_QWORD *)v22 + 5);
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  v43 = v25;
  v44 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v42, (uint64_t)v53);
  std::string::basic_string[abi:ne180100]<0>(v51, "clip");
  v28 = v47;
  v54 = v47;
  v47 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  __p = a4;
  v49 = 0;
  v29 = operator new(0x10uLL);
  *a4 = v29;
  a4[1] = v29;
  a4[2] = v29 + 1;
  *v29 = v28;
  if (*((_QWORD *)&v28 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  a4[1] = v29 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v54);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v52 < 0)
    operator delete(v51[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v42);
  v35 = v44;
  if (v44)
  {
    v36 = (unint64_t *)&v44->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v56 < 0)
    operator delete(v55[0]);
  v38 = v46;
  if (v46)
  {
    v39 = (unint64_t *)&v46->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v53);
}

void sub_1E0735150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v33 - 168);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a32 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v33 - 129) < 0)
    operator delete(*(void **)(v33 - 152));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalNot(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  _OWORD v31[2];
  int v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _QWORD *v40;
  char v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2[1];
  v37 = *a2;
  v38 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "x");
  v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v33);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v11 = (uint64_t *)*((_QWORD *)v10 + 5);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  v35 = v13;
  v36 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "logical_not");
  v16 = v39;
  v42 = v39;
  v39 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v40 = a4;
  v41 = 0;
  v17 = operator new(0x10uLL);
  *a4 = v17;
  a4[1] = v17;
  a4[2] = v17 + 1;
  *v17 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a4[1] = v17 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v31);
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1E07354AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 72));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 56);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 88);
  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceThreshold@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  _OWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BYTE v36[40];
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  void *__p[2];
  char v43;
  _BYTE v44[40];
  _QWORD *v45;
  char v46;
  __int128 v47;
  void *v48[2];
  char v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = (_QWORD *)*((_QWORD *)v8 + 5);
  std::string::basic_string[abi:ne180100]<0>(v48, "alpha");
  v50[0] = *v9;
  v10 = v9[1];
  v50[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v44, (unsigned __int8 *)v48, 1);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v50);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v43 < 0)
    operator delete(__p[0]);
  v13 = a2[1];
  v39 = *a2;
  v40 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::string::basic_string[abi:ne180100]<0>(v48, "x");
  v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)v48);
  if (!v16)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v17 = (uint64_t *)*((_QWORD *)v16 + 5);
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v37 = v19;
  v38 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v36, (uint64_t)v44);
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  v22 = v41;
  v47 = v41;
  v41 = 0uLL;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v45 = a4;
  v46 = 0;
  v23 = operator new(0x10uLL);
  *a4 = v23;
  a4[1] = v23;
  a4[2] = v23 + 1;
  *v23 = v22;
  if (*((_QWORD *)&v22 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  a4[1] = v23 + 1;
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v43 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v36);
  v29 = v38;
  if (v38)
  {
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v49 < 0)
    operator delete(v48[0]);
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v44);
}

void sub_1E0735820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;

  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 144));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v27 - 128);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (*(char *)(v27 - 89) < 0)
    operator delete(*(void **)(v27 - 112));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1E0735B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E0735BFC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

float MIL::MathOps::CeilOp<float>(float a1)
{
  return ceilf(a1);
}

float MIL::MathOps::FloorOp<float>(float a1)
{
  return floorf(a1);
}

float MIL::MathOps::SqrtOp<float>(float a1)
{
  return sqrtf(a1);
}

float MIL::MathOps::SignOp<float>(float a1)
{
  BOOL v1;
  BOOL v2;
  float result;

  v1 = a1 < 0.0;
  v2 = a1 <= 0.0;
  result = 0.0;
  if (v1)
    result = -1.0;
  if (!v2)
    return 1.0;
  return result;
}

float MIL::MathOps::SquareOp<float>(float a1)
{
  return a1 * a1;
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A01A8;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0735CE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0228;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0735D48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A02A8;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0735DB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0328;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0735E18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(float)>::function<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A03A8;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0735E80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A01A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A01A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A01A8;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0735F44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A01A8;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  _QWORD *v2;
  float v3;
  unsigned __int8 *v4;
  float v5;
  void *__p[2];
  char v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((float *)v4 + 10);
  if (v8 < 0)
    operator delete(__p[0]);
  return 1.0 / (float)(v3 + v5);
}

void sub_1E0736024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#1}>,float ()(float)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0228;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0228;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0228;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0736138(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0228;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  _QWORD *v2;
  float v3;
  unsigned __int8 *v4;
  float v5;
  void *__p[2];
  char v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((float *)v4 + 10);
  if (v8 < 0)
    operator delete(__p[0]);
  return logf(v3 + v5);
}

void sub_1E0736210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#2}>,float ()(float)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A02A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A02A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A02A8;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0736324(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A02A8;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

float std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  _QWORD *v2;
  float v3;
  unsigned __int8 *v4;
  float v5;
  void *__p[2];
  char v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((float *)v4 + 10);
  if (v8 < 0)
    operator delete(__p[0]);
  return 1.0 / sqrtf(v3 + v5);
}

void sub_1E0736408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#3}>,float ()(float)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0328;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0328;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0328;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E073651C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0328;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  v1 = (_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v4, "alpha");
  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v1, (unsigned __int8 *)v4))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  std::string::basic_string[abi:ne180100]<0>(__p, "beta");
  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1E073664C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#4}>,float ()(float)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A03A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A03A8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A03A8;
  std::unordered_map<std::string,float>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E073677C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A03A8;
  return std::unordered_map<std::string,float>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  void *__p[2];
  char v3;

  v1 = (_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v1, (unsigned __int8 *)__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1E0736858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5},std::allocator<std::function<float ()(float)> `anonymous namespace'::GetUnaryOpFunction<float>(std::string const&,std::unordered_map<std::string,float>)::{lambda(float)#5}>,float ()(float)>::target_type()
{
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1E0736918(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1E0736B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  float result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *(float *)(a3 + 24);
  *((float *)v8 + 10) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1E0736C38(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1E0736EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_WORD *)v8 + 20) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E0736F74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::MathOps::AcosOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = acosf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AcoshOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = acoshf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AsinOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = asinf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AsinhOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = asinhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AtanOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = atanf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AtanhOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = atanhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::CeilOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  MIL::Fp16 *v2;
  __int16 v4;

  v4 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, ceilf(Float));
}

uint64_t MIL::MathOps::CosOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = cosf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::CoshOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = coshf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::ExpOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = expf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::FloorOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  MIL::Fp16 *v2;
  __int16 v4;

  v4 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, floorf(Float));
}

uint64_t MIL::MathOps::RoundOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  MIL::Fp16 *v2;
  __int16 v4;

  v4 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, roundf(Float));
}

uint64_t MIL::MathOps::SinOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = sinf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::SinhOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = sinhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::SqrtOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  MIL::Fp16 *v2;
  __int16 v4;

  v4 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, sqrtf(Float));
}

uint64_t MIL::MathOps::TanOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = tanf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::TanhOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = tanhf(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::AbsOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  MIL::Fp16 *v2;
  __int16 v4;

  v4 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, fabsf(Float));
}

uint64_t MIL::MathOps::Exp2Op<MIL::Fp16>(__int16 a1)
{
  float Float;
  float v2;
  MIL::Fp16 *v3;
  __int16 v5;

  v5 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  v2 = exp2f(Float);
  return MIL::Fp16::FromFloat(v3, v2);
}

uint64_t MIL::MathOps::SignOp<MIL::Fp16>(__int16 a1)
{
  MIL::Fp16 *v1;
  float Float;
  BOOL v3;
  BOOL v4;
  float v5;
  __int16 v7;

  v7 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v7);
  v3 = Float == 0.0;
  v4 = Float < 0.0;
  v5 = 0.0;
  if (v4)
    v5 = -1.0;
  if (!v4 && !v3)
    v5 = 1.0;
  return MIL::Fp16::FromFloat(v1, v5);
}

uint64_t MIL::MathOps::SquareOp<MIL::Fp16>(__int16 a1)
{
  float Float;
  MIL::Fp16 *v2;
  __int16 v4;

  v4 = a1;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v4);
  return MIL::Fp16::FromFloat(v2, Float * Float);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A04D8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0737394(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0558;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E07373FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A05D8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0737464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0658;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E07374CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::function<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A06D8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0737534(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA9A0428;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA9A0428;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<MIL::Fp16 (*)(MIL::Fp16),std::allocator<MIL::Fp16 (*)(MIL::Fp16)>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A04D8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A04D8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A04D8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E07376BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A04D8;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  _QWORD *v2;
  __int16 v3;
  unsigned __int8 *v4;
  __int16 v5;
  float Float;
  float v7;
  MIL::Fp16 *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  __int16 v13;
  __int16 v14;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_WORD *)v4 + 20);
  v14 = v3;
  v13 = v5;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v13);
  v9 = MIL::Fp16::FromFloat(v8, 1.0 / (float)(Float + v7));
  if (v12 < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_1E07377C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0558;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0558;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0558;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E07378D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0558;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  _QWORD *v2;
  __int16 v3;
  unsigned __int8 *v4;
  __int16 v5;
  float Float;
  float v7;
  float v8;
  MIL::Fp16 *v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  __int16 v14;
  __int16 v15;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_WORD *)v4 + 20);
  v15 = v3;
  v14 = v5;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v15);
  v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  v8 = logf(Float + v7);
  v10 = MIL::Fp16::FromFloat(v9, v8);
  if (v13 < 0)
    operator delete(__p[0]);
  return v10;
}

void sub_1E07379DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A05D8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A05D8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A05D8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0737AF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A05D8;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  _QWORD *v2;
  __int16 v3;
  unsigned __int8 *v4;
  __int16 v5;
  float Float;
  float v7;
  MIL::Fp16 *v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  __int16 v13;
  __int16 v14;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_WORD *)v4 + 20);
  v14 = v3;
  v13 = v5;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  v7 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v13);
  v9 = MIL::Fp16::FromFloat(v8, 1.0 / sqrtf(Float + v7));
  if (v12 < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_1E0737BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#3}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0658;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0658;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0658;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0737D10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0658;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  _QWORD *v2;
  __int16 v3;
  unsigned __int8 *v4;
  __int16 v5;
  unsigned __int8 *v6;
  __int16 v7;
  float Float;
  float v9;
  MIL::Fp16 *v10;
  float v11;
  uint64_t v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v16, "alpha");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)v16);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_WORD *)v4 + 20);
  std::string::basic_string[abi:ne180100]<0>(__p, "beta");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = *((_WORD *)v6 + 20);
  v20 = v3;
  v19 = v5;
  v18 = v7;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v19);
  v9 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v20);
  v11 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v18);
  if (v11 >= v9)
    v11 = v9;
  if (Float >= v11)
    v11 = Float;
  v12 = MIL::Fp16::FromFloat(v10, v11);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  return v12;
}

void sub_1E0737E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#4}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A06D8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A06D8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A06D8;
  std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0737FA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A06D8;
  return std::unordered_map<std::string,MIL::Fp16>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  _QWORD *v2;
  __int16 v3;
  unsigned __int8 *v4;
  __int16 v5;
  float Float;
  MIL::Fp16 *v7;
  float v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  __int16 v13;
  __int16 v14;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_WORD *)v4 + 20);
  v14 = v3;
  v13 = v5;
  Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v13);
  v8 = MIL::Fp16::GetFloat((MIL::Fp16 *)&v14);
  if (Float >= v8)
    v8 = Float;
  v9 = MIL::Fp16::FromFloat(v7, v8);
  if (v12 < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_1E07380AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5},std::allocator<std::function<MIL::Fp16 ()(MIL::Fp16)> `anonymous namespace'::GetUnaryOpFunction<MIL::Fp16>(std::string const&,std::unordered_map<std::string,MIL::Fp16>)::{lambda(MIL::Fp16)#5}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

uint64_t std::unordered_map<std::string,MIL::Fp16>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::Fp16> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1E073816C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::Fp16> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::pair<std::string const,MIL::Fp16> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1E07383DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::Fp16>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::Fp16>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::Fp16>>>::__construct_node_hash<std::pair<std::string const,MIL::Fp16> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_WORD *)v8 + 20) = *(_WORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E073848C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::MathOps::AcosOp<int>(int a1)
{
  return (int)acos((double)a1);
}

uint64_t MIL::MathOps::AcoshOp<int>(int a1)
{
  return (int)acosh((double)a1);
}

uint64_t MIL::MathOps::AsinOp<int>(int a1)
{
  return (int)asin((double)a1);
}

uint64_t MIL::MathOps::AsinhOp<int>(int a1)
{
  return (int)asinh((double)a1);
}

uint64_t MIL::MathOps::AtanOp<int>(int a1)
{
  return (int)atan((double)a1);
}

uint64_t MIL::MathOps::AtanhOp<int>(int a1)
{
  return (int)atanh((double)a1);
}

uint64_t MIL::MathOps::CosOp<int>(int a1)
{
  return (int)cos((double)a1);
}

uint64_t MIL::MathOps::CoshOp<int>(int a1)
{
  return (int)cosh((double)a1);
}

uint64_t MIL::MathOps::ExpOp<int>(int a1)
{
  return (int)exp((double)a1);
}

uint64_t MIL::MathOps::SinOp<int>(int a1)
{
  return (int)sin((double)a1);
}

uint64_t MIL::MathOps::SinhOp<int>(int a1)
{
  return (int)sinh((double)a1);
}

uint64_t MIL::MathOps::SqrtOp<int>(int a1)
{
  return (int)sqrt((double)a1);
}

uint64_t MIL::MathOps::TanOp<int>(int a1)
{
  return (int)tan((double)a1);
}

uint64_t MIL::MathOps::TanhOp<int>(int a1)
{
  return (int)tanh((double)a1);
}

uint64_t MIL::MathOps::AbsOp<int>(int a1)
{
  return (int)fabs((double)a1);
}

uint64_t MIL::MathOps::Exp2Op<int>(int a1)
{
  return (int)ldexp(1.0, a1);
}

uint64_t MIL::MathOps::SignOp<int>(int a1)
{
  unsigned int v1;

  if (a1)
    v1 = -1;
  else
    v1 = 0;
  if (a1 >= 1)
    return 1;
  else
    return v1;
}

uint64_t MIL::MathOps::SquareOp<int>(int a1)
{
  return (int)((double)a1 * (double)a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0808;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E07386D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0888;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E073873C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0908;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E07387A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0988;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E073880C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<int ()(int)>::function<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = operator new(0x30uLL);
  *v4 = &off_1EA9A0A08;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v4 + 1), a2);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1E0738874(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA9A0758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA9A0758;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<int (*)(int),std::allocator<int (*)(int)>,int ()(int)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0808;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0808;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0808;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E07389FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0808;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  _QWORD *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  void *__p[2];
  char v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((v5 + v3 + 1) >= 3)
    return 0;
  else
    return (v5 + v3);
}

void sub_1E0738AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#1}>,int ()(int)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0888;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0888;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0888;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0738BEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0888;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  _QWORD *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  void *__p[2];
  char v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0)
    operator delete(__p[0]);
  return (int)log((double)(v5 + v3));
}

void sub_1E0738CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#2}>,int ()(int)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0908;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0908;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0908;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0738DDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0908;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  _QWORD *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  void *__p[2];
  char v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "epsilon");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0)
    operator delete(__p[0]);
  return (int)(1.0 / sqrt((double)(v5 + v3)));
}

void sub_1E0738EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#3}>,int ()(int)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0988;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0988;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0988;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E0738FD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0988;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::operator()(uint64_t a1, int *a2)
{
  _QWORD *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v12, "alpha");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)v12);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_DWORD *)v4 + 10);
  std::string::basic_string[abi:ne180100]<0>(__p, "beta");
  v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = *((_DWORD *)v6 + 10);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v7 >= v3)
    v8 = v3;
  else
    v8 = v7;
  if ((int)v8 <= (int)v5)
    return v5;
  else
    return v8;
}

void sub_1E07390FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#4}>,int ()(int)>::target_type()
{
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0A08;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::~__func(_QWORD *a1)
{
  *a1 = &off_1EA9A0A08;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 1));
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x30uLL);
  *v2 = &off_1EA9A0A08;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1E073922C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0A08;
  return std::unordered_map<std::string,int>::unordered_map((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
}

void std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  void *__p[2];
  char v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_DWORD *)v4 + 10);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((int)v5 <= (int)v3)
    return v3;
  else
    return v5;
}

void sub_1E0739300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5},std::allocator<std::function<int ()(int)> `anonymous namespace'::GetUnaryOpFunction<int>(std::string const&,std::unordered_map<std::string,int>)::{lambda(int)#5}>,int ()(int)>::target_type()
{
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1E07393C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1E0739630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E07396E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1E073996C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[40] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E0739A1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1EA9A0A88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1EA9A0A88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<unsigned char (*)(unsigned char),std::allocator<unsigned char (*)(unsigned char)>,unsigned char ()(unsigned char)>::target_type()
{
}

uint64_t std::unordered_map<std::string,unsigned char>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1E0739B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned char> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1E0739DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__construct_node_hash<std::pair<std::string const,unsigned char> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  v8[40] = *(_BYTE *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1E0739E78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Cast::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  void **v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  void **v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  uint64_t i;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  uint64_t result;
  uint64_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120;
  std::__shared_weak_count *v121;
  void **v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  void *v130[2];
  char v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  __int128 v134;
  __int128 v135;
  void *v136[2];
  uint64_t v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char **v145;
  __n128 v146;
  void *__p;
  void *v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  __n128 v156;
  _QWORD *v157;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD v161[3];
  uint64_t v162[3];
  _QWORD v163[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD v168[3];
  _QWORD *v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _QWORD v174[3];
  _QWORD *v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v157 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v165 = (uint64_t)&v8->~__shared_weak_count_0;
  v166 = (uint64_t)&v8->~__shared_weak_count_0;
  v158 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v153 = v10;
  *v10 = v9;
  v154 = v10 + 1;
  v155 = v10 + 1;
  v159 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v153);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v150 = v12;
  *v12 = v11;
  v151 = v12 + 1;
  v152 = v12 + 1;
  v160 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v150);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v148 = v14 + 1;
  v149 = v14 + 1;
  v161[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v158, 4, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&v138);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v138);
  v15 = v138;
  v138 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v17 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (Scalar)
  {
    v165 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v157;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v146);
  MIL::IRParameter::Make(&v146, (uint64_t *)&v158);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "dtype", (uint64_t *)&v158);
  v21 = v158;
  v158 = 0;
  if (v21)
    (*((void (**)(void **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v23 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v145 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  v158 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v145, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v158, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v145, 1uLL);
  v26 = v145;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v153 = v28;
  *v28 = v27;
  v154 = v28 + 1;
  v155 = v28 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v153);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v150 = v30;
  *v30 = v29;
  v151 = v30 + 1;
  v152 = v30 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v150);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v148 = v32 + 1;
  v149 = v32 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v138 = v34;
  *v34 = v33;
  v139 = v34 + 1;
  v140 = v34 + 1;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v138);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v141);
  MIL::IRParameter::Make(&v141, &v142);
  v35 = v142;
  v143 = v142;
  if (v142)
  {
    v36 = (_QWORD *)operator new();
    v37 = v142;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v144 = v36;
  v142 = 0;
  v38 = v26[2];
  v39 = v26[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v26) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v26;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v161[1] = v26 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v143 = 0;
    v144 = 0;
    v49 = *v26;
    v48 = v26[1];
    if (v48 == *v26)
    {
      v52 = (void **)v26[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = (void **)*v26;
      v48 = v26[1];
    }
    v40 = (char *)(v47 + 2);
    *v26 = v50;
    v158 = v52;
    v159 = (uint64_t)v52;
    v26[1] = (char *)(v47 + 2);
    v160 = (uint64_t)v48;
    v53 = v26[2];
    v26[2] = &v45[16 * v46];
    v161[0] = v53;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v158);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v143 = 0;
    v144 = 0;
  }
  v26[1] = v40;
  v54 = v142;
  v142 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v141.n128_u64[1];
  if (v141.n128_u64[1])
  {
    v56 = (unint64_t *)(v141.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  *(_OWORD *)v136 = *(_OWORD *)a2;
  v137 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v157;
  *(_QWORD *)&v135 = v157;
  if (v157)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v135 + 1) = v59;
  v157 = 0;
  *(_QWORD *)&v134 = v145;
  if (v145)
  {
    v60 = (_QWORD *)operator new();
    v61 = v145;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v134 + 1) = v60;
  v145 = 0;
  v174[0] = &unk_1EA99FAC8;
  v174[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateCast;
  v175 = v174;
  v173 = 0;
  MIL::IROperator::Make((__int128 *)v136, &v135, &v134, (uint64_t)v174, (uint64_t)v172, a3);
  v62 = v173;
  if (v173 == v172)
  {
    v63 = 4;
    v62 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_66;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_66:
  v64 = v175;
  if (v175 == v174)
  {
    v65 = 4;
    v64 = v174;
    goto LABEL_70;
  }
  if (v175)
  {
    v65 = 5;
LABEL_70:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
  if (*((_QWORD *)&v134 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v137) < 0)
    operator delete(v136[0]);
  v72 = *a3;
  v170[0] = &off_1EA99FBD8;
  v170[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 200))(v72, v170);
  v73 = v171;
  if (v171 == v170)
  {
    v74 = 4;
    v73 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_88;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_88:
  v75 = *a3;
  v168[0] = &off_1EA9A00F8;
  v168[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCast;
  v169 = v168;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v75 + 216))(v75, v168);
  v76 = v169;
  if (v169 == v168)
  {
    v77 = 4;
    v76 = v168;
  }
  else
  {
    if (!v169)
      goto LABEL_93;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_93:
  MIL::Validation::TensorDTypeConstraints::Make(&v158);
  v78 = v158;
  std::string::basic_string[abi:ne180100]<0>(v130, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v130, 0, (uint64_t *)&Scalar);
  v132 = Scalar;
  if (Scalar)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = Scalar;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v133 = v79;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v78 + 3))(v78, &v132, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v81 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = Scalar;
  Scalar = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  if (v131 < 0)
    operator delete(v130[0]);
  v85 = v158;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v126 = Scalar;
  if (Scalar)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = Scalar;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v127 = v86;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "T_Out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v85 + 3))(v85, &v126, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v88 = v127;
  if (v127)
  {
    v89 = (unint64_t *)&v127->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = Scalar;
  Scalar = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  v92 = *a3;
  v122 = v158;
  if (v158)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v158;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v123 = v93;
  v158 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v92 + 56))(v92, &v122);
  v95 = v123;
  if (v123)
  {
    v96 = (unint64_t *)&v123->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v158;
  v158 = 0;
  if (v98)
    (*((void (**)(void **))*v98 + 1))(v98);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v153);
  v99 = v153;
  std::string::basic_string[abi:ne180100]<0>(v118, "dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v150);
  v120 = v150;
  if (v150)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = (std::__shared_weak_count_vtbl *)v150;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v121 = v100;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v158, "BOOL");
  std::string::basic_string[abi:ne180100]<0>(v161, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v162, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v163, "int32");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v158, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v99 + 24))(v99, &v120, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v163[i + 2]) < 0)
      operator delete((void *)v163[i]);
  }
  v103 = v121;
  if (v121)
  {
    v104 = (unint64_t *)&v121->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v150;
  v150 = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  if (v119 < 0)
    operator delete(v118[0]);
  v107 = *a3;
  v116 = v153;
  if (v153)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)v153;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v117 = v108;
  v153 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v107 + 56))(v107, &v116);
  v110 = v117;
  if (v117)
  {
    v111 = (unint64_t *)&v117->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v153;
  v153 = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v145, 0);
  result = (uint64_t)v157;
  if (v157)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v157);
    return MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E073AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  void *v62;
  uint64_t v63;

  v62 = a55;
  a55 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a46, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Clip::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  void **v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  void **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void **v109;
  uint64_t result;
  uint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  void *v114[2];
  char v115;
  void *v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  void *v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  void *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  void *v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  __n128 v146;
  void *__p;
  void *v148;
  _QWORD *v149;
  __n128 v150;
  _QWORD *v151;
  _QWORD v152[3];
  _QWORD *v153;
  _BYTE v154[24];
  _BYTE *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  void *v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD v163[2];
  void **Scalar;
  void **v165;
  void **v166;
  char *v167;
  char **v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v151 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v165 = v8 + 1;
  v166 = v8 + 1;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v148 = v10 + 1;
  v149 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 2, &v150);
  MIL::IRParameter::Make(&v150, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v13 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v165 = Scalar;
    operator delete(Scalar);
  }
  v15 = v151;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v165 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v146);
  MIL::IRParameter::Make(&v146, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v15, "alpha", (uint64_t *)&__p);
  v16 = __p;
  __p = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v18 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v151;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v165 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v145);
  MIL::IRParameter::Make(&v145, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "beta", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v23 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v144 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v26 = v144;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v148 = v28 + 1;
  v149 = v28 + 1;
  v163[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v160 = v30;
  *v30 = v29;
  v161 = (uint64_t)(v30 + 1);
  v162 = v30 + 1;
  v163[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v160);
  MIL::IRParameter::MakeTypeSet((uint64_t)v163, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v31 = v141;
  v142 = v141;
  if (v141)
  {
    v32 = (_QWORD *)operator new();
    v33 = v141;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v143 = v32;
  v141 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v168 = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v142 = 0;
    v143 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = (void **)v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = (void **)*v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    Scalar = v48;
    v165 = v48;
    v26[1] = (char *)(v43 + 2);
    v166 = (void **)v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v167 = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v142 = 0;
    v143 = 0;
  }
  v26[1] = v36;
  v50 = v141;
  v141 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v52 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v160)
  {
    v161 = (uint64_t)v160;
    operator delete(v160);
  }
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v151;
  *(_QWORD *)&v137 = v151;
  if (v151)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v137 + 1) = v55;
  v151 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v56 = (_QWORD *)operator new();
    v57 = v144;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v136 + 1) = v56;
  v144 = 0;
  v159 = 0;
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v158, (uint64_t)v156, a3);
  v58 = v157;
  if (v157 == v156)
  {
    v59 = 4;
    v58 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_65;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_65:
  v60 = v159;
  if (v159 == v158)
  {
    v61 = 4;
    v60 = v158;
    goto LABEL_69;
  }
  if (v159)
  {
    v61 = 5;
LABEL_69:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v68 = *a3;
  v69 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v69, (uint64_t)v154);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v68 + 200))(v68, v154);
  v70 = v155;
  if (v155 == v154)
  {
    v71 = 4;
    v70 = v154;
  }
  else
  {
    if (!v155)
      goto LABEL_87;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_87:
  if (SHIBYTE(v166) < 0)
    operator delete(Scalar);
  v72 = *a3;
  v152[0] = &off_1EA9A00F8;
  v152[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceClip;
  v153 = v152;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 216))(v72, v152);
  v73 = v153;
  if (v153 == v152)
  {
    v74 = 4;
    v73 = v152;
  }
  else
  {
    if (!v153)
      goto LABEL_94;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_94:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v75 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v132, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, (uint64_t *)&__p);
  v134 = __p;
  if (__p)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)__p;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v135 = v76;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*((void (**)(void **, void **, void **))*v75 + 3))(v75, &v134, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v78 = v135;
  if (v135)
  {
    p_shared_owners = (unint64_t *)&v135->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = __p;
  __p = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v126, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v126, 0, (uint64_t *)&__p);
  v128 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v129 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "T");
  (*((void (**)(void **, void **, void **))*v82 + 3))(v82, &v128, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v85 = v129;
  if (v129)
  {
    v86 = (unint64_t *)&v129->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v120, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v120, 0, (uint64_t *)&__p);
  v122 = __p;
  if (__p)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)__p;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v123 = v90;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v118, "T");
  (*((void (**)(void **, void **, void **))*v89 + 3))(v89, &v122, v118);
  if (v119 < 0)
    operator delete(v118[0]);
  v92 = v123;
  if (v123)
  {
    v93 = (unint64_t *)&v123->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = __p;
  __p = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  if (v121 < 0)
    operator delete(v120[0]);
  v96 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v116 = __p;
  if (__p)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)__p;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v117 = v97;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v114, "T");
  (*((void (**)(void **, void **, void **))*v96 + 3))(v96, &v116, v114);
  if (v115 < 0)
    operator delete(v114[0]);
  v99 = v117;
  if (v117)
  {
    v100 = (unint64_t *)&v117->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = __p;
  __p = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = *a3;
  v112 = Scalar;
  if (Scalar)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = Scalar;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = (std::__shared_weak_count_vtbl *)v105;
  }
  else
  {
    v104 = 0;
  }
  v113 = v104;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v103 + 56))(v103, &v112);
  v106 = v113;
  if (v113)
  {
    v107 = (unint64_t *)&v113->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = Scalar;
  Scalar = 0;
  if (v109)
    (*((void (**)(void **))*v109 + 1))(v109);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = (uint64_t)v151;
  if (v151)
  {
    v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v151);
    return MEMORY[0x1E0C023A0](v111, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E073BD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t *v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;

  v66 = *(_QWORD *)(v64 - 112);
  *(_QWORD *)(v64 - 112) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *v63;
  *v63 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  _Unwind_Resume(a1);
}

void sub_1E073C190()
{
  JUMPOUT(0x1E073C154);
}

uint64_t MIL::Operators::Common::ios15::ElementwiseUnary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  void **v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void **v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void **v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void **v84;
  uint64_t result;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void **v113;
  void **v114;
  void **v115;
  char *v116;
  char **v117;
  _BYTE v118[24];
  _BYTE *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  void *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD v127[3];

  v127[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v112 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  v113 = v10;
  *v10 = (void *)v9;
  v114 = v10 + 1;
  v115 = v10 + 1;
  v124 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v109 = v12 + 1;
  v110 = v12 + 1;
  v125 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v124, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v105);
  v13 = v105;
  v105 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v15 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v18 = v107;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v109 = v20 + 1;
  v110 = v20 + 1;
  v127[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v124 = v22;
  *v22 = v21;
  v125 = (uint64_t)(v22 + 1);
  v126 = v22 + 1;
  v127[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v124);
  MIL::IRParameter::MakeTypeSet((uint64_t)v127, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v23 = v104;
  v105 = v104;
  if (v104)
  {
    v24 = (_QWORD *)operator new();
    v25 = v104;
    *v24 = &unk_1EA99F888;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  v106 = v24;
  v104 = 0;
  v26 = v18[2];
  v27 = v18[1];
  if (v27 >= v26)
  {
    v29 = (v27 - *v18) >> 4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v31 = v26 - *v18;
    if (v31 >> 3 > v30)
      v30 = v31 >> 3;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    v117 = v18 + 2;
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v32);
    v35 = (uint64_t *)&v33[16 * v29];
    *v35 = v23;
    v35[1] = (uint64_t)v24;
    v105 = 0;
    v106 = 0;
    v37 = *v18;
    v36 = v18[1];
    if (v36 == *v18)
    {
      v40 = (void **)v18[1];
      v38 = &v33[16 * v29];
    }
    else
    {
      v38 = &v33[16 * v29];
      do
      {
        v39 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v38 - 1) = v39;
        v38 -= 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
      }
      while (v36 != v37);
      v40 = (void **)*v18;
      v36 = v18[1];
    }
    v28 = (char *)(v35 + 2);
    *v18 = v38;
    v113 = v40;
    v114 = v40;
    v18[1] = (char *)(v35 + 2);
    v115 = (void **)v36;
    v41 = v18[2];
    v18[2] = &v33[16 * v34];
    v116 = v41;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v27 = v23;
    *((_QWORD *)v27 + 1) = v24;
    v28 = v27 + 16;
    v105 = 0;
    v106 = 0;
  }
  v18[1] = v28;
  v42 = v104;
  v104 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v44 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v124)
  {
    v125 = (uint64_t)v124;
    operator delete(v124);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v46 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v47 = (_QWORD *)operator new();
    *v47 = &unk_1EA99F8E8;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v46;
  }
  else
  {
    v47 = 0;
  }
  *((_QWORD *)&v100 + 1) = v47;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v48 = (_QWORD *)operator new();
    v49 = v107;
    *v48 = &unk_1EA99F948;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v99 + 1) = v48;
  v107 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v122, a3);
  v121 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v122, (uint64_t)v120, a4);
  v50 = v121;
  if (v121 == v120)
  {
    v51 = 4;
    v50 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_51;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_51:
  v52 = v123;
  if (v123 == v122)
  {
    v53 = 4;
    v52 = v122;
    goto LABEL_55;
  }
  if (v123)
  {
    v53 = 5;
LABEL_55:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v60 = *a4;
  v61 = std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v61, (uint64_t)v118);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v60 + 200))(v60, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_73;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*((void (**)(void **, void **, void **))*v64 + 3))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*((void (**)(void **, void **, void **))*v71 + 3))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a4;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = (std::__shared_weak_count_vtbl *)v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*((void (**)(void **))*v84 + 1))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E073CAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = *(_QWORD *)(v54 - 248);
  *(_QWORD *)(v54 - 248) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *v53;
  *v53 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v54 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Acos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcos;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E073D73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Acosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcosh;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E073E3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Asin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsin;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E073F07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Asinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsinh;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E073FD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Atan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtan;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07409BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Atanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtanh;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074165C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Ceil::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCeil;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07422FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Cos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCos;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0742F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Cosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCosh;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0743C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ElementwiseUnaryWithEpsilon::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  void **v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void **v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  void *v76;
  void **v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void **v97;
  uint64_t result;
  uint64_t v99;
  void **v100;
  std::__shared_weak_count *v101;
  void *v102[2];
  char v103;
  void *v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110;
  std::__shared_weak_count *v111;
  void *v112[2];
  char v113;
  void *v114[2];
  char v115;
  void *v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  __int128 v119;
  void *v120[2];
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char **v126;
  __n128 v127;
  void *__p;
  void *v129;
  _QWORD *v130;
  __n128 v131;
  _QWORD *v132;
  _BYTE v133[24];
  _BYTE *v134;
  _BYTE v135[24];
  _BYTE *v136;
  _BYTE v137[24];
  _BYTE *v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD v142[2];
  void **Scalar;
  void **v144;
  void **v145;
  char *v146;
  char **v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v132 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (void **)operator new(8uLL);
  Scalar = v10;
  *v10 = (void *)v9;
  v144 = v10 + 1;
  v145 = v10 + 1;
  v139 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v129 = v12 + 1;
  v130 = v12 + 1;
  v140 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v139, 2, &v131);
  MIL::IRParameter::Make(&v131, &v124);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v124);
  v13 = v124;
  v124 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v131.n128_u64[1];
  if (v131.n128_u64[1])
  {
    v15 = (unint64_t *)(v131.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v144 = Scalar;
    operator delete(Scalar);
  }
  v17 = v132;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v144 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v127);
  MIL::IRParameter::Make(&v127, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v17, "epsilon", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v127.n128_u64[1];
  if (v127.n128_u64[1])
  {
    v21 = (unint64_t *)(v127.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v126 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v126, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v126, 1uLL);
  v24 = v126;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v129 = v26 + 1;
  v130 = v26 + 1;
  v142[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v139 = v28;
  *v28 = v27;
  v140 = (uint64_t)(v28 + 1);
  v141 = v28 + 1;
  v142[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v139);
  MIL::IRParameter::MakeTypeSet((uint64_t)v142, 2, &v122);
  MIL::IRParameter::Make(&v122, &v123);
  v29 = v123;
  v124 = v123;
  if (v123)
  {
    v30 = (_QWORD *)operator new();
    v31 = v123;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v125 = v30;
  v123 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v147 = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v124 = 0;
    v125 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = (void **)v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = (void **)*v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    Scalar = v46;
    v144 = v46;
    v24[1] = (char *)(v41 + 2);
    v145 = (void **)v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v146 = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v124 = 0;
    v125 = 0;
  }
  v24[1] = v34;
  v48 = v123;
  v123 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v122.n128_u64[1];
  if (v122.n128_u64[1])
  {
    v50 = (unint64_t *)(v122.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v139)
  {
    v140 = (uint64_t)v139;
    operator delete(v139);
  }
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v120 = *(_OWORD *)a2;
  v121 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v132;
  *(_QWORD *)&v119 = v132;
  if (v132)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v119 + 1) = v53;
  v132 = 0;
  *(_QWORD *)&v118 = v126;
  if (v126)
  {
    v54 = (_QWORD *)operator new();
    v55 = v126;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v118 + 1) = v54;
  v126 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v137, a3);
  v136 = 0;
  MIL::IROperator::Make((__int128 *)v120, &v119, &v118, (uint64_t)v137, (uint64_t)v135, a4);
  v56 = v136;
  if (v136 == v135)
  {
    v57 = 4;
    v56 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v138;
  if (v138 == v137)
  {
    v59 = 4;
    v58 = v137;
    goto LABEL_62;
  }
  if (v138)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (*((_QWORD *)&v118 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v121) < 0)
    operator delete(v120[0]);
  v66 = *a4;
  v67 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v67, (uint64_t)v133);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 200))(v66, v133);
  v68 = v134;
  if (v134 == v133)
  {
    v69 = 4;
    v68 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_80;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_80:
  if (SHIBYTE(v145) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v70 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v114, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v114, 0, (uint64_t *)&__p);
  v116 = __p;
  if (__p)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v72 = (std::__shared_weak_count_vtbl *)__p;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = v72;
  }
  else
  {
    v71 = 0;
  }
  v117 = v71;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v112, "T");
  (*((void (**)(void **, void **, void **))*v70 + 3))(v70, &v116, v112);
  if (v113 < 0)
    operator delete(v112[0]);
  v73 = v117;
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = __p;
  __p = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  if (v115 < 0)
    operator delete(v114[0]);
  v77 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v108, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v108, 0, (uint64_t *)&__p);
  v110 = __p;
  if (__p)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = (std::__shared_weak_count_vtbl *)__p;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v111 = v78;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, void **, void **))*v77 + 3))(v77, &v110, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v80 = v111;
  if (v111)
  {
    v81 = (unint64_t *)&v111->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = __p;
  __p = 0;
  if (v83)
    (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
  if (v109 < 0)
    operator delete(v108[0]);
  v84 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v104 = __p;
  if (__p)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = (std::__shared_weak_count_vtbl *)__p;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v105 = v85;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v102, "T");
  (*((void (**)(void **, void **, void **))*v84 + 3))(v84, &v104, v102);
  if (v103 < 0)
    operator delete(v102[0]);
  v87 = v105;
  if (v105)
  {
    v88 = (unint64_t *)&v105->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = *a4;
  v100 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v101 = v92;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v91 + 56))(v91, &v100);
  v94 = v101;
  if (v101)
  {
    v95 = (unint64_t *)&v101->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(void **))*v97 + 1))(v97);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v126, 0);
  result = (uint64_t)v132;
  if (v132)
  {
    v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v132);
    return MEMORY[0x1E0C023A0](v99, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0744A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  uint64_t *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;

  v48 = *(_QWORD *)(v46 - 112);
  *(_QWORD *)(v46 - 112) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *v45;
  *v45 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v46 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Inverse::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  void **v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  void *v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  void **v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  uint64_t result;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  void *v103[2];
  char v104;
  void *v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  void *v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  __int128 v120;
  void *v121[2];
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char **v127;
  __n128 v128;
  void *__p;
  void *v130;
  _QWORD *v131;
  __n128 v132;
  _QWORD *v133;
  _QWORD v134[3];
  _QWORD *v135;
  _BYTE v136[24];
  _BYTE *v137;
  _BYTE v138[24];
  _BYTE *v139;
  _BYTE v140[24];
  _BYTE *v141;
  void *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD v145[2];
  void **Scalar;
  void **v147;
  void **v148;
  char *v149;
  char **v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v133 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v147 = v8 + 1;
  v148 = v8 + 1;
  v142 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v130 = v10 + 1;
  v131 = v10 + 1;
  v143 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v142, 2, &v132);
  MIL::IRParameter::Make(&v132, &v125);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v125);
  v11 = v125;
  v125 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v132.n128_u64[1];
  if (v132.n128_u64[1])
  {
    v13 = (unint64_t *)(v132.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v130 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v147 = Scalar;
    operator delete(Scalar);
  }
  v15 = v133;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v147 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v128);
  MIL::IRParameter::Make(&v128, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v15, "epsilon", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v19 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v127 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v127, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v127, 1uLL);
  v22 = v127;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v130 = v24 + 1;
  v131 = v24 + 1;
  v145[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v142 = v26;
  *v26 = v25;
  v143 = (uint64_t)(v26 + 1);
  v144 = v26 + 1;
  v145[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v142);
  MIL::IRParameter::MakeTypeSet((uint64_t)v145, 2, &v123);
  MIL::IRParameter::Make(&v123, &v124);
  v27 = v124;
  v125 = v124;
  if (v124)
  {
    v28 = (_QWORD *)operator new();
    v29 = v124;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v126 = v28;
  v124 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v150 = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v125 = 0;
    v126 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = (void **)v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = (void **)*v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    Scalar = v44;
    v147 = v44;
    v22[1] = (char *)(v39 + 2);
    v148 = (void **)v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v149 = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v125 = 0;
    v126 = 0;
  }
  v22[1] = v32;
  v46 = v124;
  v124 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v123.n128_u64[1];
  if (v123.n128_u64[1])
  {
    v48 = (unint64_t *)(v123.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v142)
  {
    v143 = (uint64_t)v142;
    operator delete(v142);
  }
  if (__p)
  {
    v130 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v121 = *(_OWORD *)a2;
  v122 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v133;
  *(_QWORD *)&v120 = v133;
  if (v133)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v120 + 1) = v51;
  v133 = 0;
  *(_QWORD *)&v119 = v127;
  if (v127)
  {
    v52 = (_QWORD *)operator new();
    v53 = v127;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v119 + 1) = v52;
  v127 = 0;
  v141 = 0;
  v139 = 0;
  MIL::IROperator::Make((__int128 *)v121, &v120, &v119, (uint64_t)v140, (uint64_t)v138, a3);
  v54 = v139;
  if (v139 == v138)
  {
    v55 = 4;
    v54 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v141;
  if (v141 == v140)
  {
    v57 = 4;
    v56 = v140;
    goto LABEL_62;
  }
  if (v141)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v122) < 0)
    operator delete(v121[0]);
  v64 = *a3;
  v65 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v65, (uint64_t)v136);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v64 + 200))(v64, v136);
  v66 = v137;
  if (v137 == v136)
  {
    v67 = 4;
    v66 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_80;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_80:
  if (SHIBYTE(v148) < 0)
    operator delete(Scalar);
  v68 = *a3;
  v134[0] = &off_1EA9A00F8;
  v134[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceInverse;
  v135 = v134;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v68 + 216))(v68, v134);
  v69 = v135;
  if (v135 == v134)
  {
    v70 = 4;
    v69 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_87;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_87:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v71 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v115, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v115, 0, (uint64_t *)&__p);
  v117 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v118 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v113, "T");
  (*((void (**)(void **, void **, void **))*v71 + 3))(v71, &v117, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v74 = v118;
  if (v118)
  {
    p_shared_owners = (unint64_t *)&v118->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  if (v116 < 0)
    operator delete(v115[0]);
  v78 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v109, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v109, 0, (uint64_t *)&__p);
  v111 = __p;
  if (__p)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)__p;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v112 = v79;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v107, "T");
  (*((void (**)(void **, void **, void **))*v78 + 3))(v78, &v111, v107);
  if (v108 < 0)
    operator delete(v107[0]);
  v81 = v112;
  if (v112)
  {
    v82 = (unint64_t *)&v112->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = __p;
  __p = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  if (v110 < 0)
    operator delete(v109[0]);
  v85 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v105 = __p;
  if (__p)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = (std::__shared_weak_count_vtbl *)__p;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v106 = v86;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v103, "T");
  (*((void (**)(void **, void **, void **))*v85 + 3))(v85, &v105, v103);
  if (v104 < 0)
    operator delete(v103[0]);
  v88 = v106;
  if (v106)
  {
    v89 = (unint64_t *)&v106->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = __p;
  __p = 0;
  if (v91)
    (*(void (**)(void *))(*(_QWORD *)v91 + 8))(v91);
  v92 = *a3;
  v101 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v102 = v93;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v92 + 56))(v92, &v101);
  v95 = v102;
  if (v102)
  {
    v96 = (unint64_t *)&v102->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(void **))*v98 + 1))(v98);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v127, 0);
  result = (uint64_t)v133;
  if (v133)
  {
    v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v133);
    return MEMORY[0x1E0C023A0](v100, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07458F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = *(_QWORD *)(v54 - 112);
  *(_QWORD *)(v54 - 112) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *v53;
  *v53 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Log::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  void **v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  void *v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  void **v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  uint64_t result;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  void *v103[2];
  char v104;
  void *v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  void *v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  __int128 v120;
  void *v121[2];
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char **v127;
  __n128 v128;
  void *__p;
  void *v130;
  _QWORD *v131;
  __n128 v132;
  _QWORD *v133;
  _QWORD v134[3];
  _QWORD *v135;
  _BYTE v136[24];
  _BYTE *v137;
  _BYTE v138[24];
  _BYTE *v139;
  _BYTE v140[24];
  _BYTE *v141;
  void *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD v145[2];
  void **Scalar;
  void **v147;
  void **v148;
  char *v149;
  char **v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v133 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v147 = v8 + 1;
  v148 = v8 + 1;
  v142 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v130 = v10 + 1;
  v131 = v10 + 1;
  v143 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v142, 2, &v132);
  MIL::IRParameter::Make(&v132, &v125);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v125);
  v11 = v125;
  v125 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v132.n128_u64[1];
  if (v132.n128_u64[1])
  {
    v13 = (unint64_t *)(v132.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v130 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v147 = Scalar;
    operator delete(Scalar);
  }
  v15 = v133;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v147 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v128);
  MIL::IRParameter::Make(&v128, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v15, "epsilon", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v19 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v127 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v127, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v127, 1uLL);
  v22 = v127;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v130 = v24 + 1;
  v131 = v24 + 1;
  v145[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v142 = v26;
  *v26 = v25;
  v143 = (uint64_t)(v26 + 1);
  v144 = v26 + 1;
  v145[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v142);
  MIL::IRParameter::MakeTypeSet((uint64_t)v145, 2, &v123);
  MIL::IRParameter::Make(&v123, &v124);
  v27 = v124;
  v125 = v124;
  if (v124)
  {
    v28 = (_QWORD *)operator new();
    v29 = v124;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v126 = v28;
  v124 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v150 = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v125 = 0;
    v126 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = (void **)v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = (void **)*v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    Scalar = v44;
    v147 = v44;
    v22[1] = (char *)(v39 + 2);
    v148 = (void **)v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v149 = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v125 = 0;
    v126 = 0;
  }
  v22[1] = v32;
  v46 = v124;
  v124 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v123.n128_u64[1];
  if (v123.n128_u64[1])
  {
    v48 = (unint64_t *)(v123.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v142)
  {
    v143 = (uint64_t)v142;
    operator delete(v142);
  }
  if (__p)
  {
    v130 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v121 = *(_OWORD *)a2;
  v122 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v133;
  *(_QWORD *)&v120 = v133;
  if (v133)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v120 + 1) = v51;
  v133 = 0;
  *(_QWORD *)&v119 = v127;
  if (v127)
  {
    v52 = (_QWORD *)operator new();
    v53 = v127;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v119 + 1) = v52;
  v127 = 0;
  v141 = 0;
  v139 = 0;
  MIL::IROperator::Make((__int128 *)v121, &v120, &v119, (uint64_t)v140, (uint64_t)v138, a3);
  v54 = v139;
  if (v139 == v138)
  {
    v55 = 4;
    v54 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v141;
  if (v141 == v140)
  {
    v57 = 4;
    v56 = v140;
    goto LABEL_62;
  }
  if (v141)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v122) < 0)
    operator delete(v121[0]);
  v64 = *a3;
  v65 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v65, (uint64_t)v136);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v64 + 200))(v64, v136);
  v66 = v137;
  if (v137 == v136)
  {
    v67 = 4;
    v66 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_80;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_80:
  if (SHIBYTE(v148) < 0)
    operator delete(Scalar);
  v68 = *a3;
  v134[0] = &off_1EA9A00F8;
  v134[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLog;
  v135 = v134;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v68 + 216))(v68, v134);
  v69 = v135;
  if (v135 == v134)
  {
    v70 = 4;
    v69 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_87;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_87:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v71 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v115, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v115, 0, (uint64_t *)&__p);
  v117 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v118 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v113, "T");
  (*((void (**)(void **, void **, void **))*v71 + 3))(v71, &v117, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v74 = v118;
  if (v118)
  {
    p_shared_owners = (unint64_t *)&v118->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  if (v116 < 0)
    operator delete(v115[0]);
  v78 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v109, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v109, 0, (uint64_t *)&__p);
  v111 = __p;
  if (__p)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)__p;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v112 = v79;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v107, "T");
  (*((void (**)(void **, void **, void **))*v78 + 3))(v78, &v111, v107);
  if (v108 < 0)
    operator delete(v107[0]);
  v81 = v112;
  if (v112)
  {
    v82 = (unint64_t *)&v112->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = __p;
  __p = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  if (v110 < 0)
    operator delete(v109[0]);
  v85 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v105 = __p;
  if (__p)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = (std::__shared_weak_count_vtbl *)__p;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v106 = v86;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v103, "T");
  (*((void (**)(void **, void **, void **))*v85 + 3))(v85, &v105, v103);
  if (v104 < 0)
    operator delete(v103[0]);
  v88 = v106;
  if (v106)
  {
    v89 = (unint64_t *)&v106->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = __p;
  __p = 0;
  if (v91)
    (*(void (**)(void *))(*(_QWORD *)v91 + 8))(v91);
  v92 = *a3;
  v101 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v102 = v93;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v92 + 56))(v92, &v101);
  v95 = v102;
  if (v102)
  {
    v96 = (unint64_t *)&v102->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(void **))*v98 + 1))(v98);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v127, 0);
  result = (uint64_t)v133;
  if (v133)
  {
    v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v133);
    return MEMORY[0x1E0C023A0](v100, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07467E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = *(_QWORD *)(v54 - 112);
  *(_QWORD *)(v54 - 112) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *v53;
  *v53 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Rsqrt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  void **v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  void *v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  void **v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void **v98;
  uint64_t result;
  uint64_t v100;
  void **v101;
  std::__shared_weak_count *v102;
  void *v103[2];
  char v104;
  void *v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  void *v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  __int128 v120;
  void *v121[2];
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  char **v127;
  __n128 v128;
  void *__p;
  void *v130;
  _QWORD *v131;
  __n128 v132;
  _QWORD *v133;
  _QWORD v134[3];
  _QWORD *v135;
  _BYTE v136[24];
  _BYTE *v137;
  _BYTE v138[24];
  _BYTE *v139;
  _BYTE v140[24];
  _BYTE *v141;
  void *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD v145[2];
  void **Scalar;
  void **v147;
  void **v148;
  char *v149;
  char **v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v133 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v147 = v8 + 1;
  v148 = v8 + 1;
  v142 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v130 = v10 + 1;
  v131 = v10 + 1;
  v143 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v142, 2, &v132);
  MIL::IRParameter::Make(&v132, &v125);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v125);
  v11 = v125;
  v125 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v132.n128_u64[1];
  if (v132.n128_u64[1])
  {
    v13 = (unint64_t *)(v132.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v130 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v147 = Scalar;
    operator delete(Scalar);
  }
  v15 = v133;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v147 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v128);
  MIL::IRParameter::Make(&v128, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v15, "epsilon", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v128.n128_u64[1];
  if (v128.n128_u64[1])
  {
    v19 = (unint64_t *)(v128.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v127 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v127, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v127, 1uLL);
  v22 = v127;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v130 = v24 + 1;
  v131 = v24 + 1;
  v145[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v142 = v26;
  *v26 = v25;
  v143 = (uint64_t)(v26 + 1);
  v144 = v26 + 1;
  v145[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v142);
  MIL::IRParameter::MakeTypeSet((uint64_t)v145, 2, &v123);
  MIL::IRParameter::Make(&v123, &v124);
  v27 = v124;
  v125 = v124;
  if (v124)
  {
    v28 = (_QWORD *)operator new();
    v29 = v124;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v126 = v28;
  v124 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v150 = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v125 = 0;
    v126 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = (void **)v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = (void **)*v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    Scalar = v44;
    v147 = v44;
    v22[1] = (char *)(v39 + 2);
    v148 = (void **)v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v149 = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v125 = 0;
    v126 = 0;
  }
  v22[1] = v32;
  v46 = v124;
  v124 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v123.n128_u64[1];
  if (v123.n128_u64[1])
  {
    v48 = (unint64_t *)(v123.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v142)
  {
    v143 = (uint64_t)v142;
    operator delete(v142);
  }
  if (__p)
  {
    v130 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v121 = *(_OWORD *)a2;
  v122 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v133;
  *(_QWORD *)&v120 = v133;
  if (v133)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v120 + 1) = v51;
  v133 = 0;
  *(_QWORD *)&v119 = v127;
  if (v127)
  {
    v52 = (_QWORD *)operator new();
    v53 = v127;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v119 + 1) = v52;
  v127 = 0;
  v141 = 0;
  v139 = 0;
  MIL::IROperator::Make((__int128 *)v121, &v120, &v119, (uint64_t)v140, (uint64_t)v138, a3);
  v54 = v139;
  if (v139 == v138)
  {
    v55 = 4;
    v54 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v141;
  if (v141 == v140)
  {
    v57 = 4;
    v56 = v140;
    goto LABEL_62;
  }
  if (v141)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v122) < 0)
    operator delete(v121[0]);
  v64 = *a3;
  v65 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v65, (uint64_t)v136);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v64 + 200))(v64, v136);
  v66 = v137;
  if (v137 == v136)
  {
    v67 = 4;
    v66 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_80;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_80:
  if (SHIBYTE(v148) < 0)
    operator delete(Scalar);
  v68 = *a3;
  v134[0] = &off_1EA9A00F8;
  v134[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRsqrt;
  v135 = v134;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v68 + 216))(v68, v134);
  v69 = v135;
  if (v135 == v134)
  {
    v70 = 4;
    v69 = v134;
  }
  else
  {
    if (!v135)
      goto LABEL_87;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_87:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v71 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v115, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v115, 0, (uint64_t *)&__p);
  v117 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v118 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v113, "T");
  (*((void (**)(void **, void **, void **))*v71 + 3))(v71, &v117, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v74 = v118;
  if (v118)
  {
    p_shared_owners = (unint64_t *)&v118->__shared_owners_;
    do
      v76 = __ldaxr(p_shared_owners);
    while (__stlxr(v76 - 1, p_shared_owners));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  if (v116 < 0)
    operator delete(v115[0]);
  v78 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v109, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v109, 0, (uint64_t *)&__p);
  v111 = __p;
  if (__p)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)__p;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v112 = v79;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v107, "T");
  (*((void (**)(void **, void **, void **))*v78 + 3))(v78, &v111, v107);
  if (v108 < 0)
    operator delete(v107[0]);
  v81 = v112;
  if (v112)
  {
    v82 = (unint64_t *)&v112->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = __p;
  __p = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  if (v110 < 0)
    operator delete(v109[0]);
  v85 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v105 = __p;
  if (__p)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = (std::__shared_weak_count_vtbl *)__p;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v106 = v86;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v103, "T");
  (*((void (**)(void **, void **, void **))*v85 + 3))(v85, &v105, v103);
  if (v104 < 0)
    operator delete(v103[0]);
  v88 = v106;
  if (v106)
  {
    v89 = (unint64_t *)&v106->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = __p;
  __p = 0;
  if (v91)
    (*(void (**)(void *))(*(_QWORD *)v91 + 8))(v91);
  v92 = *a3;
  v101 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v102 = v93;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v92 + 56))(v92, &v101);
  v95 = v102;
  if (v102)
  {
    v96 = (unint64_t *)&v102->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(void **))*v98 + 1))(v98);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v127, 0);
  result = (uint64_t)v133;
  if (v133)
  {
    v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v133);
    return MEMORY[0x1E0C023A0](v100, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07476D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = *(_QWORD *)(v54 - 112);
  *(_QWORD *)(v54 - 112) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *v53;
  *v53 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a45, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ElementwiseUnaryWithInt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  void **v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  void **v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void **v88;
  uint64_t result;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  __int128 v104;
  void *v105[2];
  uint64_t v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char **v114;
  void *__p;
  void *v116;
  _QWORD *v117;
  void *v118;
  void *v119;
  _QWORD *v120;
  __n128 v121;
  uint64_t v122;
  _BYTE v123[24];
  _BYTE *v124;
  _BYTE v125[24];
  _BYTE *v126;
  _BYTE v127[24];
  _BYTE *v128;
  std::__shared_weak_count_vtbl *v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char **v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v122 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v129 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v130 = (uint64_t)&v10->~__shared_weak_count_0;
  v131 = (uint64_t)&v10->~__shared_weak_count_0;
  v132 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v129);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v118 = v12;
  *v12 = v11;
  v119 = v12 + 1;
  v120 = v12 + 1;
  v133 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v118);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v116 = v14 + 1;
  v117 = v14 + 1;
  v134 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v132, 3, &v121);
  MIL::IRParameter::Make(&v121, (uint64_t *)&v107);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v107);
  v15 = v107;
  v107 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v121.n128_u64[1];
  if (v121.n128_u64[1])
  {
    v17 = (unint64_t *)(v121.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v116 = __p;
    operator delete(__p);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v129)
  {
    v130 = (uint64_t)v129;
    operator delete(v129);
  }
  v114 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v132 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v114, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v132, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v114, 1uLL);
  v20 = v114;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v118 = v22;
  *v22 = v21;
  v119 = v22 + 1;
  v120 = v22 + 1;
  v129 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v118);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v116 = v24 + 1;
  v117 = v24 + 1;
  v130 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v107 = v26;
  *v26 = v25;
  v108 = v26 + 1;
  v109 = v26 + 1;
  v131 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v107);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v129, 3, &v110);
  MIL::IRParameter::Make(&v110, &v111);
  v27 = v111;
  v112 = v111;
  if (v111)
  {
    v28 = (_QWORD *)operator new();
    v29 = v111;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v113 = v28;
  v111 = 0;
  v30 = v20[2];
  v31 = v20[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v20) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v20;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v136 = v20 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v112 = 0;
    v113 = 0;
    v41 = *v20;
    v40 = v20[1];
    if (v40 == *v20)
    {
      v44 = (void **)v20[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = (void **)*v20;
      v40 = v20[1];
    }
    v32 = (char *)(v39 + 2);
    *v20 = v42;
    v132 = v44;
    v133 = (uint64_t)v44;
    v20[1] = (char *)(v39 + 2);
    v134 = (uint64_t)v40;
    v45 = v20[2];
    v20[2] = &v37[16 * v38];
    v135 = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v132);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v112 = 0;
    v113 = 0;
  }
  v20[1] = v32;
  v46 = v111;
  v111 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v110.n128_u64[1];
  if (v110.n128_u64[1])
  {
    v48 = (unint64_t *)(v110.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (__p)
  {
    v116 = __p;
    operator delete(__p);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  *(_OWORD *)v105 = *(_OWORD *)a2;
  v106 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = v122;
  *(_QWORD *)&v104 = v122;
  if (v122)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v104 + 1) = v51;
  v122 = 0;
  *(_QWORD *)&v103 = v114;
  if (v114)
  {
    v52 = (_QWORD *)operator new();
    v53 = v114;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v103 + 1) = v52;
  v114 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v127, a3);
  v126 = 0;
  MIL::IROperator::Make((__int128 *)v105, &v104, &v103, (uint64_t)v127, (uint64_t)v125, a4);
  v54 = v126;
  if (v126 == v125)
  {
    v55 = 4;
    v54 = v125;
  }
  else
  {
    if (!v126)
      goto LABEL_55;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_55:
  v56 = v128;
  if (v128 == v127)
  {
    v57 = 4;
    v56 = v127;
    goto LABEL_59;
  }
  if (v128)
  {
    v57 = 5;
LABEL_59:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v106) < 0)
    operator delete(v105[0]);
  v64 = *a4;
  v65 = std::string::basic_string[abi:ne180100]<0>(&v132, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v65, (uint64_t)v123);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v64 + 200))(v64, v123);
  v66 = v124;
  if (v124 == v123)
  {
    v67 = 4;
    v66 = v123;
  }
  else
  {
    if (!v124)
      goto LABEL_77;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_77:
  if (SHIBYTE(v134) < 0)
    operator delete(v132);
  MIL::Validation::TensorDTypeConstraints::Make(&v132);
  v68 = v132;
  std::string::basic_string[abi:ne180100]<0>(v99, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v99, 0, (uint64_t *)&v129);
  v101 = v129;
  if (v129)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v70 = v129;
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = v70;
  }
  else
  {
    v69 = 0;
  }
  v102 = v69;
  v129 = 0;
  std::string::basic_string[abi:ne180100]<0>(v97, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v68 + 3))(v68, &v101, v97);
  if (v98 < 0)
    operator delete(v97[0]);
  v71 = v102;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v129;
  v129 = 0;
  if (v74)
    (*((void (**)(std::__shared_weak_count_vtbl *))v74->~__shared_weak_count + 1))(v74);
  if (v100 < 0)
    operator delete(v99[0]);
  v75 = v132;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v129);
  v95 = v129;
  if (v129)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = v129;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v96 = v76;
  v129 = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v75 + 3))(v75, &v95, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v78 = v96;
  if (v96)
  {
    v79 = (unint64_t *)&v96->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v129;
  v129 = 0;
  if (v81)
    (*((void (**)(std::__shared_weak_count_vtbl *))v81->~__shared_weak_count + 1))(v81);
  v82 = *a4;
  v91 = v132;
  if (v132)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = v132;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = (std::__shared_weak_count_vtbl *)v84;
  }
  else
  {
    v83 = 0;
  }
  v92 = v83;
  v132 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v82 + 56))(v82, &v91);
  v85 = v92;
  if (v92)
  {
    v86 = (unint64_t *)&v92->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v132;
  v132 = 0;
  if (v88)
    (*((void (**)(void **))*v88 + 1))(v88);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v114, 0);
  result = v122;
  if (v122)
  {
    v90 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v122);
    return MEMORY[0x1E0C023A0](v90, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0748444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,void **a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  uint64_t *v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;

  v60 = *(_QWORD *)(v58 - 112);
  *(_QWORD *)(v58 - 112) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *v57;
  *v57 = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v58 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Abs::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void **v89;
  uint64_t result;
  uint64_t v91;
  void **v92;
  std::__shared_weak_count *v93;
  void *v94[2];
  char v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  char **v115;
  void *__p;
  void *v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  _QWORD *v121;
  __n128 v122;
  uint64_t v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char **v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v123 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v132 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v133 = (uint64_t)&v8->~__shared_weak_count_0;
  v134 = (uint64_t)&v8->~__shared_weak_count_0;
  v135 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v132);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v119 = v10;
  *v10 = v9;
  v120 = v10 + 1;
  v121 = v10 + 1;
  v136 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v119);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v117 = v12 + 1;
  v118 = v12 + 1;
  v137 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v135, 3, &v122);
  MIL::IRParameter::Make(&v122, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v108);
  v13 = v108;
  v108 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v122.n128_u64[1];
  if (v122.n128_u64[1])
  {
    v15 = (unint64_t *)(v122.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v132)
  {
    v133 = (uint64_t)v132;
    operator delete(v132);
  }
  v115 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v135 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v135, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v115, 1uLL);
  v18 = v115;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v119 = v20;
  *v20 = v19;
  v120 = v20 + 1;
  v121 = v20 + 1;
  v132 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v119);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v117 = v22 + 1;
  v118 = v22 + 1;
  v133 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v108 = v24;
  *v24 = v23;
  v109 = v24 + 1;
  v110 = v24 + 1;
  v134 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v108);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v132, 3, &v111);
  MIL::IRParameter::Make(&v111, &v112);
  v25 = v112;
  v113 = v112;
  if (v112)
  {
    v26 = (_QWORD *)operator new();
    v27 = v112;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v114 = v26;
  v112 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v139 = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v113 = 0;
    v114 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = (void **)v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = (void **)*v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v135 = v42;
    v136 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v137 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v138 = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v135);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v113 = 0;
    v114 = 0;
  }
  v18[1] = v30;
  v44 = v112;
  v112 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v46 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  *(_OWORD *)v106 = *(_OWORD *)a2;
  v107 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v123;
  *(_QWORD *)&v105 = v123;
  if (v123)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v105 + 1) = v49;
  v123 = 0;
  *(_QWORD *)&v104 = v115;
  if (v115)
  {
    v50 = (_QWORD *)operator new();
    v51 = v115;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v104 + 1) = v50;
  v115 = 0;
  v131 = 0;
  v129 = 0;
  MIL::IROperator::Make((__int128 *)v106, &v105, &v104, (uint64_t)v130, (uint64_t)v128, a3);
  v52 = v129;
  if (v129 == v128)
  {
    v53 = 4;
    v52 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v131;
  if (v131 == v130)
  {
    v55 = 4;
    v54 = v130;
    goto LABEL_59;
  }
  if (v131)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  v62 = *a3;
  v63 = std::string::basic_string[abi:ne180100]<0>(&v135, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v63, (uint64_t)v126);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 200))(v62, v126);
  v64 = v127;
  if (v127 == v126)
  {
    v65 = 4;
    v64 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_77;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_77:
  if (SHIBYTE(v137) < 0)
    operator delete(v135);
  v66 = *a3;
  v124[0] = &off_1EA9A00F8;
  v124[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAbs;
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v66 + 216))(v66, v124);
  v67 = v125;
  if (v125 == v124)
  {
    v68 = 4;
    v67 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_84;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_84:
  MIL::Validation::TensorDTypeConstraints::Make(&v135);
  v69 = v135;
  std::string::basic_string[abi:ne180100]<0>(v100, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, (uint64_t *)&v132);
  v102 = v132;
  if (v132)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = v132;
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v71;
  }
  else
  {
    v70 = 0;
  }
  v103 = v70;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v98, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v69 + 3))(v69, &v102, v98);
  if (v99 < 0)
    operator delete(v98[0]);
  v72 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v132;
  v132 = 0;
  if (v75)
    (*((void (**)(std::__shared_weak_count_vtbl *))v75->~__shared_weak_count + 1))(v75);
  if (v101 < 0)
    operator delete(v100[0]);
  v76 = v135;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v132);
  v96 = v132;
  if (v132)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v132;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v97 = v77;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v94, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v96, v94);
  if (v95 < 0)
    operator delete(v94[0]);
  v79 = v97;
  if (v97)
  {
    v80 = (unint64_t *)&v97->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v132;
  v132 = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  v83 = *a3;
  v92 = v135;
  if (v135)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v135;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
  }
  else
  {
    v84 = 0;
  }
  v93 = v84;
  v135 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v83 + 56))(v83, &v92);
  v86 = v93;
  if (v93)
  {
    v87 = (unint64_t *)&v93->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, 0);
  result = v123;
  if (v123)
  {
    v91 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v123);
    return MEMORY[0x1E0C023A0](v91, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074917C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)(v50 - 112);
  *(_QWORD *)(v50 - 112) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Exp2::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void **v89;
  uint64_t result;
  uint64_t v91;
  void **v92;
  std::__shared_weak_count *v93;
  void *v94[2];
  char v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  char **v115;
  void *__p;
  void *v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  _QWORD *v121;
  __n128 v122;
  uint64_t v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char **v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v123 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v132 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v133 = (uint64_t)&v8->~__shared_weak_count_0;
  v134 = (uint64_t)&v8->~__shared_weak_count_0;
  v135 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v132);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v119 = v10;
  *v10 = v9;
  v120 = v10 + 1;
  v121 = v10 + 1;
  v136 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v119);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v117 = v12 + 1;
  v118 = v12 + 1;
  v137 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v135, 3, &v122);
  MIL::IRParameter::Make(&v122, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v108);
  v13 = v108;
  v108 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v122.n128_u64[1];
  if (v122.n128_u64[1])
  {
    v15 = (unint64_t *)(v122.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v132)
  {
    v133 = (uint64_t)v132;
    operator delete(v132);
  }
  v115 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v135 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v135, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v115, 1uLL);
  v18 = v115;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v119 = v20;
  *v20 = v19;
  v120 = v20 + 1;
  v121 = v20 + 1;
  v132 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v119);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v117 = v22 + 1;
  v118 = v22 + 1;
  v133 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v108 = v24;
  *v24 = v23;
  v109 = v24 + 1;
  v110 = v24 + 1;
  v134 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v108);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v132, 3, &v111);
  MIL::IRParameter::Make(&v111, &v112);
  v25 = v112;
  v113 = v112;
  if (v112)
  {
    v26 = (_QWORD *)operator new();
    v27 = v112;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v114 = v26;
  v112 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v139 = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v113 = 0;
    v114 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = (void **)v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = (void **)*v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v135 = v42;
    v136 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v137 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v138 = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v135);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v113 = 0;
    v114 = 0;
  }
  v18[1] = v30;
  v44 = v112;
  v112 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v46 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  *(_OWORD *)v106 = *(_OWORD *)a2;
  v107 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v123;
  *(_QWORD *)&v105 = v123;
  if (v123)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v105 + 1) = v49;
  v123 = 0;
  *(_QWORD *)&v104 = v115;
  if (v115)
  {
    v50 = (_QWORD *)operator new();
    v51 = v115;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v104 + 1) = v50;
  v115 = 0;
  v131 = 0;
  v129 = 0;
  MIL::IROperator::Make((__int128 *)v106, &v105, &v104, (uint64_t)v130, (uint64_t)v128, a3);
  v52 = v129;
  if (v129 == v128)
  {
    v53 = 4;
    v52 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v131;
  if (v131 == v130)
  {
    v55 = 4;
    v54 = v130;
    goto LABEL_59;
  }
  if (v131)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  v62 = *a3;
  v63 = std::string::basic_string[abi:ne180100]<0>(&v135, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v63, (uint64_t)v126);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 200))(v62, v126);
  v64 = v127;
  if (v127 == v126)
  {
    v65 = 4;
    v64 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_77;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_77:
  if (SHIBYTE(v137) < 0)
    operator delete(v135);
  v66 = *a3;
  v124[0] = &off_1EA9A00F8;
  v124[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp2;
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v66 + 216))(v66, v124);
  v67 = v125;
  if (v125 == v124)
  {
    v68 = 4;
    v67 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_84;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_84:
  MIL::Validation::TensorDTypeConstraints::Make(&v135);
  v69 = v135;
  std::string::basic_string[abi:ne180100]<0>(v100, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, (uint64_t *)&v132);
  v102 = v132;
  if (v132)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = v132;
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v71;
  }
  else
  {
    v70 = 0;
  }
  v103 = v70;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v98, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v69 + 3))(v69, &v102, v98);
  if (v99 < 0)
    operator delete(v98[0]);
  v72 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v132;
  v132 = 0;
  if (v75)
    (*((void (**)(std::__shared_weak_count_vtbl *))v75->~__shared_weak_count + 1))(v75);
  if (v101 < 0)
    operator delete(v100[0]);
  v76 = v135;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v132);
  v96 = v132;
  if (v132)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v132;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v97 = v77;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v94, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v96, v94);
  if (v95 < 0)
    operator delete(v94[0]);
  v79 = v97;
  if (v97)
  {
    v80 = (unint64_t *)&v97->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v132;
  v132 = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  v83 = *a3;
  v92 = v135;
  if (v135)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v135;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
  }
  else
  {
    v84 = 0;
  }
  v93 = v84;
  v135 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v83 + 56))(v83, &v92);
  v86 = v93;
  if (v93)
  {
    v87 = (unint64_t *)&v93->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, 0);
  result = v123;
  if (v123)
  {
    v91 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v123);
    return MEMORY[0x1E0C023A0](v91, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0749EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)(v50 - 112);
  *(_QWORD *)(v50 - 112) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Sign::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void **v89;
  uint64_t result;
  uint64_t v91;
  void **v92;
  std::__shared_weak_count *v93;
  void *v94[2];
  char v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  char **v115;
  void *__p;
  void *v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  _QWORD *v121;
  __n128 v122;
  uint64_t v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char **v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v123 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v132 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v133 = (uint64_t)&v8->~__shared_weak_count_0;
  v134 = (uint64_t)&v8->~__shared_weak_count_0;
  v135 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v132);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v119 = v10;
  *v10 = v9;
  v120 = v10 + 1;
  v121 = v10 + 1;
  v136 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v119);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v117 = v12 + 1;
  v118 = v12 + 1;
  v137 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v135, 3, &v122);
  MIL::IRParameter::Make(&v122, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v108);
  v13 = v108;
  v108 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v122.n128_u64[1];
  if (v122.n128_u64[1])
  {
    v15 = (unint64_t *)(v122.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v132)
  {
    v133 = (uint64_t)v132;
    operator delete(v132);
  }
  v115 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v135 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v135, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v115, 1uLL);
  v18 = v115;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v119 = v20;
  *v20 = v19;
  v120 = v20 + 1;
  v121 = v20 + 1;
  v132 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v119);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v117 = v22 + 1;
  v118 = v22 + 1;
  v133 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v108 = v24;
  *v24 = v23;
  v109 = v24 + 1;
  v110 = v24 + 1;
  v134 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v108);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v132, 3, &v111);
  MIL::IRParameter::Make(&v111, &v112);
  v25 = v112;
  v113 = v112;
  if (v112)
  {
    v26 = (_QWORD *)operator new();
    v27 = v112;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v114 = v26;
  v112 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v139 = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v113 = 0;
    v114 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = (void **)v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = (void **)*v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v135 = v42;
    v136 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v137 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v138 = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v135);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v113 = 0;
    v114 = 0;
  }
  v18[1] = v30;
  v44 = v112;
  v112 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v46 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  *(_OWORD *)v106 = *(_OWORD *)a2;
  v107 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v123;
  *(_QWORD *)&v105 = v123;
  if (v123)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v105 + 1) = v49;
  v123 = 0;
  *(_QWORD *)&v104 = v115;
  if (v115)
  {
    v50 = (_QWORD *)operator new();
    v51 = v115;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v104 + 1) = v50;
  v115 = 0;
  v131 = 0;
  v129 = 0;
  MIL::IROperator::Make((__int128 *)v106, &v105, &v104, (uint64_t)v130, (uint64_t)v128, a3);
  v52 = v129;
  if (v129 == v128)
  {
    v53 = 4;
    v52 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v131;
  if (v131 == v130)
  {
    v55 = 4;
    v54 = v130;
    goto LABEL_59;
  }
  if (v131)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  v62 = *a3;
  v63 = std::string::basic_string[abi:ne180100]<0>(&v135, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v63, (uint64_t)v126);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 200))(v62, v126);
  v64 = v127;
  if (v127 == v126)
  {
    v65 = 4;
    v64 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_77;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_77:
  if (SHIBYTE(v137) < 0)
    operator delete(v135);
  v66 = *a3;
  v124[0] = &off_1EA9A00F8;
  v124[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSign;
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v66 + 216))(v66, v124);
  v67 = v125;
  if (v125 == v124)
  {
    v68 = 4;
    v67 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_84;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_84:
  MIL::Validation::TensorDTypeConstraints::Make(&v135);
  v69 = v135;
  std::string::basic_string[abi:ne180100]<0>(v100, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, (uint64_t *)&v132);
  v102 = v132;
  if (v132)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = v132;
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v71;
  }
  else
  {
    v70 = 0;
  }
  v103 = v70;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v98, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v69 + 3))(v69, &v102, v98);
  if (v99 < 0)
    operator delete(v98[0]);
  v72 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v132;
  v132 = 0;
  if (v75)
    (*((void (**)(std::__shared_weak_count_vtbl *))v75->~__shared_weak_count + 1))(v75);
  if (v101 < 0)
    operator delete(v100[0]);
  v76 = v135;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v132);
  v96 = v132;
  if (v132)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v132;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v97 = v77;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v94, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v96, v94);
  if (v95 < 0)
    operator delete(v94[0]);
  v79 = v97;
  if (v97)
  {
    v80 = (unint64_t *)&v97->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v132;
  v132 = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  v83 = *a3;
  v92 = v135;
  if (v135)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v135;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
  }
  else
  {
    v84 = 0;
  }
  v93 = v84;
  v135 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v83 + 56))(v83, &v92);
  v86 = v93;
  if (v93)
  {
    v87 = (unint64_t *)&v93->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, 0);
  result = v123;
  if (v123)
  {
    v91 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v123);
    return MEMORY[0x1E0C023A0](v91, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074AC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)(v50 - 112);
  *(_QWORD *)(v50 - 112) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Square::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  void **v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void **v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  void **v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void **v89;
  uint64_t result;
  uint64_t v91;
  void **v92;
  std::__shared_weak_count *v93;
  void *v94[2];
  char v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  __int128 v104;
  __int128 v105;
  void *v106[2];
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  char **v115;
  void *__p;
  void *v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  _QWORD *v121;
  __n128 v122;
  uint64_t v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char **v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v123 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v132 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v133 = (uint64_t)&v8->~__shared_weak_count_0;
  v134 = (uint64_t)&v8->~__shared_weak_count_0;
  v135 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v132);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v119 = v10;
  *v10 = v9;
  v120 = v10 + 1;
  v121 = v10 + 1;
  v136 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v119);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v117 = v12 + 1;
  v118 = v12 + 1;
  v137 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v135, 3, &v122);
  MIL::IRParameter::Make(&v122, (uint64_t *)&v108);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v108);
  v13 = v108;
  v108 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v122.n128_u64[1];
  if (v122.n128_u64[1])
  {
    v15 = (unint64_t *)(v122.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v132)
  {
    v133 = (uint64_t)v132;
    operator delete(v132);
  }
  v115 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v135 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v135, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v115, 1uLL);
  v18 = v115;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v119 = v20;
  *v20 = v19;
  v120 = v20 + 1;
  v121 = v20 + 1;
  v132 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v119);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v117 = v22 + 1;
  v118 = v22 + 1;
  v133 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v108 = v24;
  *v24 = v23;
  v109 = v24 + 1;
  v110 = v24 + 1;
  v134 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v108);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v132, 3, &v111);
  MIL::IRParameter::Make(&v111, &v112);
  v25 = v112;
  v113 = v112;
  if (v112)
  {
    v26 = (_QWORD *)operator new();
    v27 = v112;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v114 = v26;
  v112 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v139 = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v113 = 0;
    v114 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = (void **)v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = (void **)*v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v135 = v42;
    v136 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v137 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v138 = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v135);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v113 = 0;
    v114 = 0;
  }
  v18[1] = v30;
  v44 = v112;
  v112 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v46 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (__p)
  {
    v117 = __p;
    operator delete(__p);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  *(_OWORD *)v106 = *(_OWORD *)a2;
  v107 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v123;
  *(_QWORD *)&v105 = v123;
  if (v123)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v105 + 1) = v49;
  v123 = 0;
  *(_QWORD *)&v104 = v115;
  if (v115)
  {
    v50 = (_QWORD *)operator new();
    v51 = v115;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v104 + 1) = v50;
  v115 = 0;
  v131 = 0;
  v129 = 0;
  MIL::IROperator::Make((__int128 *)v106, &v105, &v104, (uint64_t)v130, (uint64_t)v128, a3);
  v52 = v129;
  if (v129 == v128)
  {
    v53 = 4;
    v52 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v131;
  if (v131 == v130)
  {
    v55 = 4;
    v54 = v130;
    goto LABEL_59;
  }
  if (v131)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v107) < 0)
    operator delete(v106[0]);
  v62 = *a3;
  v63 = std::string::basic_string[abi:ne180100]<0>(&v135, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v63, (uint64_t)v126);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 200))(v62, v126);
  v64 = v127;
  if (v127 == v126)
  {
    v65 = 4;
    v64 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_77;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_77:
  if (SHIBYTE(v137) < 0)
    operator delete(v135);
  v66 = *a3;
  v124[0] = &off_1EA9A00F8;
  v124[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSquare;
  v125 = v124;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v66 + 216))(v66, v124);
  v67 = v125;
  if (v125 == v124)
  {
    v68 = 4;
    v67 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_84;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_84:
  MIL::Validation::TensorDTypeConstraints::Make(&v135);
  v69 = v135;
  std::string::basic_string[abi:ne180100]<0>(v100, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v100, 0, (uint64_t *)&v132);
  v102 = v132;
  if (v132)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v71 = v132;
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v71;
  }
  else
  {
    v70 = 0;
  }
  v103 = v70;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v98, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v69 + 3))(v69, &v102, v98);
  if (v99 < 0)
    operator delete(v98[0]);
  v72 = v103;
  if (v103)
  {
    p_shared_owners = (unint64_t *)&v103->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v132;
  v132 = 0;
  if (v75)
    (*((void (**)(std::__shared_weak_count_vtbl *))v75->~__shared_weak_count + 1))(v75);
  if (v101 < 0)
    operator delete(v100[0]);
  v76 = v135;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v132);
  v96 = v132;
  if (v132)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = v132;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v97 = v77;
  v132 = 0;
  std::string::basic_string[abi:ne180100]<0>(v94, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v76 + 3))(v76, &v96, v94);
  if (v95 < 0)
    operator delete(v94[0]);
  v79 = v97;
  if (v97)
  {
    v80 = (unint64_t *)&v97->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v132;
  v132 = 0;
  if (v82)
    (*((void (**)(std::__shared_weak_count_vtbl *))v82->~__shared_weak_count + 1))(v82);
  v83 = *a3;
  v92 = v135;
  if (v135)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v135;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = (std::__shared_weak_count_vtbl *)v85;
  }
  else
  {
    v84 = 0;
  }
  v93 = v84;
  v135 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v83 + 56))(v83, &v92);
  v86 = v93;
  if (v93)
  {
    v87 = (unint64_t *)&v93->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
    (*((void (**)(void **))*v89 + 1))(v89);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v115, 0);
  result = v123;
  if (v123)
  {
    v91 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v123);
    return MEMORY[0x1E0C023A0](v91, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074B9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void **a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v52 = *(_QWORD *)(v50 - 112);
  *(_QWORD *)(v50 - 112) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *v49;
  *v49 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a40, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Exp::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074C6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Floor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloor;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074D340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Round::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRound;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074DFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Sin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSin;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074EC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Sinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSinh;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E074F920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Sqrt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSqrt;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07505C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Tan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTan;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0751260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Tanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  void *v87;
  std::__shared_weak_count *v88;
  void *v89[2];
  char v90;
  void *v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  char **v107;
  void *__p;
  void *v109;
  _QWORD *v110;
  __n128 v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  char *v116;
  char **v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD v129[3];

  v129[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v112 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v113 = v8;
  *v8 = v7;
  v114 = v8 + 1;
  v115 = (char *)(v8 + 1);
  v126 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v113);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v109 = v10 + 1;
  v110 = v10 + 1;
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 2, &v111);
  MIL::IRParameter::Make(&v111, &v105);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v105);
  v11 = v105;
  v105 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v111.n128_u64[1];
  if (v111.n128_u64[1])
  {
    v13 = (unint64_t *)(v111.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  v107 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v113 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v113, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v107, 1uLL);
  v16 = v107;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v109 = v18 + 1;
  v110 = v18 + 1;
  v129[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v126 = v20;
  *v20 = v19;
  v127 = (uint64_t)(v20 + 1);
  v128 = v20 + 1;
  v129[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)v129, 2, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v21 = v104;
  v105 = v104;
  if (v104)
  {
    v22 = (_QWORD *)operator new();
    v23 = v104;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v106 = v22;
  v104 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v117 = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v105 = 0;
    v106 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v113 = v38;
    v114 = v38;
    v16[1] = (char *)(v33 + 2);
    v115 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v116 = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v113);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v105 = 0;
    v106 = 0;
  }
  v16[1] = v26;
  v40 = v104;
  v104 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v42 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v126)
  {
    v127 = (uint64_t)v126;
    operator delete(v126);
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v112;
  *(_QWORD *)&v100 = v112;
  if (v112)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v100 + 1) = v45;
  v112 = 0;
  *(_QWORD *)&v99 = v107;
  if (v107)
  {
    v46 = (_QWORD *)operator new();
    v47 = v107;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v99 + 1) = v46;
  v107 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v48 = v123;
  if (v123 == v122)
  {
    v49 = 4;
    v48 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v125;
  if (v125 == v124)
  {
    v51 = 4;
    v50 = v124;
    goto LABEL_55;
  }
  if (v125)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v58 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v113, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v113, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v58 + 200))(v58, v120);
  v59 = v121;
  if (v121 == v120)
  {
    v60 = 4;
    v59 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_73;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_73:
  if (SHIBYTE(v115) < 0)
    operator delete(v113);
  v61 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTanh;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v61 + 216))(v61, v118);
  v62 = v119;
  if (v119 == v118)
  {
    v63 = 4;
    v62 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_80;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&v113);
  v64 = v113;
  std::string::basic_string[abi:ne180100]<0>(v95, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v95, 0, (uint64_t *)&__p);
  v97 = __p;
  if (__p)
  {
    v65 = (std::__shared_weak_count *)operator new();
    v66 = (std::__shared_weak_count_vtbl *)__p;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65[1].__vftable = v66;
  }
  else
  {
    v65 = 0;
  }
  v98 = v65;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v93, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v64 + 24))(v64, &v97, v93);
  if (v94 < 0)
    operator delete(v93[0]);
  v67 = v98;
  if (v98)
  {
    p_shared_owners = (unint64_t *)&v98->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  if (v96 < 0)
    operator delete(v95[0]);
  v71 = v113;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v91 = __p;
  if (__p)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v73 = (std::__shared_weak_count_vtbl *)__p;
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v73;
  }
  else
  {
    v72 = 0;
  }
  v92 = v72;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v89, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v71 + 24))(v71, &v91, v89);
  if (v90 < 0)
    operator delete(v89[0]);
  v74 = v92;
  if (v92)
  {
    v75 = (unint64_t *)&v92->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = __p;
  __p = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = *a3;
  v87 = v113;
  if (v113)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = (std::__shared_weak_count_vtbl *)v113;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v88 = v79;
  v113 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 56))(v78, &v87);
  v81 = v88;
  if (v88)
  {
    v82 = (unint64_t *)&v88->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v113;
  v113 = 0;
  if (v84)
    (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v107, 0);
  result = v112;
  if (v112)
  {
    v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v112);
    return MEMORY[0x1E0C023A0](v86, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0751F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t *v61;
  void *v63;
  uint64_t v64;

  v63 = a56;
  a56 = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v61;
  *v61 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::LogicalNot::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  void *v64[2];
  uint64_t v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  __n128 v69;
  uint64_t v70;
  char **v71;
  __n128 v72;
  uint64_t v73;
  void *__p;
  void *v75;
  char *v76;
  char *v77;
  char **v78;
  _QWORD v79[3];
  _QWORD *v80;
  _BYTE v81[24];
  _BYTE *v82;
  _BYTE v83[24];
  _BYTE *v84;
  _BYTE v85[24];
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v73 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v75 = v8 + 1;
  v76 = (char *)(v8 + 1);
  v88 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v88, 1, &v72);
  MIL::IRParameter::Make(&v72, (uint64_t *)&v66);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v66);
  v9 = v66;
  v66 = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v72.n128_u64[1];
  if (v72.n128_u64[1])
  {
    v11 = (unint64_t *)(v72.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
  v71 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v71, (void **)v13);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v71, 1uLL);
  v14 = v71;
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  v66 = v16;
  *v16 = v15;
  v67 = v16 + 1;
  v68 = v16 + 1;
  v87 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v66);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v87, 1, &v69);
  MIL::IRParameter::Make(&v69, &v70);
  v17 = v70;
  v88 = v70;
  if (v70)
  {
    v18 = (_QWORD *)operator new();
    v19 = v70;
    *v18 = &unk_1EA99F888;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v89 = v18;
  v70 = 0;
  v20 = v14[2];
  v21 = v14[1];
  if (v21 >= v20)
  {
    v23 = (v21 - *v14) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v25 = v20 - *v14;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v78 = v14 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v14 + 2), v26);
    v29 = (uint64_t *)&v27[16 * v23];
    *v29 = v17;
    v29[1] = (uint64_t)v18;
    v88 = 0;
    v89 = 0;
    v31 = *v14;
    v30 = v14[1];
    if (v30 == *v14)
    {
      v34 = v14[1];
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *v14;
      v30 = v14[1];
    }
    v22 = (char *)(v29 + 2);
    *v14 = v32;
    __p = v34;
    v75 = v34;
    v14[1] = (char *)(v29 + 2);
    v76 = v30;
    v35 = v14[2];
    v14[2] = &v27[16 * v28];
    v77 = v35;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v21 = v17;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    v88 = 0;
    v89 = 0;
  }
  v14[1] = v22;
  v36 = v70;
  v70 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v69.n128_u64[1];
  if (v69.n128_u64[1])
  {
    v38 = (unint64_t *)(v69.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  *(_OWORD *)v64 = *(_OWORD *)a2;
  v65 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v40 = v73;
  *(_QWORD *)&v63 = v73;
  if (v73)
  {
    v41 = (_QWORD *)operator new();
    *v41 = &unk_1EA99F8E8;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v40;
  }
  else
  {
    v41 = 0;
  }
  *((_QWORD *)&v63 + 1) = v41;
  v73 = 0;
  *(_QWORD *)&v62 = v71;
  if (v71)
  {
    v42 = (_QWORD *)operator new();
    v43 = v71;
    *v42 = &unk_1EA99F948;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  *((_QWORD *)&v62 + 1) = v42;
  v71 = 0;
  v86 = 0;
  v84 = 0;
  MIL::IROperator::Make((__int128 *)v64, &v63, &v62, (uint64_t)v85, (uint64_t)v83, a3);
  v44 = v84;
  if (v84 == v83)
  {
    v45 = 4;
    v44 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
  v46 = v86;
  if (v86 == v85)
  {
    v47 = 4;
    v46 = v85;
    goto LABEL_51;
  }
  if (v86)
  {
    v47 = 5;
LABEL_51:
    (*(void (**)(_QWORD *))(*v46 + 8 * v47))(v46);
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  v54 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v81);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v54 + 200))(v54, v81);
  v55 = v82;
  if (v82 == v81)
  {
    v56 = 4;
    v55 = v81;
  }
  else
  {
    if (!v82)
      goto LABEL_69;
    v56 = 5;
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v56))(v55);
LABEL_69:
  if (SHIBYTE(v76) < 0)
    operator delete(__p);
  v57 = *a3;
  v79[0] = &off_1EA9A00F8;
  v79[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalNot;
  v80 = v79;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v57 + 216))(v57, v79);
  v58 = v80;
  if (v80 == v79)
  {
    v59 = 4;
    v58 = v79;
  }
  else
  {
    if (!v80)
      goto LABEL_76;
    v59 = 5;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v59))(v58);
LABEL_76:
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v71, 0);
  result = v73;
  if (v73)
  {
    v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v73);
    return MEMORY[0x1E0C023A0](v61, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0752864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a25, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a30, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Threshold::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  void **v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char **v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void **v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  uint64_t result;
  uint64_t v103;
  void **v104;
  std::__shared_weak_count *v105;
  void *v106[2];
  char v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  char v111;
  void *v112[2];
  char v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  __int128 v123;
  void *v124[2];
  uint64_t v125;
  void *v126;
  void *v127;
  _QWORD *v128;
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  char **v133;
  __n128 v134;
  void *__p;
  void *v136;
  _QWORD *v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  __n128 v141;
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  _BYTE v145[24];
  _BYTE *v146;
  _BYTE v147[24];
  _BYTE *v148;
  _BYTE v149[24];
  _BYTE *v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t v152;
  uint64_t v153;
  void **Scalar;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char **v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v142 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v151 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v152 = (uint64_t)&v8->~__shared_weak_count_0;
  v153 = (uint64_t)&v8->~__shared_weak_count_0;
  Scalar = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v151);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v138 = v10;
  *v10 = v9;
  v139 = v10 + 1;
  v140 = v10 + 1;
  v155 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v138);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v136 = v12 + 1;
  v137 = v12 + 1;
  v156 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v141);
  MIL::IRParameter::Make(&v141, (uint64_t *)&v126);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v126);
  v13 = v126;
  v126 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v141.n128_u64[1];
  if (v141.n128_u64[1])
  {
    v15 = (unint64_t *)(v141.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (v151)
  {
    v152 = (uint64_t)v151;
    operator delete(v151);
  }
  v17 = v142;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v155 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  v156 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v134);
  MIL::IRParameter::Make(&v134, (uint64_t *)&v151);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&v151);
  v18 = v151;
  v151 = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v20 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v133 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v133, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v133, 1uLL);
  v23 = v133;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v138 = v25;
  *v25 = v24;
  v139 = v25 + 1;
  v140 = v25 + 1;
  v151 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v138);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v136 = v27 + 1;
  v137 = v27 + 1;
  v152 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v126 = v29;
  *v29 = v28;
  v127 = v29 + 1;
  v128 = v29 + 1;
  v153 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v126);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v151, 3, &v129);
  MIL::IRParameter::Make(&v129, &v130);
  v30 = v130;
  v131 = v130;
  if (v130)
  {
    v31 = (_QWORD *)operator new();
    v32 = v130;
    *v31 = &unk_1EA99F888;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v132 = v31;
  v130 = 0;
  v33 = v23[2];
  v34 = v23[1];
  if (v34 >= v33)
  {
    v36 = (v34 - *v23) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v38 = v33 - *v23;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    v158 = v23 + 2;
    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v39);
    v42 = (uint64_t *)&v40[16 * v36];
    *v42 = v30;
    v42[1] = (uint64_t)v31;
    v131 = 0;
    v132 = 0;
    v44 = *v23;
    v43 = v23[1];
    if (v43 == *v23)
    {
      v47 = (void **)v23[1];
      v45 = &v40[16 * v36];
    }
    else
    {
      v45 = &v40[16 * v36];
      do
      {
        v46 = *((_OWORD *)v43 - 1);
        v43 -= 16;
        *((_OWORD *)v45 - 1) = v46;
        v45 -= 16;
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
      }
      while (v43 != v44);
      v47 = (void **)*v23;
      v43 = v23[1];
    }
    v35 = (char *)(v42 + 2);
    *v23 = v45;
    Scalar = v47;
    v155 = (uint64_t)v47;
    v23[1] = (char *)(v42 + 2);
    v156 = (uint64_t)v43;
    v48 = v23[2];
    v23[2] = &v40[16 * v41];
    v157 = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v34 = v30;
    *((_QWORD *)v34 + 1) = v31;
    v35 = v34 + 16;
    v131 = 0;
    v132 = 0;
  }
  v23[1] = v35;
  v49 = v130;
  v130 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v129.n128_u64[1];
  if (v129.n128_u64[1])
  {
    v51 = (unint64_t *)(v129.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (__p)
  {
    v136 = __p;
    operator delete(__p);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  *(_OWORD *)v124 = *(_OWORD *)a2;
  v125 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v53 = (uint64_t)v142;
  *(_QWORD *)&v123 = v142;
  if (v142)
  {
    v54 = (_QWORD *)operator new();
    *v54 = &unk_1EA99F8E8;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v53;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v123 + 1) = v54;
  v142 = 0;
  *(_QWORD *)&v122 = v133;
  if (v133)
  {
    v55 = (_QWORD *)operator new();
    v56 = v133;
    *v55 = &unk_1EA99F948;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v122 + 1) = v55;
  v133 = 0;
  v150 = 0;
  v148 = 0;
  MIL::IROperator::Make((__int128 *)v124, &v123, &v122, (uint64_t)v149, (uint64_t)v147, a3);
  v57 = v148;
  if (v148 == v147)
  {
    v58 = 4;
    v57 = v147;
  }
  else
  {
    if (!v148)
      goto LABEL_62;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_62:
  v59 = v150;
  if (v150 == v149)
  {
    v60 = 4;
    v59 = v149;
    goto LABEL_66;
  }
  if (v150)
  {
    v60 = 5;
LABEL_66:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
  if (*((_QWORD *)&v122 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (SHIBYTE(v125) < 0)
    operator delete(v124[0]);
  v67 = *a3;
  v68 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v68, (uint64_t)v145);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v67 + 200))(v67, v145);
  v69 = v146;
  if (v146 == v145)
  {
    v70 = 4;
    v69 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_84;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_84:
  if (SHIBYTE(v156) < 0)
    operator delete(Scalar);
  v71 = *a3;
  v143[0] = &off_1EA9A00F8;
  v143[1] = MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceThreshold;
  v144 = v143;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v71 + 216))(v71, v143);
  v72 = v144;
  if (v144 == v143)
  {
    v73 = 4;
    v72 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_91;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v74 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v118, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v118, 0, (uint64_t *)&v151);
  v120 = v151;
  if (v151)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = v151;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v121 = v75;
  v151 = 0;
  std::string::basic_string[abi:ne180100]<0>(v116, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v74 + 3))(v74, &v120, v116);
  if (v117 < 0)
    operator delete(v116[0]);
  v77 = v121;
  if (v121)
  {
    p_shared_owners = (unint64_t *)&v121->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v151;
  v151 = 0;
  if (v80)
    (*((void (**)(std::__shared_weak_count_vtbl *))v80->~__shared_weak_count + 1))(v80);
  if (v119 < 0)
    operator delete(v118[0]);
  v81 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v112, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v112, 0, (uint64_t *)&v151);
  v114 = v151;
  if (v151)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v151;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v115 = v82;
  v151 = 0;
  std::string::basic_string[abi:ne180100]<0>(v110, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v81 + 3))(v81, &v114, v110);
  if (v111 < 0)
    operator delete(v110[0]);
  v84 = v115;
  if (v115)
  {
    v85 = (unint64_t *)&v115->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v151;
  v151 = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v113 < 0)
    operator delete(v112[0]);
  v88 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v151);
  v108 = v151;
  if (v151)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v151;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v109 = v89;
  v151 = 0;
  std::string::basic_string[abi:ne180100]<0>(v106, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v88 + 3))(v88, &v108, v106);
  if (v107 < 0)
    operator delete(v106[0]);
  v91 = v109;
  if (v109)
  {
    v92 = (unint64_t *)&v109->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v151;
  v151 = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v104 = Scalar;
  if (Scalar)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = Scalar;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v105 = v96;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v104);
  v98 = v105;
  if (v105)
  {
    v99 = (unint64_t *)&v105->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = Scalar;
  Scalar = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v133, 0);
  result = (uint64_t)v142;
  if (v142)
  {
    v103 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v142);
    return MEMORY[0x1E0C023A0](v103, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0753624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;

  v62 = *(_QWORD *)(v60 - 112);
  *(_QWORD *)(v60 - 112) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *v59;
  *v59 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGather(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::Shared::ValueTypeInferenceGather(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0753A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherAlongAxis(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::Shared::ValueTypeInferenceGatherAlongAxis(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0753B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherNd(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::Shared::ValueTypeInferenceGatherNd(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0753BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseGather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void **v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  void **v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void **v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void **v94;
  void **v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count_vtbl *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void **v108;
  uint64_t result;
  uint64_t v110;
  void **v111;
  std::__shared_weak_count *v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  void **v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  __int128 v132;
  void *v133[2];
  uint64_t v134;
  void *v135;
  void *v136;
  _QWORD *v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char **v142;
  __n128 v143;
  void *__p;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  _QWORD *v148;
  _BYTE v149[24];
  _BYTE *v150;
  _BYTE v151[24];
  _BYTE *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  std::__shared_weak_count_vtbl *v156;
  uint64_t p_on_zero_shared;
  uint64_t v158;
  void **v159;
  void **v160;
  uint64_t v161;
  char *v162;
  char **v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v148 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v158 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v156 = v11;
  v159 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v156);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v154 = v14 + 2;
  v155 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v153 = v14;
  v160 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v153);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v145 = v17 + 2;
  v146 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v159, 3, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v135);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v135);
  v18 = v135;
  v135 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v20 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v145 = __p;
    operator delete(__p);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v156)
  {
    p_on_zero_shared = (uint64_t)v156;
    operator delete(v156);
  }
  v22 = v148;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (void **)operator new(8uLL);
  v159 = v24;
  *v24 = (void *)v23;
  v160 = v24 + 1;
  v161 = (uint64_t)(v24 + 1);
  v153 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v159);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v153, 1, &v143);
  MIL::IRParameter::Make(&v143, (uint64_t *)&v156);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&v156);
  v25 = v156;
  v156 = 0;
  if (v25)
    (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  v26 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v27 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  v142 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  v159 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v142, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v159, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v142, 1uLL);
  v30 = v142;
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v153 = v32;
  *v32 = v31;
  v154 = v32 + 1;
  v155 = v32 + 1;
  v156 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v153);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v145 = v34 + 1;
  v146 = v34 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v135 = v36;
  *v36 = v35;
  v136 = v36 + 1;
  v137 = v36 + 1;
  v158 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v135);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v156, 3, &v138);
  MIL::IRParameter::Make(&v138, &v139);
  v37 = v139;
  v140 = v139;
  if (v139)
  {
    v38 = (_QWORD *)operator new();
    v39 = v139;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v141 = v38;
  v139 = 0;
  v40 = v30[2];
  v41 = v30[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v30) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v30;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v163 = v30 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v140 = 0;
    v141 = 0;
    v51 = *v30;
    v50 = v30[1];
    if (v50 == *v30)
    {
      v54 = (void **)v30[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v30;
      v50 = v30[1];
    }
    v42 = (char *)(v49 + 2);
    *v30 = v52;
    v159 = v54;
    v160 = v54;
    v30[1] = (char *)(v49 + 2);
    v161 = (uint64_t)v50;
    v55 = v30[2];
    v30[2] = &v47[16 * v48];
    v162 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v159);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v140 = 0;
    v141 = 0;
  }
  v30[1] = v42;
  v56 = v139;
  v139 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v58 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  if (__p)
  {
    v145 = __p;
    operator delete(__p);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  *(_OWORD *)v133 = *(_OWORD *)a2;
  v134 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v148;
  *(_QWORD *)&v132 = v148;
  if (v148)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v132 + 1) = v61;
  v148 = 0;
  *(_QWORD *)&v131 = v142;
  if (v142)
  {
    v62 = (_QWORD *)operator new();
    v63 = v142;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v131 + 1) = v62;
  v142 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v151, a3);
  v150 = 0;
  MIL::IROperator::Make((__int128 *)v133, &v132, &v131, (uint64_t)v151, (uint64_t)v149, a4);
  v64 = v150;
  if (v150 == v149)
  {
    v65 = 4;
    v64 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_64;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_64:
  v66 = v152;
  if (v152 == v151)
  {
    v67 = 4;
    v66 = v151;
    goto LABEL_68;
  }
  if (v152)
  {
    v67 = 5;
LABEL_68:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v134) < 0)
    operator delete(v133[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v159);
  v74 = v159;
  std::string::basic_string[abi:ne180100]<0>(v127, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&v156);
  v129 = v156;
  if (v156)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v76 = v156;
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v76;
  }
  else
  {
    v75 = 0;
  }
  v130 = v75;
  v156 = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v74 + 3))(v74, &v129, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v77 = v130;
  if (v130)
  {
    p_shared_owners = (unint64_t *)&v130->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v156;
  v156 = 0;
  if (v80)
    (*((void (**)(std::__shared_weak_count_vtbl *))v80->~__shared_weak_count + 1))(v80);
  if (v128 < 0)
    operator delete(v127[0]);
  v81 = v159;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v156);
  v123 = v156;
  if (v156)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = v156;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v124 = v82;
  v156 = 0;
  std::string::basic_string[abi:ne180100]<0>(v121, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v81 + 3))(v81, &v123, v121);
  if (v122 < 0)
    operator delete(v121[0]);
  v84 = v124;
  if (v124)
  {
    v85 = (unint64_t *)&v124->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v156;
  v156 = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  v88 = *a4;
  v119 = v159;
  if (v159)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = v159;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = (std::__shared_weak_count_vtbl *)v90;
  }
  else
  {
    v89 = 0;
  }
  v120 = v89;
  v159 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v88 + 56))(v88, &v119);
  v91 = v120;
  if (v120)
  {
    v92 = (unint64_t *)&v120->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = v159;
  v159 = 0;
  if (v94)
    (*((void (**)(void **))*v94 + 1))(v94);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v159);
  v95 = v159;
  std::string::basic_string[abi:ne180100]<0>(v115, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v115, 0, (uint64_t *)&v156);
  v117 = v156;
  if (v156)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v156;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v118 = v96;
  v156 = 0;
  std::string::basic_string[abi:ne180100]<0>(v113, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v95 + 3))(v95, &v117, 0, v113);
  if (v114 < 0)
    operator delete(v113[0]);
  v98 = v118;
  if (v118)
  {
    v99 = (unint64_t *)&v118->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v156;
  v156 = 0;
  if (v101)
    (*((void (**)(std::__shared_weak_count_vtbl *))v101->~__shared_weak_count + 1))(v101);
  if (v116 < 0)
    operator delete(v115[0]);
  v102 = *a4;
  v111 = v159;
  if (v159)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v159;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
  }
  else
  {
    v103 = 0;
  }
  v112 = v103;
  v159 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v102 + 56))(v102, &v111);
  v105 = v112;
  if (v112)
  {
    v106 = (unint64_t *)&v112->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v159;
  v159 = 0;
  if (v108)
    (*((void (**)(void **))*v108 + 1))(v108);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v142, 0);
  result = (uint64_t)v148;
  if (v148)
  {
    v110 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v148);
    return MEMORY[0x1E0C023A0](v110, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07547E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 112);
  *(_QWORD *)(v51 - 112) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 232), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BaseGatherWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void **v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  void **v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  char **v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void **v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  void **v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  void **v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void **v114;
  uint64_t result;
  uint64_t v116;
  void **v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  void *v121[2];
  char v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  void **v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  __int128 v138;
  void *v139[2];
  uint64_t v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  char **v148;
  __n128 v149;
  __n128 v150;
  void *__p;
  void *v152;
  _QWORD *v153;
  __n128 v154;
  _QWORD *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  void *v160;
  void *v161;
  _QWORD *v162;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v165;
  void **v166;
  void **v167;
  uint64_t v168;
  char *v169;
  char **v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v155 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v165 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v166 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v161 = v14 + 2;
  v162 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v160 = v14;
  v167 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v160);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v152 = v17 + 2;
  v153 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v166, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v141);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v141);
  v18 = v141;
  v141 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v20 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v155;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (void **)operator new(8uLL);
  v166 = v24;
  *v24 = (void *)v23;
  v167 = v24 + 1;
  v168 = (uint64_t)(v24 + 1);
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v166);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 1, &v150);
  MIL::IRParameter::Make(&v150, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&Scalar);
  v25 = Scalar;
  Scalar = 0;
  if (v25)
    (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  v26 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v27 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  v29 = v155;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&v166);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v29, "axis", (uint64_t *)&v166);
  v31 = v166;
  v166 = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v33 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v148 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v166 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v148, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v166, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v148, 1uLL);
  v36 = v148;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  v160 = v38;
  *v38 = v37;
  v161 = v38 + 1;
  v162 = v38 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v160);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  __p = v40;
  *v40 = v39;
  v152 = v40 + 1;
  v153 = v40 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v141 = v42;
  *v42 = v41;
  v142 = v42 + 1;
  v143 = v42 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v141);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v144);
  MIL::IRParameter::Make(&v144, &v145);
  v43 = v145;
  v146 = v145;
  if (v145)
  {
    v44 = (_QWORD *)operator new();
    v45 = v145;
    *v44 = &unk_1EA99F888;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = v45;
  }
  else
  {
    v44 = 0;
  }
  v147 = v44;
  v145 = 0;
  v46 = v36[2];
  v47 = v36[1];
  if (v47 >= v46)
  {
    v49 = (v47 - *v36) >> 4;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v51 = v46 - *v36;
    if (v51 >> 3 > v50)
      v50 = v51 >> 3;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
      v52 = 0xFFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    v170 = v36 + 2;
    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v52);
    v55 = (uint64_t *)&v53[16 * v49];
    *v55 = v43;
    v55[1] = (uint64_t)v44;
    v146 = 0;
    v147 = 0;
    v57 = *v36;
    v56 = v36[1];
    if (v56 == *v36)
    {
      v60 = (void **)v36[1];
      v58 = &v53[16 * v49];
    }
    else
    {
      v58 = &v53[16 * v49];
      do
      {
        v59 = *((_OWORD *)v56 - 1);
        v56 -= 16;
        *((_OWORD *)v58 - 1) = v59;
        v58 -= 16;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
      }
      while (v56 != v57);
      v60 = (void **)*v36;
      v56 = v36[1];
    }
    v48 = (char *)(v55 + 2);
    *v36 = v58;
    v166 = v60;
    v167 = v60;
    v36[1] = (char *)(v55 + 2);
    v168 = (uint64_t)v56;
    v61 = v36[2];
    v36[2] = &v53[16 * v54];
    v169 = v61;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v166);
  }
  else
  {
    *(_QWORD *)v47 = v43;
    *((_QWORD *)v47 + 1) = v44;
    v48 = v47 + 16;
    v146 = 0;
    v147 = 0;
  }
  v36[1] = v48;
  v62 = v145;
  v145 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v64 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
  *(_OWORD *)v139 = *(_OWORD *)a2;
  v140 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v66 = (uint64_t)v155;
  *(_QWORD *)&v138 = v155;
  if (v155)
  {
    v67 = (_QWORD *)operator new();
    *v67 = &unk_1EA99F8E8;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v66;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v138 + 1) = v67;
  v155 = 0;
  *(_QWORD *)&v137 = v148;
  if (v148)
  {
    v68 = (_QWORD *)operator new();
    v69 = v148;
    *v68 = &unk_1EA99F948;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v137 + 1) = v68;
  v148 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v158, a3);
  v157 = 0;
  MIL::IROperator::Make((__int128 *)v139, &v138, &v137, (uint64_t)v158, (uint64_t)v156, a4);
  v70 = v157;
  if (v157 == v156)
  {
    v71 = 4;
    v70 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_71;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_71:
  v72 = v159;
  if (v159 == v158)
  {
    v73 = 4;
    v72 = v158;
    goto LABEL_75;
  }
  if (v159)
  {
    v73 = 5;
LABEL_75:
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (SHIBYTE(v140) < 0)
    operator delete(v139[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v166);
  v80 = v166;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v80 + 3))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    p_shared_owners = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v166;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a4;
  v125 = v166;
  if (v166)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v166;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v166 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v166;
  v166 = 0;
  if (v100)
    (*((void (**)(void **))*v100 + 1))(v100);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v166);
  v101 = v166;
  std::string::basic_string[abi:ne180100]<0>(v121, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v121, 0, (uint64_t *)&Scalar);
  v123 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v119, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v101 + 3))(v101, &v123, 0, v119);
  if (v120 < 0)
    operator delete(v119[0]);
  v104 = v124;
  if (v124)
  {
    v105 = (unint64_t *)&v124->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v122 < 0)
    operator delete(v121[0]);
  v108 = *a4;
  v117 = v166;
  if (v166)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v166;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v118 = v109;
  v166 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v108 + 56))(v108, &v117);
  v111 = v118;
  if (v118)
  {
    v112 = (unint64_t *)&v118->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v166;
  v166 = 0;
  if (v114)
    (*((void (**)(void **))*v114 + 1))(v114);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v148, 0);
  result = (uint64_t)v155;
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    return MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E075583C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(v51 - 112);
  *(_QWORD *)(v51 - 112) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *v50;
  *v50 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 232), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Gather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  void **v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void **v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void **v115;
  uint64_t result;
  uint64_t v117;
  void **v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  void **v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  __int128 v138;
  __int128 v139;
  void *v140[2];
  uint64_t v141;
  void *v142;
  void *v143;
  _QWORD *v144;
  __n128 v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char **v149;
  __n128 v150;
  __n128 v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  __n128 v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _QWORD v161[3];
  _QWORD *v162;
  void *v163;
  void *v164;
  _QWORD *v165;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v168;
  void **v169;
  void **v170;
  uint64_t v171;
  char *v172;
  char **v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v156 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v168 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v169 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v164 = v12 + 2;
  v165 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v163 = v12;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v163);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v153 = v15 + 2;
  v154 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 3, &v155);
  MIL::IRParameter::Make(&v155, (uint64_t *)&v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v142);
  v16 = v142;
  v142 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v18 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v156;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (void **)operator new(8uLL);
  v169 = v22;
  *v22 = (void *)v21;
  v170 = v22 + 1;
  v171 = (uint64_t)(v22 + 1);
  v163 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v163, 1, &v151);
  MIL::IRParameter::Make(&v151, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v20, "indices", (uint64_t *)&Scalar);
  v23 = Scalar;
  Scalar = 0;
  if (v23)
    (*((void (**)(std::__shared_weak_count_vtbl *))v23->~__shared_weak_count + 1))(v23);
  v24 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v25 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  v27 = v156;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v150);
  MIL::IRParameter::Make(&v150, (uint64_t *)&v169);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v27, "axis", (uint64_t *)&v169);
  v29 = v169;
  v169 = 0;
  if (v29)
    (*((void (**)(void **))*v29 + 1))(v29);
  v30 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v31 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v149 = 0;
  v33 = operator new();
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  v169 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v149, (void **)v33);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v169, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v149, 1uLL);
  v34 = v149;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v163 = v36;
  *v36 = v35;
  v164 = v36 + 1;
  v165 = v36 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v163);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  __p = v38;
  *v38 = v37;
  v153 = v38 + 1;
  v154 = v38 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v142 = v40;
  *v40 = v39;
  v143 = v40 + 1;
  v144 = v40 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v142);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v41 = v146;
  v147 = v146;
  if (v146)
  {
    v42 = (_QWORD *)operator new();
    v43 = v146;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v148 = v42;
  v146 = 0;
  v44 = v34[2];
  v45 = v34[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v34) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v34;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v173 = v34 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v34 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v147 = 0;
    v148 = 0;
    v55 = *v34;
    v54 = v34[1];
    if (v54 == *v34)
    {
      v58 = (void **)v34[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = (void **)*v34;
      v54 = v34[1];
    }
    v46 = (char *)(v53 + 2);
    *v34 = v56;
    v169 = v58;
    v170 = v58;
    v34[1] = (char *)(v53 + 2);
    v171 = (uint64_t)v54;
    v59 = v34[2];
    v34[2] = &v51[16 * v52];
    v172 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v169);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v147 = 0;
    v148 = 0;
  }
  v34[1] = v46;
  v60 = v146;
  v146 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v62 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  *(_OWORD *)v140 = *(_OWORD *)a2;
  v141 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v156;
  *(_QWORD *)&v139 = v156;
  if (v156)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v139 + 1) = v65;
  v156 = 0;
  *(_QWORD *)&v138 = v149;
  if (v149)
  {
    v66 = (_QWORD *)operator new();
    v67 = v149;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v138 + 1) = v66;
  v149 = 0;
  v161[0] = &unk_1EA99FAC8;
  v161[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateGather;
  v162 = v161;
  v160 = 0;
  MIL::IROperator::Make((__int128 *)v140, &v139, &v138, (uint64_t)v161, (uint64_t)v159, a3);
  v68 = v160;
  if (v160 == v159)
  {
    v69 = 4;
    v68 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_71;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_71:
  v70 = v162;
  if (v162 == v161)
  {
    v71 = 4;
    v70 = v161;
    goto LABEL_75;
  }
  if (v162)
  {
    v71 = 5;
LABEL_75:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v141) < 0)
    operator delete(v140[0]);
  v78 = *a3;
  v157[0] = &off_1EA99FBD8;
  v157[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGather;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v78 + 200))(v78, v157);
  v79 = v158;
  if (v158 == v157)
  {
    v80 = 4;
    v79 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_93;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_93:
  MIL::Validation::TensorDTypeConstraints::Make(&v169);
  v81 = v169;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = Scalar;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v137 = v82;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v81 + 3))(v81, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v84 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = Scalar;
  Scalar = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v135 < 0)
    operator delete(v134[0]);
  v88 = v169;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = Scalar;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v131 = v89;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v88 + 3))(v88, &v130, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v91 = v131;
  if (v131)
  {
    v92 = (unint64_t *)&v131->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = Scalar;
  Scalar = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v126 = v169;
  if (v169)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v169;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v127 = v96;
  v169 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v126);
  v98 = v127;
  if (v127)
  {
    v99 = (unint64_t *)&v127->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v169;
  v169 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v169);
  v102 = v169;
  std::string::basic_string[abi:ne180100]<0>(v122, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v122, 0, (uint64_t *)&Scalar);
  v124 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v125 = v103;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v120, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v102 + 3))(v102, &v124, 0, v120);
  if (v121 < 0)
    operator delete(v120[0]);
  v105 = v125;
  if (v125)
  {
    v106 = (unint64_t *)&v125->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v123 < 0)
    operator delete(v122[0]);
  v109 = *a3;
  v118 = v169;
  if (v169)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v169;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v119 = v110;
  v169 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v109 + 56))(v109, &v118);
  v112 = v119;
  if (v119)
  {
    v113 = (unint64_t *)&v119->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v169;
  v169 = 0;
  if (v115)
    (*((void (**)(void **))*v115 + 1))(v115);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v149, 0);
  result = (uint64_t)v156;
  if (v156)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v156);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0756938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 112);
  *(_QWORD *)(v61 - 112) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::GatherAlongAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void **v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  void **v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  void **v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void **v115;
  uint64_t result;
  uint64_t v117;
  void **v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  void **v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  __int128 v138;
  __int128 v139;
  void *v140[2];
  uint64_t v141;
  void *v142;
  void *v143;
  _QWORD *v144;
  __n128 v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  char **v149;
  __n128 v150;
  __n128 v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  __n128 v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _QWORD v161[3];
  _QWORD *v162;
  void *v163;
  void *v164;
  _QWORD *v165;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v168;
  void **v169;
  void **v170;
  uint64_t v171;
  char *v172;
  char **v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v156 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v168 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v169 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v164 = v12 + 2;
  v165 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v163 = v12;
  v170 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v163);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v153 = v15 + 2;
  v154 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v171 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 3, &v155);
  MIL::IRParameter::Make(&v155, (uint64_t *)&v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v142);
  v16 = v142;
  v142 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v18 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v156;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (void **)operator new(8uLL);
  v169 = v22;
  *v22 = (void *)v21;
  v170 = v22 + 1;
  v171 = (uint64_t)(v22 + 1);
  v163 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v163, 1, &v151);
  MIL::IRParameter::Make(&v151, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v20, "indices", (uint64_t *)&Scalar);
  v23 = Scalar;
  Scalar = 0;
  if (v23)
    (*((void (**)(std::__shared_weak_count_vtbl *))v23->~__shared_weak_count + 1))(v23);
  v24 = (std::__shared_weak_count *)v151.n128_u64[1];
  if (v151.n128_u64[1])
  {
    v25 = (unint64_t *)(v151.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  v27 = v156;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v150);
  MIL::IRParameter::Make(&v150, (uint64_t *)&v169);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v27, "axis", (uint64_t *)&v169);
  v29 = v169;
  v169 = 0;
  if (v29)
    (*((void (**)(void **))*v29 + 1))(v29);
  v30 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v31 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v149 = 0;
  v33 = operator new();
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  v169 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v149, (void **)v33);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v169, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v149, 1uLL);
  v34 = v149;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v163 = v36;
  *v36 = v35;
  v164 = v36 + 1;
  v165 = v36 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v163);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  __p = v38;
  *v38 = v37;
  v153 = v38 + 1;
  v154 = v38 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v142 = v40;
  *v40 = v39;
  v143 = v40 + 1;
  v144 = v40 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v142);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v41 = v146;
  v147 = v146;
  if (v146)
  {
    v42 = (_QWORD *)operator new();
    v43 = v146;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v148 = v42;
  v146 = 0;
  v44 = v34[2];
  v45 = v34[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v34) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v34;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v173 = v34 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v34 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v147 = 0;
    v148 = 0;
    v55 = *v34;
    v54 = v34[1];
    if (v54 == *v34)
    {
      v58 = (void **)v34[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = (void **)*v34;
      v54 = v34[1];
    }
    v46 = (char *)(v53 + 2);
    *v34 = v56;
    v169 = v58;
    v170 = v58;
    v34[1] = (char *)(v53 + 2);
    v171 = (uint64_t)v54;
    v59 = v34[2];
    v34[2] = &v51[16 * v52];
    v172 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v169);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v147 = 0;
    v148 = 0;
  }
  v34[1] = v46;
  v60 = v146;
  v146 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v62 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  *(_OWORD *)v140 = *(_OWORD *)a2;
  v141 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v156;
  *(_QWORD *)&v139 = v156;
  if (v156)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v139 + 1) = v65;
  v156 = 0;
  *(_QWORD *)&v138 = v149;
  if (v149)
  {
    v66 = (_QWORD *)operator new();
    v67 = v149;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v138 + 1) = v66;
  v149 = 0;
  v161[0] = &unk_1EA99FAC8;
  v161[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateGatherAlongAxis;
  v162 = v161;
  v160 = 0;
  MIL::IROperator::Make((__int128 *)v140, &v139, &v138, (uint64_t)v161, (uint64_t)v159, a3);
  v68 = v160;
  if (v160 == v159)
  {
    v69 = 4;
    v68 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_71;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_71:
  v70 = v162;
  if (v162 == v161)
  {
    v71 = 4;
    v70 = v161;
    goto LABEL_75;
  }
  if (v162)
  {
    v71 = 5;
LABEL_75:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v141) < 0)
    operator delete(v140[0]);
  v78 = *a3;
  v157[0] = &off_1EA99FBD8;
  v157[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherAlongAxis;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v78 + 200))(v78, v157);
  v79 = v158;
  if (v158 == v157)
  {
    v80 = 4;
    v79 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_93;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_93:
  MIL::Validation::TensorDTypeConstraints::Make(&v169);
  v81 = v169;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = Scalar;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v137 = v82;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v81 + 3))(v81, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v84 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = Scalar;
  Scalar = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v135 < 0)
    operator delete(v134[0]);
  v88 = v169;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = Scalar;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v131 = v89;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v128, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v88 + 3))(v88, &v130, v128);
  if (v129 < 0)
    operator delete(v128[0]);
  v91 = v131;
  if (v131)
  {
    v92 = (unint64_t *)&v131->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = Scalar;
  Scalar = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v126 = v169;
  if (v169)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v169;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v127 = v96;
  v169 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v126);
  v98 = v127;
  if (v127)
  {
    v99 = (unint64_t *)&v127->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v169;
  v169 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v169);
  v102 = v169;
  std::string::basic_string[abi:ne180100]<0>(v122, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v122, 0, (uint64_t *)&Scalar);
  v124 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v125 = v103;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v120, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v102 + 3))(v102, &v124, 0, v120);
  if (v121 < 0)
    operator delete(v120[0]);
  v105 = v125;
  if (v125)
  {
    v106 = (unint64_t *)&v125->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v123 < 0)
    operator delete(v122[0]);
  v109 = *a3;
  v118 = v169;
  if (v169)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v169;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v119 = v110;
  v169 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v109 + 56))(v109, &v118);
  v112 = v119;
  if (v119)
  {
    v113 = (unint64_t *)&v119->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v169;
  v169 = 0;
  if (v115)
    (*((void (**)(void **))*v115 + 1))(v115);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v149, 0);
  result = (uint64_t)v156;
  if (v156)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v156);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0757A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  v63 = *(_QWORD *)(v61 - 112);
  *(_QWORD *)(v61 - 112) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *v60;
  *v60 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::GatherNd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count_vtbl *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  void **v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void **v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  void **v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void **v95;
  void **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void **v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void **v109;
  uint64_t result;
  uint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  void *v114[2];
  char v115;
  void *v116[2];
  char v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  void **v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  __int128 v132;
  __int128 v133;
  void *v134[2];
  uint64_t v135;
  void *v136;
  void *v137;
  _QWORD *v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char **v143;
  __n128 v144;
  void *__p;
  void *v146;
  _QWORD *v147;
  __n128 v148;
  _QWORD *v149;
  _QWORD v150[3];
  _QWORD *v151;
  _BYTE v152[24];
  _BYTE *v153;
  _BYTE v154[24];
  _BYTE *v155;
  void *v156;
  void *v157;
  _QWORD *v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t p_on_zero_shared;
  uint64_t v161;
  void **v162;
  void **v163;
  uint64_t v164;
  char *v165;
  char **v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v149 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v161 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v159 = v9;
  v162 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v159);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v157 = v12 + 2;
  v158 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v156 = v12;
  v163 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v156);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v146 = v15 + 2;
  v147 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v162, 3, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v136);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v136);
  v16 = v136;
  v136 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v146 = __p;
    operator delete(__p);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    p_on_zero_shared = (uint64_t)v159;
    operator delete(v159);
  }
  v20 = v149;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (void **)operator new(8uLL);
  v162 = v22;
  *v22 = (void *)v21;
  v163 = v22 + 1;
  v164 = (uint64_t)(v22 + 1);
  v156 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v156, 1, &v144);
  MIL::IRParameter::Make(&v144, (uint64_t *)&v159);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v20, "indices", (uint64_t *)&v159);
  v23 = v159;
  v159 = 0;
  if (v23)
    (*((void (**)(std::__shared_weak_count_vtbl *))v23->~__shared_weak_count + 1))(v23);
  v24 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v25 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  v143 = 0;
  v27 = operator new();
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_QWORD *)(v27 + 16) = 0;
  v162 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, (void **)v27);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v162, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v143, 1uLL);
  v28 = v143;
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v156 = v30;
  *v30 = v29;
  v157 = v30 + 1;
  v158 = v30 + 1;
  v159 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v156);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v146 = v32 + 1;
  v147 = v32 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v136 = v34;
  *v34 = v33;
  v137 = v34 + 1;
  v138 = v34 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v136);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v159, 3, &v139);
  MIL::IRParameter::Make(&v139, &v140);
  v35 = v140;
  v141 = v140;
  if (v140)
  {
    v36 = (_QWORD *)operator new();
    v37 = v140;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v142 = v36;
  v140 = 0;
  v38 = v28[2];
  v39 = v28[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v28) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v28;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v166 = v28 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v28 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v141 = 0;
    v142 = 0;
    v49 = *v28;
    v48 = v28[1];
    if (v48 == *v28)
    {
      v52 = (void **)v28[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = (void **)*v28;
      v48 = v28[1];
    }
    v40 = (char *)(v47 + 2);
    *v28 = v50;
    v162 = v52;
    v163 = v52;
    v28[1] = (char *)(v47 + 2);
    v164 = (uint64_t)v48;
    v53 = v28[2];
    v28[2] = &v45[16 * v46];
    v165 = v53;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v162);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v141 = 0;
    v142 = 0;
  }
  v28[1] = v40;
  v54 = v140;
  v140 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v56 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (__p)
  {
    v146 = __p;
    operator delete(__p);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  *(_OWORD *)v134 = *(_OWORD *)a2;
  v135 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v149;
  *(_QWORD *)&v133 = v149;
  if (v149)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v133 + 1) = v59;
  v149 = 0;
  *(_QWORD *)&v132 = v143;
  if (v143)
  {
    v60 = (_QWORD *)operator new();
    v61 = v143;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v132 + 1) = v60;
  v143 = 0;
  v155 = 0;
  v153 = 0;
  MIL::IROperator::Make((__int128 *)v134, &v133, &v132, (uint64_t)v154, (uint64_t)v152, a3);
  v62 = v153;
  if (v153 == v152)
  {
    v63 = 4;
    v62 = v152;
  }
  else
  {
    if (!v153)
      goto LABEL_64;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_64:
  v64 = v155;
  if (v155 == v154)
  {
    v65 = 4;
    v64 = v154;
    goto LABEL_68;
  }
  if (v155)
  {
    v65 = 5;
LABEL_68:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
  if (*((_QWORD *)&v133 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v135) < 0)
    operator delete(v134[0]);
  v72 = *a3;
  v150[0] = &off_1EA99FBD8;
  v150[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherNd;
  v151 = v150;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v72 + 200))(v72, v150);
  v73 = v151;
  if (v151 == v150)
  {
    v74 = 4;
    v73 = v150;
  }
  else
  {
    if (!v151)
      goto LABEL_86;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_86:
  MIL::Validation::TensorDTypeConstraints::Make(&v162);
  v75 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&v159);
  v130 = v159;
  if (v159)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = v159;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v131 = v76;
  v159 = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v75 + 3))(v75, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v78 = v131;
  if (v131)
  {
    p_shared_owners = (unint64_t *)&v131->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v159;
  v159 = 0;
  if (v81)
    (*((void (**)(std::__shared_weak_count_vtbl *))v81->~__shared_weak_count + 1))(v81);
  if (v129 < 0)
    operator delete(v128[0]);
  v82 = v162;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v159);
  v124 = v159;
  if (v159)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = v159;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v125 = v83;
  v159 = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v82 + 3))(v82, &v124, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v85 = v125;
  if (v125)
  {
    v86 = (unint64_t *)&v125->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v159;
  v159 = 0;
  if (v88)
    (*((void (**)(std::__shared_weak_count_vtbl *))v88->~__shared_weak_count + 1))(v88);
  v89 = *a3;
  v120 = v162;
  if (v162)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v162;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = (std::__shared_weak_count_vtbl *)v91;
  }
  else
  {
    v90 = 0;
  }
  v121 = v90;
  v162 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v89 + 56))(v89, &v120);
  v92 = v121;
  if (v121)
  {
    v93 = (unint64_t *)&v121->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v162;
  v162 = 0;
  if (v95)
    (*((void (**)(void **))*v95 + 1))(v95);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v162);
  v96 = v162;
  std::string::basic_string[abi:ne180100]<0>(v116, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v116, 0, (uint64_t *)&v159);
  v118 = v159;
  if (v159)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v159;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v119 = v97;
  v159 = 0;
  std::string::basic_string[abi:ne180100]<0>(v114, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v96 + 3))(v96, &v118, 0, v114);
  if (v115 < 0)
    operator delete(v114[0]);
  v99 = v119;
  if (v119)
  {
    v100 = (unint64_t *)&v119->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v159;
  v159 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v117 < 0)
    operator delete(v116[0]);
  v103 = *a3;
  v112 = v162;
  if (v162)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v162;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = (std::__shared_weak_count_vtbl *)v105;
  }
  else
  {
    v104 = 0;
  }
  v113 = v104;
  v162 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v103 + 56))(v103, &v112);
  v106 = v113;
  if (v113)
  {
    v107 = (unint64_t *)&v113->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v162;
  v162 = 0;
  if (v109)
    (*((void (**)(void **))*v109 + 1))(v109);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, 0);
  result = (uint64_t)v149;
  if (v149)
  {
    v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v149);
    return MEMORY[0x1E0C023A0](v111, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0758AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateAffine(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  MIL::IRValueType *v6;
  uint64_t v7;
  int v8;
  float Float;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::value_type *v13;
  std::string::size_type size;
  int v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  _DWORD v34[2];
  void *__p[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string v39;

  std::string::basic_string[abi:ne180100]<0>(&v39, "padding_value");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v6 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(_QWORD *)ParameterValue + 32))(ParameterValue);
  v7 = MIL::IRValueType::AsTensorType(v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  if (v8 == 4)
  {
    LOWORD(v39.__r_.__value_.__l.__data_) = MIL::IRValue::GetScalar<MIL::Fp16>(ParameterValue);
    Float = MIL::Fp16::GetFloat((MIL::Fp16 *)&v39);
  }
  else
  {
    if (v8 != 5)
    {
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v21 = (std::__shared_weak_count *)LocationPtr[1];
      v37 = *LocationPtr;
      v38 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Unexpected dType for affine input padding_value.");
      MIL::ValidationResult::ValidationResult(a2, &v37, 1, __p);
      if (v36 < 0)
        operator delete(__p[0]);
      v24 = v38;
      if (v38)
      {
        v25 = (unint64_t *)&v38->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      return;
    }
    Float = MIL::IRValue::GetScalar<float>(ParameterValue);
  }
  if (Float == 0.0)
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  std::to_string(&v33, Float);
  v10 = std::string::insert(&v33, 0, "Unsupported value, '");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v39, "', for parameter 'padding_value'");
  v13 = (std::string::value_type *)v12->__r_.__value_.__r.__words[0];
  size = v12->__r_.__value_.__l.__size_;
  v34[0] = v12->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
  v15 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v16 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v17 = (std::__shared_weak_count *)v16[1];
  v31 = *v16;
  v32 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (v15 < 0)
  {
    std::string::__init_copy_ctor_external(&v30, v13, size);
  }
  else
  {
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    v30.__r_.__value_.__l.__size_ = size;
    LODWORD(v30.__r_.__value_.__r.__words[2]) = v34[0];
    *(_DWORD *)((char *)&v30.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v34 + 3);
    *((_BYTE *)&v30.__r_.__value_.__s + 23) = v15;
  }
  MIL::ValidationResult::ValidationResult(a2, &v31, 315, &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v27 = v32;
  if (!v32)
    goto LABEL_35;
  v28 = (unint64_t *)&v32->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_35:
    if ((v15 & 0x80000000) == 0)
      return;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (v15 < 0)
LABEL_36:
    operator delete(v13);
}

void sub_1E0759148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  void *v30;
  int v31;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (v31 < 0)
    operator delete(v30);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCropResize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  MIL::IRValueType *v9;
  uint64_t v10;
  MIL::IRValue *SingleValue;
  const void *v12;
  int v13;
  MIL::IRValue *v14;
  const void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  void *__p;
  void *v26;
  _QWORD *v27;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "roi");
  v9 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v10 = MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "target_height");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v12 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v13 = MIL::IRValue::GetScalar<int>(v12);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "target_width");
  v14 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v15 = (const void *)MIL::IRValue::AsTensor(v14);
  v16 = MIL::IRValue::GetScalar<int>(v15);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  v17 = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
  v18 = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v19 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) + 8);
  v20 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v13);
  v21 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v16);
  v22 = operator new(0x28uLL);
  v26 = v22 + 5;
  v27 = v22 + 5;
  *v22 = v17;
  v22[1] = v18;
  v22[2] = v19;
  v22[3] = v20;
  v22[4] = v21;
  __p = v22;
  v23 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v24 = (uint64_t *)operator new(8uLL);
  *a3 = v24;
  *v24++ = v23;
  a3[1] = v24;
  a3[2] = v24;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
}

void sub_1E07593F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceAffine(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  int v8;
  MIL::IRValue *SingleValue;
  const void *v10;
  int v11;
  MIL::IRValue *v12;
  const void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  void *exception;
  _QWORD *v23;
  void *v24;
  _QWORD v25[3];
  __int128 v26;
  void *__p;
  void *v28;
  _QWORD *v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_height");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v10 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v11 = MIL::IRValue::GetScalar<int>(v10);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_width");
  v12 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)&__p);
  v13 = (const void *)MIL::IRValue::AsTensor(v12);
  v14 = MIL::IRValue::GetScalar<int>(v13);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  if (v11 < 1 || v14 <= 0)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(&__p);
    *(_QWORD *)&v26 = __p;
    if (__p)
    {
      v23 = (_QWORD *)operator new();
      v24 = __p;
      *v23 = &unk_1EA9940C8;
      v23[1] = 0;
      v23[2] = 0;
      v23[3] = v24;
    }
    else
    {
      v23 = 0;
    }
    *((_QWORD *)&v26 + 1) = v23;
    __p = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, "Affine layer 'output_height' and 'output_width' must be > 0.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v26, (uint64_t)v25, 315);
  }
  v15 = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v16 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) + 8);
  v17 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v11);
  v18 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v14);
  v19 = operator new(0x20uLL);
  v28 = v19 + 4;
  v29 = v19 + 4;
  *v19 = v15;
  v19[1] = v16;
  v19[2] = v17;
  v19[3] = v18;
  __p = v19;
  v20 = MIL::IRTensorValueType::MakeWithShape(*a1, v8, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v21 = (uint64_t *)operator new(8uLL);
  *a3 = v21;
  *v21++ = v20;
  a3[1] = v21;
  a3[2] = v21;
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
}

void sub_1E075968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a17)
    (*(void (**)(void *))(*(_QWORD *)a17 + 8))(a17);
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResample(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  void *__p;
  void *v19;
  _QWORD *v20;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "coordinates");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v11 = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v12 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) + 8);
  v13 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9) + 8);
  v14 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9) + 16);
  v15 = operator new(0x20uLL);
  v19 = v15 + 4;
  v20 = v15 + 4;
  *v15 = v11;
  v15[1] = v12;
  v15[2] = v13;
  v15[3] = v14;
  __p = v15;
  v16 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v17 = (uint64_t *)operator new(8uLL);
  *a3 = v17;
  *v17++ = v16;
  a3[1] = v17;
  a3[2] = v17;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_1E07598C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleNearestNeighbor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  MIL::IRValueType *v18;
  uint64_t v19;
  int v20;
  MIL::IRValue *SingleValue;
  const void *v22;
  float v23;
  MIL::IRValueType *v24;
  uint64_t v25;
  int v26;
  MIL::IRValue *v27;
  const void *v28;
  float v29;
  uint64_t v30;
  void (***v31)(MIL::MILContextImpl *__hidden);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (***v35)(MIL::MILContextImpl *__hidden);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void *exception;
  void *v41;
  char *v42;
  uint64_t v43;
  std::string v44[2];
  int v45;
  _QWORD v46[2];
  void *__p[2];
  char v48;
  int v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v48 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v51 = 0;
  v52 = 0;
  v50 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v50, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  v12 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  v46[0] = v12;
  v46[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v44, (uint64_t)__p);
    v44[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v45 = v49;
    MIL::ValidationError::ValidationError(exception, v44);
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "scale_factor_height");
  v18 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v41);
  v19 = MIL::IRValueType::AsTensorType(v18);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v41);
  v22 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  if (v20 == 11)
    v23 = (float)(int)MIL::IRValue::GetScalar<int>(v22);
  else
    v23 = MIL::IRValue::GetScalar<float>(v22);
  if (SHIBYTE(v43) < 0)
    operator delete(v41);
  std::string::basic_string[abi:ne180100]<0>(&v41, "scale_factor_width");
  v24 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&v41);
  v25 = MIL::IRValueType::AsTensorType(v24);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 88))(v25);
  v27 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v41);
  v28 = (const void *)MIL::IRValue::AsTensor(v27);
  if (v26 == 11)
    v29 = (float)(int)MIL::IRValue::GetScalar<int>(v28);
  else
    v29 = MIL::IRValue::GetScalar<float>(v28);
  if (SHIBYTE(v43) < 0)
    operator delete(v41);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v41, v50, (uint64_t)v51, (v51 - v50) >> 3);
  v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v51 - 2) + 16))(*((_QWORD *)v51 - 2));
  v31 = *a1;
  if (v30)
  {
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30);
    v33 = MIL::IRConstantDimension::Make(v31, (MIL::MILContext *)vcvtms_u32_f32(v23 * (float)v32));
  }
  else
  {
    v33 = MIL::IRUnknownDimension::Make(*a1, 0);
  }
  *((_QWORD *)v42 - 2) = v33;
  v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v50[v42 - (_BYTE *)v41 - 8] + 16))(*(_QWORD *)&v50[v42 - (_BYTE *)v41 - 8]);
  v35 = *a1;
  if (v34)
  {
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34);
    v37 = MIL::IRConstantDimension::Make(v35, (MIL::MILContext *)vcvtms_u32_f32(v29 * (float)v36));
  }
  else
  {
    v37 = MIL::IRUnknownDimension::Make(*a1, 0);
  }
  *((_QWORD *)v42 - 1) = v37;
  v38 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&v41);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v39 = (uint64_t *)operator new(8uLL);
  *a4 = v39;
  *v39++ = v38;
  a4[1] = v39;
  a4[2] = v39;
  if (v41)
  {
    v42 = (char *)v41;
    operator delete(v41);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1E0759C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void *v31;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a15);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a24);
  v31 = *(void **)(v29 - 104);
  if (v31)
  {
    *(_QWORD *)(v29 - 96) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::`anonymous namespace'::ImageResizingValidationHelper(_QWORD *a1@<X0>, MIL::IRTensorValueType *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v6;
  void *exception;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[3];
  _QWORD v16[2];
  _BYTE v17[56];
  _QWORD v18[3];
  _QWORD v19[2];
  _BYTE v20[56];
  void *v21;
  void *v22;
  uint64_t v23;

  v6 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v21, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
  if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)&v21))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v8 = a1[1];
    v19[0] = *a1;
    v19[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "Variadic shape is not supported for upsample op type inference.");
    MIL::ValidationResult::ValidationResult(v20, v19, 315, v18);
    MIL::ValidationError::ValidationError(exception, v20);
  }
  if (MIL::IRTensorValueType::Rank(a2) <= 2)
  {
    v11 = __cxa_allocate_exception(0x48uLL);
    v12 = a1[1];
    v16[0] = *a1;
    v16[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    std::string::basic_string[abi:ne180100]<0>(v15, "Rank of the input tensor must be at least 3.");
    MIL::ValidationResult::ValidationResult(v17, v16, 315, v15);
    MIL::ValidationError::ValidationError(v11, v17);
  }
  MIL::ValidationResult::ValidationResult(a3);
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1E0759EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  void *v31;
  char v32;
  uint64_t v33;
  void *v35;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a18);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if ((v32 & 1) != 0)
    __cxa_free_exception(v31);
  v35 = *(void **)(v33 - 56);
  if (v35)
  {
    *(_QWORD *)(v33 - 48) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleBilinear(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleNearestNeighbor(a1, v9, a3, a4);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E075A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeNearestNeighbor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  MIL::IRValue *SingleValue;
  const void *v18;
  int v19;
  MIL::IRValue *v20;
  const void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void *exception;
  void *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD v32[3];
  __int128 v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  std::string v37[2];
  int v38;
  _QWORD v39[2];
  void *__p[2];
  char v41;
  int v42;
  void *v43;
  _BYTE *v44;
  uint64_t v45;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v41 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v44 = 0;
  v45 = 0;
  v43 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v43, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  v12 = (std::__shared_weak_count *)a2[1];
  v39[0] = *a2;
  v39[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v37, (uint64_t)__p);
    v37[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v38 = v42;
    MIL::ValidationError::ValidationError(exception, v37);
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, "target_size_width");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v34);
  v18 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v19 = MIL::IRValue::GetScalar<int>(v18);
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
  std::string::basic_string[abi:ne180100]<0>(&v34, "target_size_height");
  v20 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v34);
  v21 = (const void *)MIL::IRValue::AsTensor(v20);
  v22 = MIL::IRValue::GetScalar<int>(v21);
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
  if (v19 < 1 || v22 <= 0)
  {
    v28 = __cxa_allocate_exception(0x48uLL);
    v29 = a2[1];
    *(_QWORD *)&v33 = *a2;
    *((_QWORD *)&v33 + 1) = v29;
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "Param target_size should be greater than zero.");
    MIL::ValidationError::ValidationError((uint64_t)v28, &v33, (uint64_t)v32, 315);
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v34, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 3);
  v23 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v19);
  *(v35 - 1) = v23;
  v24 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v22);
  *(v35 - 2) = v24;
  v25 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&v34);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v26 = (uint64_t *)operator new(8uLL);
  *a4 = v26;
  *v26++ = v25;
  a4[1] = v26;
  a4[2] = v26;
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
}

void sub_1E075A344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  void *v40;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a24);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a33);
  v40 = *(void **)(v38 - 88);
  if (v40)
  {
    *(_QWORD *)(v38 - 80) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeBilinear(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v9[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeNearestNeighbor(a1, v9, a3, a4);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E075A4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCrop(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  MIL::IRValue *SingleValue;
  uint64_t *v18;
  unsigned int *Data;
  uint64_t v20;
  uint64_t v21;
  MIL::IRValue *v22;
  uint64_t *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (***v28)(MIL::MILContextImpl *__hidden);
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  MIL::MILContext *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (***v39)(MIL::MILContextImpl *__hidden);
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  MIL::MILContext *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *exception;
  _QWORD v53[2];
  _QWORD v54[2];
  void *v55;
  char *v56;
  uint64_t v57;
  std::string v58[2];
  int v59;
  _QWORD v60[2];
  void *__p[2];
  char v62;
  int v63;
  char *v64;
  _BYTE *v65;
  uint64_t v66;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v62 < 0)
    operator delete(__p[0]);
  v10 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v9 + 96))(v9);
  v65 = 0;
  v66 = 0;
  v64 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v64, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  v12 = (std::__shared_weak_count *)a2[1];
  v60[0] = *a2;
  v60[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v58, (uint64_t)__p);
    v58[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v59 = v63;
    MIL::ValidationError::ValidationError(exception, v58);
  }
  std::string::basic_string[abi:ne180100]<0>(&v55, "crop_height");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v55);
  v18 = (uint64_t *)MIL::IRValue::AsTensor(SingleValue);
  Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v18);
  v21 = v20;
  if (SHIBYTE(v57) < 0)
    operator delete(v55);
  std::string::basic_string[abi:ne180100]<0>(&v55, "crop_width");
  v22 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)&v55);
  v23 = (uint64_t *)MIL::IRValue::AsTensor(v22);
  v24 = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v23);
  v26 = v25;
  if (SHIBYTE(v57) < 0)
    operator delete(v55);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v55, v64, (uint64_t)v65, (v65 - v64) >> 3);
  v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v65 - 2) + 16))(*((_QWORD *)v65 - 2));
  v28 = *a1;
  if (v27)
  {
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27);
    v30 = (std::__shared_weak_count *)a2[1];
    v54[0] = *a2;
    v54[1] = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v34 = MIL::IRConstantDimension::Make(v28, v33);
    *((_QWORD *)v56 - 2) = v34;
    if (v30)
    {
      v35 = (unint64_t *)&v30->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
    v37 = MIL::IRUnknownDimension::Make(*a1, 0);
    *((_QWORD *)v56 - 2) = v37;
  }
  v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v64[v56 - (_BYTE *)v55 - 8] + 16))(*(_QWORD *)&v64[v56 - (_BYTE *)v55 - 8]);
  v39 = *a1;
  if (v38)
  {
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 48))(v38);
    v41 = *a2;
    v42 = (std::__shared_weak_count *)a2[1];
    v53[0] = v41;
    v53[1] = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v46 = MIL::IRConstantDimension::Make(v39, v45);
    *((_QWORD *)v56 - 1) = v46;
    if (v42)
    {
      v47 = (unint64_t *)&v42->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  else
  {
    v49 = MIL::IRUnknownDimension::Make(*a1, 0);
    *((_QWORD *)v56 - 1) = v49;
  }
  v50 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&v55);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v51 = (uint64_t *)operator new(8uLL);
  *a4 = v51;
  *v51++ = v50;
  a4[1] = v51;
  a4[2] = v51;
  if (v55)
  {
    v56 = (char *)v55;
    operator delete(v55);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
}

void sub_1E075A8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v36;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a20);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a29);
  v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(_QWORD *)(v34 - 104) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

unint64_t MIL::Operators::Common::ios15::CustomValueTypeInference::`anonymous namespace'::InferCroppedDimension(unsigned int *a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t result;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *exception;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  std::string::size_type v40;
  _QWORD v41[2];
  _BYTE v42[56];
  _QWORD v43[3];
  _QWORD v44[2];
  _BYTE v45[56];
  _QWORD v46[3];
  _QWORD v47[2];
  _BYTE v48[56];

  if (a2 != 2)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v16 = a4[1];
    v47[0] = *a4;
    v47[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    std::string::basic_string[abi:ne180100]<0>(v46, "Crop parameter must have exactly 2 elements");
    MIL::ValidationResult::ValidationResult(v48, v47, 315, v46);
    MIL::ValidationError::ValidationError(exception, v48);
  }
  v4 = *a1;
  if ((v4 & 0x80000000) != 0 || (v5 = a1[1], (v5 & 0x80000000) != 0))
  {
    v10 = __cxa_allocate_exception(0x48uLL);
    v11 = a4[1];
    v44[0] = *a4;
    v44[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "Crop parameter must be non-negative");
    MIL::ValidationResult::ValidationResult(v45, v44, 315, v43);
    MIL::ValidationError::ValidationError(v10, v45);
  }
  v7 = v5 + v4;
  result = a3 - (v5 + v4);
  if (a3 <= v5 + v4)
  {
    v20 = __cxa_allocate_exception(0x48uLL);
    v21 = a4[1];
    v41[0] = *a4;
    v41[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    std::to_string(&v35, v7);
    v24 = std::string::insert(&v35, 0, "Sum of crop parameters (");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v36, ") must be less than input dimension (");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v34, a3);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v34;
    else
      v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v37, (const std::string::value_type *)v28, size);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v38, ").");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v40 = v32->__r_.__value_.__r.__words[2];
    v39 = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(v42, v41, 315, &v39);
    MIL::ValidationError::ValidationError(v20, v42);
  }
  return result;
}

void sub_1E075AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  char v62;
  void *v63;

  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a50);
  if (a47 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  if ((v62 & 1) != 0)
    __cxa_free_exception(v63);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Affine::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void **v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  std::__shared_weak_count_vtbl *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void **v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  void **v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  char *v101;
  __int128 v102;
  void **v103;
  char *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  char **v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count_vtbl *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void **v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void **v160;
  void **v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  void **v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  void **v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  void **v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  void **v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count_vtbl *v195;
  void **v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count_vtbl *v202;
  void **v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count_vtbl *v209;
  void **v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count_vtbl *v216;
  void **v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count_vtbl *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  void **v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void **v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count_vtbl *v258;
  uint64_t result;
  uint64_t v260;
  std::__shared_weak_count_vtbl *v261;
  std::__shared_weak_count *v262;
  void *v263[2];
  char v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  void *v271[2];
  char v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  void **v275;
  std::__shared_weak_count *v276;
  void *v277[2];
  char v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  void *v281[2];
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  void *v289[2];
  char v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  void *v293[2];
  char v294;
  void *v295[2];
  char v296;
  std::__shared_weak_count_vtbl *v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  char v300;
  void *v301[2];
  char v302;
  std::__shared_weak_count_vtbl *v303;
  std::__shared_weak_count *v304;
  void *v305[2];
  char v306;
  void *v307[2];
  char v308;
  std::__shared_weak_count_vtbl *v309;
  std::__shared_weak_count *v310;
  void *v311[2];
  char v312;
  void *v313[2];
  char v314;
  std::__shared_weak_count_vtbl *v315;
  std::__shared_weak_count *v316;
  void *v317[2];
  char v318;
  void *v319[2];
  char v320;
  std::__shared_weak_count_vtbl *v321;
  std::__shared_weak_count *v322;
  void **v323;
  std::__shared_weak_count *v324;
  void *v325[2];
  char v326;
  std::__shared_weak_count_vtbl *v327;
  std::__shared_weak_count *v328;
  void *v329[2];
  char v330;
  void *v331[2];
  char v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  void *v335[2];
  char v336;
  void *v337[2];
  char v338;
  std::__shared_weak_count_vtbl *v339;
  std::__shared_weak_count *v340;
  void *v341[2];
  char v342;
  void *v343[2];
  char v344;
  std::__shared_weak_count_vtbl *v345;
  std::__shared_weak_count *v346;
  __int128 v347;
  __int128 v348;
  void *__p[2];
  uint64_t v350;
  __n128 v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  char **v355;
  __n128 v356;
  __n128 v357;
  __n128 v358;
  __n128 v359;
  __n128 v360;
  __n128 v361;
  __n128 v362;
  __n128 v363;
  __n128 v364;
  _QWORD *v365;
  _QWORD v366[3];
  _QWORD *v367;
  _BYTE v368[24];
  _BYTE *v369;
  _QWORD v370[3];
  _QWORD *v371;
  std::__shared_weak_count_vtbl *v372;
  uint64_t v373;
  void (__cdecl **v374)(std::__shared_weak_count *__hidden);
  _QWORD v375[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared_weak;
  _QWORD *p_on_zero_shared;
  void **v379;
  void **v380;
  char *v381;
  char *v382;
  char **v383;
  uint64_t v384;

  v384 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v365 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (char *)operator new(0x20uLL);
  v380 = (void **)(v11 + 32);
  v381 = v11 + 32;
  *(_QWORD *)v11 = v7;
  *((_QWORD *)v11 + 1) = v8;
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = v10;
  v379 = (void **)v11;
  v372 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v379);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v16->__on_zero_shared_weak;
  p_on_zero_shared = &v16->__on_zero_shared_weak;
  v16->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v16->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  v16->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v14;
  v16->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v15;
  Scalar = v16;
  v373 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v372, 2, &v364);
  MIL::IRParameter::Make(&v364, &v353);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v353);
  v17 = v353;
  v353 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v364.n128_u64[1];
  if (v364.n128_u64[1])
  {
    v19 = (unint64_t *)(v364.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  v21 = v365;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)6);
  v24 = (char *)operator new(0x10uLL);
  v380 = (void **)(v24 + 16);
  v381 = v24 + 16;
  *(_QWORD *)v24 = v22;
  *((_QWORD *)v24 + 1) = v23;
  v379 = (void **)v24;
  v372 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v379);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)6);
  v27 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v27->__on_zero_shared;
  p_on_zero_shared = &v27->__on_zero_shared;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v27->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  Scalar = v27;
  v373 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v372, 2, &v363);
  MIL::IRParameter::Make(&v363, &v353);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v21, "transform_matrix", &v353);
  v28 = v353;
  v353 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v363.n128_u64[1];
  if (v363.n128_u64[1])
  {
    v30 = (unint64_t *)(v363.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  if (v379)
  {
    v380 = v379;
    operator delete(v379);
  }
  v32 = v365;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v362);
  MIL::IRParameter::Make(&v362, (uint64_t *)&v379);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v32, "output_height", (uint64_t *)&v379);
  v34 = v379;
  v379 = 0;
  if (v34)
    (*((void (**)(void **))*v34 + 1))(v34);
  v35 = (std::__shared_weak_count *)v362.n128_u64[1];
  if (v362.n128_u64[1])
  {
    v36 = (unint64_t *)(v362.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v365;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v361);
  MIL::IRParameter::Make(&v361, (uint64_t *)&v379);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v38, "output_width", (uint64_t *)&v379);
  v40 = v379;
  v379 = 0;
  if (v40)
    (*((void (**)(void **))*v40 + 1))(v40);
  v41 = (std::__shared_weak_count *)v361.n128_u64[1];
  if (v361.n128_u64[1])
  {
    v42 = (unint64_t *)(v361.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v365;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v360);
  MIL::IRParameter::Make(&v360, (uint64_t *)&v379);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v44, "sampling_mode", (uint64_t *)&v379);
  v46 = v379;
  v379 = 0;
  if (v46)
    (*((void (**)(void **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v360.n128_u64[1];
  if (v360.n128_u64[1])
  {
    v48 = (unint64_t *)(v360.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v365;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v359);
  MIL::IRParameter::Make(&v359, (uint64_t *)&v379);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v50, "padding_mode", (uint64_t *)&v379);
  v52 = v379;
  v379 = 0;
  if (v52)
    (*((void (**)(void **))*v52 + 1))(v52);
  v53 = (std::__shared_weak_count *)v359.n128_u64[1];
  if (v359.n128_u64[1])
  {
    v54 = (unint64_t *)(v359.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v365;
  v379 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v380 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v379, 2, &v358);
  MIL::IRParameter::Make(&v358, (uint64_t *)&Scalar);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v56, "padding_value", (uint64_t *)&Scalar);
  v58 = Scalar;
  Scalar = 0;
  if (v58)
    (*((void (**)(std::__shared_weak_count_vtbl *))v58->~__shared_weak_count + 1))(v58);
  v59 = (std::__shared_weak_count *)v358.n128_u64[1];
  if (v358.n128_u64[1])
  {
    v60 = (unint64_t *)(v358.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  v62 = v365;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v357);
  MIL::IRParameter::Make(&v357, (uint64_t *)&v379);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v62, "coordinates_mode", (uint64_t *)&v379);
  v64 = v379;
  v379 = 0;
  if (v64)
    (*((void (**)(void **))*v64 + 1))(v64);
  v65 = (std::__shared_weak_count *)v357.n128_u64[1];
  if (v357.n128_u64[1])
  {
    v66 = (unint64_t *)(v357.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  v68 = v365;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v356);
  MIL::IRParameter::Make(&v356, (uint64_t *)&v379);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v68, "align_corners", (uint64_t *)&v379);
  v70 = v379;
  v379 = 0;
  if (v70)
    (*((void (**)(void **))*v70 + 1))(v70);
  v71 = (std::__shared_weak_count *)v356.n128_u64[1];
  if (v356.n128_u64[1])
  {
    v72 = (unint64_t *)(v356.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  v355 = 0;
  v74 = operator new();
  *(_QWORD *)v74 = 0;
  *(_QWORD *)(v74 + 8) = 0;
  *(_QWORD *)(v74 + 16) = 0;
  v379 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v355, (void **)v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v379, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v355, 1uLL);
  v75 = v355;
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (std::__shared_weak_count_vtbl *)&v80->__on_zero_shared_weak;
  p_on_zero_shared = &v80->__on_zero_shared_weak;
  v80->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v76;
  v80->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v77;
  v80->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v78;
  v80->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v79;
  Scalar = v80;
  v375[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v81 = MIL::IRUnknownDimension::Make(a1, 0);
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = MIL::IRUnknownDimension::Make(a1, 0);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  v373 = (uint64_t)&v85->__on_zero_shared_weak;
  v374 = &v85->__on_zero_shared_weak;
  v85->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v81;
  v85->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
  v85->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v83;
  v85->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v84;
  v372 = v85;
  v375[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v372);
  MIL::IRParameter::MakeTypeSet((uint64_t)v375, 2, &v351);
  MIL::IRParameter::Make(&v351, &v352);
  v86 = v352;
  v353 = v352;
  if (v352)
  {
    v87 = (_QWORD *)operator new();
    v88 = v352;
    *v87 = &unk_1EA99F888;
    v87[1] = 0;
    v87[2] = 0;
    v87[3] = v88;
  }
  else
  {
    v87 = 0;
  }
  v354 = v87;
  v352 = 0;
  v89 = v75[2];
  v90 = v75[1];
  if (v90 >= v89)
  {
    v92 = (v90 - *v75) >> 4;
    v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v94 = v89 - *v75;
    if (v94 >> 3 > v93)
      v93 = v94 >> 3;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
      v95 = 0xFFFFFFFFFFFFFFFLL;
    else
      v95 = v93;
    v383 = v75 + 2;
    v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v75 + 2), v95);
    v98 = (uint64_t *)&v96[16 * v92];
    *v98 = v86;
    v98[1] = (uint64_t)v87;
    v354 = 0;
    v353 = 0;
    v100 = *v75;
    v99 = v75[1];
    if (v99 == *v75)
    {
      v103 = (void **)v75[1];
      v101 = &v96[16 * v92];
    }
    else
    {
      v101 = &v96[16 * v92];
      do
      {
        v102 = *((_OWORD *)v99 - 1);
        v99 -= 16;
        *((_OWORD *)v101 - 1) = v102;
        v101 -= 16;
        *(_QWORD *)v99 = 0;
        *((_QWORD *)v99 + 1) = 0;
      }
      while (v99 != v100);
      v103 = (void **)*v75;
      v99 = v75[1];
    }
    v91 = (char *)(v98 + 2);
    *v75 = v101;
    v379 = v103;
    v380 = v103;
    v75[1] = (char *)(v98 + 2);
    v381 = v99;
    v104 = v75[2];
    v75[2] = &v96[16 * v97];
    v382 = v104;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v379);
  }
  else
  {
    *(_QWORD *)v90 = v86;
    *((_QWORD *)v90 + 1) = v87;
    v91 = v90 + 16;
    v354 = 0;
    v353 = 0;
  }
  v75[1] = v91;
  v105 = v352;
  v352 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = (std::__shared_weak_count *)v351.n128_u64[1];
  if (v351.n128_u64[1])
  {
    v107 = (unint64_t *)(v351.n128_u64[1] + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (v372)
  {
    v373 = (uint64_t)v372;
    operator delete(v372);
  }
  if (Scalar)
  {
    p_on_zero_shared_weak = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v350 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v109 = (uint64_t)v365;
  *(_QWORD *)&v348 = v365;
  if (v365)
  {
    v110 = (_QWORD *)operator new();
    *v110 = &unk_1EA99F8E8;
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = v109;
  }
  else
  {
    v110 = 0;
  }
  *((_QWORD *)&v348 + 1) = v110;
  v365 = 0;
  *(_QWORD *)&v347 = v355;
  if (v355)
  {
    v111 = (_QWORD *)operator new();
    v112 = v355;
    *v111 = &unk_1EA99F948;
    v111[1] = 0;
    v111[2] = 0;
    v111[3] = v112;
  }
  else
  {
    v111 = 0;
  }
  *((_QWORD *)&v347 + 1) = v111;
  v355 = 0;
  v370[0] = &unk_1EA99FAC8;
  v370[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateAffine;
  v371 = v370;
  v369 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v348, &v347, (uint64_t)v370, (uint64_t)v368, a3);
  v113 = v369;
  if (v369 == v368)
  {
    v114 = 4;
    v113 = v368;
  }
  else
  {
    if (!v369)
      goto LABEL_111;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_111:
  v115 = v371;
  if (v371 == v370)
  {
    v116 = 4;
    v115 = v370;
    goto LABEL_115;
  }
  if (v371)
  {
    v116 = 5;
LABEL_115:
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v347 + 1);
  if (*((_QWORD *)&v347 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v347 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (SHIBYTE(v350) < 0)
    operator delete(__p[0]);
  v123 = *a3;
  v366[0] = &off_1EA99FBD8;
  v366[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceAffine;
  v367 = v366;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v123 + 200))(v123, v366);
  v124 = v367;
  if (v367 == v366)
  {
    v125 = 4;
    v124 = v366;
  }
  else
  {
    if (!v367)
      goto LABEL_133;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_133:
  MIL::Validation::TensorDTypeConstraints::Make(&v379);
  v126 = v379;
  std::string::basic_string[abi:ne180100]<0>(v343, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v343, 0, (uint64_t *)&Scalar);
  v345 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v346 = v127;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v341, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v126 + 3))(v126, &v345, v341);
  if (v342 < 0)
    operator delete(v341[0]);
  v129 = v346;
  if (v346)
  {
    p_shared_owners = (unint64_t *)&v346->__shared_owners_;
    do
      v131 = __ldaxr(p_shared_owners);
    while (__stlxr(v131 - 1, p_shared_owners));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  if (v344 < 0)
    operator delete(v343[0]);
  v133 = v379;
  std::string::basic_string[abi:ne180100]<0>(v337, "transform_matrix");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v337, 0, (uint64_t *)&Scalar);
  v339 = Scalar;
  if (Scalar)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = Scalar;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v340 = v134;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v335, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v133 + 3))(v133, &v339, v335);
  if (v336 < 0)
    operator delete(v335[0]);
  v136 = v340;
  if (v340)
  {
    v137 = (unint64_t *)&v340->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = Scalar;
  Scalar = 0;
  if (v139)
    (*((void (**)(std::__shared_weak_count_vtbl *))v139->~__shared_weak_count + 1))(v139);
  if (v338 < 0)
    operator delete(v337[0]);
  v140 = v379;
  std::string::basic_string[abi:ne180100]<0>(v331, "padding_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v331, 0, (uint64_t *)&Scalar);
  v333 = Scalar;
  if (Scalar)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = Scalar;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v334 = v141;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v329, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v140 + 3))(v140, &v333, v329);
  if (v330 < 0)
    operator delete(v329[0]);
  v143 = v334;
  if (v334)
  {
    v144 = (unint64_t *)&v334->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = Scalar;
  Scalar = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v332 < 0)
    operator delete(v331[0]);
  v147 = v379;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v327 = Scalar;
  if (Scalar)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = Scalar;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v328 = v148;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v325, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v147 + 3))(v147, &v327, v325);
  if (v326 < 0)
    operator delete(v325[0]);
  v150 = v328;
  if (v328)
  {
    v151 = (unint64_t *)&v328->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = Scalar;
  Scalar = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  v154 = *a3;
  v323 = v379;
  if (v379)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v379;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  }
  else
  {
    v155 = 0;
  }
  v324 = v155;
  v379 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v154 + 56))(v154, &v323);
  v157 = v324;
  if (v324)
  {
    v158 = (unint64_t *)&v324->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v379;
  v379 = 0;
  if (v160)
    (*((void (**)(void **))*v160 + 1))(v160);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v379);
  v161 = v379;
  std::string::basic_string[abi:ne180100]<0>(v319, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v319, 0, (uint64_t *)&Scalar);
  v321 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v322 = v162;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v317, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v161 + 3))(v161, &v321, 0, v317);
  if (v318 < 0)
    operator delete(v317[0]);
  v164 = v322;
  if (v322)
  {
    v165 = (unint64_t *)&v322->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  if (v320 < 0)
    operator delete(v319[0]);
  v168 = v379;
  std::string::basic_string[abi:ne180100]<0>(v313, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v313, 0, (uint64_t *)&Scalar);
  v315 = Scalar;
  if (Scalar)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = Scalar;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v316 = v169;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v311, "C");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v168 + 3))(v168, &v315, 1, v311);
  if (v312 < 0)
    operator delete(v311[0]);
  v171 = v316;
  if (v316)
  {
    v172 = (unint64_t *)&v316->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = Scalar;
  Scalar = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  if (v314 < 0)
    operator delete(v313[0]);
  v175 = v379;
  std::string::basic_string[abi:ne180100]<0>(v307, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v307, 0, (uint64_t *)&Scalar);
  v309 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v310 = v176;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v305, "H_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v175 + 3))(v175, &v309, 2, v305);
  if (v306 < 0)
    operator delete(v305[0]);
  v178 = v310;
  if (v310)
  {
    v179 = (unint64_t *)&v310->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*((void (**)(std::__shared_weak_count_vtbl *))v181->~__shared_weak_count + 1))(v181);
  if (v308 < 0)
    operator delete(v307[0]);
  v182 = v379;
  std::string::basic_string[abi:ne180100]<0>(v301, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v301, 0, (uint64_t *)&Scalar);
  v303 = Scalar;
  if (Scalar)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = Scalar;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v304 = v183;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v299, "W_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v182 + 3))(v182, &v303, 3, v299);
  if (v300 < 0)
    operator delete(v299[0]);
  v185 = v304;
  if (v304)
  {
    v186 = (unint64_t *)&v304->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = Scalar;
  Scalar = 0;
  if (v188)
    (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188);
  if (v302 < 0)
    operator delete(v301[0]);
  v189 = v379;
  std::string::basic_string[abi:ne180100]<0>(v295, "transform_matrix");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v295, 0, (uint64_t *)&Scalar);
  v297 = Scalar;
  if (Scalar)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = Scalar;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v298 = v190;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v293, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v189 + 3))(v189, &v297, 0, v293);
  if (v294 < 0)
    operator delete(v293[0]);
  v192 = v298;
  if (v298)
  {
    v193 = (unint64_t *)&v298->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = Scalar;
  Scalar = 0;
  if (v195)
    (*((void (**)(std::__shared_weak_count_vtbl *))v195->~__shared_weak_count + 1))(v195);
  if (v296 < 0)
    operator delete(v295[0]);
  v196 = v379;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v291 = Scalar;
  if (Scalar)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = Scalar;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v292 = v197;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v289, "B");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v196 + 3))(v196, &v291, 0, v289);
  if (v290 < 0)
    operator delete(v289[0]);
  v199 = v292;
  if (v292)
  {
    v200 = (unint64_t *)&v292->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = Scalar;
  Scalar = 0;
  if (v202)
    (*((void (**)(std::__shared_weak_count_vtbl *))v202->~__shared_weak_count + 1))(v202);
  v203 = v379;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v287 = Scalar;
  if (Scalar)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = Scalar;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v288 = v204;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "C");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v203 + 3))(v203, &v287, 1, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v206 = v288;
  if (v288)
  {
    v207 = (unint64_t *)&v288->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = Scalar;
  Scalar = 0;
  if (v209)
    (*((void (**)(std::__shared_weak_count_vtbl *))v209->~__shared_weak_count + 1))(v209);
  v210 = v379;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v283 = Scalar;
  if (Scalar)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = Scalar;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v284 = v211;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v281, "H_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v210 + 3))(v210, &v283, 2, v281);
  if (v282 < 0)
    operator delete(v281[0]);
  v213 = v284;
  if (v284)
  {
    v214 = (unint64_t *)&v284->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = Scalar;
  Scalar = 0;
  if (v216)
    (*((void (**)(std::__shared_weak_count_vtbl *))v216->~__shared_weak_count + 1))(v216);
  v217 = v379;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v279 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = v219;
  }
  else
  {
    v218 = 0;
  }
  v280 = v218;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v277, "W_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v217 + 3))(v217, &v279, 3, v277);
  if (v278 < 0)
    operator delete(v277[0]);
  v220 = v280;
  if (v280)
  {
    v221 = (unint64_t *)&v280->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*((void (**)(std::__shared_weak_count_vtbl *))v223->~__shared_weak_count + 1))(v223);
  v224 = *a3;
  v275 = v379;
  if (v379)
  {
    v225 = (std::__shared_weak_count *)operator new();
    v226 = v379;
    v225->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v225->__shared_owners_ = 0;
    v225->__shared_weak_owners_ = 0;
    v225[1].__vftable = (std::__shared_weak_count_vtbl *)v226;
  }
  else
  {
    v225 = 0;
  }
  v276 = v225;
  v379 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v224 + 56))(v224, &v275);
  v227 = v276;
  if (v276)
  {
    v228 = (unint64_t *)&v276->__shared_owners_;
    do
      v229 = __ldaxr(v228);
    while (__stlxr(v229 - 1, v228));
    if (!v229)
    {
      ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
      std::__shared_weak_count::__release_weak(v227);
    }
  }
  v230 = v379;
  v379 = 0;
  if (v230)
    (*((void (**)(void **))*v230 + 1))(v230);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v372);
  v231 = v372;
  std::string::basic_string[abi:ne180100]<0>(v271, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v271, 0, &v353);
  v273 = v353;
  if (v353)
  {
    v232 = (std::__shared_weak_count *)operator new();
    v233 = v353;
    v232->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v232->__shared_owners_ = 0;
    v232->__shared_weak_owners_ = 0;
    v232[1].__vftable = (std::__shared_weak_count_vtbl *)v233;
  }
  else
  {
    v232 = 0;
  }
  v274 = v232;
  v353 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bilinear");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v379, (unsigned __int8 *)&Scalar, 1);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void ***, uint64_t))v231->~__shared_weak_count + 3))(v231, &v273, &v379, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v379);
  if (SHIBYTE(p_on_zero_shared) < 0)
    operator delete(Scalar);
  v234 = v274;
  if (v274)
  {
    v235 = (unint64_t *)&v274->__shared_owners_;
    do
      v236 = __ldaxr(v235);
    while (__stlxr(v236 - 1, v235));
    if (!v236)
    {
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
    }
  }
  v237 = v353;
  v353 = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  if (v272 < 0)
    operator delete(v271[0]);
  v238 = v372;
  std::string::basic_string[abi:ne180100]<0>(v267, "padding_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v267, 0, &v353);
  v269 = v353;
  if (v353)
  {
    v239 = (std::__shared_weak_count *)operator new();
    v240 = v353;
    v239->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v239->__shared_owners_ = 0;
    v239->__shared_weak_owners_ = 0;
    v239[1].__vftable = (std::__shared_weak_count_vtbl *)v240;
  }
  else
  {
    v239 = 0;
  }
  v270 = v239;
  v353 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "constant");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v379, (unsigned __int8 *)&Scalar, 1);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void ***, uint64_t))v238->~__shared_weak_count + 3))(v238, &v269, &v379, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v379);
  if (SHIBYTE(p_on_zero_shared) < 0)
    operator delete(Scalar);
  v241 = v270;
  if (v270)
  {
    v242 = (unint64_t *)&v270->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v353;
  v353 = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  if (v268 < 0)
    operator delete(v267[0]);
  v245 = v372;
  std::string::basic_string[abi:ne180100]<0>(v263, "coordinates_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, &v353);
  v265 = v353;
  if (v353)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = v353;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = (std::__shared_weak_count_vtbl *)v247;
  }
  else
  {
    v246 = 0;
  }
  v266 = v246;
  v353 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "normalized_minus_one_to_one");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v379, (unsigned __int8 *)&Scalar, 1);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void ***, uint64_t))v245->~__shared_weak_count + 3))(v245, &v265, &v379, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v379);
  if (SHIBYTE(p_on_zero_shared) < 0)
    operator delete(Scalar);
  v248 = v266;
  if (v266)
  {
    v249 = (unint64_t *)&v266->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = v353;
  v353 = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  if (v264 < 0)
    operator delete(v263[0]);
  v252 = *a3;
  v261 = v372;
  if (v372)
  {
    v253 = (std::__shared_weak_count *)operator new();
    v254 = v372;
    v253->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v253->__shared_owners_ = 0;
    v253->__shared_weak_owners_ = 0;
    v253[1].__vftable = v254;
  }
  else
  {
    v253 = 0;
  }
  v262 = v253;
  v372 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v252 + 56))(v252, &v261);
  v255 = v262;
  if (v262)
  {
    v256 = (unint64_t *)&v262->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = v372;
  v372 = 0;
  if (v258)
    (*((void (**)(std::__shared_weak_count_vtbl *))v258->~__shared_weak_count + 1))(v258);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v355, 0);
  result = (uint64_t)v365;
  if (v365)
  {
    v260 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v365);
    return MEMORY[0x1E0C023A0](v260, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E075CD64(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 192);
  *(_QWORD *)(v2 - 192) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3D0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x468], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Crop::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  unsigned __int8 *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  void **v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void **v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  void *v87;
  void **v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  void **v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void **v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  void **v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void **v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void **v122;
  uint64_t result;
  uint64_t v124;
  void **v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  void *v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  void *v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  char **v157;
  __n128 v158;
  __n128 v159;
  void *__p;
  void *v161;
  _QWORD *v162;
  __n128 v163;
  _QWORD *v164;
  void **v165;
  void **v166;
  void **v167;
  char *v168;
  char **v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  void *v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD v179[3];

  v179[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v164 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v166 = (void **)(v9 + 16);
  v167 = (void **)(v9 + 16);
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  v165 = (void **)v9;
  v176 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v161 = v12 + 2;
  v162 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  __p = v12;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v176, 2, &v163);
  MIL::IRParameter::Make(&v163, &v155);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v155);
  v13 = v155;
  v155 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v15 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v161 = __p;
    operator delete(__p);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  v17 = v164;
  v18 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v19 = (void **)operator new(8uLL);
  v165 = v19;
  *v19 = (void *)v18;
  v166 = v19 + 1;
  v167 = v19 + 1;
  v176 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v176, 1, &v159);
  MIL::IRParameter::Make(&v159, (uint64_t *)&__p);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v17, "crop_height", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v159.n128_u64[1];
  if (v159.n128_u64[1])
  {
    v23 = (unint64_t *)(v159.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v164;
  v26 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v27 = (void **)operator new(8uLL);
  v165 = v27;
  *v27 = (void *)v26;
  v166 = v27 + 1;
  v167 = v27 + 1;
  v176 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v176, 1, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&__p);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v25, "crop_width", (uint64_t *)&__p);
  v29 = __p;
  __p = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v31 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v157 = 0;
  v33 = operator new();
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  v165 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v157, (void **)v33);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v165, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v157, 1uLL);
  v34 = v157;
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(0x10uLL);
  v161 = v37 + 2;
  v162 = v37 + 2;
  *v37 = v35;
  v37[1] = v36;
  __p = v37;
  v179[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(0x10uLL);
  v177 = (uint64_t)(v40 + 2);
  v178 = v40 + 2;
  *v40 = v38;
  v40[1] = v39;
  v176 = v40;
  v179[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v176);
  MIL::IRParameter::MakeTypeSet((uint64_t)v179, 2, &v153);
  MIL::IRParameter::Make(&v153, &v154);
  v41 = v154;
  v155 = v154;
  if (v154)
  {
    v42 = (_QWORD *)operator new();
    v43 = v154;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v156 = v42;
  v154 = 0;
  v44 = v34[2];
  v45 = v34[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v34) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v34;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v169 = v34 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v34 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v155 = 0;
    v156 = 0;
    v55 = *v34;
    v54 = v34[1];
    if (v54 == *v34)
    {
      v58 = (void **)v34[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = (void **)*v34;
      v54 = v34[1];
    }
    v46 = (char *)(v53 + 2);
    *v34 = v56;
    v165 = v58;
    v166 = v58;
    v34[1] = (char *)(v53 + 2);
    v167 = (void **)v54;
    v59 = v34[2];
    v34[2] = &v51[16 * v52];
    v168 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v165);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v155 = 0;
    v156 = 0;
  }
  v34[1] = v46;
  v60 = v154;
  v154 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v62 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v176)
  {
    v177 = (uint64_t)v176;
    operator delete(v176);
  }
  if (__p)
  {
    v161 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v164;
  *(_QWORD *)&v150 = v164;
  if (v164)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v150 + 1) = v65;
  v164 = 0;
  *(_QWORD *)&v149 = v157;
  if (v157)
  {
    v66 = (_QWORD *)operator new();
    v67 = v157;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v149 + 1) = v66;
  v157 = 0;
  v175 = 0;
  v173 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v174, (uint64_t)v172, a3);
  v68 = v173;
  if (v173 == v172)
  {
    v69 = 4;
    v68 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_69;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_69:
  v70 = v175;
  if (v175 == v174)
  {
    v71 = 4;
    v70 = v174;
    goto LABEL_73;
  }
  if (v175)
  {
    v71 = 5;
LABEL_73:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v78 = *a3;
  v170[0] = &off_1EA99FBD8;
  v170[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCrop;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v78 + 200))(v78, v170);
  v79 = v171;
  if (v171 == v170)
  {
    v80 = 4;
    v79 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_91;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_91:
  MIL::Validation::TensorDTypeConstraints::Make(&v165);
  v81 = v165;
  std::string::basic_string[abi:ne180100]<0>(v145, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&__p);
  v147 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v148 = v82;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "T");
  (*((void (**)(void **, void **, void **))*v81 + 3))(v81, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v84 = v148;
  if (v148)
  {
    p_shared_owners = (unint64_t *)&v148->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  if (v146 < 0)
    operator delete(v145[0]);
  v88 = v165;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v141 = __p;
  if (__p)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = (std::__shared_weak_count_vtbl *)__p;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v142 = v89;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*((void (**)(void **, void **, void **))*v88 + 3))(v88, &v141, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v91 = v142;
  if (v142)
  {
    v92 = (unint64_t *)&v142->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = __p;
  __p = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  v95 = *a3;
  v137 = v165;
  if (v165)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v165;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v138 = v96;
  v165 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v95 + 56))(v95, &v137);
  v98 = v138;
  if (v138)
  {
    v99 = (unint64_t *)&v138->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v165;
  v165 = 0;
  if (v101)
    (*((void (**)(void **))*v101 + 1))(v101);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v165);
  v102 = v165;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&__p);
  v135 = __p;
  if (__p)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = (std::__shared_weak_count_vtbl *)__p;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v136 = v103;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v102 + 3))(v102, &v135, 0, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v105 = v136;
  if (v136)
  {
    v106 = (unint64_t *)&v136->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = __p;
  __p = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v134 < 0)
    operator delete(v133[0]);
  v109 = v165;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v129 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v130 = v110;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v109 + 3))(v109, &v129, 0, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v112 = v130;
  if (v130)
  {
    v113 = (unint64_t *)&v130->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  v116 = *a3;
  v125 = v165;
  if (v165)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v165;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  }
  else
  {
    v117 = 0;
  }
  v126 = v117;
  v165 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v116 + 56))(v116, &v125);
  v119 = v126;
  if (v126)
  {
    v120 = (unint64_t *)&v126->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v165;
  v165 = 0;
  if (v122)
    (*((void (**)(void **))*v122 + 1))(v122);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v157, 0);
  result = (uint64_t)v164;
  if (v164)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v164);
    return MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E075E490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  uint64_t *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;

  v54 = *(_QWORD *)(v52 - 248);
  *(_QWORD *)(v52 - 248) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *v51;
  *v51 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v52 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::CropResize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  char **v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void *v92;
  _QWORD *v93;
  void *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  __int128 v108;
  char *v109;
  char *v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  char **v118;
  _QWORD *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *p_shared_owners;
  unint64_t v137;
  void *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  void *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  void *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  uint64_t i;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  void *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  uint64_t j;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count_vtbl *v217;
  uint64_t result;
  uint64_t v219;
  std::__shared_weak_count_vtbl *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  void *v228;
  std::__shared_weak_count *v229;
  void *v230;
  std::__shared_weak_count *v231;
  void *v232[2];
  char v233;
  void *v234[2];
  char v235;
  void *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  void *v240[2];
  char v241;
  void *v242;
  std::__shared_weak_count *v243;
  void *v244[2];
  char v245;
  void *v246[2];
  char v247;
  void *v248;
  std::__shared_weak_count *v249;
  void *v250[2];
  char v251;
  void *v252[2];
  char v253;
  void *v254;
  std::__shared_weak_count *v255;
  void *v256;
  std::__shared_weak_count *v257;
  void *v258[2];
  char v259;
  void *v260;
  std::__shared_weak_count *v261;
  void *v262[2];
  char v263;
  void *v264[2];
  char v265;
  void *v266;
  std::__shared_weak_count *v267;
  void *v268[2];
  char v269;
  void *v270[2];
  char v271;
  void *v272;
  std::__shared_weak_count *v273;
  __int128 v274;
  __int128 v275;
  void *v276[2];
  uint64_t v277;
  __n128 v278;
  void *v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  __n128 v283;
  __n128 v284;
  __n128 v285;
  void *v286;
  void *v287;
  _QWORD *v288;
  __n128 v289;
  char **v290;
  __n128 v291;
  _QWORD *v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD v296[3];
  _QWORD v297[3];
  _QWORD v298[3];
  void *v299[3];
  void *__p;
  void *v301;
  _QWORD *v302;
  _QWORD v303[3];
  _QWORD *v304;
  _BYTE v305[24];
  _BYTE *v306;
  _BYTE v307[24];
  _BYTE *v308;
  void *v309;
  uint64_t v310;
  _QWORD *v311;
  std::__shared_weak_count_vtbl *v312;
  uint64_t v313;
  std::__shared_weak_count_vtbl *v314;
  uint64_t v315;

  v315 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v292 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x20uLL);
  v295 = (uint64_t)(v11 + 4);
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v10;
  v293 = v11;
  v294 = (uint64_t)(v11 + 4);
  v312 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v293);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v302 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  __p = v16;
  v301 = v16 + 4;
  v313 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v312, 2, &v291);
  MIL::IRParameter::Make(&v291, (uint64_t *)&v286);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v286);
  v17 = v286;
  v286 = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v291.n128_u64[1];
  if (v291.n128_u64[1])
  {
    v19 = (unint64_t *)(v291.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v301 = __p;
    operator delete(__p);
  }
  if (v293)
  {
    v294 = (uint64_t)v293;
    operator delete(v293);
  }
  v21 = v292;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v24 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v25 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v26 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x28uLL);
  v302 = v27 + 5;
  *v27 = v22;
  v27[1] = v23;
  v27[2] = v24;
  v27[3] = v25;
  v27[4] = v26;
  __p = v27;
  v301 = v27 + 5;
  v293 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v30 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v31 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v32 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
  v313 = (uint64_t)&v33[1];
  v314 = v33 + 1;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v30;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v31;
  v33->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  v312 = v33;
  v294 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v312);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v36 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)5);
  v37 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v38 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(0x28uLL);
  v288 = v39 + 5;
  *v39 = v34;
  v39[1] = v35;
  v39[2] = v36;
  v39[3] = v37;
  v39[4] = v38;
  v286 = v39;
  v287 = v39 + 5;
  v295 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v286);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)5);
  v43 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v44 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(0x28uLL);
  v310 = (uint64_t)(v45 + 5);
  v311 = v45 + 5;
  *v45 = v40;
  v45[1] = v41;
  v45[2] = v42;
  v45[3] = v43;
  v45[4] = v44;
  v309 = v45;
  v296[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v309);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v293, 4, &v289);
  MIL::IRParameter::Make(&v289, (uint64_t *)&v290);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v21, "roi", (uint64_t *)&v290);
  v46 = v290;
  v290 = 0;
  if (v46)
    (*((void (**)(char **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v289.n128_u64[1];
  if (v289.n128_u64[1])
  {
    v48 = (unint64_t *)(v289.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v309)
  {
    v310 = (uint64_t)v309;
    operator delete(v309);
  }
  if (v286)
  {
    v287 = v286;
    operator delete(v286);
  }
  if (v312)
  {
    v313 = (uint64_t)v312;
    operator delete(v312);
  }
  if (__p)
  {
    v301 = __p;
    operator delete(__p);
  }
  v50 = v292;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v285);
  MIL::IRParameter::Make(&v285, (uint64_t *)&v293);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v50, "target_height", (uint64_t *)&v293);
  v52 = v293;
  v293 = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v285.n128_u64[1];
  if (v285.n128_u64[1])
  {
    v54 = (unint64_t *)(v285.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v292;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v284);
  MIL::IRParameter::Make(&v284, (uint64_t *)&v293);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v56, "target_width", (uint64_t *)&v293);
  v58 = v293;
  v293 = 0;
  if (v58)
    (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v284.n128_u64[1];
  if (v284.n128_u64[1])
  {
    v60 = (unint64_t *)(v284.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  v62 = v292;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v283);
  MIL::IRParameter::Make(&v283, (uint64_t *)&v293);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[23],std::unique_ptr<MIL::IRParameter>>(v62, "normalized_coordinates", (uint64_t *)&v293);
  v64 = v293;
  v293 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v283.n128_u64[1];
  if (v283.n128_u64[1])
  {
    v66 = (unint64_t *)(v283.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  v68 = v292;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v282);
  MIL::IRParameter::Make(&v282, (uint64_t *)&v293);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v68, "spatial_scale", (uint64_t *)&v293);
  v70 = v293;
  v293 = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v282.n128_u64[1];
  if (v282.n128_u64[1])
  {
    v72 = (unint64_t *)(v282.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  v74 = v292;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v281);
  MIL::IRParameter::Make(&v281, (uint64_t *)&v293);
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v74, "box_coordinate_mode", (uint64_t *)&v293);
  v76 = v293;
  v293 = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = (std::__shared_weak_count *)v281.n128_u64[1];
  if (v281.n128_u64[1])
  {
    v78 = (unint64_t *)(v281.n128_u64[1] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  v80 = v292;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v280);
  MIL::IRParameter::Make(&v280, (uint64_t *)&v293);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v80, "sampling_mode", (uint64_t *)&v293);
  v82 = v293;
  v293 = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v280.n128_u64[1];
  if (v280.n128_u64[1])
  {
    v84 = (unint64_t *)(v280.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v290 = 0;
  v86 = operator new();
  *(_QWORD *)v86 = 0;
  *(_QWORD *)(v86 + 8) = 0;
  *(_QWORD *)(v86 + 16) = 0;
  v293 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v290, (void **)v86);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v293, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v290, 1uLL);
  v87 = v290;
  v88 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v89 = operator new(8uLL);
  __p = v89;
  *v89 = v88;
  v302 = v89 + 1;
  v301 = v89 + 1;
  v309 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v90 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v91 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v312 = v91;
  v91->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v90;
  v313 = (uint64_t)&v91->~__shared_weak_count_0;
  v314 = (std::__shared_weak_count_vtbl *)&v91->~__shared_weak_count_0;
  v310 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v312);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v309, 2, &v278);
  MIL::IRParameter::Make(&v278, (uint64_t *)&v279);
  v92 = v279;
  v286 = v279;
  if (v279)
  {
    v93 = (_QWORD *)operator new();
    v94 = v279;
    *v93 = &unk_1EA99F888;
    v93[1] = 0;
    v93[2] = 0;
    v93[3] = v94;
  }
  else
  {
    v93 = 0;
  }
  v287 = v93;
  v279 = 0;
  v95 = v87[2];
  v96 = v87[1];
  if (v96 >= v95)
  {
    v98 = (v96 - *v87) >> 4;
    v99 = v98 + 1;
    if ((unint64_t)(v98 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v100 = v95 - *v87;
    if (v100 >> 3 > v99)
      v99 = v100 >> 3;
    if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF0)
      v101 = 0xFFFFFFFFFFFFFFFLL;
    else
      v101 = v99;
    v296[1] = v87 + 2;
    v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v87 + 2), v101);
    v104 = &v102[16 * v98];
    *(_QWORD *)v104 = v92;
    *((_QWORD *)v104 + 1) = v93;
    v287 = 0;
    v286 = 0;
    v106 = *v87;
    v105 = v87[1];
    if (v105 == *v87)
    {
      v109 = v87[1];
      v107 = &v102[16 * v98];
    }
    else
    {
      v107 = &v102[16 * v98];
      do
      {
        v108 = *((_OWORD *)v105 - 1);
        v105 -= 16;
        *((_OWORD *)v107 - 1) = v108;
        v107 -= 16;
        *(_QWORD *)v105 = 0;
        *((_QWORD *)v105 + 1) = 0;
      }
      while (v105 != v106);
      v109 = *v87;
      v105 = v87[1];
    }
    v97 = v104 + 16;
    *v87 = v107;
    v294 = (uint64_t)v109;
    v87[1] = v104 + 16;
    v295 = (uint64_t)v105;
    v110 = v87[2];
    v87[2] = &v102[16 * v103];
    v296[0] = v110;
    v293 = v109;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v293);
  }
  else
  {
    *(_QWORD *)v96 = v92;
    *((_QWORD *)v96 + 1) = v93;
    v97 = v96 + 16;
    v287 = 0;
    v286 = 0;
  }
  v87[1] = v97;
  v111 = v279;
  v279 = 0;
  if (v111)
    (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
  v112 = (std::__shared_weak_count *)v278.n128_u64[1];
  if (v278.n128_u64[1])
  {
    v113 = (unint64_t *)(v278.n128_u64[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v312)
  {
    v313 = (uint64_t)v312;
    operator delete(v312);
  }
  if (__p)
  {
    v301 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v276 = *(_OWORD *)a2;
  v277 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v115 = (uint64_t)v292;
  *(_QWORD *)&v275 = v292;
  if (v292)
  {
    v116 = (_QWORD *)operator new();
    *v116 = &unk_1EA99F8E8;
    v116[1] = 0;
    v116[2] = 0;
    v116[3] = v115;
  }
  else
  {
    v116 = 0;
  }
  *((_QWORD *)&v275 + 1) = v116;
  v292 = 0;
  *(_QWORD *)&v274 = v290;
  if (v290)
  {
    v117 = (_QWORD *)operator new();
    v118 = v290;
    *v117 = &unk_1EA99F948;
    v117[1] = 0;
    v117[2] = 0;
    v117[3] = v118;
  }
  else
  {
    v117 = 0;
  }
  *((_QWORD *)&v274 + 1) = v117;
  v290 = 0;
  v308 = 0;
  v306 = 0;
  MIL::IROperator::Make((__int128 *)v276, &v275, &v274, (uint64_t)v307, (uint64_t)v305, a3);
  v119 = v306;
  if (v306 == v305)
  {
    v120 = 4;
    v119 = v305;
  }
  else
  {
    if (!v306)
      goto LABEL_108;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_108:
  v121 = v308;
  if (v308 == v307)
  {
    v122 = 4;
    v121 = v307;
    goto LABEL_112;
  }
  if (v308)
  {
    v122 = 5;
LABEL_112:
    (*(void (**)(void))(*v121 + 8 * v122))();
  }
  v123 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
  if (*((_QWORD *)&v274 + 1))
  {
    v124 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
  if (*((_QWORD *)&v275 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (SHIBYTE(v277) < 0)
    operator delete(v276[0]);
  v129 = *a3;
  v303[0] = &off_1EA99FBD8;
  v303[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCropResize;
  v304 = v303;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v129 + 200))(v129, v303);
  v130 = v304;
  if (v304 == v303)
  {
    v131 = 4;
    v130 = v303;
  }
  else
  {
    if (!v304)
      goto LABEL_130;
    v131 = 5;
  }
  (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_130:
  MIL::Validation::TensorDTypeConstraints::Make(&v293);
  v132 = v293;
  std::string::basic_string[abi:ne180100]<0>(v270, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v270, 0, (uint64_t *)&__p);
  v272 = __p;
  if (__p)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)__p;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v273 = v133;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v268, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v132 + 24))(v132, &v272, v268);
  if (v269 < 0)
    operator delete(v268[0]);
  v135 = v273;
  if (v273)
  {
    p_shared_owners = (unint64_t *)&v273->__shared_owners_;
    do
      v137 = __ldaxr(p_shared_owners);
    while (__stlxr(v137 - 1, p_shared_owners));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = __p;
  __p = 0;
  if (v138)
    (*(void (**)(void *))(*(_QWORD *)v138 + 8))(v138);
  if (v271 < 0)
    operator delete(v270[0]);
  v139 = v293;
  std::string::basic_string[abi:ne180100]<0>(v264, "roi");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v264, 0, (uint64_t *)&__p);
  v266 = __p;
  if (__p)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)__p;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v267 = v140;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v262, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v139 + 24))(v139, &v266, v262);
  if (v263 < 0)
    operator delete(v262[0]);
  v142 = v267;
  if (v267)
  {
    v143 = (unint64_t *)&v267->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = __p;
  __p = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  if (v265 < 0)
    operator delete(v264[0]);
  v146 = v293;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v260 = __p;
  if (__p)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)__p;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v261 = v147;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v258, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v146 + 24))(v146, &v260, v258);
  if (v259 < 0)
    operator delete(v258[0]);
  v149 = v261;
  if (v261)
  {
    v150 = (unint64_t *)&v261->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = __p;
  __p = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  v153 = *a3;
  v256 = v293;
  if (v293)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)v293;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v257 = v154;
  v293 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v153 + 56))(v153, &v256);
  v156 = v257;
  if (v257)
  {
    v157 = (unint64_t *)&v257->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v293;
  v293 = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v293);
  v160 = v293;
  std::string::basic_string[abi:ne180100]<0>(v252, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v252, 0, (uint64_t *)&__p);
  v254 = __p;
  if (__p)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)__p;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v255 = v161;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v250, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v160 + 24))(v160, &v254, 0, v250);
  if (v251 < 0)
    operator delete(v250[0]);
  v163 = v255;
  if (v255)
  {
    v164 = (unint64_t *)&v255->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = __p;
  __p = 0;
  if (v166)
    (*(void (**)(void *))(*(_QWORD *)v166 + 8))(v166);
  if (v253 < 0)
    operator delete(v252[0]);
  v167 = v293;
  std::string::basic_string[abi:ne180100]<0>(v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v246, 0, (uint64_t *)&__p);
  v248 = __p;
  if (__p)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = (std::__shared_weak_count_vtbl *)__p;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v249 = v168;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v244, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v167 + 24))(v167, &v248, 1, v244);
  if (v245 < 0)
    operator delete(v244[0]);
  v170 = v249;
  if (v249)
  {
    v171 = (unint64_t *)&v249->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = __p;
  __p = 0;
  if (v173)
    (*(void (**)(void *))(*(_QWORD *)v173 + 8))(v173);
  if (v247 < 0)
    operator delete(v246[0]);
  v174 = v293;
  std::string::basic_string[abi:ne180100]<0>(v240, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v240, 0, (uint64_t *)&__p);
  v242 = __p;
  if (__p)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)__p;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v243 = v175;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v238, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v174 + 24))(v174, &v242, 2, v238);
  if (v239 < 0)
    operator delete(v238[0]);
  v177 = v243;
  if (v243)
  {
    v178 = (unint64_t *)&v243->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = __p;
  __p = 0;
  if (v180)
    (*(void (**)(void *))(*(_QWORD *)v180 + 8))(v180);
  if (v241 < 0)
    operator delete(v240[0]);
  v181 = v293;
  std::string::basic_string[abi:ne180100]<0>(v234, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v234, 0, (uint64_t *)&__p);
  v236 = __p;
  if (__p)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = (std::__shared_weak_count_vtbl *)__p;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v237 = v182;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v232, "W");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v181 + 24))(v181, &v236, 3, v232);
  if (v233 < 0)
    operator delete(v232[0]);
  v184 = v237;
  if (v237)
  {
    v185 = (unint64_t *)&v237->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = __p;
  __p = 0;
  if (v187)
    (*(void (**)(void *))(*(_QWORD *)v187 + 8))(v187);
  if (v235 < 0)
    operator delete(v234[0]);
  v188 = *a3;
  v230 = v293;
  if (v293)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = (std::__shared_weak_count_vtbl *)v293;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v231 = v189;
  v293 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v188 + 56))(v188, &v230);
  v191 = v231;
  if (v231)
  {
    v192 = (unint64_t *)&v231->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v293;
  v293 = 0;
  if (v194)
    (*(void (**)(void *))(*(_QWORD *)v194 + 8))(v194);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v312);
  v195 = v312;
  std::string::basic_string[abi:ne180100]<0>(v226, "box_coordinate_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v226, 0, (uint64_t *)&v286);
  v228 = v286;
  if (v286)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)v286;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v229 = v196;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v293, "CENTER_SIZE_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v296, "CENTER_SIZE_WIDTH_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v297, "CORNERS_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v298, "CORNERS_WIDTH_FIRST");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v293, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, void **, uint64_t))v195->~__shared_weak_count + 3))(v195, &v228, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v298[i + 2]) < 0)
      operator delete((void *)v298[i]);
  }
  v199 = v229;
  if (v229)
  {
    v200 = (unint64_t *)&v229->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = v286;
  v286 = 0;
  if (v202)
    (*(void (**)(void *))(*(_QWORD *)v202 + 8))(v202);
  if (v227 < 0)
    operator delete(v226[0]);
  v203 = v312;
  std::string::basic_string[abi:ne180100]<0>(v222, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v222, 0, (uint64_t *)&v286);
  v224 = v286;
  if (v286)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = (std::__shared_weak_count_vtbl *)v286;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v225 = v204;
  v286 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v293, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v296, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v297, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v298, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v299, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v293, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, void **, void **, uint64_t))v203->~__shared_weak_count + 3))(v203, &v224, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v299[j + 2]) < 0)
      operator delete(v299[j]);
  }
  v207 = v225;
  if (v225)
  {
    v208 = (unint64_t *)&v225->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = v286;
  v286 = 0;
  if (v210)
    (*(void (**)(void *))(*(_QWORD *)v210 + 8))(v210);
  if (v223 < 0)
    operator delete(v222[0]);
  v211 = *a3;
  v220 = v312;
  if (v312)
  {
    v212 = (std::__shared_weak_count *)operator new();
    v213 = v312;
    v212->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v212->__shared_owners_ = 0;
    v212->__shared_weak_owners_ = 0;
    v212[1].__vftable = v213;
  }
  else
  {
    v212 = 0;
  }
  v221 = v212;
  v312 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v211 + 56))(v211, &v220);
  v214 = v221;
  if (v221)
  {
    v215 = (unint64_t *)&v221->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = v312;
  v312 = 0;
  if (v217)
    (*((void (**)(std::__shared_weak_count_vtbl *))v217->~__shared_weak_count + 1))(v217);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v290, 0);
  result = (uint64_t)v292;
  if (v292)
  {
    v219 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v292);
    return MEMORY[0x1E0C023A0](v219, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E076028C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x308], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x320], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Resample::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  unsigned __int8 *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  unsigned __int8 *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  unsigned __int8 *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  char **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count_vtbl *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  char *v95;
  char *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  char **v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  void *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void *v159;
  void *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  void *v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  void *v180;
  void *v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  void *v188;
  std::__shared_weak_count *v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  void *v194;
  void *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  void *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *v208;
  void *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count_vtbl *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void *v215;
  void *v216;
  std::__shared_weak_count *v217;
  std::__shared_weak_count_vtbl *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  void *v223;
  std::__shared_weak_count *v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::__shared_weak_count_vtbl *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  uint64_t i;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  uint64_t v247;
  uint64_t j;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  uint64_t k;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count_vtbl *v267;
  uint64_t result;
  uint64_t v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  void *v272[2];
  char v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  void *v280[2];
  char v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  void *v284;
  std::__shared_weak_count *v285;
  void *v286[2];
  char v287;
  void *v288;
  std::__shared_weak_count *v289;
  void *v290[2];
  char v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294[2];
  char v295;
  void *v296;
  std::__shared_weak_count *v297;
  void *v298[2];
  char v299;
  void *v300;
  std::__shared_weak_count *v301;
  void *v302[2];
  char v303;
  void *v304[2];
  char v305;
  void *v306;
  std::__shared_weak_count *v307;
  void *v308[2];
  char v309;
  void *v310[2];
  char v311;
  void *v312;
  std::__shared_weak_count *v313;
  void *v314[2];
  char v315;
  void *v316[2];
  char v317;
  void *v318;
  std::__shared_weak_count *v319;
  void *v320[2];
  char v321;
  void *v322[2];
  char v323;
  void *v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  void *v328[2];
  char v329;
  void *v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334[2];
  char v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338[2];
  char v339;
  void *v340[2];
  char v341;
  void *v342;
  std::__shared_weak_count *v343;
  void *v344;
  std::__shared_weak_count *v345;
  void *v346[2];
  char v347;
  void *v348;
  std::__shared_weak_count *v349;
  void *v350[2];
  char v351;
  void *v352[2];
  char v353;
  void *v354;
  std::__shared_weak_count *v355;
  void *v356[2];
  char v357;
  void *v358[2];
  char v359;
  void *v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  void *v364[2];
  char v365;
  void *v366;
  std::__shared_weak_count *v367;
  __int128 v368;
  __int128 v369;
  void *v370[2];
  uint64_t v371;
  __n128 v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  char **v376;
  __n128 v377;
  __n128 v378;
  __n128 v379;
  __n128 v380;
  __n128 v381;
  __n128 v382;
  __n128 v383;
  _QWORD *v384;
  void *Scalar;
  uint64_t v386;
  char *v387;
  _QWORD v388[3];
  _QWORD v389[3];
  void *v390[3];
  void *__p;
  void *v392;
  _QWORD *v393;
  _QWORD v394[3];
  _QWORD *v395;
  _BYTE v396[24];
  _BYTE *v397;
  _BYTE v398[24];
  _BYTE *v399;
  std::__shared_weak_count_vtbl *v400;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v402)(std::__shared_weak_count *__hidden);
  _QWORD v403[3];

  v403[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v384 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (char *)operator new(0x20uLL);
  v387 = v11 + 32;
  *(_QWORD *)v11 = v7;
  *((_QWORD *)v11 + 1) = v8;
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = v10;
  Scalar = v11;
  v386 = (uint64_t)(v11 + 32);
  v400 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v393 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  __p = v16;
  v392 = v16 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v400, 2, &v383);
  MIL::IRParameter::Make(&v383, &v374);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v374);
  v17 = v374;
  v374 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v383.n128_u64[1];
  if (v383.n128_u64[1])
  {
    v19 = (unint64_t *)(v383.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v392 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v386 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v21 = v384;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v26 = (char *)operator new(0x20uLL);
  v387 = v26 + 32;
  *(_QWORD *)v26 = v22;
  *((_QWORD *)v26 + 1) = v23;
  *((_QWORD *)v26 + 2) = v24;
  *((_QWORD *)v26 + 3) = v25;
  Scalar = v26;
  v386 = (uint64_t)(v26 + 32);
  v400 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v31 = operator new(0x20uLL);
  v393 = v31 + 4;
  *v31 = v27;
  v31[1] = v28;
  v31[2] = v29;
  v31[3] = v30;
  __p = v31;
  v392 = v31 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v400, 2, &v382);
  MIL::IRParameter::Make(&v382, &v374);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v21, "coordinates", &v374);
  v32 = v374;
  v374 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = (std::__shared_weak_count *)v382.n128_u64[1];
  if (v382.n128_u64[1])
  {
    v34 = (unint64_t *)(v382.n128_u64[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (__p)
  {
    v392 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v386 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v36 = v384;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v381);
  MIL::IRParameter::Make(&v381, (uint64_t *)&Scalar);
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v36, "sampling_mode", (uint64_t *)&Scalar);
  v38 = Scalar;
  Scalar = 0;
  if (v38)
    (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
  v39 = (std::__shared_weak_count *)v381.n128_u64[1];
  if (v381.n128_u64[1])
  {
    v40 = (unint64_t *)(v381.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v37 + 5) + 32))(*((_QWORD *)v37 + 5), 1);
  v42 = v384;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v380);
  MIL::IRParameter::Make(&v380, (uint64_t *)&Scalar);
  v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v42, "padding_mode", (uint64_t *)&Scalar);
  v44 = Scalar;
  Scalar = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v380.n128_u64[1];
  if (v380.n128_u64[1])
  {
    v46 = (unint64_t *)(v380.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v43 + 5) + 32))(*((_QWORD *)v43 + 5), 1);
  v48 = v384;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v386 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v379);
  MIL::IRParameter::Make(&v379, (uint64_t *)&__p);
  v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v48, "padding_value", (uint64_t *)&__p);
  v50 = __p;
  __p = 0;
  if (v50)
    (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v379.n128_u64[1];
  if (v379.n128_u64[1])
  {
    v52 = (unint64_t *)(v379.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v49 + 5) + 32))(*((_QWORD *)v49 + 5), 1);
  v54 = v384;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v378);
  MIL::IRParameter::Make(&v378, (uint64_t *)&Scalar);
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v54, "coordinates_mode", (uint64_t *)&Scalar);
  v56 = Scalar;
  Scalar = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v378.n128_u64[1];
  if (v378.n128_u64[1])
  {
    v58 = (unint64_t *)(v378.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  v60 = v384;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v377);
  MIL::IRParameter::Make(&v377, (uint64_t *)&Scalar);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v60, "align_corners", (uint64_t *)&Scalar);
  v62 = Scalar;
  Scalar = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v377.n128_u64[1];
  if (v377.n128_u64[1])
  {
    v64 = (unint64_t *)(v377.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  v376 = 0;
  v66 = operator new();
  *(_QWORD *)v66 = 0;
  *(_QWORD *)(v66 + 8) = 0;
  *(_QWORD *)(v66 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v376, (void **)v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v376, 1uLL);
  v67 = v376;
  v68 = MIL::IRUnknownDimension::Make(a1, 0);
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = operator new(0x20uLL);
  v393 = v72 + 4;
  *v72 = v68;
  v72[1] = v69;
  v72[2] = v70;
  v72[3] = v71;
  __p = v72;
  v392 = v72 + 4;
  v403[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, 0);
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v77->__on_zero_shared_weak;
  v402 = &v77->__on_zero_shared_weak;
  v77->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v73;
  v77->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v74;
  v77->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v75;
  v77->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v76;
  v400 = v77;
  v403[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v400);
  MIL::IRParameter::MakeTypeSet((uint64_t)v403, 2, &v372);
  MIL::IRParameter::Make(&v372, &v373);
  v78 = v373;
  v374 = v373;
  if (v373)
  {
    v79 = (_QWORD *)operator new();
    v80 = v373;
    *v79 = &unk_1EA99F888;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  v375 = v79;
  v373 = 0;
  v81 = v67[2];
  v82 = v67[1];
  if (v82 >= v81)
  {
    v84 = (v82 - *v67) >> 4;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v86 = v81 - *v67;
    if (v86 >> 3 > v85)
      v85 = v86 >> 3;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0)
      v87 = 0xFFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    v388[1] = v67 + 2;
    v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v67 + 2), v87);
    v90 = (uint64_t *)&v88[16 * v84];
    *v90 = v78;
    v90[1] = (uint64_t)v79;
    v375 = 0;
    v374 = 0;
    v92 = *v67;
    v91 = v67[1];
    if (v91 == *v67)
    {
      v95 = v67[1];
      v93 = &v88[16 * v84];
    }
    else
    {
      v93 = &v88[16 * v84];
      do
      {
        v94 = *((_OWORD *)v91 - 1);
        v91 -= 16;
        *((_OWORD *)v93 - 1) = v94;
        v93 -= 16;
        *(_QWORD *)v91 = 0;
        *((_QWORD *)v91 + 1) = 0;
      }
      while (v91 != v92);
      v95 = *v67;
      v91 = v67[1];
    }
    v83 = (char *)(v90 + 2);
    *v67 = v93;
    v386 = (uint64_t)v95;
    v67[1] = (char *)(v90 + 2);
    v387 = v91;
    v96 = v67[2];
    v67[2] = &v88[16 * v89];
    v388[0] = v96;
    Scalar = v95;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v82 = v78;
    *((_QWORD *)v82 + 1) = v79;
    v83 = v82 + 16;
    v375 = 0;
    v374 = 0;
  }
  v67[1] = v83;
  v97 = v373;
  v373 = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = (std::__shared_weak_count *)v372.n128_u64[1];
  if (v372.n128_u64[1])
  {
    v99 = (unint64_t *)(v372.n128_u64[1] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v400)
  {
    p_on_zero_shared_weak = (uint64_t)v400;
    operator delete(v400);
  }
  if (__p)
  {
    v392 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v370 = *(_OWORD *)a2;
  v371 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v101 = (uint64_t)v384;
  *(_QWORD *)&v369 = v384;
  if (v384)
  {
    v102 = (_QWORD *)operator new();
    *v102 = &unk_1EA99F8E8;
    v102[1] = 0;
    v102[2] = 0;
    v102[3] = v101;
  }
  else
  {
    v102 = 0;
  }
  *((_QWORD *)&v369 + 1) = v102;
  v384 = 0;
  *(_QWORD *)&v368 = v376;
  if (v376)
  {
    v103 = (_QWORD *)operator new();
    v104 = v376;
    *v103 = &unk_1EA99F948;
    v103[1] = 0;
    v103[2] = 0;
    v103[3] = v104;
  }
  else
  {
    v103 = 0;
  }
  *((_QWORD *)&v368 + 1) = v103;
  v376 = 0;
  v399 = 0;
  v397 = 0;
  MIL::IROperator::Make((__int128 *)v370, &v369, &v368, (uint64_t)v398, (uint64_t)v396, a3);
  v105 = v397;
  if (v397 == v396)
  {
    v106 = 4;
    v105 = v396;
  }
  else
  {
    if (!v397)
      goto LABEL_97;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_97:
  v107 = v399;
  if (v399 == v398)
  {
    v108 = 4;
    v107 = v398;
    goto LABEL_101;
  }
  if (v399)
  {
    v108 = 5;
LABEL_101:
    (*(void (**)(void))(*v107 + 8 * v108))();
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
  if (*((_QWORD *)&v368 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v369 + 1);
  if (*((_QWORD *)&v369 + 1))
  {
    v113 = (unint64_t *)(*((_QWORD *)&v369 + 1) + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (SHIBYTE(v371) < 0)
    operator delete(v370[0]);
  v115 = *a3;
  v394[0] = &off_1EA99FBD8;
  v394[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResample;
  v395 = v394;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v115 + 200))(v115, v394);
  v116 = v395;
  if (v395 == v394)
  {
    v117 = 4;
    v116 = v394;
  }
  else
  {
    if (!v395)
      goto LABEL_119;
    v117 = 5;
  }
  (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_119:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v118 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v364, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v364, 0, (uint64_t *)&__p);
  v366 = __p;
  if (__p)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)__p;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v367 = v119;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v362, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v118 + 24))(v118, &v366, v362);
  if (v363 < 0)
    operator delete(v362[0]);
  v121 = v367;
  if (v367)
  {
    p_shared_owners = (unint64_t *)&v367->__shared_owners_;
    do
      v123 = __ldaxr(p_shared_owners);
    while (__stlxr(v123 - 1, p_shared_owners));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = __p;
  __p = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  if (v365 < 0)
    operator delete(v364[0]);
  v125 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v358, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v358, 0, (uint64_t *)&__p);
  v360 = __p;
  if (__p)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = (std::__shared_weak_count_vtbl *)__p;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v361 = v126;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v356, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v125 + 24))(v125, &v360, v356);
  if (v357 < 0)
    operator delete(v356[0]);
  v128 = v361;
  if (v361)
  {
    v129 = (unint64_t *)&v361->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = __p;
  __p = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  if (v359 < 0)
    operator delete(v358[0]);
  v132 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v352, "padding_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v352, 0, (uint64_t *)&__p);
  v354 = __p;
  if (__p)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)__p;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v355 = v133;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v350, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v132 + 24))(v132, &v354, v350);
  if (v351 < 0)
    operator delete(v350[0]);
  v135 = v355;
  if (v355)
  {
    v136 = (unint64_t *)&v355->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = __p;
  __p = 0;
  if (v138)
    (*(void (**)(void *))(*(_QWORD *)v138 + 8))(v138);
  if (v353 < 0)
    operator delete(v352[0]);
  v139 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v348 = __p;
  if (__p)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = (std::__shared_weak_count_vtbl *)__p;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v349 = v140;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v346, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v139 + 24))(v139, &v348, v346);
  if (v347 < 0)
    operator delete(v346[0]);
  v142 = v349;
  if (v349)
  {
    v143 = (unint64_t *)&v349->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = __p;
  __p = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  v146 = *a3;
  v344 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v345 = v147;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 56))(v146, &v344);
  v149 = v345;
  if (v345)
  {
    v150 = (unint64_t *)&v345->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v153 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v340, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v340, 0, (uint64_t *)&__p);
  v342 = __p;
  if (__p)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = (std::__shared_weak_count_vtbl *)__p;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v343 = v154;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v338, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v153 + 24))(v153, &v342, 0, v338);
  if (v339 < 0)
    operator delete(v338[0]);
  v156 = v343;
  if (v343)
  {
    v157 = (unint64_t *)&v343->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = __p;
  __p = 0;
  if (v159)
    (*(void (**)(void *))(*(_QWORD *)v159 + 8))(v159);
  if (v341 < 0)
    operator delete(v340[0]);
  v160 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v334, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v334, 0, (uint64_t *)&__p);
  v336 = __p;
  if (__p)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)__p;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v337 = v161;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v332, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v160 + 24))(v160, &v336, 1, v332);
  if (v333 < 0)
    operator delete(v332[0]);
  v163 = v337;
  if (v337)
  {
    v164 = (unint64_t *)&v337->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = __p;
  __p = 0;
  if (v166)
    (*(void (**)(void *))(*(_QWORD *)v166 + 8))(v166);
  if (v335 < 0)
    operator delete(v334[0]);
  v167 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v328, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v328, 0, (uint64_t *)&__p);
  v330 = __p;
  if (__p)
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = (std::__shared_weak_count_vtbl *)__p;
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = v169;
  }
  else
  {
    v168 = 0;
  }
  v331 = v168;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v326, "H_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v167 + 24))(v167, &v330, 2, v326);
  if (v327 < 0)
    operator delete(v326[0]);
  v170 = v331;
  if (v331)
  {
    v171 = (unint64_t *)&v331->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v173 = __p;
  __p = 0;
  if (v173)
    (*(void (**)(void *))(*(_QWORD *)v173 + 8))(v173);
  if (v329 < 0)
    operator delete(v328[0]);
  v174 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v322, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v322, 0, (uint64_t *)&__p);
  v324 = __p;
  if (__p)
  {
    v175 = (std::__shared_weak_count *)operator new();
    v176 = (std::__shared_weak_count_vtbl *)__p;
    v175->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v175->__shared_owners_ = 0;
    v175->__shared_weak_owners_ = 0;
    v175[1].__vftable = v176;
  }
  else
  {
    v175 = 0;
  }
  v325 = v175;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v320, "W_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v174 + 24))(v174, &v324, 3, v320);
  if (v321 < 0)
    operator delete(v320[0]);
  v177 = v325;
  if (v325)
  {
    v178 = (unint64_t *)&v325->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = __p;
  __p = 0;
  if (v180)
    (*(void (**)(void *))(*(_QWORD *)v180 + 8))(v180);
  if (v323 < 0)
    operator delete(v322[0]);
  v181 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v316, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v316, 0, (uint64_t *)&__p);
  v318 = __p;
  if (__p)
  {
    v182 = (std::__shared_weak_count *)operator new();
    v183 = (std::__shared_weak_count_vtbl *)__p;
    v182->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v182->__shared_owners_ = 0;
    v182->__shared_weak_owners_ = 0;
    v182[1].__vftable = v183;
  }
  else
  {
    v182 = 0;
  }
  v319 = v182;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v314, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v181 + 24))(v181, &v318, 0, v314);
  if (v315 < 0)
    operator delete(v314[0]);
  v184 = v319;
  if (v319)
  {
    v185 = (unint64_t *)&v319->__shared_owners_;
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  v187 = __p;
  __p = 0;
  if (v187)
    (*(void (**)(void *))(*(_QWORD *)v187 + 8))(v187);
  if (v317 < 0)
    operator delete(v316[0]);
  v188 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v310, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v310, 0, (uint64_t *)&__p);
  v312 = __p;
  if (__p)
  {
    v189 = (std::__shared_weak_count *)operator new();
    v190 = (std::__shared_weak_count_vtbl *)__p;
    v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v189->__shared_owners_ = 0;
    v189->__shared_weak_owners_ = 0;
    v189[1].__vftable = v190;
  }
  else
  {
    v189 = 0;
  }
  v313 = v189;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v308, "H_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v188 + 24))(v188, &v312, 1, v308);
  if (v309 < 0)
    operator delete(v308[0]);
  v191 = v313;
  if (v313)
  {
    v192 = (unint64_t *)&v313->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = __p;
  __p = 0;
  if (v194)
    (*(void (**)(void *))(*(_QWORD *)v194 + 8))(v194);
  if (v311 < 0)
    operator delete(v310[0]);
  v195 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v304, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v304, 0, (uint64_t *)&__p);
  v306 = __p;
  if (__p)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = (std::__shared_weak_count_vtbl *)__p;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = v197;
  }
  else
  {
    v196 = 0;
  }
  v307 = v196;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v302, "W_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v195 + 24))(v195, &v306, 2, v302);
  if (v303 < 0)
    operator delete(v302[0]);
  v198 = v307;
  if (v307)
  {
    v199 = (unint64_t *)&v307->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = __p;
  __p = 0;
  if (v201)
    (*(void (**)(void *))(*(_QWORD *)v201 + 8))(v201);
  if (v305 < 0)
    operator delete(v304[0]);
  v202 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v300 = __p;
  if (__p)
  {
    v203 = (std::__shared_weak_count *)operator new();
    v204 = (std::__shared_weak_count_vtbl *)__p;
    v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v203->__shared_owners_ = 0;
    v203->__shared_weak_owners_ = 0;
    v203[1].__vftable = v204;
  }
  else
  {
    v203 = 0;
  }
  v301 = v203;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v298, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v202 + 24))(v202, &v300, 0, v298);
  if (v299 < 0)
    operator delete(v298[0]);
  v205 = v301;
  if (v301)
  {
    v206 = (unint64_t *)&v301->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = __p;
  __p = 0;
  if (v208)
    (*(void (**)(void *))(*(_QWORD *)v208 + 8))(v208);
  v209 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v296 = __p;
  if (__p)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = (std::__shared_weak_count_vtbl *)__p;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = v211;
  }
  else
  {
    v210 = 0;
  }
  v297 = v210;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v294, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v209 + 24))(v209, &v296, 1, v294);
  if (v295 < 0)
    operator delete(v294[0]);
  v212 = v297;
  if (v297)
  {
    v213 = (unint64_t *)&v297->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = __p;
  __p = 0;
  if (v215)
    (*(void (**)(void *))(*(_QWORD *)v215 + 8))(v215);
  v216 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v292 = __p;
  if (__p)
  {
    v217 = (std::__shared_weak_count *)operator new();
    v218 = (std::__shared_weak_count_vtbl *)__p;
    v217->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v217->__shared_owners_ = 0;
    v217->__shared_weak_owners_ = 0;
    v217[1].__vftable = v218;
  }
  else
  {
    v217 = 0;
  }
  v293 = v217;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v290, "H_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v216 + 24))(v216, &v292, 2, v290);
  if (v291 < 0)
    operator delete(v290[0]);
  v219 = v293;
  if (v293)
  {
    v220 = (unint64_t *)&v293->__shared_owners_;
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v222 = __p;
  __p = 0;
  if (v222)
    (*(void (**)(void *))(*(_QWORD *)v222 + 8))(v222);
  v223 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v288 = __p;
  if (__p)
  {
    v224 = (std::__shared_weak_count *)operator new();
    v225 = (std::__shared_weak_count_vtbl *)__p;
    v224->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v224->__shared_owners_ = 0;
    v224->__shared_weak_owners_ = 0;
    v224[1].__vftable = v225;
  }
  else
  {
    v224 = 0;
  }
  v289 = v224;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v286, "W_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v223 + 24))(v223, &v288, 3, v286);
  if (v287 < 0)
    operator delete(v286[0]);
  v226 = v289;
  if (v289)
  {
    v227 = (unint64_t *)&v289->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = __p;
  __p = 0;
  if (v229)
    (*(void (**)(void *))(*(_QWORD *)v229 + 8))(v229);
  v230 = *a3;
  v284 = Scalar;
  if (Scalar)
  {
    v231 = (std::__shared_weak_count *)operator new();
    v232 = (std::__shared_weak_count_vtbl *)Scalar;
    v231->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v231->__shared_owners_ = 0;
    v231->__shared_weak_owners_ = 0;
    v231[1].__vftable = v232;
  }
  else
  {
    v231 = 0;
  }
  v285 = v231;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v230 + 56))(v230, &v284);
  v233 = v285;
  if (v285)
  {
    v234 = (unint64_t *)&v285->__shared_owners_;
    do
      v235 = __ldaxr(v234);
    while (__stlxr(v235 - 1, v234));
    if (!v235)
    {
      ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
      std::__shared_weak_count::__release_weak(v233);
    }
  }
  v236 = Scalar;
  Scalar = 0;
  if (v236)
    (*(void (**)(void *))(*(_QWORD *)v236 + 8))(v236);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v400);
  v237 = v400;
  std::string::basic_string[abi:ne180100]<0>(v280, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v280, 0, &v374);
  v282 = v374;
  if (v374)
  {
    v238 = (std::__shared_weak_count *)operator new();
    v239 = v374;
    v238->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v238->__shared_owners_ = 0;
    v238->__shared_weak_owners_ = 0;
    v238[1].__vftable = (std::__shared_weak_count_vtbl *)v239;
  }
  else
  {
    v238 = 0;
  }
  v283 = v238;
  v374 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "bilinear");
  std::string::basic_string[abi:ne180100]<0>(v388, "nearest");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 2);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **, _QWORD))v237->~__shared_weak_count + 3))(v237, &v282, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v388[i + 2]) < 0)
      operator delete((void *)v388[i]);
  }
  v241 = v283;
  if (v283)
  {
    v242 = (unint64_t *)&v283->__shared_owners_;
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = v374;
  v374 = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  if (v281 < 0)
    operator delete(v280[0]);
  v245 = v400;
  std::string::basic_string[abi:ne180100]<0>(v276, "padding_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v276, 0, &v374);
  v278 = v374;
  if (v374)
  {
    v246 = (std::__shared_weak_count *)operator new();
    v247 = v374;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246[1].__vftable = (std::__shared_weak_count_vtbl *)v247;
  }
  else
  {
    v246 = 0;
  }
  v279 = v246;
  v374 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "border");
  std::string::basic_string[abi:ne180100]<0>(v388, "constant");
  std::string::basic_string[abi:ne180100]<0>(v389, "reflection");
  std::string::basic_string[abi:ne180100]<0>(v390, "symmetric");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 4);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **, _QWORD))v245->~__shared_weak_count + 3))(v245, &v278, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v390[j + 2]) < 0)
      operator delete(v390[j]);
  }
  v249 = v279;
  if (v279)
  {
    v250 = (unint64_t *)&v279->__shared_owners_;
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = v374;
  v374 = 0;
  if (v252)
    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 8))(v252);
  if (v277 < 0)
    operator delete(v276[0]);
  v253 = v400;
  std::string::basic_string[abi:ne180100]<0>(v272, "coordinates_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 0, &v374);
  v274 = v374;
  if (v374)
  {
    v254 = (std::__shared_weak_count *)operator new();
    v255 = v374;
    v254->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v254->__shared_owners_ = 0;
    v254->__shared_weak_owners_ = 0;
    v254[1].__vftable = (std::__shared_weak_count_vtbl *)v255;
  }
  else
  {
    v254 = 0;
  }
  v275 = v254;
  v374 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "normalized_minus_one_to_one");
  std::string::basic_string[abi:ne180100]<0>(v388, "normalized_zero_to_one");
  std::string::basic_string[abi:ne180100]<0>(v389, "unnormalized");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 3);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **, _QWORD))v253->~__shared_weak_count + 3))(v253, &v274, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -9; k -= 3)
  {
    if (SHIBYTE(v389[k + 2]) < 0)
      operator delete((void *)v389[k]);
  }
  v257 = v275;
  if (v275)
  {
    v258 = (unint64_t *)&v275->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = v374;
  v374 = 0;
  if (v260)
    (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
  if (v273 < 0)
    operator delete(v272[0]);
  v261 = *a3;
  v270 = v400;
  if (v400)
  {
    v262 = (std::__shared_weak_count *)operator new();
    v263 = v400;
    v262->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v262->__shared_owners_ = 0;
    v262->__shared_weak_owners_ = 0;
    v262[1].__vftable = v263;
  }
  else
  {
    v262 = 0;
  }
  v271 = v262;
  v400 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v261 + 56))(v261, &v270);
  v264 = v271;
  if (v271)
  {
    v265 = (unint64_t *)&v271->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = v400;
  v400 = 0;
  if (v267)
    (*((void (**)(std::__shared_weak_count_vtbl *))v267->~__shared_weak_count + 1))(v267);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v376, 0);
  result = (uint64_t)v384;
  if (v384)
  {
    v269 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v384);
    return MEMORY[0x1E0C023A0](v269, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0762C10(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 - 128);
  *(_QWORD *)(v2 - 128) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x468], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4E0], 0);
  _Unwind_Resume(a1);
}

void sub_1E0763650()
{
  void *v0;

  v0 = (void *)STACK[0x4E8];
  if (STACK[0x4E8])
  {
    STACK[0x4F0] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1E0763610);
}

void sub_1E0763668()
{
  JUMPOUT(0x1E0763610);
}

uint64_t MIL::Operators::Common::ios15::ResizeBilinear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  std::__shared_weak_count_vtbl *v87;
  void *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  void *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  uint64_t i;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  uint64_t result;
  uint64_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void *v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  __int128 v159;
  __int128 v160;
  void *v161[2];
  uint64_t v162;
  __n128 v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char **v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  _QWORD *v172;
  void *__p;
  void *v174;
  char *v175;
  _QWORD v176[3];
  uint64_t v177[3];
  uint64_t v178[3];
  _QWORD v179[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v182;
  _QWORD v183[3];
  _QWORD *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _BYTE v187[24];
  _BYTE *v188;
  std::__shared_weak_count_vtbl *v189;
  uint64_t v190;
  void (__cdecl **v191)(std::__shared_weak_count *__hidden);
  _QWORD v192[3];

  v192[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v172 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v174 = v9 + 2;
  v175 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  __p = v9;
  v189 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v182 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v190 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v189, 2, &v171);
  MIL::IRParameter::Make(&v171, &v165);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v165);
  v13 = v165;
  v165 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v15 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  v17 = v172;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v17, "target_size_height", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v21 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v172;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v169);
  MIL::IRParameter::Make(&v169, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v23, "target_size_width", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v169.n128_u64[1];
  if (v169.n128_u64[1])
  {
    v27 = (unint64_t *)(v169.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v172;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v168);
  MIL::IRParameter::Make(&v168, (uint64_t *)&__p);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v29, "sampling_mode", (uint64_t *)&__p);
  v31 = __p;
  __p = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v33 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v167 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v167, 1uLL);
  v36 = v167;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v38;
  v38->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v38->~__shared_weak_count_0;
  v182 = &v38->~__shared_weak_count_0;
  v192[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v189 = v40;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  v190 = (uint64_t)&v40->~__shared_weak_count_0;
  v191 = &v40->~__shared_weak_count_0;
  v192[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v189);
  MIL::IRParameter::MakeTypeSet((uint64_t)v192, 2, &v163);
  MIL::IRParameter::Make(&v163, &v164);
  v41 = v164;
  v165 = v164;
  if (v164)
  {
    v42 = (_QWORD *)operator new();
    v43 = v164;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v166 = v42;
  v164 = 0;
  v44 = v36[2];
  v45 = v36[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v36) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v36;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v176[1] = v36 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v165 = 0;
    v166 = 0;
    v55 = *v36;
    v54 = v36[1];
    if (v54 == *v36)
    {
      v58 = v36[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = *v36;
      v54 = v36[1];
    }
    v46 = (char *)(v53 + 2);
    *v36 = v56;
    __p = v58;
    v174 = v58;
    v36[1] = (char *)(v53 + 2);
    v175 = v54;
    v59 = v36[2];
    v36[2] = &v51[16 * v52];
    v176[0] = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v165 = 0;
    v166 = 0;
  }
  v36[1] = v46;
  v60 = v164;
  v164 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v62 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v189)
  {
    v190 = (uint64_t)v189;
    operator delete(v189);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v161 = *(_OWORD *)a2;
  v162 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v172;
  *(_QWORD *)&v160 = v172;
  if (v172)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v160 + 1) = v65;
  v172 = 0;
  *(_QWORD *)&v159 = v167;
  if (v167)
  {
    v66 = (_QWORD *)operator new();
    v67 = v167;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v159 + 1) = v66;
  v167 = 0;
  v188 = 0;
  v186 = 0;
  MIL::IROperator::Make((__int128 *)v161, &v160, &v159, (uint64_t)v187, (uint64_t)v185, a3);
  v68 = v186;
  if (v186 == v185)
  {
    v69 = 4;
    v68 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_72;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_72:
  v70 = v188;
  if (v188 == v187)
  {
    v71 = 4;
    v70 = v187;
    goto LABEL_76;
  }
  if (v188)
  {
    v71 = 5;
LABEL_76:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v162) < 0)
    operator delete(v161[0]);
  v78 = *a3;
  v183[0] = &off_1EA99FBD8;
  v183[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeBilinear;
  v184 = v183;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v78 + 200))(v78, v183);
  v79 = v184;
  if (v184 == v183)
  {
    v80 = 4;
    v79 = v183;
  }
  else
  {
    if (!v184)
      goto LABEL_94;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_94:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v81 = __p;
  std::string::basic_string[abi:ne180100]<0>(v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&Scalar);
  v157 = Scalar;
  if (Scalar)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = Scalar;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v158 = v82;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v81 + 24))(v81, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v84 = v158;
  if (v158)
  {
    p_shared_owners = (unint64_t *)&v158->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = Scalar;
  Scalar = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  if (v156 < 0)
    operator delete(v155[0]);
  v88 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v151 = Scalar;
  if (Scalar)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = Scalar;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v152 = v89;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v88 + 24))(v88, &v151, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v91 = v152;
  if (v152)
  {
    v92 = (unint64_t *)&v152->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = Scalar;
  Scalar = 0;
  if (v94)
    (*((void (**)(std::__shared_weak_count_vtbl *))v94->~__shared_weak_count + 1))(v94);
  v95 = *a3;
  v147 = __p;
  if (__p)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = (std::__shared_weak_count_vtbl *)__p;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v148 = v96;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v95 + 56))(v95, &v147);
  v98 = v148;
  if (v148)
  {
    v99 = (unint64_t *)&v148->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v102 = __p;
  std::string::basic_string[abi:ne180100]<0>(v143, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v143, 0, (uint64_t *)&Scalar);
  v145 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v146 = v103;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v141, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v102 + 24))(v102, &v145, 0, v141);
  if (v142 < 0)
    operator delete(v141[0]);
  v105 = v146;
  if (v146)
  {
    v106 = (unint64_t *)&v146->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v144 < 0)
    operator delete(v143[0]);
  v109 = *a3;
  v139 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v140 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v139);
  v112 = v140;
  if (v140)
  {
    v113 = (unint64_t *)&v140->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v189);
  v116 = v189;
  std::string::basic_string[abi:ne180100]<0>(v135, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v135, 0, &v165);
  v137 = v165;
  if (v165)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v165;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = (std::__shared_weak_count_vtbl *)v118;
  }
  else
  {
    v117 = 0;
  }
  v138 = v117;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v176, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v177, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v178, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v179, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v116->~__shared_weak_count
   + 3))(v116, &v137, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v179[i + 2]) < 0)
      operator delete((void *)v179[i]);
  }
  v120 = v138;
  if (v138)
  {
    v121 = (unint64_t *)&v138->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v165;
  v165 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v136 < 0)
    operator delete(v135[0]);
  v124 = *a3;
  v133 = v189;
  if (v189)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = v189;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v134 = v125;
  v189 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v124 + 56))(v124, &v133);
  v127 = v134;
  if (v134)
  {
    v128 = (unint64_t *)&v134->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v189;
  v189 = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v167, 0);
  result = (uint64_t)v172;
  if (v172)
  {
    v132 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v172);
    return MEMORY[0x1E0C023A0](v132, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07645C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v65 = *(_QWORD *)(v63 - 112);
  *(_QWORD *)(v63 - 112) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *v62;
  *v62 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ResizeNearestNeighbor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  void *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  uint64_t result;
  uint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  void *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  __int128 v146;
  void *v147[2];
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char **v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  _QWORD *v157;
  void *__p;
  void *v159;
  char *v160;
  char *v161;
  char **v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _BYTE v167[24];
  _BYTE *v168;
  void *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD v172[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  void (__cdecl **v175)(std::__shared_count *__hidden);
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v157 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v159 = v9 + 2;
  v160 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  __p = v9;
  v169 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v175 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 2, &v156);
  MIL::IRParameter::Make(&v156, &v151);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v151);
  v13 = v151;
  v151 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v15 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v159 = __p;
    operator delete(__p);
  }
  v17 = v157;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v155);
  MIL::IRParameter::Make(&v155, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v17, "target_size_height", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v21 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v157;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v23, "target_size_width", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v27 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v153 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v153, 1uLL);
  v30 = v153;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v33->__on_zero_shared;
  v175 = &v33->__on_zero_shared;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v31;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  Scalar = v33;
  v172[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v170 = (uint64_t)(v36 + 2);
  v171 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  v169 = v36;
  v172[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 2, &v149);
  MIL::IRParameter::Make(&v149, &v150);
  v37 = v150;
  v151 = v150;
  if (v150)
  {
    v38 = (_QWORD *)operator new();
    v39 = v150;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v152 = v38;
  v150 = 0;
  v40 = v30[2];
  v41 = v30[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v30) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v30;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v162 = v30 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v151 = 0;
    v152 = 0;
    v51 = *v30;
    v50 = v30[1];
    if (v50 == *v30)
    {
      v54 = v30[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = *v30;
      v50 = v30[1];
    }
    v42 = (char *)(v49 + 2);
    *v30 = v52;
    __p = v54;
    v159 = v54;
    v30[1] = (char *)(v49 + 2);
    v160 = v50;
    v55 = v30[2];
    v30[2] = &v47[16 * v48];
    v161 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v151 = 0;
    v152 = 0;
  }
  v30[1] = v42;
  v56 = v150;
  v150 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v58 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v169)
  {
    v170 = (uint64_t)v169;
    operator delete(v169);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v147 = *(_OWORD *)a2;
  v148 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v157;
  *(_QWORD *)&v146 = v157;
  if (v157)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v146 + 1) = v61;
  v157 = 0;
  *(_QWORD *)&v145 = v153;
  if (v153)
  {
    v62 = (_QWORD *)operator new();
    v63 = v153;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v145 + 1) = v62;
  v153 = 0;
  v168 = 0;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v147, &v146, &v145, (uint64_t)v167, (uint64_t)v165, a3);
  v64 = v166;
  if (v166 == v165)
  {
    v65 = 4;
    v64 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_65;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_65:
  v66 = v168;
  if (v168 == v167)
  {
    v67 = 4;
    v66 = v167;
    goto LABEL_69;
  }
  if (v168)
  {
    v67 = 5;
LABEL_69:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
  if (*((_QWORD *)&v145 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
  if (*((_QWORD *)&v146 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v148) < 0)
    operator delete(v147[0]);
  v74 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeNearestNeighbor;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v74 + 200))(v74, v163);
  v75 = v164;
  if (v164 == v163)
  {
    v76 = 4;
    v75 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_87;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_87:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v77 = __p;
  std::string::basic_string[abi:ne180100]<0>(v141, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v141, 0, (uint64_t *)&Scalar);
  v143 = Scalar;
  if (Scalar)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = Scalar;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v144 = v78;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v77 + 24))(v77, &v143, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v80 = v144;
  if (v144)
  {
    p_shared_owners = (unint64_t *)&v144->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = Scalar;
  Scalar = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  if (v142 < 0)
    operator delete(v141[0]);
  v84 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v137 = Scalar;
  if (Scalar)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = Scalar;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v138 = v85;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v84 + 24))(v84, &v137, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v87 = v138;
  if (v138)
  {
    v88 = (unint64_t *)&v138->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = Scalar;
  Scalar = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  v91 = *a3;
  v133 = __p;
  if (__p)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = (std::__shared_weak_count_vtbl *)__p;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v134 = v92;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v91 + 56))(v91, &v133);
  v94 = v134;
  if (v134)
  {
    v95 = (unint64_t *)&v134->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = __p;
  __p = 0;
  if (v97)
    (*(void (**)(void *))(*(_QWORD *)v97 + 8))(v97);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v98 = __p;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&Scalar);
  v131 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v132 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v98 + 24))(v98, &v131, 0, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v101 = v132;
  if (v132)
  {
    v102 = (unint64_t *)&v132->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v130 < 0)
    operator delete(v129[0]);
  v105 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v125 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v126 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v105 + 24))(v105, &v125, 0, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v108 = v126;
  if (v126)
  {
    v109 = (unint64_t *)&v126->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = *a3;
  v121 = __p;
  if (__p)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)__p;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v122 = v113;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v112 + 56))(v112, &v121);
  v115 = v122;
  if (v122)
  {
    v116 = (unint64_t *)&v122->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = __p;
  __p = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v153, 0);
  result = (uint64_t)v157;
  if (v157)
  {
    v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v157);
    return MEMORY[0x1E0C023A0](v120, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07657DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a59;
  a59 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::UpsampleBilinear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  void **v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  char **v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void **v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void **v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void **v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void **v138;
  uint64_t result;
  uint64_t v140;
  void **v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void **v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  __int128 v177;
  __int128 v178;
  void *__p[2];
  uint64_t v180;
  __n128 v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  char **v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  _QWORD *v190;
  _QWORD v191[3];
  _QWORD *v192;
  _BYTE v193[24];
  _BYTE *v194;
  _BYTE v195[24];
  _BYTE *v196;
  void *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD v200[2];
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  void (__cdecl **v203)(std::__shared_count *__hidden);
  void **Scalar;
  void **v205;
  char *v206;
  char *v207;
  char **v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v190 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v205 = (void **)(v9 + 16);
  v206 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = (void **)v9;
  v197 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v203 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v201 = v12;
  v198 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v201);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v197, 2, &v189);
  MIL::IRParameter::Make(&v189, &v183);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v183);
  v13 = v183;
  v183 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v15 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v201)
  {
    p_on_zero_shared = v201;
    operator delete(v201);
  }
  if (Scalar)
  {
    v205 = Scalar;
    operator delete(Scalar);
  }
  v17 = v190;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  v205 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v188);
  MIL::IRParameter::Make(&v188, (uint64_t *)&v201);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v17, "scale_factor_height", (uint64_t *)&v201);
  v19 = v201;
  v201 = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v21 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v190;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  v205 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v187);
  MIL::IRParameter::Make(&v187, (uint64_t *)&v201);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v23, "scale_factor_width", (uint64_t *)&v201);
  v25 = v201;
  v201 = 0;
  if (v25)
    (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  v26 = (std::__shared_weak_count *)v187.n128_u64[1];
  if (v187.n128_u64[1])
  {
    v27 = (unint64_t *)(v187.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v190;
  v201 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v201, 1, &v186);
  MIL::IRParameter::Make(&v186, (uint64_t *)&Scalar);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v29, "align_corners", (uint64_t *)&Scalar);
  v31 = Scalar;
  Scalar = 0;
  if (v31)
    (*((void (**)(void **))*v31 + 1))(v31);
  v32 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v33 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v185 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v185, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v185, 1uLL);
  v36 = v185;
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v39->__on_zero_shared;
  v203 = &v39->__on_zero_shared;
  v39->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  v39->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v38;
  v201 = v39;
  v200[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v201);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(0x10uLL);
  v198 = (uint64_t)(v42 + 2);
  v199 = v42 + 2;
  *v42 = v40;
  v42[1] = v41;
  v197 = v42;
  v200[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v197);
  MIL::IRParameter::MakeTypeSet((uint64_t)v200, 2, &v181);
  MIL::IRParameter::Make(&v181, &v182);
  v43 = v182;
  v183 = v182;
  if (v182)
  {
    v44 = (_QWORD *)operator new();
    v45 = v182;
    *v44 = &unk_1EA99F888;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = v45;
  }
  else
  {
    v44 = 0;
  }
  v184 = v44;
  v182 = 0;
  v46 = v36[2];
  v47 = v36[1];
  if (v47 >= v46)
  {
    v49 = (v47 - *v36) >> 4;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v51 = v46 - *v36;
    if (v51 >> 3 > v50)
      v50 = v51 >> 3;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
      v52 = 0xFFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    v208 = v36 + 2;
    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v52);
    v55 = (uint64_t *)&v53[16 * v49];
    *v55 = v43;
    v55[1] = (uint64_t)v44;
    v183 = 0;
    v184 = 0;
    v57 = *v36;
    v56 = v36[1];
    if (v56 == *v36)
    {
      v60 = (void **)v36[1];
      v58 = &v53[16 * v49];
    }
    else
    {
      v58 = &v53[16 * v49];
      do
      {
        v59 = *((_OWORD *)v56 - 1);
        v56 -= 16;
        *((_OWORD *)v58 - 1) = v59;
        v58 -= 16;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
      }
      while (v56 != v57);
      v60 = (void **)*v36;
      v56 = v36[1];
    }
    v48 = (char *)(v55 + 2);
    *v36 = v58;
    Scalar = v60;
    v205 = v60;
    v36[1] = (char *)(v55 + 2);
    v206 = v56;
    v61 = v36[2];
    v36[2] = &v53[16 * v54];
    v207 = v61;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v47 = v43;
    *((_QWORD *)v47 + 1) = v44;
    v48 = v47 + 16;
    v183 = 0;
    v184 = 0;
  }
  v36[1] = v48;
  v62 = v182;
  v182 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v181.n128_u64[1];
  if (v181.n128_u64[1])
  {
    v64 = (unint64_t *)(v181.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (v197)
  {
    v198 = (uint64_t)v197;
    operator delete(v197);
  }
  if (v201)
  {
    p_on_zero_shared = v201;
    operator delete(v201);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v180 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v66 = (uint64_t)v190;
  *(_QWORD *)&v178 = v190;
  if (v190)
  {
    v67 = (_QWORD *)operator new();
    *v67 = &unk_1EA99F8E8;
    v67[1] = 0;
    v67[2] = 0;
    v67[3] = v66;
  }
  else
  {
    v67 = 0;
  }
  *((_QWORD *)&v178 + 1) = v67;
  v190 = 0;
  *(_QWORD *)&v177 = v185;
  if (v185)
  {
    v68 = (_QWORD *)operator new();
    v69 = v185;
    *v68 = &unk_1EA99F948;
    v68[1] = 0;
    v68[2] = 0;
    v68[3] = v69;
  }
  else
  {
    v68 = 0;
  }
  *((_QWORD *)&v177 + 1) = v68;
  v185 = 0;
  v196 = 0;
  v194 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v178, &v177, (uint64_t)v195, (uint64_t)v193, a3);
  v70 = v194;
  if (v194 == v193)
  {
    v71 = 4;
    v70 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_72;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_72:
  v72 = v196;
  if (v196 == v195)
  {
    v73 = 4;
    v72 = v195;
    goto LABEL_76;
  }
  if (v196)
  {
    v73 = 5;
LABEL_76:
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v75 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v78 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  if (SHIBYTE(v180) < 0)
    operator delete(__p[0]);
  v80 = *a3;
  v191[0] = &off_1EA99FBD8;
  v191[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleBilinear;
  v192 = v191;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v80 + 200))(v80, v191);
  v81 = v192;
  if (v192 == v191)
  {
    v82 = 4;
    v81 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_94;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_94:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v83 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&v201);
  v175 = v201;
  if (v201)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v201;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v176 = v84;
  v201 = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v83 + 3))(v83, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v86 = v176;
  if (v176)
  {
    p_shared_owners = (unint64_t *)&v176->__shared_owners_;
    do
      v88 = __ldaxr(p_shared_owners);
    while (__stlxr(v88 - 1, p_shared_owners));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v201;
  v201 = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v174 < 0)
    operator delete(v173[0]);
  v90 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v167, "scale_factor_height");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v201);
  v169 = v201;
  if (v201)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v201;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v170 = v91;
  v201 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = v170;
  if (v170)
  {
    v94 = (unint64_t *)&v170->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v201;
  v201 = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v168 < 0)
    operator delete(v167[0]);
  v97 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v161, "scale_factor_width");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, (uint64_t *)&v201);
  v163 = v201;
  if (v201)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v201;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v164 = v98;
  v201 = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v163, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v100 = v164;
  if (v164)
  {
    v101 = (unint64_t *)&v164->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v201;
  v201 = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v162 < 0)
    operator delete(v161[0]);
  v104 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v201);
  v157 = v201;
  if (v201)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v201;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v158 = v105;
  v201 = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v104 + 3))(v104, &v157, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v107 = v158;
  if (v158)
  {
    v108 = (unint64_t *)&v158->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v201;
  v201 = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  v111 = *a3;
  v153 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = (std::__shared_weak_count_vtbl *)v113;
  }
  else
  {
    v112 = 0;
  }
  v154 = v112;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v111 + 56))(v111, &v153);
  v114 = v154;
  if (v154)
  {
    v115 = (unint64_t *)&v154->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(void **))*v117 + 1))(v117);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v118 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v149, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v149, 0, (uint64_t *)&v201);
  v151 = v201;
  if (v201)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v201;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v152 = v119;
  v201 = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v118 + 3))(v118, &v151, 0, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v121 = v152;
  if (v152)
  {
    v122 = (unint64_t *)&v152->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v201;
  v201 = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v150 < 0)
    operator delete(v149[0]);
  v125 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v201);
  v145 = v201;
  if (v201)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v201;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v146 = v126;
  v201 = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v125 + 3))(v125, &v145, 0, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v128 = v146;
  if (v146)
  {
    v129 = (unint64_t *)&v146->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v201;
  v201 = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  v132 = *a3;
  v141 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = (std::__shared_weak_count_vtbl *)v134;
  }
  else
  {
    v133 = 0;
  }
  v142 = v133;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v132 + 56))(v132, &v141);
  v135 = v142;
  if (v142)
  {
    v136 = (unint64_t *)&v142->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(void **))*v138 + 1))(v138);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v185, 0);
  result = (uint64_t)v190;
  if (v190)
  {
    v140 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v190);
    return MEMORY[0x1E0C023A0](v140, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0766BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;

  v70 = *(_QWORD *)(v68 - 112);
  *(_QWORD *)(v68 - 112) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *v67;
  *v67 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x218], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::UpsampleNearestNeighbor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  void **v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void **v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  void *v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void **v132;
  uint64_t result;
  uint64_t v134;
  void **v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  void *v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  void *v145;
  std::__shared_weak_count *v146;
  void **v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  void *v161[2];
  char v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  void *v169;
  std::__shared_weak_count *v170;
  __int128 v171;
  __int128 v172;
  void *v173[2];
  uint64_t v174;
  __n128 v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  char **v179;
  __n128 v180;
  __n128 v181;
  void *__p;
  void *v183;
  _QWORD *v184;
  __n128 v185;
  _QWORD *v186;
  _QWORD v187[3];
  _QWORD *v188;
  _BYTE v189[24];
  _BYTE *v190;
  _BYTE v191[24];
  _BYTE *v192;
  void *v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD v196[2];
  void **Scalar;
  void **v198;
  char *v199;
  char *v200;
  char **v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v186 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v198 = (void **)(v9 + 16);
  v199 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  Scalar = (void **)v9;
  v193 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v184 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  __p = v12;
  v183 = v12 + 2;
  v194 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v193, 2, &v185);
  MIL::IRParameter::Make(&v185, &v177);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v177);
  v13 = v177;
  v177 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v185.n128_u64[1];
  if (v185.n128_u64[1])
  {
    v15 = (unint64_t *)(v185.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v198 = Scalar;
    operator delete(Scalar);
  }
  v17 = v186;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  v198 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v181);
  MIL::IRParameter::Make(&v181, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v17, "scale_factor_height", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v181.n128_u64[1];
  if (v181.n128_u64[1])
  {
    v21 = (unint64_t *)(v181.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v186;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  v198 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v180);
  MIL::IRParameter::Make(&v180, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v23, "scale_factor_width", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v180.n128_u64[1];
  if (v180.n128_u64[1])
  {
    v27 = (unint64_t *)(v180.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v179 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v179, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v179, 1uLL);
  v30 = v179;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v184 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  __p = v33;
  v183 = v33 + 2;
  v196[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(0x10uLL);
  v194 = (uint64_t)(v36 + 2);
  v195 = v36 + 2;
  *v36 = v34;
  v36[1] = v35;
  v193 = v36;
  v196[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v193);
  MIL::IRParameter::MakeTypeSet((uint64_t)v196, 2, &v175);
  MIL::IRParameter::Make(&v175, &v176);
  v37 = v176;
  v177 = v176;
  if (v176)
  {
    v38 = (_QWORD *)operator new();
    v39 = v176;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v178 = v38;
  v176 = 0;
  v40 = v30[2];
  v41 = v30[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v30) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v30;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v201 = v30 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v177 = 0;
    v178 = 0;
    v51 = *v30;
    v50 = v30[1];
    if (v50 == *v30)
    {
      v54 = (void **)v30[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = (void **)*v30;
      v50 = v30[1];
    }
    v42 = (char *)(v49 + 2);
    *v30 = v52;
    Scalar = v54;
    v198 = v54;
    v30[1] = (char *)(v49 + 2);
    v199 = v50;
    v55 = v30[2];
    v30[2] = &v47[16 * v48];
    v200 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v177 = 0;
    v178 = 0;
  }
  v30[1] = v42;
  v56 = v176;
  v176 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v58 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v193)
  {
    v194 = (uint64_t)v193;
    operator delete(v193);
  }
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v173 = *(_OWORD *)a2;
  v174 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v186;
  *(_QWORD *)&v172 = v186;
  if (v186)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v172 + 1) = v61;
  v186 = 0;
  *(_QWORD *)&v171 = v179;
  if (v179)
  {
    v62 = (_QWORD *)operator new();
    v63 = v179;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v171 + 1) = v62;
  v179 = 0;
  v192 = 0;
  v190 = 0;
  MIL::IROperator::Make((__int128 *)v173, &v172, &v171, (uint64_t)v191, (uint64_t)v189, a3);
  v64 = v190;
  if (v190 == v189)
  {
    v65 = 4;
    v64 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_65;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_65:
  v66 = v192;
  if (v192 == v191)
  {
    v67 = 4;
    v66 = v191;
    goto LABEL_69;
  }
  if (v192)
  {
    v67 = 5;
LABEL_69:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v174) < 0)
    operator delete(v173[0]);
  v74 = *a3;
  v187[0] = &off_1EA99FBD8;
  v187[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleNearestNeighbor;
  v188 = v187;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v74 + 200))(v74, v187);
  v75 = v188;
  if (v188 == v187)
  {
    v76 = 4;
    v75 = v187;
  }
  else
  {
    if (!v188)
      goto LABEL_87;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_87:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v77 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&__p);
  v169 = __p;
  if (__p)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = (std::__shared_weak_count_vtbl *)__p;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v170 = v78;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*((void (**)(void **, void **, void **))*v77 + 3))(v77, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v80 = v170;
  if (v170)
  {
    p_shared_owners = (unint64_t *)&v170->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = __p;
  __p = 0;
  if (v83)
    (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
  if (v168 < 0)
    operator delete(v167[0]);
  v84 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v161, "scale_factor_height");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v161, 0, (uint64_t *)&__p);
  v163 = __p;
  if (__p)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = (std::__shared_weak_count_vtbl *)__p;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v164 = v85;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v159, "U");
  (*((void (**)(void **, void **, void **))*v84 + 3))(v84, &v163, v159);
  if (v160 < 0)
    operator delete(v159[0]);
  v87 = v164;
  if (v164)
  {
    v88 = (unint64_t *)&v164->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  if (v162 < 0)
    operator delete(v161[0]);
  v91 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v155, "scale_factor_width");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&__p);
  v157 = __p;
  if (__p)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = (std::__shared_weak_count_vtbl *)__p;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v158 = v92;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "U");
  (*((void (**)(void **, void **, void **))*v91 + 3))(v91, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v94 = v158;
  if (v158)
  {
    v95 = (unint64_t *)&v158->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = __p;
  __p = 0;
  if (v97)
    (*(void (**)(void *))(*(_QWORD *)v97 + 8))(v97);
  if (v156 < 0)
    operator delete(v155[0]);
  v98 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v151 = __p;
  if (__p)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)__p;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v152 = v99;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*((void (**)(void **, void **, void **))*v98 + 3))(v98, &v151, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v101 = v152;
  if (v152)
  {
    v102 = (unint64_t *)&v152->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = __p;
  __p = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  v105 = *a3;
  v147 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v148 = v106;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v147);
  v108 = v148;
  if (v148)
  {
    v109 = (unint64_t *)&v148->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v112 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v143, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v143, 0, (uint64_t *)&__p);
  v145 = __p;
  if (__p)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)__p;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v146 = v113;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v141, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v112 + 3))(v112, &v145, 0, v141);
  if (v142 < 0)
    operator delete(v141[0]);
  v115 = v146;
  if (v146)
  {
    v116 = (unint64_t *)&v146->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = __p;
  __p = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  if (v144 < 0)
    operator delete(v143[0]);
  v119 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v139 = __p;
  if (__p)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)__p;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v140 = v120;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v137, "D");
  (*((void (**)(void **, void **, _QWORD, void **))*v119 + 3))(v119, &v139, 0, v137);
  if (v138 < 0)
    operator delete(v137[0]);
  v122 = v140;
  if (v140)
  {
    v123 = (unint64_t *)&v140->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  v126 = *a3;
  v135 = Scalar;
  if (Scalar)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = Scalar;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v136 = v127;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v135);
  v129 = v136;
  if (v136)
  {
    v130 = (unint64_t *)&v136->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = Scalar;
  Scalar = 0;
  if (v132)
    (*((void (**)(void **))*v132 + 1))(v132);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v179, 0);
  result = (uint64_t)v186;
  if (v186)
  {
    v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v186);
    return MEMORY[0x1E0C023A0](v134, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0768028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a67;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;

  v70 = *(_QWORD *)(v68 - 112);
  *(_QWORD *)(v68 - 112) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *v67;
  *v67 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 256), 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0768510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E07685A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E07685F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E076866C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0768704(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0768750(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E07687C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0768860(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E07688AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0768924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E07689BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0768A08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[23],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[23],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0768A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[23],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[23],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0768B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[23],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0768B64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[20],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0768BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[20],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[20],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0768C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[20],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0768CC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0768D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0768DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0768E1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0768E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0768F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0768F78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateEinsum(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t *LocationPtr;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v12;
  MIL::IRValueType *v13;
  MIL::IRTensorValueType *v14;
  const void *ParameterValue;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  char v25;
  void *v26[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::string __p;
  uint64_t v31;
  std::__shared_weak_count *v32;

  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v7 = *LocationPtr;
  v6 = (std::__shared_weak_count *)LocationPtr[1];
  v31 = *LocationPtr;
  v32 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "values");
  v10 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, std::string *))(*(_QWORD *)this + 152))(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "values");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "values");
    v13 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    v14 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v24, "equation");
    ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
    MIL::IRValue::GetScalar<std::string>(ParameterValue, &__p);
    if (v25 < 0)
      operator delete(v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = v7;
    v29 = v6;
    if (v6)
    {
      v16 = (unint64_t *)&v6->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    std::string::basic_string[abi:ne180100]<0>(v26, "Inputs 'values' must be of length 2");
    MIL::ValidationResult::ValidationResult(a2, &v28, 315, v26);
    if (v27 < 0)
      operator delete(v26[0]);
    v18 = v29;
    if (v29)
    {
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1E07691CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::`anonymous namespace'::ValidateInputsForEinsum(MIL::IRTensorValueType *a1@<X0>, MIL::IRTensorValueType *a2@<X1>, const std::string *a3@<X2>, uint64_t *a4@<X3>, void (***a5)(MIL::MILContextImpl *__hidden this)@<X4>, uint64_t *a6@<X5>, MIL::ValidationResult *a7@<X8>)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  const std::string *v19;
  char *v20;
  std::string *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  const std::string::value_type *v36;
  std::string::size_type size;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string::value_type *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  BOOL v55;
  _BYTE *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  unint64_t v79;
  std::vector<int>::size_type v80;
  void *v81[2];
  char v82;
  _QWORD v83[2];
  void *__p;
  _BYTE *v85;
  void *v86;
  _BYTE *v87;
  uint64_t v88;
  void *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t **v92;
  _QWORD **v93;
  _QWORD *v94[2];
  std::vector<int> v95;
  std::vector<int> v96;
  std::vector<int> v97;
  void *v98[2];
  char v99;
  _QWORD v100[2];
  std::string v101;
  std::string v102;
  void *v103[2];
  char v104;
  _QWORD v105[2];
  void *v106[2];
  char v107;
  _QWORD v108[2];
  std::string v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::string v112;
  std::string __str;
  void *v114[2];
  char v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  void *v118[2];
  char v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 104))(a1)
    || !(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 104))(a2)
    || (v14 = MIL::IRTensorValueType::Rank(a1), v14 != MIL::IRTensorValueType::Rank(a2)))
  {
    v23 = (std::__shared_weak_count *)a4[1];
    v120 = *a4;
    v121 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v118, "Inputs must have equal fixed ranks");
    MIL::ValidationResult::ValidationResult(a7, &v120, 315, v118);
    if (v119 < 0)
      operator delete(v118[0]);
    v26 = v121;
    if (!v121)
      return;
    v27 = (unint64_t *)&v121->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
LABEL_25:
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    return;
  }
  v15 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 88))(a1);
  if (v15 != (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 88))(a2))
  {
    v29 = (std::__shared_weak_count *)a4[1];
    v116 = *a4;
    v117 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(v114, "Inputs must have the same datatype");
    MIL::ValidationResult::ValidationResult(a7, &v116, 319, v114);
    if (v115 < 0)
      operator delete(v114[0]);
    v26 = v117;
    if (!v117)
      return;
    v32 = (unint64_t *)&v117->__shared_owners_;
    do
      v28 = __ldaxr(v32);
    while (__stlxr(v28 - 1, v32));
    goto LABEL_25;
  }
  v16 = MIL::IRTensorValueType::Rank(a1);
  if (v16 - 3 >= 2)
  {
    std::to_string(&v112, v16);
    v33 = std::string::insert(&v112, 0, "Rank of the inputs is ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&__str, ", but it must be either 3 or 4");
    v36 = (const std::string::value_type *)v35->__r_.__value_.__r.__words[0];
    size = v35->__r_.__value_.__l.__size_;
    LODWORD(v102.__r_.__value_.__l.__data_) = v35->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v102.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v35->__r_.__value_.__r.__words[2] + 3);
    v38 = SHIBYTE(v35->__r_.__value_.__r.__words[2]);
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    v39 = (std::__shared_weak_count *)a4[1];
    v110 = *a4;
    v111 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    if (v38 < 0)
    {
      std::string::__init_copy_ctor_external(&v109, v36, size);
    }
    else
    {
      v109.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      v109.__r_.__value_.__l.__size_ = size;
      LODWORD(v109.__r_.__value_.__r.__words[2]) = v102.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v109.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v102.__r_.__value_.__r.__words
                                                                              + 3);
      *((_BYTE *)&v109.__r_.__value_.__s + 23) = v38;
    }
    MIL::ValidationResult::ValidationResult(a7, &v110, 315, &v109);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v42 = v111;
    if (v111)
    {
      v43 = (unint64_t *)&v111->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v38 < 0)
    {
      v45 = (std::string::value_type *)v36;
LABEL_56:
      operator delete(v45);
    }
  }
  else
  {
    v79 = v16 - 3;
    v80 = v16;
    v17 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    v18 = (v17 & 0x80u) != 0;
    if ((v17 & 0x80u) != 0)
      v17 = a3->__r_.__value_.__l.__size_;
    if (v18)
      v19 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    else
      v19 = a3;
    if (v17 >= 2)
    {
      v20 = (char *)v19 + v17;
      v21 = (std::string *)v19;
      while (1)
      {
        v22 = (char *)memchr(v21, 45, v17 - 1);
        if (!v22)
          goto LABEL_90;
        if (*(_WORD *)v22 == 15917)
          break;
        v21 = (std::string *)(v22 + 1);
        v17 = v20 - (char *)v21;
        if (v20 - (char *)v21 < 2)
          goto LABEL_90;
      }
      if (v22 == v20)
        goto LABEL_90;
      v46 = v22 - (char *)v19;
      if (v46 == -1)
        goto LABEL_90;
      std::string::basic_string(&__str, a3, 0, v46, (std::allocator<char> *)&v112);
      std::string::basic_string(&v112, a3, v46 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v102);
      v47 = std::string::find(&__str, 44, 0);
      if (v47 == -1)
      {
        v69 = a4[1];
        v105[0] = *a4;
        v105[1] = v69;
        if (v69)
        {
          v70 = (unint64_t *)(v69 + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        std::string::basic_string[abi:ne180100]<0>(v103, "Invalid equation");
        MIL::ValidationResult::ValidationResult(a7, v105, 315, v103);
        if (v104 < 0)
          operator delete(v103[0]);
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v105);
LABEL_112:
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v45 = (std::string::value_type *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_56;
        }
        return;
      }
      v48 = v47;
      std::string::basic_string(&v102, &__str, 0, v47, (std::allocator<char> *)&v101);
      std::string::basic_string(&v101, &__str, v48 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v97);
      v49 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v49 = v102.__r_.__value_.__l.__size_;
      if (v49 != v80)
        goto LABEL_96;
      v50 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = v101.__r_.__value_.__l.__size_;
      if (v50 != v80)
        goto LABEL_96;
      v51 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v51 = v112.__r_.__value_.__l.__size_;
      if (v51 != v80)
      {
LABEL_96:
        v66 = a4[1];
        v100[0] = *a4;
        v100[1] = v66;
        if (v66)
        {
          v67 = (unint64_t *)(v66 + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        std::string::basic_string[abi:ne180100]<0>(v98, "Invalid equation, ranks from the equation are incompatible with the input/output ranks.");
        MIL::ValidationResult::ValidationResult(a7, v100, 315, v98);
        if (v99 < 0)
          operator delete(v98[0]);
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v100);
        goto LABEL_102;
      }
      std::vector<int>::vector(&v97, v80);
      std::vector<int>::vector(&v96, v80);
      std::vector<int>::vector(&v95, v80);
      v94[0] = 0;
      v94[1] = 0;
      v92 = (uint64_t **)&v93;
      v93 = v94;
      v124 = xmmword_1E0B002C0;
      std::vector<int>::vector[abi:ne180100](&v89, &v124, 4uLL);
      v54 = v89;
      if ((char *)v97.__end_ - (char *)v97.__begin_ != v90 - (_BYTE *)v89
        || memcmp(v97.__begin_, v89, (char *)v97.__end_ - (char *)v97.__begin_))
      {
        v55 = 0;
        if (!v54)
          goto LABEL_73;
        goto LABEL_72;
      }
      v123 = xmmword_1E0B0D2B0;
      std::vector<int>::vector[abi:ne180100](&v86, &v123, 4uLL);
      v75 = v86;
      if ((char *)v96.__end_ - (char *)v96.__begin_ == v87 - (_BYTE *)v86
        && !memcmp(v96.__begin_, v86, (char *)v96.__end_ - (char *)v96.__begin_))
      {
        v122 = xmmword_1E0B0D2C0;
        std::vector<int>::vector[abi:ne180100](&__p, &v122, 4uLL);
        v77 = __p;
        v55 = (char *)v95.__end_ - (char *)v95.__begin_ == v85 - (_BYTE *)__p
           && memcmp(v95.__begin_, __p, (char *)v95.__end_ - (char *)v95.__begin_) == 0;
        if (v77)
        {
          v85 = v77;
          operator delete(v77);
        }
        v75 = v86;
        if (!v86)
        {
LABEL_132:
          v54 = v89;
          if (!v89)
          {
LABEL_73:
            if (v55)
              goto LABEL_79;
            *(_QWORD *)&v124 = 0x100000000;
            DWORD2(v124) = 2;
            std::vector<int>::vector[abi:ne180100](&v89, &v124, 3uLL);
            v56 = v89;
            if ((char *)v97.__end_ - (char *)v97.__begin_ != v90 - (_BYTE *)v89
              || memcmp(v97.__begin_, v89, (char *)v97.__end_ - (char *)v97.__begin_))
            {
              v57 = 0;
              if (!v56)
                goto LABEL_78;
              goto LABEL_77;
            }
            *(_QWORD *)&v123 = 0x100000002;
            DWORD2(v123) = 3;
            std::vector<int>::vector[abi:ne180100](&v86, &v123, 3uLL);
            v76 = v86;
            if ((char *)v96.__end_ - (char *)v96.__begin_ == v87 - (_BYTE *)v86
              && !memcmp(v96.__begin_, v86, (char *)v96.__end_ - (char *)v96.__begin_))
            {
              *(_QWORD *)&v122 = 0x100000000;
              DWORD2(v122) = 3;
              std::vector<int>::vector[abi:ne180100](&__p, &v122, 3uLL);
              v78 = __p;
              v57 = (char *)v95.__end_ - (char *)v95.__begin_ == v85 - (_BYTE *)__p
                 && memcmp(v95.__begin_, __p, (char *)v95.__end_ - (char *)v95.__begin_) == 0;
              if (v78)
              {
                v85 = v78;
                operator delete(v78);
              }
              v76 = v86;
              if (!v86)
              {
LABEL_138:
                v56 = v89;
                if (!v89)
                {
LABEL_78:
                  if (!v57)
                  {
                    v72 = a4[1];
                    v83[0] = *a4;
                    v83[1] = v72;
                    if (v72)
                    {
                      v73 = (unint64_t *)(v72 + 8);
                      do
                        v74 = __ldxr(v73);
                      while (__stxr(v74 + 1, v73));
                    }
                    std::string::basic_string[abi:ne180100]<0>(v81, "invalid or unsupported equation.");
                    MIL::ValidationResult::ValidationResult(a7, v83, 315, v81);
                    if (v82 < 0)
                      operator delete(v81[0]);
                    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v83);
                    goto LABEL_122;
                  }
LABEL_79:
                  if (a5 && a6)
                  {
                    v58 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 96))(a1);
                    v89 = 0;
                    v90 = 0;
                    v91 = 0;
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v89, *(const void **)v58, *(_QWORD *)(v58 + 8), (uint64_t)(*(_QWORD *)(v58 + 8) - *(_QWORD *)v58) >> 3);
                    v59 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a2 + 96))(a2);
                    v86 = 0;
                    v87 = 0;
                    v88 = 0;
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v86, *(const void **)v59, *(_QWORD *)(v59 + 8), (uint64_t)(*(_QWORD *)(v59 + 8) - *(_QWORD *)v59) >> 3);
                    *(_QWORD *)&v124 = &v89;
                    *((_QWORD *)&v124 + 1) = &v86;
                    *(_QWORD *)&v123 = MIL::IRConstantDimension::Make(a5, (MIL::MILContext *)1);
                    std::vector<MIL::IRDimension const*>::vector(&__p, v80, &v123);
                    *((_QWORD *)__p + v80 - 1) = *((_QWORD *)v86 + v80 - 1);
                    *((_QWORD *)__p + v79) = *((_QWORD *)v89 + v79);
                    *((_QWORD *)__p + v80 - 2) = v60;
                    if (v80 == 4)
                    {
                      *(_QWORD *)__p = v61;
                    }
                    v62 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)a1 + 88))(a1);
                    *a6 = MIL::IRTensorValueType::MakeWithShape(a5, v62, (uint64_t)&__p);
                    if (__p)
                    {
                      v85 = __p;
                      operator delete(__p);
                    }
                    if (v86)
                    {
                      v87 = v86;
                      operator delete(v86);
                    }
                    if (v89)
                    {
                      v90 = v89;
                      operator delete(v89);
                    }
                  }
                  MIL::ValidationResult::ValidationResult(a7);
LABEL_122:
                  std::__tree<float>::destroy((uint64_t)&v93, v94[0]);
                  if (v95.__begin_)
                  {
                    v95.__end_ = v95.__begin_;
                    operator delete(v95.__begin_);
                  }
                  if (v96.__begin_)
                  {
                    v96.__end_ = v96.__begin_;
                    operator delete(v96.__begin_);
                  }
                  if (v97.__begin_)
                  {
                    v97.__end_ = v97.__begin_;
                    operator delete(v97.__begin_);
                  }
LABEL_102:
                  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v101.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v102.__r_.__value_.__l.__data_);
                  goto LABEL_112;
                }
LABEL_77:
                v90 = v56;
                operator delete(v56);
                goto LABEL_78;
              }
            }
            else
            {
              v57 = 0;
              if (!v76)
                goto LABEL_138;
            }
            v87 = v76;
            operator delete(v76);
            goto LABEL_138;
          }
LABEL_72:
          v90 = v54;
          operator delete(v54);
          goto LABEL_73;
        }
      }
      else
      {
        v55 = 0;
        if (!v75)
          goto LABEL_132;
      }
      v87 = v75;
      operator delete(v75);
      goto LABEL_132;
    }
LABEL_90:
    v63 = a4[1];
    v108[0] = *a4;
    v108[1] = v63;
    if (v63)
    {
      v64 = (unint64_t *)(v63 + 8);
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    std::string::basic_string[abi:ne180100]<0>(v106, "Invalid equation");
    MIL::ValidationResult::ValidationResult(a7, v108, 315, v106);
    if (v107 < 0)
      operator delete(v106[0]);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v108);
  }
}

void sub_1E0769CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  char a72;
  void *a73;
  char a74;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  std::__tree<float>::destroy((uint64_t)&a26, (_QWORD *)a27);
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  if (a48 < 0)
    operator delete(a43);
  if (a54 < 0)
    operator delete(a49);
  if (a72 < 0)
    operator delete(a70);
  if (a74 < 0)
    operator delete(a73);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLinear(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  int v10;
  uint64_t v11;
  MIL::IRValueType *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  void *exception;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  void *v33[2];
  unsigned __int8 v34;
  void *v35[2];
  unsigned __int8 v36;
  void *__p;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v44 = 0;
  v45 = 0;
  v43 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v43, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v13 = MIL::IRValueType::AsTensorType(v12);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v40, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  v15 = *(v44 - 1);
  if (v15 != *(v41 - 1))
  {
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15)
      || (v16 = MIL::IRDimension::AsUnknown((MIL::IRDimension *)*(v44 - 1)),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16)))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The last dimension of x and the last dimension of weight should be compatible, but they are ", 92);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*(v44 - 1) + 40))(v35);
      if ((v36 & 0x80u) == 0)
        v21 = v35;
      else
        v21 = (void **)v35[0];
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = (uint64_t)v35[1];
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" and ", 5);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*(v41 - 1) + 40))(v33);
      if ((v34 & 0x80u) == 0)
        v25 = v33;
      else
        v25 = (void **)v33[0];
      if ((v34 & 0x80u) == 0)
        v26 = v34;
      else
        v26 = (uint64_t)v33[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      if ((char)v34 < 0)
        operator delete(v33[0]);
      if ((char)v36 < 0)
        operator delete(v35[0]);
      exception = __cxa_allocate_exception(0x48uLL);
      v28 = a2[1];
      *(_QWORD *)&v32 = *a2;
      *((_QWORD *)&v32 + 1) = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      std::stringbuf::str();
      MIL::ValidationError::ValidationError((uint64_t)exception, &v32, (uint64_t)&v31, 315);
    }
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  __p = 0;
  v38 = 0;
  v39 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 3);
  *(v38 - 1) = *v40;
  v18 = MIL::IRTensorValueType::MakeWithShape(*a1, v10, (uint64_t)&__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v19 = (uint64_t *)operator new(8uLL);
  *a4 = v19;
  *v19++ = v18;
  a4[1] = v19;
  a4[2] = v19;
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
}

void sub_1E076A2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;
  void *v38;
  void *v39;

  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a29);
      v38 = *(void **)(v36 - 112);
      if (v38)
      {
        *(_QWORD *)(v36 - 104) = v38;
        operator delete(v38);
      }
      v39 = *(void **)(v36 - 88);
      if (v39)
      {
        *(_QWORD *)(v36 - 80) = v39;
        operator delete(v39);
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if (!v35)
      goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void sub_1E076A3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    JUMPOUT(0x1E076A39CLL);
  JUMPOUT(0x1E076A3A0);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMatMul(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  MIL::IRTensorValueType *v7;
  MIL::IRValueType *v8;
  MIL::IRTensorValueType *v9;
  const void *SingleValue;
  int v11;
  const void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  void *__p[2];
  char v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(SingleValueType);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "y");
  v8 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)__p);
  v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v8);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose_x");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  v11 = MIL::IRValue::GetScalar<BOOL>(SingleValue);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose_y");
  v12 = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a2, (uint64_t)__p);
  v13 = MIL::IRValue::GetScalar<BOOL>(v12);
  if (v18 < 0)
    operator delete(__p[0]);
  v14 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v7 + 88))(v7);
  MIL::ValueTypeInferenceUtils::GetMatmulOutShape(a1, v7, v9, v11, v13, (unint64_t *)__p);
  v15 = MIL::IRTensorValueType::MakeWithShape(*a1, v14, (uint64_t)__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v16 = (uint64_t *)operator new(8uLL);
  *a3 = v16;
  *v16++ = v15;
  a3[1] = v16;
  a3[2] = v16;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1E076A540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceEinsum(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  unsigned __int8 *v8;
  MIL::IRValueType *ValueType;
  MIL::IRTensorValueType *v10;
  MIL::IRValueType *v11;
  MIL::IRTensorValueType *v12;
  const void *SingleValue;
  uint64_t v14;
  uint64_t *v15;
  void *exception;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t Message;
  __int128 v25;
  uint64_t Reason;
  std::string v27;
  __int128 v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::string v32;
  _QWORD v33[3];
  __int128 v34;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v35;
  uint64_t v36;
  uint64_t v37;

  std::string::basic_string[abi:ne180100]<0>(__p, "values");
  v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v35 = 0;
  v36 = 0;
  v37 = 0;
  std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((char *)&v35, *((_QWORD **)v8 + 5), *((_QWORD **)v8 + 6), (uint64_t)(*((_QWORD *)v8 + 6) - *((_QWORD *)v8 + 5)) >> 4);
  if (v30 < 0)
    operator delete(__p[0]);
  if (v36 - (_QWORD)v35 != 32)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v17 = a2[1];
    *(_QWORD *)&v34 = *a2;
    *((_QWORD *)&v34 + 1) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "Inputs 'values' must be of length 2");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v34, (uint64_t)v33, 315);
  }
  ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*v35);
  v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ValueType);
  v11 = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(v35[2]);
  v12 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "equation");
  SingleValue = (const void *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)__p);
  MIL::IRValue::GetScalar<std::string>(SingleValue, &v32);
  if (v30 < 0)
    operator delete(__p[0]);
  v31 = 0;
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p))
  {
    v20 = __cxa_allocate_exception(0x48uLL);
    v21 = a2[1];
    *(_QWORD *)&v28 = *a2;
    *((_QWORD *)&v28 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    Message = MIL::MILResult::GetMessage((MIL::MILResult *)__p);
    if (*(char *)(Message + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)Message, *(_QWORD *)(Message + 8));
    }
    else
    {
      v25 = *(_OWORD *)Message;
      v27.__r_.__value_.__r.__words[2] = *(_QWORD *)(Message + 16);
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v25;
    }
    Reason = MIL::ValidationResult::GetReason((MIL::ValidationResult *)__p);
    MIL::ValidationError::ValidationError((uint64_t)v20, &v28, (uint64_t)&v27, Reason);
  }
  v14 = v31;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v15 = (uint64_t *)operator new(8uLL);
  *a4 = v15;
  *v15++ = v14;
  a4[1] = v15;
  a4[2] = v15;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  __p[0] = &v35;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1E076A814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;
  uint64_t v41;

  if (a14 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a17);
      if (a33 < 0)
        operator delete(a28);
      a17 = v41 - 88;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    if (!v40)
      goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

void sub_1E076A910(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1E076A908);
}

uint64_t MIL::Operators::Common::ios15::`anonymous namespace'::ValidateInputsForEinsum(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::string const&,std::shared_ptr<MIL::Location const> &,MIL::MILContext *,MIL::IRValueType const**)::$_0::operator()(uint64_t ***a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t v18;
  char v20;
  char *v21;

  if (a4[1] != *a4)
  {
    v8 = 0;
    do
    {
      v20 = 0;
      if (*((char *)a3 + 23) >= 0)
        v9 = a3;
      else
        v9 = (uint64_t *)*a3;
      v10 = *((char *)v9 + v8);
      v20 = v10;
      v11 = *a1;
      v12 = (uint64_t)(*a1)[1];
      if (!v12)
        goto LABEL_16;
      v13 = (uint64_t)(*a1 + 1);
      do
      {
        v14 = *(char *)(v12 + 28);
        v15 = v14 < v10;
        if (v14 >= v10)
          v16 = (uint64_t *)v12;
        else
          v16 = (uint64_t *)(v12 + 8);
        if (!v15)
          v13 = v12;
        v12 = *v16;
      }
      while (*v16);
      if ((uint64_t **)v13 == *a1 + 1 || v10 < *(char *)(v13 + 28))
      {
LABEL_16:
        v21 = &v20;
        *((_DWORD *)std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(v11, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 8) = a2;
        a2 = (a2 + 1);
        v11 = *a1;
      }
      v21 = &v20;
      v17 = std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(v11, &v20, (uint64_t)&std::piecewise_construct, &v21);
      v18 = *a4;
      *(_DWORD *)(*a4 + 4 * v8++) = *((_DWORD *)v17 + 8);
    }
    while (v8 < (a4[1] - v18) >> 2);
  }
  return a2;
}

uint64_t MIL::Operators::Common::ios15::`anonymous namespace'::ValidateInputsForEinsum(MIL::IRTensorValueType const*,MIL::IRTensorValueType const*,std::string const&,std::shared_ptr<MIL::Location const> &,MIL::MILContext *,MIL::IRValueType const**)::$_1::operator()(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(**a1 + 8 * a2);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4))
  {
    v5 = a1;
  }
  else
  {
    v5 = a1 + 1;
    v6 = *(_QWORD *)(*a1[1] + 8 * a2);
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6))
    {
      v7 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(**a1 + 8 * a2));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      v9 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*a1[1] + 8 * a2));
      if (v8 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9))
        v5 = a1;
    }
  }
  return *(_QWORD *)(**v5 + 8 * a2);
}

uint64_t **std::__tree<std::__value_type<char,int>,std::__map_value_compare<char,std::__value_type<char,int>,std::less<char>,true>,std::allocator<std::__value_type<char,int>>>::__emplace_unique_key_args<char,std::piecewise_construct_t const&,std::tuple<char const&>,std::tuple<>>(uint64_t **a1, char *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((char *)v6 + 28);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + 8) = 0;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t MIL::Operators::Common::ios15::Einsum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char **v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count_vtbl *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  void *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  uint64_t result;
  uint64_t v106;
  void *v107;
  std::__shared_weak_count *v108;
  void *v109[2];
  char v110;
  void *v111[2];
  char v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  void *v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123[2];
  char v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  __int128 v128;
  void *v129[2];
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  char **v135;
  __n128 v136;
  __n128 v137;
  _QWORD *v138;
  void *__p;
  void *v140;
  char *v141;
  char *v142;
  char **v143;
  _QWORD v144[3];
  _QWORD *v145;
  _BYTE v146[24];
  _BYTE *v147;
  _QWORD v148[3];
  _QWORD *v149;
  void *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD v153[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v138 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v140 = v9 + 2;
  v141 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  __p = v9;
  v150 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v156 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v151 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v150, 2, &v137);
  MIL::IRParameter::Make(&v137, &v133);
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", &v133);
  v14 = v133;
  v133 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)v137.n128_u64[1];
  if (v137.n128_u64[1])
  {
    v16 = (unint64_t *)(v137.n128_u64[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v140 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v13 + 5) + 64))(*((_QWORD *)v13 + 5), 1);
  v18 = v138;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v136);
  MIL::IRParameter::Make(&v136, (uint64_t *)&__p);
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v18, "equation", (uint64_t *)&__p);
  v20 = __p;
  __p = 0;
  if (v20)
    (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
  v21 = (std::__shared_weak_count *)v136.n128_u64[1];
  if (v136.n128_u64[1])
  {
    v22 = (unint64_t *)(v136.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  v135 = 0;
  v24 = operator new();
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v135, (void **)v24);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v135, 1uLL);
  v25 = v135;
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v27;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v27->~__shared_weak_count_0;
  v156 = &v27->~__shared_weak_count_0;
  v153[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v150 = v29;
  *v29 = v28;
  v151 = (uint64_t)(v29 + 1);
  v152 = v29 + 1;
  v153[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v150);
  MIL::IRParameter::MakeTypeSet((uint64_t)v153, 2, &v131);
  MIL::IRParameter::Make(&v131, &v132);
  v30 = v132;
  v133 = v132;
  if (v132)
  {
    v31 = (_QWORD *)operator new();
    v32 = v132;
    *v31 = &unk_1EA99F888;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v134 = v31;
  v132 = 0;
  v33 = v25[2];
  v34 = v25[1];
  if (v34 >= v33)
  {
    v36 = (v34 - *v25) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v38 = v33 - *v25;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    v143 = v25 + 2;
    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v25 + 2), v39);
    v42 = (uint64_t *)&v40[16 * v36];
    *v42 = v30;
    v42[1] = (uint64_t)v31;
    v133 = 0;
    v134 = 0;
    v44 = *v25;
    v43 = v25[1];
    if (v43 == *v25)
    {
      v47 = v25[1];
      v45 = &v40[16 * v36];
    }
    else
    {
      v45 = &v40[16 * v36];
      do
      {
        v46 = *((_OWORD *)v43 - 1);
        v43 -= 16;
        *((_OWORD *)v45 - 1) = v46;
        v45 -= 16;
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
      }
      while (v43 != v44);
      v47 = *v25;
      v43 = v25[1];
    }
    v35 = (char *)(v42 + 2);
    *v25 = v45;
    __p = v47;
    v140 = v47;
    v25[1] = (char *)(v42 + 2);
    v141 = v43;
    v48 = v25[2];
    v25[2] = &v40[16 * v41];
    v142 = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v34 = v30;
    *((_QWORD *)v34 + 1) = v31;
    v35 = v34 + 16;
    v133 = 0;
    v134 = 0;
  }
  v25[1] = v35;
  v49 = v132;
  v132 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v131.n128_u64[1];
  if (v131.n128_u64[1])
  {
    v51 = (unint64_t *)(v131.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v150)
  {
    v151 = (uint64_t)v150;
    operator delete(v150);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v129 = *(_OWORD *)a2;
  v130 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v53 = (uint64_t)v138;
  *(_QWORD *)&v128 = v138;
  if (v138)
  {
    v54 = (_QWORD *)operator new();
    *v54 = &unk_1EA99F8E8;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v53;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v128 + 1) = v54;
  v138 = 0;
  *(_QWORD *)&v127 = v135;
  if (v135)
  {
    v55 = (_QWORD *)operator new();
    v56 = v135;
    *v55 = &unk_1EA99F948;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v127 + 1) = v55;
  v135 = 0;
  v148[0] = &unk_1EA99FAC8;
  v148[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateEinsum;
  v149 = v148;
  v147 = 0;
  MIL::IROperator::Make((__int128 *)v129, &v128, &v127, (uint64_t)v148, (uint64_t)v146, a3);
  v57 = v147;
  if (v147 == v146)
  {
    v58 = 4;
    v57 = v146;
  }
  else
  {
    if (!v147)
      goto LABEL_58;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_58:
  v59 = v149;
  if (v149 == v148)
  {
    v60 = 4;
    v59 = v148;
    goto LABEL_62;
  }
  if (v149)
  {
    v60 = 5;
LABEL_62:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (SHIBYTE(v130) < 0)
    operator delete(v129[0]);
  v67 = *a3;
  v144[0] = &off_1EA99FBD8;
  v144[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceEinsum;
  v145 = v144;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v67 + 200))(v67, v144);
  v68 = v145;
  if (v145 == v144)
  {
    v69 = 4;
    v68 = v144;
  }
  else
  {
    if (!v145)
      goto LABEL_80;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_80:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v70 = __p;
  std::string::basic_string[abi:ne180100]<0>(v123, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v123, 0, (uint64_t *)&Scalar);
  v125 = Scalar;
  if (Scalar)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v72 = Scalar;
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = v72;
  }
  else
  {
    v71 = 0;
  }
  v126 = v71;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v121, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v70 + 24))(v70, &v125, v121);
  if (v122 < 0)
    operator delete(v121[0]);
  v73 = v126;
  if (v126)
  {
    p_shared_owners = (unint64_t *)&v126->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = Scalar;
  Scalar = 0;
  if (v76)
    (*((void (**)(std::__shared_weak_count_vtbl *))v76->~__shared_weak_count + 1))(v76);
  if (v124 < 0)
    operator delete(v123[0]);
  v77 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v119 = Scalar;
  if (Scalar)
  {
    v78 = (std::__shared_weak_count *)operator new();
    v79 = Scalar;
    v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v78->__shared_owners_ = 0;
    v78->__shared_weak_owners_ = 0;
    v78[1].__vftable = v79;
  }
  else
  {
    v78 = 0;
  }
  v120 = v78;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v117, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v77 + 24))(v77, &v119, v117);
  if (v118 < 0)
    operator delete(v117[0]);
  v80 = v120;
  if (v120)
  {
    v81 = (unint64_t *)&v120->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = Scalar;
  Scalar = 0;
  if (v83)
    (*((void (**)(std::__shared_weak_count_vtbl *))v83->~__shared_weak_count + 1))(v83);
  v84 = *a3;
  v115 = __p;
  if (__p)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = (std::__shared_weak_count_vtbl *)__p;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v116 = v85;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v84 + 56))(v84, &v115);
  v87 = v116;
  if (v116)
  {
    v88 = (unint64_t *)&v116->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v91 = __p;
  std::string::basic_string[abi:ne180100]<0>(v111, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v111, 0, (uint64_t *)&Scalar);
  v113 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v114 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v109, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v91 + 24))(v91, &v113, 0, v109);
  if (v110 < 0)
    operator delete(v109[0]);
  v94 = v114;
  if (v114)
  {
    v95 = (unint64_t *)&v114->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v112 < 0)
    operator delete(v111[0]);
  v98 = *a3;
  v107 = __p;
  if (__p)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = (std::__shared_weak_count_vtbl *)__p;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v108 = v99;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 56))(v98, &v107);
  v101 = v108;
  if (v108)
  {
    v102 = (unint64_t *)&v108->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = __p;
  __p = 0;
  if (v104)
    (*(void (**)(void *))(*(_QWORD *)v104 + 8))(v104);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v135, 0);
  result = (uint64_t)v138;
  if (v138)
  {
    v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v138);
    return MEMORY[0x1E0C023A0](v106, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E076B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  uint64_t *v53;
  void *v55;
  uint64_t v56;

  v55 = a53;
  a53 = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = *v53;
  *v53 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  _Unwind_Resume(a1);
}

void sub_1E076BB10()
{
  JUMPOUT(0x1E076BAC8);
}

uint64_t MIL::Operators::Common::ios15::Linear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void **v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  std::__shared_weak_count_vtbl *v101;
  void **v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  void **v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  void **v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  void **v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void **v129;
  void **v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void **v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void **v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void **v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void **v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void **v164;
  uint64_t result;
  uint64_t v166;
  void **v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  void **v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  void *v201[2];
  char v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  void *v207[2];
  char v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  void *v213[2];
  char v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  __int128 v217;
  __int128 v218;
  void *v219[2];
  uint64_t v220;
  void *v221;
  void *v222;
  _QWORD *v223;
  __n128 v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  char **v228;
  __n128 v229;
  __n128 v230;
  void *__p;
  void *v232;
  _QWORD *v233;
  void *v234;
  void *v235;
  _QWORD *v236;
  __n128 v237;
  _QWORD *v238;
  _QWORD v239[3];
  _QWORD *v240;
  _BYTE v241[24];
  _BYTE *v242;
  _BYTE v243[24];
  _BYTE *v244;
  std::__shared_weak_count_vtbl *v245;
  uint64_t p_on_zero_shared;
  uint64_t v247;
  void **v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char **v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v238 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v247 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v245 = v9;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v245);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = operator new(0x10uLL);
  v236 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v234 = v12;
  v235 = v12 + 2;
  v249 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v234);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = operator new(0x10uLL);
  v233 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v232 = v15 + 2;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 3, &v237);
  MIL::IRParameter::Make(&v237, (uint64_t *)&v221);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v221);
  v16 = v221;
  v221 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v237.n128_u64[1];
  if (v237.n128_u64[1])
  {
    v18 = (unint64_t *)(v237.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v232 = __p;
    operator delete(__p);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v245)
  {
    p_on_zero_shared = (uint64_t)v245;
    operator delete(v245);
  }
  v20 = v238;
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v23->__on_zero_shared;
  v247 = (uint64_t)&v23->__on_zero_shared;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v23->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  v245 = v23;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v245);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x10uLL);
  v236 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v234 = v26;
  v235 = v26 + 2;
  v249 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v234);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v233 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v232 = v29 + 2;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 3, &v230);
  MIL::IRParameter::Make(&v230, (uint64_t *)&v221);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v20, "weight", (uint64_t *)&v221);
  v31 = v221;
  v221 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v230.n128_u64[1];
  if (v230.n128_u64[1])
  {
    v33 = (unint64_t *)(v230.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v232 = __p;
    operator delete(__p);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v245)
  {
    p_on_zero_shared = (uint64_t)v245;
    operator delete(v245);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v35 = v238;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v245 = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_on_zero_shared = (uint64_t)&v37->~__shared_weak_count_0;
  v247 = (uint64_t)&v37->~__shared_weak_count_0;
  v248 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v245);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v234 = v39;
  *v39 = v38;
  v236 = v39 + 1;
  v235 = v39 + 1;
  v249 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v234);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v233 = v41 + 1;
  v232 = v41 + 1;
  v250 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v248, 3, &v229);
  MIL::IRParameter::Make(&v229, (uint64_t *)&v221);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "bias", (uint64_t *)&v221);
  v43 = v221;
  v221 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v229.n128_u64[1];
  if (v229.n128_u64[1])
  {
    v45 = (unint64_t *)(v229.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v232 = __p;
    operator delete(__p);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  if (v245)
  {
    p_on_zero_shared = (uint64_t)v245;
    operator delete(v245);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v228 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v248 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v228, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v248, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v228, 1uLL);
  v48 = v228;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v234 = v50;
  *v50 = v49;
  v236 = v50 + 1;
  v235 = v50 + 1;
  v245 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v234);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v233 = v52 + 1;
  v232 = v52 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v221 = v54;
  *v54 = v53;
  v223 = v54 + 1;
  v222 = v54 + 1;
  v247 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v221);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v245, 3, &v224);
  MIL::IRParameter::Make(&v224, &v225);
  v55 = v225;
  v226 = v225;
  if (v225)
  {
    v56 = (_QWORD *)operator new();
    v57 = v225;
    *v56 = &unk_1EA99F888;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v227 = v56;
  v225 = 0;
  v58 = v48[2];
  v59 = v48[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v48) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v48;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v252 = v48 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v48 + 2), v64);
    v67 = (uint64_t *)&v65[16 * v61];
    *v67 = v55;
    v67[1] = (uint64_t)v56;
    v227 = 0;
    v226 = 0;
    v69 = *v48;
    v68 = v48[1];
    if (v68 == *v48)
    {
      v72 = (void **)v48[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v48;
      v68 = v48[1];
    }
    v60 = (char *)(v67 + 2);
    *v48 = v70;
    v248 = v72;
    v249 = (uint64_t)v72;
    v48[1] = (char *)(v67 + 2);
    v250 = (uint64_t)v68;
    v73 = v48[2];
    v48[2] = &v65[16 * v66];
    v251 = v73;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v248);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v227 = 0;
    v226 = 0;
  }
  v48[1] = v60;
  v74 = v225;
  v225 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v224.n128_u64[1];
  if (v224.n128_u64[1])
  {
    v76 = (unint64_t *)(v224.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  if (__p)
  {
    v232 = __p;
    operator delete(__p);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  *(_OWORD *)v219 = *(_OWORD *)a2;
  v220 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v238;
  *(_QWORD *)&v218 = v238;
  if (v238)
  {
    v79 = (_QWORD *)operator new();
    *v79 = &unk_1EA99F8E8;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v78;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v218 + 1) = v79;
  v238 = 0;
  *(_QWORD *)&v217 = v228;
  if (v228)
  {
    v80 = (_QWORD *)operator new();
    v81 = v228;
    *v80 = &unk_1EA99F948;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v217 + 1) = v80;
  v228 = 0;
  v244 = 0;
  v242 = 0;
  MIL::IROperator::Make((__int128 *)v219, &v218, &v217, (uint64_t)v243, (uint64_t)v241, a3);
  v82 = v242;
  if (v242 == v241)
  {
    v83 = 4;
    v82 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_81;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_81:
  v84 = v244;
  if (v244 == v243)
  {
    v85 = 4;
    v84 = v243;
    goto LABEL_85;
  }
  if (v244)
  {
    v85 = 5;
LABEL_85:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
  if (*((_QWORD *)&v217 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (*((_QWORD *)&v218 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v220) < 0)
    operator delete(v219[0]);
  v92 = *a3;
  v239[0] = &off_1EA99FBD8;
  v239[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLinear;
  v240 = v239;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 200))(v92, v239);
  v93 = v240;
  if (v240 == v239)
  {
    v94 = 4;
    v93 = v239;
  }
  else
  {
    if (!v240)
      goto LABEL_103;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_103:
  MIL::Validation::TensorDTypeConstraints::Make(&v248);
  v95 = v248;
  std::string::basic_string[abi:ne180100]<0>(v213, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v213, 0, (uint64_t *)&v245);
  v215 = v245;
  if (v245)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v245;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v216 = v96;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v95 + 3))(v95, &v215, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v98 = v216;
  if (v216)
  {
    p_shared_owners = (unint64_t *)&v216->__shared_owners_;
    do
      v100 = __ldaxr(p_shared_owners);
    while (__stlxr(v100 - 1, p_shared_owners));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v245;
  v245 = 0;
  if (v101)
    (*((void (**)(std::__shared_weak_count_vtbl *))v101->~__shared_weak_count + 1))(v101);
  if (v214 < 0)
    operator delete(v213[0]);
  v102 = v248;
  std::string::basic_string[abi:ne180100]<0>(v207, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v207, 0, (uint64_t *)&v245);
  v209 = v245;
  if (v245)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = v245;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v210 = v103;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v205, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v102 + 3))(v102, &v209, v205);
  if (v206 < 0)
    operator delete(v205[0]);
  v105 = v210;
  if (v210)
  {
    v106 = (unint64_t *)&v210->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v245;
  v245 = 0;
  if (v108)
    (*((void (**)(std::__shared_weak_count_vtbl *))v108->~__shared_weak_count + 1))(v108);
  if (v208 < 0)
    operator delete(v207[0]);
  v109 = v248;
  std::string::basic_string[abi:ne180100]<0>(v201, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v201, 1, (uint64_t *)&v245);
  v203 = v245;
  if (v245)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v245;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v204 = v110;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v199, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v109 + 3))(v109, &v203, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v112 = v204;
  if (v204)
  {
    v113 = (unint64_t *)&v204->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v245;
  v245 = 0;
  if (v115)
    (*((void (**)(std::__shared_weak_count_vtbl *))v115->~__shared_weak_count + 1))(v115);
  if (v202 < 0)
    operator delete(v201[0]);
  v116 = v248;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v245);
  v197 = v245;
  if (v245)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v245;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v198 = v117;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v116 + 3))(v116, &v197, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v119 = v198;
  if (v198)
  {
    v120 = (unint64_t *)&v198->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v245;
  v245 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  v123 = *a3;
  v193 = v248;
  if (v248)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v248;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = (std::__shared_weak_count_vtbl *)v125;
  }
  else
  {
    v124 = 0;
  }
  v194 = v124;
  v248 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v123 + 56))(v123, &v193);
  v126 = v194;
  if (v194)
  {
    v127 = (unint64_t *)&v194->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v248;
  v248 = 0;
  if (v129)
    (*((void (**)(void **))*v129 + 1))(v129);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v248);
  v130 = v248;
  std::string::basic_string[abi:ne180100]<0>(v189, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v189, 0, (uint64_t *)&v245);
  v191 = v245;
  if (v245)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = v245;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v192 = v131;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v187, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v130 + 3))(v130, &v191, -1, v187);
  if (v188 < 0)
    operator delete(v187[0]);
  v133 = v192;
  if (v192)
  {
    v134 = (unint64_t *)&v192->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v245;
  v245 = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v190 < 0)
    operator delete(v189[0]);
  v137 = v248;
  std::string::basic_string[abi:ne180100]<0>(v183, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 0, (uint64_t *)&v245);
  v185 = v245;
  if (v245)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v245;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v186 = v138;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v137 + 3))(v137, &v185, 0, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v140 = v186;
  if (v186)
  {
    v141 = (unint64_t *)&v186->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v245;
  v245 = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v184 < 0)
    operator delete(v183[0]);
  v144 = v248;
  std::string::basic_string[abi:ne180100]<0>(v177, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 0, (uint64_t *)&v245);
  v179 = v245;
  if (v245)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v245;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v180 = v145;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v144 + 3))(v144, &v179, 1, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v147 = v180;
  if (v180)
  {
    v148 = (unint64_t *)&v180->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v245;
  v245 = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  if (v178 < 0)
    operator delete(v177[0]);
  v151 = v248;
  std::string::basic_string[abi:ne180100]<0>(v171, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 1, (uint64_t *)&v245);
  v173 = v245;
  if (v245)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v245;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v174 = v152;
  v245 = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v151 + 3))(v151, &v173, 0, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v154 = v174;
  if (v174)
  {
    v155 = (unint64_t *)&v174->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v245;
  v245 = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v172 < 0)
    operator delete(v171[0]);
  v158 = *a3;
  v167 = v248;
  if (v248)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v248;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = (std::__shared_weak_count_vtbl *)v160;
  }
  else
  {
    v159 = 0;
  }
  v168 = v159;
  v248 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v158 + 56))(v158, &v167);
  v161 = v168;
  if (v168)
  {
    v162 = (unint64_t *)&v168->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v248;
  v248 = 0;
  if (v164)
    (*((void (**)(void **))*v164 + 1))(v164);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v228, 0);
  result = (uint64_t)v238;
  if (v238)
  {
    v166 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v238);
    return MEMORY[0x1E0C023A0](v166, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E076CF30(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x288], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::MatMul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  void **v71;
  char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char **v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  void **v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void **v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void **v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void **v121;
  void **v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  void **v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void **v142;
  uint64_t result;
  uint64_t v144;
  void **v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149[2];
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void **v159;
  std::__shared_weak_count *v160;
  void *v161[2];
  char v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  __int128 v177;
  __int128 v178;
  void *v179[2];
  uint64_t v180;
  void *v181;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  char **v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  void *__p;
  void *v193;
  _QWORD *v194;
  void *v195;
  void *v196;
  _QWORD *v197;
  __n128 v198;
  _QWORD *v199;
  _QWORD v200[3];
  _QWORD *v201;
  _BYTE v202[24];
  _BYTE *v203;
  _BYTE v204[24];
  _BYTE *v205;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char **v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v199 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v208 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v197 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v195 = v12;
  v196 = v12 + 2;
  v210 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v195);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v194 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v193 = v15 + 2;
  v211 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v209, 3, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&v181);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v181);
  v16 = v181;
  v181 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v18 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v199;
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v23->__on_zero_shared;
  v208 = (uint64_t)&v23->__on_zero_shared;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v23->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  Scalar = v23;
  v209 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v197 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v195 = v26;
  v196 = v26 + 2;
  v210 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v195);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v194 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v193 = v29 + 2;
  v211 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v209, 3, &v191);
  MIL::IRParameter::Make(&v191, (uint64_t *)&v181);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v20, "y", (uint64_t *)&v181);
  v30 = v181;
  v181 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v32 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v34 = v199;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v190);
  MIL::IRParameter::Make(&v190, (uint64_t *)&v209);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v34, "transpose_x", (uint64_t *)&v209);
  v36 = v209;
  v209 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = (std::__shared_weak_count *)v190.n128_u64[1];
  if (v190.n128_u64[1])
  {
    v38 = (unint64_t *)(v190.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  v40 = v199;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v189);
  MIL::IRParameter::Make(&v189, (uint64_t *)&v209);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v40, "transpose_y", (uint64_t *)&v209);
  v42 = v209;
  v209 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = (std::__shared_weak_count *)v189.n128_u64[1];
  if (v189.n128_u64[1])
  {
    v44 = (unint64_t *)(v189.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v188 = 0;
  v46 = operator new();
  *(_QWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  v209 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, (void **)v46);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v209, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v188, 1uLL);
  v47 = v188;
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v195 = v49;
  *v49 = v48;
  v197 = v49 + 1;
  v196 = v49 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v195);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  __p = v51;
  *v51 = v50;
  v194 = v51 + 1;
  v193 = v51 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v181 = v53;
  *v53 = v52;
  v182 = v53 + 1;
  v183 = v53 + 1;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v181);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v184);
  MIL::IRParameter::Make(&v184, &v185);
  v54 = v185;
  v186 = v185;
  if (v185)
  {
    v55 = (_QWORD *)operator new();
    v56 = v185;
    *v55 = &unk_1EA99F888;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  v187 = v55;
  v185 = 0;
  v57 = v47[2];
  v58 = v47[1];
  if (v58 >= v57)
  {
    v60 = (v58 - *v47) >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v62 = v57 - *v47;
    if (v62 >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    v213 = v47 + 2;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v47 + 2), v63);
    v66 = (uint64_t *)&v64[16 * v60];
    *v66 = v54;
    v66[1] = (uint64_t)v55;
    v186 = 0;
    v187 = 0;
    v68 = *v47;
    v67 = v47[1];
    if (v67 == *v47)
    {
      v71 = (void **)v47[1];
      v69 = &v64[16 * v60];
    }
    else
    {
      v69 = &v64[16 * v60];
      do
      {
        v70 = *((_OWORD *)v67 - 1);
        v67 -= 16;
        *((_OWORD *)v69 - 1) = v70;
        v69 -= 16;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
      }
      while (v67 != v68);
      v71 = (void **)*v47;
      v67 = v47[1];
    }
    v59 = (char *)(v66 + 2);
    *v47 = v69;
    v209 = v71;
    v210 = (uint64_t)v71;
    v47[1] = (char *)(v66 + 2);
    v211 = (uint64_t)v67;
    v72 = v47[2];
    v47[2] = &v64[16 * v65];
    v212 = v72;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v209);
  }
  else
  {
    *(_QWORD *)v58 = v54;
    *((_QWORD *)v58 + 1) = v55;
    v59 = v58 + 16;
    v186 = 0;
    v187 = 0;
  }
  v47[1] = v59;
  v73 = v185;
  v185 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v75 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  *(_OWORD *)v179 = *(_OWORD *)a2;
  v180 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v77 = (uint64_t)v199;
  *(_QWORD *)&v178 = v199;
  if (v199)
  {
    v78 = (_QWORD *)operator new();
    *v78 = &unk_1EA99F8E8;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v77;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v178 + 1) = v78;
  v199 = 0;
  *(_QWORD *)&v177 = v188;
  if (v188)
  {
    v79 = (_QWORD *)operator new();
    v80 = v188;
    *v79 = &unk_1EA99F948;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v177 + 1) = v79;
  v188 = 0;
  v205 = 0;
  v203 = 0;
  MIL::IROperator::Make((__int128 *)v179, &v178, &v177, (uint64_t)v204, (uint64_t)v202, a3);
  v81 = v203;
  if (v203 == v202)
  {
    v82 = 4;
    v81 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_82;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_82:
  v83 = v205;
  if (v205 == v204)
  {
    v84 = 4;
    v83 = v204;
    goto LABEL_86;
  }
  if (v205)
  {
    v84 = 5;
LABEL_86:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  if (*((_QWORD *)&v177 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v178 + 1);
  if (*((_QWORD *)&v178 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (SHIBYTE(v180) < 0)
    operator delete(v179[0]);
  v91 = *a3;
  v200[0] = &off_1EA99FBD8;
  v200[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMatMul;
  v201 = v200;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v91 + 200))(v91, v200);
  v92 = v201;
  if (v201 == v200)
  {
    v93 = 4;
    v92 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_104;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_104:
  MIL::Validation::TensorDTypeConstraints::Make(&v209);
  v94 = v209;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&Scalar);
  v175 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v176 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v175, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v97 = v176;
  if (v176)
  {
    p_shared_owners = (unint64_t *)&v176->__shared_owners_;
    do
      v99 = __ldaxr(p_shared_owners);
    while (__stlxr(v99 - 1, p_shared_owners));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v174 < 0)
    operator delete(v173[0]);
  v101 = v209;
  std::string::basic_string[abi:ne180100]<0>(v167, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&Scalar);
  v169 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v170 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v101 + 3))(v101, &v169, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v104 = v170;
  if (v170)
  {
    v105 = (unint64_t *)&v170->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v168 < 0)
    operator delete(v167[0]);
  v108 = v209;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v163 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v164 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v161, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v108 + 3))(v108, &v163, v161);
  if (v162 < 0)
    operator delete(v161[0]);
  v111 = v164;
  if (v164)
  {
    v112 = (unint64_t *)&v164->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  v115 = *a3;
  v159 = v209;
  if (v209)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v209;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = (std::__shared_weak_count_vtbl *)v117;
  }
  else
  {
    v116 = 0;
  }
  v160 = v116;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v115 + 56))(v115, &v159);
  v118 = v160;
  if (v160)
  {
    v119 = (unint64_t *)&v160->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v209;
  v209 = 0;
  if (v121)
    (*((void (**)(void **))*v121 + 1))(v121);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v209);
  v122 = v209;
  std::string::basic_string[abi:ne180100]<0>(v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&Scalar);
  v157 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v158 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "XD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v122 + 3))(v122, &v157, 0, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v125 = v158;
  if (v158)
  {
    v126 = (unint64_t *)&v158->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  if (v156 < 0)
    operator delete(v155[0]);
  v129 = v209;
  std::string::basic_string[abi:ne180100]<0>(v149, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v149, 0, (uint64_t *)&Scalar);
  v151 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v152 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "YD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v129 + 3))(v129, &v151, 0, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v132 = v152;
  if (v152)
  {
    v133 = (unint64_t *)&v152->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  if (v150 < 0)
    operator delete(v149[0]);
  v136 = *a3;
  v145 = v209;
  if (v209)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v209;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v146 = v137;
  v209 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v136 + 56))(v136, &v145);
  v139 = v146;
  if (v146)
  {
    v140 = (unint64_t *)&v146->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v209;
  v209 = 0;
  if (v142)
    (*((void (**)(void **))*v142 + 1))(v142);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v188, 0);
  result = (uint64_t)v199;
  if (v199)
  {
    v144 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v199);
    return MEMORY[0x1E0C023A0](v144, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E076E5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a66;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;

  v69 = *(_QWORD *)(v67 - 112);
  *(_QWORD *)(v67 - 112) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *v66;
  *v66 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a66, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v67 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateMakeList(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  _BOOL4 v6;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const void ***v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ParameterType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  MIL::IRValue *v25;
  uint64_t *v26;
  void *v27;
  _DWORD *v28;
  _DWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  void *v60[2];
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *v64[2];
  char v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  void *v68[2];
  char v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  void *v72[2];
  char v73;
  void *__p[2];
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t *v81[2];
  char v82;
  void **v83;

  std::string::basic_string[abi:ne180100]<0>(v81, "init_length");
  if (MIL::IROperation::TryGetParameterValue(this, (uint64_t)v81, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(&v78, "init_length");
    ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
    v6 = (int)MIL::IRValue::GetScalar<int>(ParameterValue) < 1;
    if (SHIBYTE(v80) < 0)
      operator delete(v78);
  }
  else
  {
    v6 = 0;
  }
  if (v82 < 0)
  {
    operator delete(v81[0]);
    if (v6)
      goto LABEL_7;
  }
  else if (v6)
  {
LABEL_7:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v8 = (std::__shared_weak_count *)LocationPtr[1];
    v76 = *LocationPtr;
    v77 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Param init_length of operator 'make_list' must be greater than or equal to 1");
    MIL::ValidationResult::ValidationResult(a2, &v76, 315, __p);
    if (v75 < 0)
      operator delete(__p[0]);
    v11 = v77;
    if (v77)
    {
      v12 = (unint64_t *)&v77->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    return;
  }
  v14 = (const void ***)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 160))(this);
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)v81, v14);
  v15 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(v72, "elem_shape");
    v83 = v72;
    v16 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v81, (const void **)v72, (uint64_t)&std::piecewise_construct, (_OWORD **)&v83);
    v18 = *((_QWORD *)v16 + 7);
    v17 = *((_QWORD *)v16 + 8);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v15 >= (v17 - v18) >> 4)
      break;
    std::string::basic_string[abi:ne180100]<0>(v72, "elem_shape");
    ParameterType = MIL::IROperation::GetParameterType(this);
    if (v73 < 0)
      operator delete(v72[0]);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 16))(ParameterType) != 1
      || (v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 24))(ParameterType), (v21 = v20) == 0)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 88))(v20) != 3
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 88))(v21) != 11)
    {
      v43 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v44 = (std::__shared_weak_count *)v43[1];
      v70 = *v43;
      v71 = v44;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "elem_shape of operator 'make_list' should be tuple of int or string");
      MIL::ValidationResult::ValidationResult(a2, &v70, 315, v68);
      if (v69 < 0)
        operator delete(v68[0]);
      v47 = v71;
      if (v71)
      {
        v48 = (unint64_t *)&v71->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        goto LABEL_72;
      }
      goto LABEL_95;
    }
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 24))(ParameterType);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 88))(v22) != 3)
    {
      std::string::basic_string[abi:ne180100]<0>(v72, "elem_shape");
      v25 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue(this, (uint64_t)v72, v15);
      if (v73 < 0)
        operator delete(v72[0]);
      if (!v25)
      {
        v55 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
        v56 = (std::__shared_weak_count *)v55[1];
        v66 = *v55;
        v67 = v56;
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        std::string::basic_string[abi:ne180100]<0>(v64, "elem_shape of operator 'make_list' should be tuple of const values");
        MIL::ValidationResult::ValidationResult(a2, &v66, 315, v64);
        if (v65 < 0)
          operator delete(v64[0]);
        v47 = v67;
        if (v67)
        {
          v59 = (unint64_t *)&v67->__shared_owners_;
          do
            v49 = __ldaxr(v59);
          while (__stlxr(v49 - 1, v59));
          goto LABEL_72;
        }
        goto LABEL_95;
      }
      v26 = (uint64_t *)MIL::IRValue::AsTensor(v25);
      v72[0] = (void *)MIL::IRTensorValue::GetDataView<int>(v26);
      v72[1] = v27;
      v28 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v72, 0);
      v29 = v28;
      v30 = v79;
      if (v79 < v80)
      {
        *(_DWORD *)v79 = *v28;
        v79 = v30 + 4;
        goto LABEL_63;
      }
      v31 = v78;
      v37 = (v79 - v78) >> 2;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v39 = v80 - v78;
      if ((v80 - v78) >> 1 > v38)
        v38 = v39 >> 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v38;
      if (v35)
      {
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80, v35);
        v31 = v78;
        v30 = v79;
      }
      else
      {
        v36 = 0;
      }
      v40 = &v36[4 * v37];
      *(_DWORD *)v40 = *v29;
      v24 = v40 + 4;
      while (v30 != v31)
      {
        v42 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v40 - 1) = v42;
        v40 -= 4;
      }
      goto LABEL_60;
    }
    v23 = v79;
    if (v79 >= v80)
    {
      v31 = v78;
      v32 = (v79 - v78) >> 2;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 62)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v34 = v80 - v78;
      if ((v80 - v78) >> 1 > v33)
        v33 = v34 >> 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v80, v35);
        v31 = v78;
        v23 = v79;
      }
      else
      {
        v36 = 0;
      }
      v40 = &v36[4 * v32];
      *(_DWORD *)v40 = 1;
      v24 = v40 + 4;
      while (v23 != v31)
      {
        v41 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v40 - 1) = v41;
        v40 -= 4;
      }
LABEL_60:
      v78 = v40;
      v79 = v24;
      v80 = &v36[4 * v35];
      if (v31)
        operator delete(v31);
      goto LABEL_62;
    }
    *(_DWORD *)v79 = 1;
    v24 = v23 + 4;
LABEL_62:
    v79 = v24;
LABEL_63:
    ++v15;
  }
  if (v79 != v78 && (unint64_t)(v79 - v78) < 0x11)
  {
    MIL::ValidationResult::ValidationResult(a2);
    goto LABEL_95;
  }
  v50 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v51 = (std::__shared_weak_count *)v50[1];
  v62 = *v50;
  v63 = v51;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  std::string::basic_string[abi:ne180100]<0>(v60, "Param elem_shape of operator 'make_list' can have minimum 1 and maximum 4 dimensions specified");
  MIL::ValidationResult::ValidationResult(a2, &v62, 315, v60);
  if (v61 < 0)
    operator delete(v60[0]);
  v47 = v63;
  if (v63)
  {
    v54 = (unint64_t *)&v63->__shared_owners_;
    do
      v49 = __ldaxr(v54);
    while (__stlxr(v49 - 1, v54));
LABEL_72:
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
LABEL_95:
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)v81, v81[1]);
}

void sub_1E076F0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  uint64_t v45;
  void *v47;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  v47 = *(void **)(v45 - 152);
  if (v47)
  {
    *(_QWORD *)(v45 - 144) = v47;
    operator delete(v47);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v45 - 128, *(_QWORD **)(v45 - 120));
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<int const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1EA992578, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 4 * a2;
}

void sub_1E076F28C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListGather(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X2>, uint64_t **a3@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v7;
  MIL::IRValueType *v8;
  uint64_t v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  uint64_t v12;
  void (***v13)(MIL::MILContextImpl *__hidden);
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ls");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v7 = MIL::IRValueType::AsListType(SingleValueType);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v8 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
  v9 = MIL::IRValueType::AsTensorType(v8);
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a2, (uint64_t)&__p);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v17 = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v19 = 0;
  v20 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v12, *(_QWORD *)(v12 + 8), (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 3);
  std::vector<MIL::IRDimension const*>::insert((uint64_t)&__p, (char *)__p, (char *)&v17);
  v13 = *a1;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v15 = MIL::IRTensorValueType::MakeWithShape(v13, v14, (uint64_t)&__p);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v16 = (uint64_t *)operator new(8uLL);
  *a3 = v16;
  *v16++ = v15;
  a3[1] = v16;
  a3[2] = v16;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
}

void sub_1E076F400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::IRDimension const*>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1E076F644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMakeList(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValue *SingleValue;
  const void *v9;
  int v10;
  unsigned __int8 *v11;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***v12;
  MIL::IRTypedArgument::IRTypedArgumentImpl ***i;
  MIL::IRValueType *ValueType;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  MIL::IRValue *Value;
  const void *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  MIL::MILContext *v34;
  uint64_t v35;
  uint64_t v36;
  MIL::IRValue *v37;
  const void *v38;
  int v39;
  const MIL::IRValueType *v40;
  const MIL::IRDimension *v41;
  uint64_t v42;
  uint64_t *v43;
  void *exception;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  _QWORD v53[3];
  __int128 v54;
  void *v55[2];
  char v56;
  _QWORD v57[3];
  __int128 v58;
  void *__p;
  uint64_t *v60;
  char *v61;
  std::string v62;

  std::string::basic_string[abi:ne180100]<0>(&__p, "dtype");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)&__p);
  v9 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  MIL::IRValue::GetScalar<std::string>(v9, &v62);
  if (SHIBYTE(v61) < 0)
    operator delete(__p);
  v10 = MIL::StringToIRDataType((const void **)&v62.__r_.__value_.__l.__data_, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "elem_shape");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (SHIBYTE(v61) < 0)
    operator delete(__p);
  v52 = v10;
  __p = 0;
  v60 = 0;
  v61 = 0;
  std::vector<std::string const*>::reserve(&__p, (uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 4);
  v12 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((_QWORD *)v11 + 5);
  for (i = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)*((_QWORD *)v11 + 6); v12 != i; v12 += 2)
  {
    ValueType = (MIL::IRValueType *)MIL::IRTypedArgument::GetValueType(*v12);
    v15 = MIL::IRValueType::AsTensorType(ValueType);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 88))(v15) == 3)
    {
      v16 = MIL::IRUnknownDimension::Make(*a1, 0);
      v17 = v60;
      if (v60 >= (uint64_t *)v61)
      {
        v18 = ((char *)v60 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v19 = (v61 - (_BYTE *)__p) >> 2;
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        if ((unint64_t)(v61 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v61, v20);
        else
          v21 = 0;
        v28 = (uint64_t *)&v21[8 * v18];
        *v28 = v16;
        v25 = v28 + 1;
        v30 = (char *)__p;
        v29 = (char *)v60;
        if (v60 != __p)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else
    {
      Value = (MIL::IRValue *)MIL::IRTypedArgument::GetValue(*v12);
      v23 = (const void *)MIL::IRValue::AsTensor(Value);
      v24 = MIL::IRValue::GetScalar<int>(v23);
      if (v24 <= 0)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        v45 = a2[1];
        *(_QWORD *)&v58 = *a2;
        *((_QWORD *)&v58 + 1) = v45;
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        std::string::basic_string[abi:ne180100]<0>(v57, "elem_shape values must be > 0");
        MIL::ValidationError::ValidationError((uint64_t)exception, &v58, (uint64_t)v57, 315);
      }
      v16 = MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v24);
      v17 = v60;
      if (v60 >= (uint64_t *)v61)
      {
        v26 = ((char *)v60 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v27 = (v61 - (_BYTE *)__p) >> 2;
        if (v27 <= v26 + 1)
          v27 = v26 + 1;
        if ((unint64_t)(v61 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v27;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v61, v20);
        else
          v21 = 0;
        v28 = (uint64_t *)&v21[8 * v26];
        *v28 = v16;
        v25 = v28 + 1;
        v32 = (char *)__p;
        v29 = (char *)v60;
        if (v60 != __p)
        {
          do
          {
            v33 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v33;
          }
          while (v29 != v32);
LABEL_35:
          v29 = (char *)__p;
        }
LABEL_36:
        __p = v28;
        v60 = v25;
        v61 = &v21[8 * v20];
        if (v29)
          operator delete(v29);
        goto LABEL_38;
      }
    }
    *v17 = v16;
    v25 = v17 + 1;
LABEL_38:
    v60 = v25;
  }
  v34 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(*a1, v52, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(v55, "init_length");
  v35 = MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v55);
  v36 = v35;
  if (v56 < 0)
  {
    operator delete(v55[0]);
    if (v36)
      goto LABEL_41;
LABEL_46:
    v40 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(*a1, 0);
    goto LABEL_47;
  }
  if (!v35)
    goto LABEL_46;
LABEL_41:
  std::string::basic_string[abi:ne180100]<0>(v55, "init_length");
  v37 = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v55);
  v38 = (const void *)MIL::IRValue::AsTensor(v37);
  v39 = MIL::IRValue::GetScalar<int>(v38);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v39 <= 0)
  {
    v48 = __cxa_allocate_exception(0x48uLL);
    v49 = a2[1];
    *(_QWORD *)&v54 = *a2;
    *((_QWORD *)&v54 + 1) = v49;
    if (v49)
    {
      v50 = (unint64_t *)(v49 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "Param init_length of operator 'make_list' must be greater than or equal to 1");
    MIL::ValidationError::ValidationError((uint64_t)v48, &v54, (uint64_t)v53, 315);
  }
  v40 = (const MIL::IRValueType *)MIL::IRConstantDimension::Make(*a1, (MIL::MILContext *)v39);
LABEL_47:
  v42 = MIL::IRListValueType::MakeWithDimension(*a1, v34, v40, v41);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v43 = (uint64_t *)operator new(8uLL);
  *a4 = v43;
  *v43++ = v42;
  a4[1] = v43;
  a4[2] = v43;
  if (__p)
  {
    v60 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_1E076FB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  int v39;
  uint64_t v40;

  if (a16 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    if ((v39 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    if (!v39)
    {
LABEL_8:
      if (a33)
      {
        a34 = (uint64_t)a33;
        operator delete(a33);
      }
      if (*(char *)(v40 - 89) < 0)
        operator delete(*(void **)(v40 - 112));
      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

_QWORD *MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListLength@<X0>(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t Scalar;
  _QWORD *v4;
  _QWORD *result;

  Scalar = MIL::IRTensorValueType::MakeScalar(*a1, 11);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = operator new(8uLL);
  *a2 = v4;
  *v4 = Scalar;
  result = v4 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

_QWORD *MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListRead@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "ls");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a1, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  v5 = MIL::IRValueType::AsListType(SingleValueType);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v7 = operator new(8uLL);
  *a2 = v7;
  *v7 = v6;
  result = v7 + 1;
  a2[1] = result;
  a2[2] = result;
  return result;
}

void sub_1E076FD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Operators::Common::ios15::ListGather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  MIL::MILContext *v10;
  const MIL::IRValueType *v11;
  const MIL::IRDimension *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  MIL::MILContext *v16;
  const MIL::IRValueType *v17;
  const MIL::IRDimension *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  MIL::MILContext *v22;
  const MIL::IRValueType *v23;
  const MIL::IRDimension *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  MIL::MILContext *v28;
  const MIL::IRValueType *v29;
  const MIL::IRDimension *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  char *v67;
  __int128 v68;
  void **v69;
  char *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char **v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void **v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void **v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void **v119;
  uint64_t result;
  uint64_t v121;
  void **v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  void **v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  void *v140;
  void *v141;
  _QWORD *v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char **v147;
  __n128 v148;
  void *__p;
  void *v150;
  _QWORD *v151;
  void *v152;
  void *v153;
  _QWORD *v154;
  __n128 v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  std::__shared_weak_count_vtbl *v163;
  uint64_t p_on_zero_shared;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  _QWORD *v169;
  void **v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  char **v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v156 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v165 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v163 = v9;
  v10 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v163);
  v11 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v170 = (void **)MIL::IRListValueType::MakeWithDimension(a1, v10, v11, v12);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v168 = v15 + 2;
  v169 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v167 = v15;
  v16 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v167);
  v17 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v171 = (void **)MIL::IRListValueType::MakeWithDimension(a1, v16, v17, v18);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v153 = v21 + 2;
  v154 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v152 = v21;
  v22 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v152);
  v23 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v172 = MIL::IRListValueType::MakeWithDimension(a1, v22, v23, v24);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v150 = v27 + 2;
  v151 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v28 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  v29 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v173 = MIL::IRListValueType::MakeWithDimension(a1, v28, v29, v30);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 4, &v155);
  MIL::IRParameter::Make(&v155, (uint64_t *)&v140);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "ls", (uint64_t *)&v140);
  v31 = v140;
  v140 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v33 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v163)
  {
    p_on_zero_shared = (uint64_t)v163;
    operator delete(v163);
  }
  v35 = v156;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (void **)operator new(8uLL);
  v170 = v37;
  *v37 = (void *)v36;
  v171 = v37 + 1;
  v172 = (uint64_t)(v37 + 1);
  v167 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v170);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v163);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v35, "indices", (uint64_t *)&v163);
  v38 = v163;
  v163 = 0;
  if (v38)
    (*((void (**)(std::__shared_weak_count_vtbl *))v38->~__shared_weak_count + 1))(v38);
  v39 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v40 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  v147 = 0;
  v42 = operator new();
  *(_QWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 16) = 0;
  v170 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v42);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v170, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v43 = v147;
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v167 = v45;
  *v45 = v44;
  v168 = v45 + 1;
  v169 = v45 + 1;
  v163 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v167);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  v152 = v47;
  *v47 = v46;
  v153 = v47 + 1;
  v154 = v47 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v152);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  __p = v49;
  *v49 = v48;
  v150 = v49 + 1;
  v151 = v49 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  v140 = v51;
  *v51 = v50;
  v141 = v51 + 1;
  v142 = v51 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v140);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v163, 4, &v143);
  MIL::IRParameter::Make(&v143, &v144);
  v52 = v144;
  v145 = v144;
  if (v144)
  {
    v53 = (_QWORD *)operator new();
    v54 = v144;
    *v53 = &unk_1EA99F888;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v54;
  }
  else
  {
    v53 = 0;
  }
  v146 = v53;
  v144 = 0;
  v55 = v43[2];
  v56 = v43[1];
  if (v56 >= v55)
  {
    v58 = (v56 - *v43) >> 4;
    v59 = v58 + 1;
    if ((unint64_t)(v58 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v60 = v55 - *v43;
    if (v60 >> 3 > v59)
      v59 = v60 >> 3;
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
      v61 = 0xFFFFFFFFFFFFFFFLL;
    else
      v61 = v59;
    v174 = v43 + 2;
    v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v43 + 2), v61);
    v64 = (uint64_t *)&v62[16 * v58];
    *v64 = v52;
    v64[1] = (uint64_t)v53;
    v145 = 0;
    v146 = 0;
    v66 = *v43;
    v65 = v43[1];
    if (v65 == *v43)
    {
      v69 = (void **)v43[1];
      v67 = &v62[16 * v58];
    }
    else
    {
      v67 = &v62[16 * v58];
      do
      {
        v68 = *((_OWORD *)v65 - 1);
        v65 -= 16;
        *((_OWORD *)v67 - 1) = v68;
        v67 -= 16;
        *(_QWORD *)v65 = 0;
        *((_QWORD *)v65 + 1) = 0;
      }
      while (v65 != v66);
      v69 = (void **)*v43;
      v65 = v43[1];
    }
    v57 = (char *)(v64 + 2);
    *v43 = v67;
    v170 = v69;
    v171 = v69;
    v43[1] = (char *)(v64 + 2);
    v172 = (uint64_t)v65;
    v70 = v43[2];
    v43[2] = &v62[16 * v63];
    v173 = (uint64_t)v70;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v170);
  }
  else
  {
    *(_QWORD *)v56 = v52;
    *((_QWORD *)v56 + 1) = v53;
    v57 = v56 + 16;
    v145 = 0;
    v146 = 0;
  }
  v43[1] = v57;
  v71 = v144;
  v144 = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = (std::__shared_weak_count *)v143.n128_u64[1];
  if (v143.n128_u64[1])
  {
    v73 = (unint64_t *)(v143.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
  if (__p)
  {
    v150 = __p;
    operator delete(__p);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v75 = (uint64_t)v156;
  *(_QWORD *)&v137 = v156;
  if (v156)
  {
    v76 = (_QWORD *)operator new();
    *v76 = &unk_1EA99F8E8;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v75;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v137 + 1) = v76;
  v156 = 0;
  *(_QWORD *)&v136 = v147;
  if (v147)
  {
    v77 = (_QWORD *)operator new();
    v78 = v147;
    *v77 = &unk_1EA99F948;
    v77[1] = 0;
    v77[2] = 0;
    v77[3] = v78;
  }
  else
  {
    v77 = 0;
  }
  *((_QWORD *)&v136 + 1) = v77;
  v147 = 0;
  v162 = 0;
  v160 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v161, (uint64_t)v159, a3);
  v79 = v160;
  if (v160 == v159)
  {
    v80 = 4;
    v79 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_68;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_68:
  v81 = v162;
  if (v162 == v161)
  {
    v82 = 4;
    v81 = v161;
    goto LABEL_72;
  }
  if (v162)
  {
    v82 = 5;
LABEL_72:
    (*(void (**)(void))(*v81 + 8 * v82))();
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v89 = *a3;
  v157[0] = &off_1EA99FBD8;
  v157[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListGather;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 200))(v89, v157);
  v90 = v158;
  if (v158 == v157)
  {
    v91 = 4;
    v90 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_90;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_90:
  MIL::Validation::TensorDTypeConstraints::Make(&v170);
  v92 = v170;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v163);
  v134 = v163;
  if (v163)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v163;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v135 = v93;
  v163 = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v92 + 3))(v92, &v134, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v95 = v135;
  if (v135)
  {
    p_shared_owners = (unint64_t *)&v135->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v163;
  v163 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  v99 = *a3;
  v130 = v170;
  if (v170)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v170;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v131 = v100;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v99 + 56))(v99, &v130);
  v102 = v131;
  if (v131)
  {
    v103 = (unint64_t *)&v131->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v170;
  v170 = 0;
  if (v105)
    (*((void (**)(void **))*v105 + 1))(v105);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v170);
  v106 = v170;
  std::string::basic_string[abi:ne180100]<0>(v126, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v126, 0, (uint64_t *)&v163);
  v128 = v163;
  if (v163)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = v163;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v129 = v107;
  v163 = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v106 + 3))(v106, &v128, 0, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v109 = v129;
  if (v129)
  {
    v110 = (unint64_t *)&v129->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v163;
  v163 = 0;
  if (v112)
    (*((void (**)(std::__shared_weak_count_vtbl *))v112->~__shared_weak_count + 1))(v112);
  if (v127 < 0)
    operator delete(v126[0]);
  v113 = *a3;
  v122 = v170;
  if (v170)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = v170;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = (std::__shared_weak_count_vtbl *)v115;
  }
  else
  {
    v114 = 0;
  }
  v123 = v114;
  v170 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v113 + 56))(v113, &v122);
  v116 = v123;
  if (v123)
  {
    v117 = (unint64_t *)&v123->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v170;
  v170 = 0;
  if (v119)
    (*((void (**)(void **))*v119 + 1))(v119);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v156;
  if (v156)
  {
    v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v156);
    return MEMORY[0x1E0C023A0](v121, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07709D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;

  v56 = *(_QWORD *)(v54 - 112);
  *(_QWORD *)(v54 - 112) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *v53;
  *v53 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a42, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a53, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ListLength::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  MIL::MILContext *v10;
  const MIL::IRValueType *v11;
  const MIL::IRDimension *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  MIL::MILContext *v16;
  const MIL::IRValueType *v17;
  const MIL::IRDimension *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  MIL::MILContext *v22;
  const MIL::IRValueType *v23;
  const MIL::IRDimension *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  MIL::MILContext *v28;
  const MIL::IRValueType *v29;
  const MIL::IRDimension *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void ***v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  unint64_t v40;
  void **v41;
  void **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void **v50;
  void **v51;
  char *v52;
  __int128 v53;
  void **v54;
  uint64_t v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  void *v81[2];
  uint64_t v82;
  __n128 v83;
  void *__p;
  void *v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  void *v90;
  void *v91;
  _QWORD *v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  _QWORD *v97;
  _BYTE v98[24];
  _BYTE *v99;
  _BYTE v100[24];
  _BYTE *v101;
  void *Scalar;
  void *v103;
  _QWORD *v104;
  void **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v95 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v91 = v9 + 2;
  v92 = v9 + 2;
  *v9 = v7;
  v9[1] = v8;
  v90 = v9;
  v10 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v90);
  v11 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v105 = (void **)MIL::IRListValueType::MakeWithDimension(a1, v10, v11, v12);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v88 = v15 + 2;
  v89 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v87 = v15;
  v16 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v87);
  v17 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v106 = MIL::IRListValueType::MakeWithDimension(a1, v16, v17, v18);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v85 = v21 + 2;
  v86 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  __p = v21;
  v22 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v23 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v107 = MIL::IRListValueType::MakeWithDimension(a1, v22, v23, v24);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v103 = v27 + 2;
  v104 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  Scalar = v27;
  v28 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  v29 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v108 = MIL::IRListValueType::MakeWithDimension(a1, v28, v29, v30);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v105, 4, &v93);
  MIL::IRParameter::Make(&v93, &v94);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "ls", &v94);
  v31 = v94;
  v94 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v93.n128_u64[1];
  if (v93.n128_u64[1])
  {
    v33 = (unint64_t *)(v93.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (Scalar)
  {
    v103 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v85 = __p;
    operator delete(__p);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  v87 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  v105 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v87, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v105, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)v87, 1uLL);
  v36 = (void ***)v87;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v83);
  MIL::IRParameter::Make(&v83, (uint64_t *)&__p);
  v37 = __p;
  v90 = __p;
  if (__p)
  {
    v38 = (_QWORD *)operator new();
    v39 = __p;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v91 = v38;
  __p = 0;
  v40 = (unint64_t)v36[2];
  v41 = v36[1];
  if ((unint64_t)v41 >= v40)
  {
    v43 = ((char *)v41 - (char *)*v36) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - (_QWORD)*v36;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v109 = v36 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v46);
    v49 = &v47[16 * v43];
    *(_QWORD *)v49 = v37;
    *((_QWORD *)v49 + 1) = v38;
    v90 = 0;
    v91 = 0;
    v51 = *v36;
    v50 = v36[1];
    if (v50 == *v36)
    {
      v54 = v36[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 2;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *v50 = 0;
        v50[1] = 0;
      }
      while (v50 != v51);
      v54 = *v36;
      v50 = v36[1];
    }
    v42 = (void **)(v49 + 16);
    *v36 = (void **)v52;
    v105 = v54;
    v106 = (uint64_t)v54;
    v36[1] = (void **)(v49 + 16);
    v107 = (uint64_t)v50;
    v55 = (uint64_t)v36[2];
    v36[2] = (void **)&v47[16 * v48];
    v108 = v55;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v105);
  }
  else
  {
    *v41 = v37;
    v41[1] = v38;
    v42 = v41 + 2;
    v90 = 0;
    v91 = 0;
  }
  v36[1] = v42;
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v83.n128_u64[1];
  if (v83.n128_u64[1])
  {
    v58 = (unint64_t *)(v83.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  *(_OWORD *)v81 = *(_OWORD *)a2;
  v82 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = v95;
  *(_QWORD *)&v80 = v95;
  if (v95)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v80 + 1) = v61;
  v95 = 0;
  *(_QWORD *)&v79 = v87;
  if (v87)
  {
    v62 = (_QWORD *)operator new();
    v63 = v87;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v79 + 1) = v62;
  v87 = 0;
  v101 = 0;
  v99 = 0;
  MIL::IROperator::Make((__int128 *)v81, &v80, &v79, (uint64_t)v100, (uint64_t)v98, a3);
  v64 = v99;
  if (v99 == v98)
  {
    v65 = 4;
    v64 = v98;
  }
  else
  {
    if (!v99)
      goto LABEL_51;
    v65 = 5;
  }
  (*(void (**)(_QWORD *))(*v64 + 8 * v65))(v64);
LABEL_51:
  v66 = v101;
  if (v101 == v100)
  {
    v67 = 4;
    v66 = v100;
    goto LABEL_55;
  }
  if (v101)
  {
    v67 = 5;
LABEL_55:
    (*(void (**)(_QWORD *))(*v66 + 8 * v67))(v66);
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v82) < 0)
    operator delete(v81[0]);
  v74 = *a3;
  v96[0] = &off_1EA99FBD8;
  v96[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListLength;
  v97 = v96;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v74 + 200))(v74, v96);
  v75 = v97;
  if (v97 == v96)
  {
    v76 = 4;
    v75 = v96;
  }
  else
  {
    if (!v97)
      goto LABEL_73;
    v76 = 5;
  }
  (*(void (**)(_QWORD *))(*v75 + 8 * v76))(v75);
LABEL_73:
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v87, 0);
  result = v95;
  if (v95)
  {
    v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v95);
    return MEMORY[0x1E0C023A0](v78, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07714C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a25, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a34, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ListRead::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  MIL::MILContext *v10;
  const MIL::IRValueType *v11;
  const MIL::IRDimension *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  MIL::MILContext *v16;
  const MIL::IRValueType *v17;
  const MIL::IRDimension *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  MIL::MILContext *v22;
  const MIL::IRValueType *v23;
  const MIL::IRDimension *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  MIL::MILContext *v28;
  const MIL::IRValueType *v29;
  const MIL::IRDimension *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  void **v67;
  char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  char **v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void **v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void **v103;
  uint64_t result;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  void *v108[2];
  char v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  __int128 v113;
  void *v114[2];
  uint64_t v115;
  void *v116;
  void *v117;
  _QWORD *v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char **v123;
  __n128 v124;
  void *__p;
  void *v126;
  _QWORD *v127;
  void *v128;
  void *v129;
  _QWORD *v130;
  void *v131;
  void *v132;
  _QWORD *v133;
  __n128 v134;
  _QWORD *v135;
  _QWORD v136[3];
  _QWORD *v137;
  _BYTE v138[24];
  _BYTE *v139;
  _BYTE v140[24];
  _BYTE *v141;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char **v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v135 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v144 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v10 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v146 = (void **)MIL::IRListValueType::MakeWithDimension(a1, v10, v11, v12);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v132 = v15 + 2;
  v133 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v131 = v15;
  v16 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v131);
  v17 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v147 = MIL::IRListValueType::MakeWithDimension(a1, v16, v17, v18);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v129 = v21 + 2;
  v130 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v128 = v21;
  v22 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v128);
  v23 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v148 = MIL::IRListValueType::MakeWithDimension(a1, v22, v23, v24);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v126 = v27 + 2;
  v127 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v28 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  v29 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v149 = MIL::IRListValueType::MakeWithDimension(a1, v28, v29, v30);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v146, 4, &v134);
  MIL::IRParameter::Make(&v134, (uint64_t *)&v116);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "ls", (uint64_t *)&v116);
  v31 = v116;
  v116 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v33 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v126 = __p;
    operator delete(__p);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v35 = v135;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v124);
  MIL::IRParameter::Make(&v124, (uint64_t *)&v146);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v35, "index", (uint64_t *)&v146);
  v36 = v146;
  v146 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = (std::__shared_weak_count *)v124.n128_u64[1];
  if (v124.n128_u64[1])
  {
    v38 = (unint64_t *)(v124.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v123 = 0;
  v40 = operator new();
  *(_QWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  v146 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v123, (void **)v40);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v146, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v123, 1uLL);
  v41 = v123;
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = operator new(8uLL);
  v131 = v43;
  *v43 = v42;
  v132 = v43 + 1;
  v133 = v43 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v131);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(8uLL);
  v128 = v45;
  *v45 = v44;
  v129 = v45 + 1;
  v130 = v45 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v128);
  v46 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v47 = operator new(8uLL);
  __p = v47;
  *v47 = v46;
  v126 = v47 + 1;
  v127 = v47 + 1;
  v144 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v116 = v49;
  *v49 = v48;
  v117 = v49 + 1;
  v118 = v49 + 1;
  v145 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v116);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v119);
  MIL::IRParameter::Make(&v119, &v120);
  v50 = v120;
  v121 = v120;
  if (v120)
  {
    v51 = (_QWORD *)operator new();
    v52 = v120;
    *v51 = &unk_1EA99F888;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  v122 = v51;
  v120 = 0;
  v53 = v41[2];
  v54 = v41[1];
  if (v54 >= v53)
  {
    v56 = (v54 - *v41) >> 4;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v58 = v53 - *v41;
    if (v58 >> 3 > v57)
      v57 = v58 >> 3;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
      v59 = 0xFFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    v150 = v41 + 2;
    v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v41 + 2), v59);
    v62 = (uint64_t *)&v60[16 * v56];
    *v62 = v50;
    v62[1] = (uint64_t)v51;
    v121 = 0;
    v122 = 0;
    v64 = *v41;
    v63 = v41[1];
    if (v63 == *v41)
    {
      v67 = (void **)v41[1];
      v65 = &v60[16 * v56];
    }
    else
    {
      v65 = &v60[16 * v56];
      do
      {
        v66 = *((_OWORD *)v63 - 1);
        v63 -= 16;
        *((_OWORD *)v65 - 1) = v66;
        v65 -= 16;
        *(_QWORD *)v63 = 0;
        *((_QWORD *)v63 + 1) = 0;
      }
      while (v63 != v64);
      v67 = (void **)*v41;
      v63 = v41[1];
    }
    v55 = (char *)(v62 + 2);
    *v41 = v65;
    v146 = v67;
    v147 = (uint64_t)v67;
    v41[1] = (char *)(v62 + 2);
    v148 = (uint64_t)v63;
    v68 = v41[2];
    v41[2] = &v60[16 * v61];
    v149 = (uint64_t)v68;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v146);
  }
  else
  {
    *(_QWORD *)v54 = v50;
    *((_QWORD *)v54 + 1) = v51;
    v55 = v54 + 16;
    v121 = 0;
    v122 = 0;
  }
  v41[1] = v55;
  v69 = v120;
  v120 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v119.n128_u64[1];
  if (v119.n128_u64[1])
  {
    v71 = (unint64_t *)(v119.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (__p)
  {
    v126 = __p;
    operator delete(__p);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  *(_OWORD *)v114 = *(_OWORD *)a2;
  v115 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v73 = (uint64_t)v135;
  *(_QWORD *)&v113 = v135;
  if (v135)
  {
    v74 = (_QWORD *)operator new();
    *v74 = &unk_1EA99F8E8;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v73;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v113 + 1) = v74;
  v135 = 0;
  *(_QWORD *)&v112 = v123;
  if (v123)
  {
    v75 = (_QWORD *)operator new();
    v76 = v123;
    *v75 = &unk_1EA99F948;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v76;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v112 + 1) = v75;
  v123 = 0;
  v141 = 0;
  v139 = 0;
  MIL::IROperator::Make((__int128 *)v114, &v113, &v112, (uint64_t)v140, (uint64_t)v138, a3);
  v77 = v139;
  if (v139 == v138)
  {
    v78 = 4;
    v77 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_66;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_66:
  v79 = v141;
  if (v141 == v140)
  {
    v80 = 4;
    v79 = v140;
    goto LABEL_70;
  }
  if (v141)
  {
    v80 = 5;
LABEL_70:
    (*(void (**)(void))(*v79 + 8 * v80))();
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (SHIBYTE(v115) < 0)
    operator delete(v114[0]);
  v87 = *a3;
  v136[0] = &off_1EA99FBD8;
  v136[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceListRead;
  v137 = v136;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 200))(v87, v136);
  v88 = v137;
  if (v137 == v136)
  {
    v89 = 4;
    v88 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_88;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_88:
  MIL::Validation::TensorDTypeConstraints::Make(&v146);
  v90 = v146;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v110 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v111 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v108, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v110, v108);
  if (v109 < 0)
    operator delete(v108[0]);
  v93 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v95 = __ldaxr(p_shared_owners);
    while (__stlxr(v95 - 1, p_shared_owners));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  v97 = *a3;
  v106 = v146;
  if (v146)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v146;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v107 = v98;
  v146 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v97 + 56))(v97, &v106);
  v100 = v107;
  if (v107)
  {
    v101 = (unint64_t *)&v107->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v146;
  v146 = 0;
  if (v103)
    (*((void (**)(void **))*v103 + 1))(v103);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v123, 0);
  result = (uint64_t)v135;
  if (v135)
  {
    v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v135);
    return MEMORY[0x1E0C023A0](v105, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E077213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void **a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;

  v55 = *(_QWORD *)(v53 - 112);
  *(_QWORD *)(v53 - 112) = 0;
  if (v55)
    (*(void (**)(void))(*(_QWORD *)v55 + 8))();
  v56 = *v52;
  *v52 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a38, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v53 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ListScatter::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  MIL::MILContext *v10;
  const MIL::IRValueType *v11;
  const MIL::IRDimension *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  MIL::MILContext *v16;
  const MIL::IRValueType *v17;
  const MIL::IRDimension *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  MIL::MILContext *v22;
  const MIL::IRValueType *v23;
  const MIL::IRDimension *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  MIL::MILContext *v28;
  const MIL::IRValueType *v29;
  const MIL::IRDimension *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void **v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count_vtbl *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char **v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  MIL::MILContext *v64;
  const MIL::IRValueType *v65;
  const MIL::IRDimension *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  MIL::MILContext *v70;
  const MIL::IRValueType *v71;
  const MIL::IRDimension *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  MIL::MILContext *v76;
  const MIL::IRValueType *v77;
  const MIL::IRDimension *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  MIL::MILContext *v82;
  const MIL::IRValueType *v83;
  const MIL::IRDimension *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  void **v102;
  char *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  char **v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void **v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void **v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void **v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void **v160;
  uint64_t result;
  uint64_t v162;
  void **v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171[2];
  char v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  void *v181[2];
  char v182;
  std::__shared_weak_count_vtbl *v183;
  std::__shared_weak_count *v184;
  __int128 v185;
  __int128 v186;
  void *v187[2];
  uint64_t v188;
  void *v189;
  void *v190;
  _QWORD *v191;
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  char **v196;
  __n128 v197;
  __n128 v198;
  void *__p;
  void *v200;
  _QWORD *v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  __n128 v205;
  _QWORD *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _BYTE v209[24];
  _BYTE *v210;
  _BYTE v211[24];
  _BYTE *v212;
  std::__shared_weak_count_vtbl *v213;
  uint64_t p_on_zero_shared;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  void **v220;
  void **v221;
  uint64_t v222;
  uint64_t v223;
  char **v224;
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v206 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v215 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v213 = v9;
  v10 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v213);
  v11 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v220 = (void **)MIL::IRListValueType::MakeWithDimension(a1, v10, v11, v12);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v218 = v15 + 2;
  v219 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v217 = v15;
  v16 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  v17 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v221 = (void **)MIL::IRListValueType::MakeWithDimension(a1, v16, v17, v18);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v203 = v21 + 2;
  v204 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v202 = v21;
  v22 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v202);
  v23 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v222 = MIL::IRListValueType::MakeWithDimension(a1, v22, v23, v24);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v200 = v27 + 2;
  v201 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v28 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  v29 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v223 = MIL::IRListValueType::MakeWithDimension(a1, v28, v29, v30);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 4, &v205);
  MIL::IRParameter::Make(&v205, (uint64_t *)&v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "ls", (uint64_t *)&v189);
  v31 = v189;
  v189 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v33 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v200 = __p;
    operator delete(__p);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v213)
  {
    p_on_zero_shared = (uint64_t)v213;
    operator delete(v213);
  }
  v35 = v206;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (void **)operator new(8uLL);
  v220 = v37;
  *v37 = (void *)v36;
  v221 = v37 + 1;
  v222 = (uint64_t)(v37 + 1);
  v217 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v220);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v217, 1, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&v213);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v35, "indices", (uint64_t *)&v213);
  v38 = v213;
  v213 = 0;
  if (v38)
    (*((void (**)(std::__shared_weak_count_vtbl *))v38->~__shared_weak_count + 1))(v38);
  v39 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v40 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  v42 = v206;
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v45->__on_zero_shared;
  v215 = (uint64_t)&v45->__on_zero_shared;
  v45->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v43;
  v45->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v44;
  v213 = v45;
  v220 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v213);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(0x10uLL);
  v218 = v48 + 2;
  v219 = v48 + 2;
  *v48 = v46;
  v48[1] = v47;
  v217 = v48;
  v221 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(0x10uLL);
  v203 = v51 + 2;
  v204 = v51 + 2;
  *v51 = v49;
  v51[1] = v50;
  v202 = v51;
  v222 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v202);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(0x10uLL);
  v200 = v54 + 2;
  v201 = v54 + 2;
  *v54 = v52;
  v54[1] = v53;
  __p = v54;
  v223 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 4, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&v189);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v42, "value", (uint64_t *)&v189);
  v55 = v189;
  v189 = 0;
  if (v55)
    (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v57 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (__p)
  {
    v200 = __p;
    operator delete(__p);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v213)
  {
    p_on_zero_shared = (uint64_t)v213;
    operator delete(v213);
  }
  v196 = 0;
  v59 = operator new();
  *(_QWORD *)v59 = 0;
  *(_QWORD *)(v59 + 8) = 0;
  *(_QWORD *)(v59 + 16) = 0;
  v220 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, (void **)v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v220, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v196, 1uLL);
  v60 = v196;
  v61 = MIL::IRUnknownDimension::Make(a1, 0);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = operator new(0x10uLL);
  v218 = v63 + 2;
  v219 = v63 + 2;
  *v63 = v61;
  v63[1] = v62;
  v217 = v63;
  v64 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v217);
  v65 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v213 = (std::__shared_weak_count_vtbl *)MIL::IRListValueType::MakeWithDimension(a1, v64, v65, v66);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = operator new(0x10uLL);
  v203 = v69 + 2;
  v204 = v69 + 2;
  *v69 = v67;
  v69[1] = v68;
  v202 = v69;
  v70 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v202);
  v71 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  p_on_zero_shared = MIL::IRListValueType::MakeWithDimension(a1, v70, v71, v72);
  v73 = MIL::IRUnknownDimension::Make(a1, 0);
  v74 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v75 = operator new(0x10uLL);
  v200 = v75 + 2;
  v201 = v75 + 2;
  *v75 = v73;
  v75[1] = v74;
  __p = v75;
  v76 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v77 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v215 = MIL::IRListValueType::MakeWithDimension(a1, v76, v77, v78);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v81 = operator new(0x10uLL);
  v190 = v81 + 2;
  v191 = v81 + 2;
  *v81 = v79;
  v81[1] = v80;
  v189 = v81;
  v82 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v189);
  v83 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v216 = MIL::IRListValueType::MakeWithDimension(a1, v82, v83, v84);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v213, 4, &v192);
  MIL::IRParameter::Make(&v192, &v193);
  v85 = v193;
  v194 = v193;
  if (v193)
  {
    v86 = (_QWORD *)operator new();
    v87 = v193;
    *v86 = &unk_1EA99F888;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v87;
  }
  else
  {
    v86 = 0;
  }
  v195 = v86;
  v193 = 0;
  v88 = v60[2];
  v89 = v60[1];
  if (v89 >= v88)
  {
    v91 = (v89 - *v60) >> 4;
    v92 = v91 + 1;
    if ((unint64_t)(v91 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v93 = v88 - *v60;
    if (v93 >> 3 > v92)
      v92 = v93 >> 3;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
      v94 = 0xFFFFFFFFFFFFFFFLL;
    else
      v94 = v92;
    v224 = v60 + 2;
    v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v60 + 2), v94);
    v97 = (uint64_t *)&v95[16 * v91];
    *v97 = v85;
    v97[1] = (uint64_t)v86;
    v194 = 0;
    v195 = 0;
    v99 = *v60;
    v98 = v60[1];
    if (v98 == *v60)
    {
      v102 = (void **)v60[1];
      v100 = &v95[16 * v91];
    }
    else
    {
      v100 = &v95[16 * v91];
      do
      {
        v101 = *((_OWORD *)v98 - 1);
        v98 -= 16;
        *((_OWORD *)v100 - 1) = v101;
        v100 -= 16;
        *(_QWORD *)v98 = 0;
        *((_QWORD *)v98 + 1) = 0;
      }
      while (v98 != v99);
      v102 = (void **)*v60;
      v98 = v60[1];
    }
    v90 = (char *)(v97 + 2);
    *v60 = v100;
    v220 = v102;
    v221 = v102;
    v60[1] = (char *)(v97 + 2);
    v222 = (uint64_t)v98;
    v103 = v60[2];
    v60[2] = &v95[16 * v96];
    v223 = (uint64_t)v103;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v220);
  }
  else
  {
    *(_QWORD *)v89 = v85;
    *((_QWORD *)v89 + 1) = v86;
    v90 = v89 + 16;
    v194 = 0;
    v195 = 0;
  }
  v60[1] = v90;
  v104 = v193;
  v193 = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = (std::__shared_weak_count *)v192.n128_u64[1];
  if (v192.n128_u64[1])
  {
    v106 = (unint64_t *)(v192.n128_u64[1] + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (__p)
  {
    v200 = __p;
    operator delete(__p);
  }
  if (v202)
  {
    v203 = v202;
    operator delete(v202);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  *(_OWORD *)v187 = *(_OWORD *)a2;
  v188 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v108 = (uint64_t)v206;
  *(_QWORD *)&v186 = v206;
  if (v206)
  {
    v109 = (_QWORD *)operator new();
    *v109 = &unk_1EA99F8E8;
    v109[1] = 0;
    v109[2] = 0;
    v109[3] = v108;
  }
  else
  {
    v109 = 0;
  }
  *((_QWORD *)&v186 + 1) = v109;
  v206 = 0;
  *(_QWORD *)&v185 = v196;
  if (v196)
  {
    v110 = (_QWORD *)operator new();
    v111 = v196;
    *v110 = &unk_1EA99F948;
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = v111;
  }
  else
  {
    v110 = 0;
  }
  *((_QWORD *)&v185 + 1) = v110;
  v196 = 0;
  v212 = 0;
  v210 = 0;
  MIL::IROperator::Make((__int128 *)v187, &v186, &v185, (uint64_t)v211, (uint64_t)v209, a3);
  v112 = v210;
  if (v210 == v209)
  {
    v113 = 4;
    v112 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_83;
    v113 = 5;
  }
  (*(void (**)(void))(*v112 + 8 * v113))();
LABEL_83:
  v114 = v212;
  if (v212 == v211)
  {
    v115 = 4;
    v114 = v211;
    goto LABEL_87;
  }
  if (v212)
  {
    v115 = 5;
LABEL_87:
    (*(void (**)(void))(*v114 + 8 * v115))();
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (SHIBYTE(v188) < 0)
    operator delete(v187[0]);
  v122 = *a3;
  v123 = std::string::basic_string[abi:ne180100]<0>(&v220, "ls");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v123, (uint64_t)v207);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v122 + 200))(v122, v207);
  v124 = v208;
  if (v208 == v207)
  {
    v125 = 4;
    v124 = v207;
  }
  else
  {
    if (!v208)
      goto LABEL_105;
    v125 = 5;
  }
  (*(void (**)(void))(*v124 + 8 * v125))();
LABEL_105:
  if (SHIBYTE(v222) < 0)
    operator delete(v220);
  MIL::Validation::TensorDTypeConstraints::Make(&v220);
  v126 = v220;
  std::string::basic_string[abi:ne180100]<0>(v181, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v181, 0, (uint64_t *)&v213);
  v183 = v213;
  if (v213)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v213;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v184 = v127;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v126 + 3))(v126, &v183, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v129 = v184;
  if (v184)
  {
    p_shared_owners = (unint64_t *)&v184->__shared_owners_;
    do
      v131 = __ldaxr(p_shared_owners);
    while (__stlxr(v131 - 1, p_shared_owners));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v213;
  v213 = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  if (v182 < 0)
    operator delete(v181[0]);
  v133 = *a3;
  v177 = v220;
  if (v220)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = v220;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = (std::__shared_weak_count_vtbl *)v135;
  }
  else
  {
    v134 = 0;
  }
  v178 = v134;
  v220 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v133 + 56))(v133, &v177);
  v136 = v178;
  if (v178)
  {
    v137 = (unint64_t *)&v178->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = v220;
  v220 = 0;
  if (v139)
    (*((void (**)(void **))*v139 + 1))(v139);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v220);
  v140 = v220;
  std::string::basic_string[abi:ne180100]<0>(v173, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&v213);
  v175 = v213;
  if (v213)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v213;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v176 = v141;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v171, "K");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v140 + 3))(v140, &v175, 0, v171);
  if (v172 < 0)
    operator delete(v171[0]);
  v143 = v176;
  if (v176)
  {
    v144 = (unint64_t *)&v176->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v213;
  v213 = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v174 < 0)
    operator delete(v173[0]);
  v147 = v220;
  std::string::basic_string[abi:ne180100]<0>(v167, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v213);
  v169 = v213;
  if (v213)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v213;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v170 = v148;
  v213 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v147 + 3))(v147, &v169, 0, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v150 = v170;
  if (v170)
  {
    v151 = (unint64_t *)&v170->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v213;
  v213 = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  if (v168 < 0)
    operator delete(v167[0]);
  v154 = *a3;
  v163 = v220;
  if (v220)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = v220;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
  }
  else
  {
    v155 = 0;
  }
  v164 = v155;
  v220 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v154 + 56))(v154, &v163);
  v157 = v164;
  if (v164)
  {
    v158 = (unint64_t *)&v164->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = v220;
  v220 = 0;
  if (v160)
    (*((void (**)(void **))*v160 + 1))(v160);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v196, 0);
  result = (uint64_t)v206;
  if (v206)
  {
    v162 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v206);
    return MEMORY[0x1E0C023A0](v162, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07734D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;

  v68 = *(_QWORD *)(v66 - 112);
  *(_QWORD *)(v66 - 112) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *v65;
  *v65 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::ListWrite::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  MIL::MILContext *v10;
  const MIL::IRValueType *v11;
  const MIL::IRDimension *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  MIL::MILContext *v16;
  const MIL::IRValueType *v17;
  const MIL::IRDimension *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  MIL::MILContext *v22;
  const MIL::IRValueType *v23;
  const MIL::IRDimension *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  MIL::MILContext *v28;
  const MIL::IRValueType *v29;
  const MIL::IRDimension *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  MIL::MILContext *v62;
  const MIL::IRValueType *v63;
  const MIL::IRDimension *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  MIL::MILContext *v68;
  const MIL::IRValueType *v69;
  const MIL::IRDimension *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  MIL::MILContext *v74;
  const MIL::IRValueType *v75;
  const MIL::IRDimension *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  MIL::MILContext *v80;
  const MIL::IRValueType *v81;
  const MIL::IRDimension *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  void **v100;
  char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char **v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  void **v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void **v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void **v137;
  void **v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count_vtbl *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void **v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void **v151;
  uint64_t result;
  uint64_t v153;
  void **v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  void **v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  __int128 v170;
  __int128 v171;
  void *v172[2];
  uint64_t v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  char **v181;
  __n128 v182;
  __n128 v183;
  void *__p;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  _QWORD *v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  __n128 v193;
  _QWORD *v194;
  _BYTE v195[24];
  _BYTE *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v203;
  uint64_t v204;
  void **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char **v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v194 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v203 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v10 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v205 = (void **)MIL::IRListValueType::MakeWithDimension(a1, v10, v11, v12);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v191 = v15 + 2;
  v192 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  v190 = v15;
  v16 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v190);
  v17 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v206 = MIL::IRListValueType::MakeWithDimension(a1, v16, v17, v18);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(0x10uLL);
  v188 = v21 + 2;
  v189 = v21 + 2;
  *v21 = v19;
  v21[1] = v20;
  v187 = v21;
  v22 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v187);
  v23 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v207 = MIL::IRListValueType::MakeWithDimension(a1, v22, v23, v24);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x10uLL);
  v185 = v27 + 2;
  v186 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v28 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  v29 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v208 = MIL::IRListValueType::MakeWithDimension(a1, v28, v29, v30);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 4, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&v174);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "ls", (uint64_t *)&v174);
  v31 = v174;
  v174 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v33 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v35 = v194;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v205);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v35, "index", (uint64_t *)&v205);
  v36 = v205;
  v205 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v38 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v194;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v43 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v43->__on_zero_shared;
  v203 = (uint64_t)&v43->__on_zero_shared;
  v43->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v43->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  Scalar = v43;
  v205 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(0x10uLL);
  v191 = v46 + 2;
  v192 = v46 + 2;
  *v46 = v44;
  v46[1] = v45;
  v190 = v46;
  v206 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v190);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(0x10uLL);
  v188 = v49 + 2;
  v189 = v49 + 2;
  *v49 = v47;
  v49[1] = v48;
  v187 = v49;
  v207 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v187);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(0x10uLL);
  v185 = v52 + 2;
  v186 = v52 + 2;
  *v52 = v50;
  v52[1] = v51;
  __p = v52;
  v208 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 4, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&v174);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v40, "value", (uint64_t *)&v174);
  v53 = v174;
  v174 = 0;
  if (v53)
    (*(void (**)(void *))(*(_QWORD *)v53 + 8))(v53);
  v54 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v55 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v181 = 0;
  v57 = operator new();
  *(_QWORD *)v57 = 0;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)(v57 + 16) = 0;
  v205 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, (void **)v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v205, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v181, 1uLL);
  v58 = v181;
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(0x10uLL);
  v191 = v61 + 2;
  v192 = v61 + 2;
  *v61 = v59;
  v61[1] = v60;
  v190 = v61;
  v62 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v190);
  v63 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRListValueType::MakeWithDimension(a1, v62, v63, v64);
  v65 = MIL::IRUnknownDimension::Make(a1, 0);
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(0x10uLL);
  v188 = v67 + 2;
  v189 = v67 + 2;
  *v67 = v65;
  v67[1] = v66;
  v187 = v67;
  v68 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v187);
  v69 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  p_on_zero_shared = MIL::IRListValueType::MakeWithDimension(a1, v68, v69, v70);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v73 = operator new(0x10uLL);
  v185 = v73 + 2;
  v186 = v73 + 2;
  *v73 = v71;
  v73[1] = v72;
  __p = v73;
  v74 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v75 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v203 = MIL::IRListValueType::MakeWithDimension(a1, v74, v75, v76);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v79 = operator new(0x10uLL);
  v175 = v79 + 2;
  v176 = v79 + 2;
  *v79 = v77;
  v79[1] = v78;
  v174 = v79;
  v80 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v174);
  v81 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v204 = MIL::IRListValueType::MakeWithDimension(a1, v80, v81, v82);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v177);
  MIL::IRParameter::Make(&v177, &v178);
  v83 = v178;
  v179 = v178;
  if (v178)
  {
    v84 = (_QWORD *)operator new();
    v85 = v178;
    *v84 = &unk_1EA99F888;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  v180 = v84;
  v178 = 0;
  v86 = v58[2];
  v87 = v58[1];
  if (v87 >= v86)
  {
    v89 = (v87 - *v58) >> 4;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v91 = v86 - *v58;
    if (v91 >> 3 > v90)
      v90 = v91 >> 3;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
      v92 = 0xFFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    v209 = v58 + 2;
    v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v58 + 2), v92);
    v95 = (uint64_t *)&v93[16 * v89];
    *v95 = v83;
    v95[1] = (uint64_t)v84;
    v179 = 0;
    v180 = 0;
    v97 = *v58;
    v96 = v58[1];
    if (v96 == *v58)
    {
      v100 = (void **)v58[1];
      v98 = &v93[16 * v89];
    }
    else
    {
      v98 = &v93[16 * v89];
      do
      {
        v99 = *((_OWORD *)v96 - 1);
        v96 -= 16;
        *((_OWORD *)v98 - 1) = v99;
        v98 -= 16;
        *(_QWORD *)v96 = 0;
        *((_QWORD *)v96 + 1) = 0;
      }
      while (v96 != v97);
      v100 = (void **)*v58;
      v96 = v58[1];
    }
    v88 = (char *)(v95 + 2);
    *v58 = v98;
    v205 = v100;
    v206 = (uint64_t)v100;
    v58[1] = (char *)(v95 + 2);
    v207 = (uint64_t)v96;
    v101 = v58[2];
    v58[2] = &v93[16 * v94];
    v208 = (uint64_t)v101;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v205);
  }
  else
  {
    *(_QWORD *)v87 = v83;
    *((_QWORD *)v87 + 1) = v84;
    v88 = v87 + 16;
    v179 = 0;
    v180 = 0;
  }
  v58[1] = v88;
  v102 = v178;
  v178 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v104 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (__p)
  {
    v185 = __p;
    operator delete(__p);
  }
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  *(_OWORD *)v172 = *(_OWORD *)a2;
  v173 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v106 = (uint64_t)v194;
  *(_QWORD *)&v171 = v194;
  if (v194)
  {
    v107 = (_QWORD *)operator new();
    *v107 = &unk_1EA99F8E8;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v106;
  }
  else
  {
    v107 = 0;
  }
  *((_QWORD *)&v171 + 1) = v107;
  v194 = 0;
  *(_QWORD *)&v170 = v181;
  if (v181)
  {
    v108 = (_QWORD *)operator new();
    v109 = v181;
    *v108 = &unk_1EA99F948;
    v108[1] = 0;
    v108[2] = 0;
    v108[3] = v109;
  }
  else
  {
    v108 = 0;
  }
  *((_QWORD *)&v170 + 1) = v108;
  v181 = 0;
  v200 = 0;
  v198 = 0;
  MIL::IROperator::Make((__int128 *)v172, &v171, &v170, (uint64_t)v199, (uint64_t)v197, a3);
  v110 = v198;
  if (v198 == v197)
  {
    v111 = 4;
    v110 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_81;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_81:
  v112 = v200;
  if (v200 == v199)
  {
    v113 = 4;
    v112 = v199;
    goto LABEL_85;
  }
  if (v200)
  {
    v113 = 5;
LABEL_85:
    (*(void (**)(void))(*v112 + 8 * v113))();
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v115 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  if (SHIBYTE(v173) < 0)
    operator delete(v172[0]);
  v120 = *a3;
  v121 = std::string::basic_string[abi:ne180100]<0>(&v205, "ls");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v121, (uint64_t)v195);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v120 + 200))(v120, v195);
  v122 = v196;
  if (v196 == v195)
  {
    v123 = 4;
    v122 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_103;
    v123 = 5;
  }
  (*(void (**)(void))(*v122 + 8 * v123))();
LABEL_103:
  if (SHIBYTE(v207) < 0)
    operator delete(v205);
  MIL::Validation::TensorDTypeConstraints::Make(&v205);
  v124 = v205;
  std::string::basic_string[abi:ne180100]<0>(v166, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 0, (uint64_t *)&Scalar);
  v168 = Scalar;
  if (Scalar)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = Scalar;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v169 = v125;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v124 + 3))(v124, &v168, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v127 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v129 = __ldaxr(p_shared_owners);
    while (__stlxr(v129 - 1, p_shared_owners));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = Scalar;
  Scalar = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  if (v167 < 0)
    operator delete(v166[0]);
  v131 = *a3;
  v162 = v205;
  if (v205)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v205;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v163 = v132;
  v205 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v131 + 56))(v131, &v162);
  v134 = v163;
  if (v163)
  {
    v135 = (unint64_t *)&v163->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v205;
  v205 = 0;
  if (v137)
    (*((void (**)(void **))*v137 + 1))(v137);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v205);
  v138 = v205;
  std::string::basic_string[abi:ne180100]<0>(v158, "value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = Scalar;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v161 = v139;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v138 + 3))(v138, &v160, 0, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v141 = v161;
  if (v161)
  {
    v142 = (unint64_t *)&v161->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = Scalar;
  Scalar = 0;
  if (v144)
    (*((void (**)(std::__shared_weak_count_vtbl *))v144->~__shared_weak_count + 1))(v144);
  if (v159 < 0)
    operator delete(v158[0]);
  v145 = *a3;
  v154 = v205;
  if (v205)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = v205;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = (std::__shared_weak_count_vtbl *)v147;
  }
  else
  {
    v146 = 0;
  }
  v155 = v146;
  v205 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v145 + 56))(v145, &v154);
  v148 = v155;
  if (v155)
  {
    v149 = (unint64_t *)&v155->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v205;
  v205 = 0;
  if (v151)
    (*((void (**)(void **))*v151 + 1))(v151);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v181, 0);
  result = (uint64_t)v194;
  if (v194)
  {
    v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    return MEMORY[0x1E0C023A0](v153, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07748B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  v47 = *(_QWORD *)(v45 - 112);
  *(_QWORD *)(v45 - 112) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *v44;
  *v44 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a44, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v45 - 248), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::MakeList::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void **v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  MIL::MILContext *v34;
  const MIL::IRValueType *v35;
  const MIL::IRDimension *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  MIL::MILContext *v40;
  const MIL::IRValueType *v41;
  const MIL::IRDimension *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  MIL::MILContext *v46;
  const MIL::IRValueType *v47;
  const MIL::IRDimension *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  MIL::MILContext *v52;
  const MIL::IRValueType *v53;
  const MIL::IRDimension *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void **v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void **v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void **v108;
  void *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t i;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  uint64_t result;
  uint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *__p;
  void *v145;
  _QWORD *v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  void *v150;
  void *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  char **v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  _QWORD *v165;
  void **Scalar;
  uint64_t v167;
  char *v168;
  _QWORD v169[3];
  uint64_t v170[3];
  _QWORD v171[3];
  uint64_t v172[5];
  _QWORD v173[3];
  _QWORD *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v165 = (_QWORD *)v6;
  v172[0] = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "init_length", (uint64_t *)&Scalar);
  v7 = Scalar;
  Scalar = 0;
  if (v7)
    (*((void (**)(void **))*v7 + 1))(v7);
  v8 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v9 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v165;
  v172[0] = MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 1, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&Scalar);
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v11, "dynamic_length", (uint64_t *)&Scalar);
  v13 = Scalar;
  Scalar = 0;
  if (v13)
    (*((void (**)(void **))*v13 + 1))(v13);
  v14 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v15 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v12 + 5) + 32))(*((_QWORD *)v12 + 5), 1);
  v17 = v165;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 3);
  v167 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v162);
  MIL::IRParameter::Make(&v162, v172);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v17, "elem_shape", v172);
  v19 = v172[0];
  v172[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v21 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 64))(*((_QWORD *)v18 + 5), 1);
  v23 = v165;
  v172[0] = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 1, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&Scalar);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "dtype", (uint64_t *)&Scalar);
  v25 = Scalar;
  Scalar = 0;
  if (v25)
    (*((void (**)(void **))*v25 + 1))(v25);
  v26 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v27 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v160 = 0;
  v29 = operator new();
  *(_QWORD *)v29 = 0;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, (void **)v29);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v160, 1uLL);
  v30 = v160;
  v31 = MIL::IRUnknownDimension::Make(a1, 0);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(0x10uLL);
  v154 = v33 + 2;
  v155 = v33 + 2;
  *v33 = v31;
  v33[1] = v32;
  v153 = v33;
  v34 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v153);
  v35 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v172[0] = MIL::IRListValueType::MakeWithDimension(a1, v34, v35, v36);
  v37 = MIL::IRUnknownDimension::Make(a1, 0);
  v38 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(0x10uLL);
  v151 = v39 + 2;
  v152 = v39 + 2;
  *v39 = v37;
  v39[1] = v38;
  v150 = v39;
  v40 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v150);
  v41 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v172[1] = MIL::IRListValueType::MakeWithDimension(a1, v40, v41, v42);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v45 = operator new(0x10uLL);
  v148 = v45 + 2;
  v149 = v45 + 2;
  *v45 = v43;
  v45[1] = v44;
  v147 = v45;
  v46 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v147);
  v47 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v172[2] = MIL::IRListValueType::MakeWithDimension(a1, v46, v47, v48);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(0x10uLL);
  v145 = v51 + 2;
  v146 = v51 + 2;
  *v51 = v49;
  v51[1] = v50;
  __p = v51;
  v52 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  v53 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v172[3] = MIL::IRListValueType::MakeWithDimension(a1, v52, v53, v54);
  MIL::IRParameter::MakeTypeSet((uint64_t)v172, 4, &v156);
  MIL::IRParameter::Make(&v156, &v157);
  v55 = v157;
  v158 = v157;
  if (v157)
  {
    v56 = (_QWORD *)operator new();
    v57 = v157;
    *v56 = &unk_1EA99F888;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v159 = v56;
  v157 = 0;
  v58 = v30[2];
  v59 = v30[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v30) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v30;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v169[1] = v30 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v30 + 2), v64);
    v67 = (uint64_t *)&v65[16 * v61];
    *v67 = v55;
    v67[1] = (uint64_t)v56;
    v158 = 0;
    v159 = 0;
    v69 = *v30;
    v68 = v30[1];
    if (v68 == *v30)
    {
      v72 = (void **)v30[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v30;
      v68 = v30[1];
    }
    v60 = (char *)(v67 + 2);
    *v30 = v70;
    Scalar = v72;
    v167 = (uint64_t)v72;
    v30[1] = (char *)(v67 + 2);
    v168 = v68;
    v73 = v30[2];
    v30[2] = &v65[16 * v66];
    v169[0] = v73;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v158 = 0;
    v159 = 0;
  }
  v30[1] = v60;
  v74 = v157;
  v157 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v76 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (__p)
  {
    v145 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v165;
  *(_QWORD *)&v141 = v165;
  if (v165)
  {
    v79 = (_QWORD *)operator new();
    *v79 = &unk_1EA99F8E8;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v78;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v141 + 1) = v79;
  v165 = 0;
  *(_QWORD *)&v140 = v160;
  if (v160)
  {
    v80 = (_QWORD *)operator new();
    v81 = v160;
    *v80 = &unk_1EA99F948;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v140 + 1) = v80;
  v160 = 0;
  v177[0] = &unk_1EA99FAC8;
  v177[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateMakeList;
  v178 = v177;
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v177, (uint64_t)v175, a3);
  v82 = v176;
  if (v176 == v175)
  {
    v83 = 4;
    v82 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_72;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_72:
  v84 = v178;
  if (v178 == v177)
  {
    v85 = 4;
    v84 = v177;
    goto LABEL_76;
  }
  if (v178)
  {
    v85 = 5;
LABEL_76:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v92 = *a3;
  v173[0] = &off_1EA99FBD8;
  v173[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMakeList;
  v174 = v173;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v92 + 200))(v92, v173);
  v93 = v174;
  if (v174 == v173)
  {
    v94 = 4;
    v93 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_94;
    v94 = 5;
  }
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_94:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v95 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v136, "elem_shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, v172);
  v138 = v172[0];
  if (v172[0])
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = v172[0];
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
  }
  else
  {
    v96 = 0;
  }
  v139 = v96;
  v172[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "ElemShapeT");
  (*((void (**)(void **, uint64_t *, void **))*v95 + 3))(v95, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v98 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v100 = __ldaxr(p_shared_owners);
    while (__stlxr(v100 - 1, p_shared_owners));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v172[0];
  v172[0] = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  if (v137 < 0)
    operator delete(v136[0]);
  v102 = *a3;
  v132 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = (std::__shared_weak_count_vtbl *)v104;
  }
  else
  {
    v103 = 0;
  }
  v133 = v103;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v102 + 56))(v102, &v132);
  v105 = v133;
  if (v133)
  {
    v106 = (unint64_t *)&v133->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*((void (**)(void **))*v108 + 1))(v108);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v153);
  v109 = v153;
  std::string::basic_string[abi:ne180100]<0>(v128, "dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&v150);
  v130 = v150;
  if (v150)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)v150;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v131 = v110;
  v150 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "BOOL");
  std::string::basic_string[abi:ne180100]<0>(v169, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int32");
  std::unordered_set<std::string>::unordered_set((uint64_t)v172, (unsigned __int8 *)&Scalar, 4);
  (*(void (**)(void *, void **, uint64_t *, uint64_t))(*(_QWORD *)v109 + 24))(v109, &v130, v172, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v172);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v171[i + 2]) < 0)
      operator delete((void *)v171[i]);
  }
  v113 = v131;
  if (v131)
  {
    v114 = (unint64_t *)&v131->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v150;
  v150 = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  if (v129 < 0)
    operator delete(v128[0]);
  v117 = *a3;
  v126 = v153;
  if (v153)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = (std::__shared_weak_count_vtbl *)v153;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v127 = v118;
  v153 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v117 + 56))(v117, &v126);
  v120 = v127;
  if (v127)
  {
    v121 = (unint64_t *)&v127->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v153;
  v153 = 0;
  if (v123)
    (*(void (**)(void *))(*(_QWORD *)v123 + 8))(v123);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  result = (uint64_t)v165;
  if (v165)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0775A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;

  if (a43)
    (*(void (**)(uint64_t))(*(_QWORD *)a43 + 8))(a43);
  v62 = *v60;
  *v60 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[3],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[3],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0775E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[3],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[3],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0775F28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[3],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E0775F74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(_QWORD *a1, char *a2, uint64_t *a3)
{
  unsigned __int8 *inserted;
  char v5;
  uint64_t v7[3];

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a1, v7[0]);
  if ((v5 & 1) != 0)
    v7[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_1E0775FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t result;

  v8 = a1 + 16;
  v9 = operator new(0x38uLL);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_1E0776084(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(_QWORD *a1, char *a2, uint64_t *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_1E07760D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateCond(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  MIL *v20;
  const MIL::IRValueType *v21;
  const MIL::IRValueType *v22;
  const MIL::IRValueType *v23;
  MIL::Validation *v24;
  const MIL::IRValueType *v25;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  void **v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  size_t v44;
  void **v45;
  char *v46;
  unint64_t *v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  std::string::size_type size;
  std::string *v59;
  std::string::value_type *v60;
  std::string::size_type v61;
  int v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  size_t v69;
  std::string *v70;
  char *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  std::string::size_type v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  std::string v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  std::string v87;
  _DWORD v88[2];
  std::string v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::string v92;
  std::string v93;
  void *__p;
  char v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100[2];
  char v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *v104[2];
  char v105;
  uint64_t v106;
  std::__shared_weak_count *v107;

  v5 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, const MIL::IROperation *))(*(_QWORD *)this + 208))(this, a2);
  if (*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5 != 32)
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v27 = (std::__shared_weak_count *)LocationPtr[1];
    v106 = *LocationPtr;
    v107 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    v30 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
    v31 = (char *)v30;
    if (*(char *)(v30 + 23) >= 0)
      v32 = *(unsigned __int8 *)(v30 + 23);
    else
      v32 = *(_QWORD *)(v30 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)v104, v32 + 29);
    if (v105 >= 0)
      v33 = v104;
    else
      v33 = (void **)v104[0];
    if (v32)
    {
      if (v31[23] >= 0)
        v34 = v31;
      else
        v34 = *(char **)v31;
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, " must have exactly two blocks");
    MIL::ValidationResult::ValidationResult(a3, &v106, 308, v104);
    if (v105 < 0)
      operator delete(v104[0]);
    v35 = v107;
    if (!v107)
      return;
    v36 = (unint64_t *)&v107->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
LABEL_55:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    return;
  }
  v6 = *(uint64_t ***)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this
                                                                                                  + 208))(this);
  if (v6[1] == *v6
    || (v7 = **v6,
        v8 = *(_QWORD **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 208))(this),
        v8[1] - *v8 <= 0x10uLL))
  {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  v9 = *(_QWORD *)(*v8 + 16);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  if (v10[1] - *v10 != v11[1] - *v11)
  {
    v38 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v39 = (std::__shared_weak_count *)v38[1];
    v102 = *v38;
    v103 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
    v43 = (char *)v42;
    if (*(char *)(v42 + 23) >= 0)
      v44 = *(unsigned __int8 *)(v42 + 23);
    else
      v44 = *(_QWORD *)(v42 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)v100, v44 + 53);
    if (v101 >= 0)
      v45 = v100;
    else
      v45 = (void **)v100[0];
    if (v44)
    {
      if (v43[23] >= 0)
        v46 = v43;
      else
        v46 = *(char **)v43;
      memmove(v45, v46, v44);
    }
    strcpy((char *)v45 + v44, " must return same number of values from both branches");
    MIL::ValidationResult::ValidationResult(a3, &v102, 102, v100);
    if (v101 < 0)
      operator delete(v100[0]);
    v35 = v103;
    if (!v103)
      return;
    v47 = (unint64_t *)&v103->__shared_owners_;
    do
      v37 = __ldaxr(v47);
    while (__stlxr(v37 - 1, v47));
    goto LABEL_55;
  }
  v12 = v11;
  (*(void (**)(uint64_t *__return_ptr, MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 200))(&v98, this);
  v13 = *v10;
  v14 = v10[1];
  if (v99 - v98 != v14 - *v10)
  {
    v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v49 = (std::__shared_weak_count *)v48[1];
    v96 = *v48;
    v97 = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
    std::operator+<char>();
    MIL::ValidationResult::ValidationResult(a3, &v96, 102, &__p);
    if (v95 < 0)
      operator delete(__p);
    v52 = v97;
    if (v97)
    {
      v53 = (unint64_t *)&v97->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    goto LABEL_127;
  }
  if (v14 == v13)
  {
LABEL_15:
    MIL::ValidationResult::ValidationResult(a3);
    goto LABEL_127;
  }
  v15 = 0;
  v16 = 0;
  v17 = v7 + 64;
  v18 = v9 + 64;
  while (1)
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v13 + v15, 1);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3) <= v16)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v20 = (MIL *)v19;
    v21 = (const MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, *v12 + v15, 1);
    if ((MIL::IsEqualOrStrongerType(v20, v21, v22) & 1) != 0)
    {
      v20 = v21;
      goto LABEL_12;
    }
    if ((MIL::IsEqualOrStrongerType(v21, v20, v23) & 1) == 0)
      break;
LABEL_12:
    if (0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 3) <= v16)
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    v24 = (MIL::Validation *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 8) + 16))((char *)this + 64, v98 + v15, 1);
    if (!MIL::Validation::TypeShapeAndDataTypeMatch(v24, v20, v25))
    {
      (*(void (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
      std::operator+<char>();
      v55 = std::string::append(&v92, " for output at index ");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v87, v16);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v87;
      else
        v57 = (std::string *)v87.__r_.__value_.__r.__words[0];
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      else
        size = v87.__r_.__value_.__l.__size_;
      v59 = std::string::append(&v93, (const std::string::value_type *)v57, size);
      v60 = (std::string::value_type *)v59->__r_.__value_.__r.__words[0];
      v61 = v59->__r_.__value_.__l.__size_;
      v88[0] = v59->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v88 + 3) = *(_DWORD *)((char *)&v59->__r_.__value_.__r.__words[2] + 3);
      v62 = SHIBYTE(v59->__r_.__value_.__r.__words[2]);
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      v63 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v64 = (std::__shared_weak_count *)v63[1];
      v85 = *v63;
      v86 = v64;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      if (v62 < 0)
      {
        std::string::__init_copy_ctor_external(&v84, v60, v61);
      }
      else
      {
        v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        v84.__r_.__value_.__l.__size_ = v61;
        LODWORD(v84.__r_.__value_.__r.__words[2]) = v88[0];
        *(_DWORD *)((char *)&v84.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v88 + 3);
        *((_BYTE *)&v84.__r_.__value_.__s + 23) = v62;
      }
      MIL::ValidationResult::ValidationResult(a3, &v85, 103, &v84);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      v80 = v86;
      if (v86)
      {
        v81 = (unint64_t *)&v86->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        goto LABEL_123;
      }
      goto LABEL_125;
    }
    ++v16;
    v13 = *v10;
    v15 += 24;
    if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3))
      goto LABEL_15;
  }
  v67 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
  v68 = (char *)v67;
  if (*(char *)(v67 + 23) >= 0)
    v69 = *(unsigned __int8 *)(v67 + 23);
  else
    v69 = *(_QWORD *)(v67 + 8);
  std::string::basic_string[abi:ne180100]((uint64_t)&v93, v69 + 69);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v70 = &v93;
  else
    v70 = (std::string *)v93.__r_.__value_.__r.__words[0];
  if (v69)
  {
    if (v68[23] >= 0)
      v71 = v68;
    else
      v71 = *(char **)v68;
    memmove(v70, v71, v69);
  }
  strcpy((char *)v70 + v69, " must return compatible types from both branches for output at index ");
  std::to_string(&v92, v16);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v72 = &v92;
  else
    v72 = (std::string *)v92.__r_.__value_.__r.__words[0];
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v73 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  else
    v73 = v92.__r_.__value_.__l.__size_;
  v74 = std::string::append(&v93, (const std::string::value_type *)v72, v73);
  v60 = (std::string::value_type *)v74->__r_.__value_.__r.__words[0];
  v75 = v74->__r_.__value_.__l.__size_;
  LODWORD(v87.__r_.__value_.__l.__data_) = v74->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v87.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v74->__r_.__value_.__r.__words[2] + 3);
  v62 = SHIBYTE(v74->__r_.__value_.__r.__words[2]);
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v76 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v77 = (std::__shared_weak_count *)v76[1];
  v90 = *v76;
  v91 = v77;
  if (v77)
  {
    v78 = (unint64_t *)&v77->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  if (v62 < 0)
  {
    std::string::__init_copy_ctor_external(&v89, v60, v75);
  }
  else
  {
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    v89.__r_.__value_.__l.__size_ = v75;
    LODWORD(v89.__r_.__value_.__r.__words[2]) = v87.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v89.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v87.__r_.__value_.__r.__words + 3);
    *((_BYTE *)&v89.__r_.__value_.__s + 23) = v62;
  }
  MIL::ValidationResult::ValidationResult(a3, &v90, 103, &v89);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  v80 = v91;
  if (v91)
  {
    v83 = (unint64_t *)&v91->__shared_owners_;
    do
      v82 = __ldaxr(v83);
    while (__stlxr(v82 - 1, v83));
LABEL_123:
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
LABEL_125:
  if (v62 < 0)
    operator delete(v60);
LABEL_127:
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
}

void sub_1E0776944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  void *v51;
  int v52;
  uint64_t v53;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  if (v52 < 0)
    operator delete(v51);
  a39 = (void *)(v53 - 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Const::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  MIL::MILContext *v26;
  const MIL::IRValueType *v27;
  const MIL::IRDimension *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void *v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD *v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *__p[2];
  uint64_t v61;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[2];
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v61 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v71[0] = &unk_1EA99FAC8;
  v71[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateConst;
  v72 = v71;
  v69[0] = &off_1EA9A0B38;
  v70 = v69;
  MIL::IROperator::Make((__int128 *)__p, 0, 0, 1, 1, (uint64_t)&v58, (uint64_t)&v56, (uint64_t)v71, a3, (uint64_t)v69);
  v5 = v70;
  if (v70 == v69)
  {
    v6 = 4;
    v5 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v72;
  if (v72 == v71)
  {
    v8 = 4;
    v7 = v71;
    goto LABEL_10;
  }
  if (v72)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v59;
  if (v59)
  {
    v13 = (unint64_t *)&v59->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  v15 = *a3;
  v67[0] = &off_1EA9A0BC8;
  v68 = v67;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 152))(v15, v67);
  v16 = v68;
  if (v68 == v67)
  {
    v17 = 4;
    v16 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_28;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_28:
  v18 = *a3;
  v65[0] = &off_1EA9A0C58;
  v66 = v65;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 200))(v18, v65);
  v19 = v66;
  if (v66 == v65)
  {
    v20 = 4;
    v19 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_33;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_33:
  v21 = operator new();
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_DWORD *)(v21 + 32) = 1065353216;
  v55 = v21;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v50 = v23;
  *v23 = v22;
  v51 = v23 + 1;
  v52 = v23 + 1;
  v64[0] = MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v50);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v47 = v25;
  *v25 = v24;
  v48 = v25 + 1;
  v49 = v25 + 1;
  v26 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v47);
  v27 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v64[1] = MIL::IRListValueType::MakeWithDimension(a1, v26, v27, v28);
  MIL::IRParameter::MakeTypeSet((uint64_t)v64, 2, &v53);
  MIL::IRParameter::Make(&v53, &v54);
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v21, "val", &v54);
  v30 = v54;
  v54 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v53.n128_u64[1];
  if (v53.n128_u64[1])
  {
    v32 = (unint64_t *)(v53.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v29 + 5) + 32))(*((_QWORD *)v29 + 5), 1);
  v34 = *a3;
  v35 = v55;
  v45 = v55;
  if (v55)
  {
    v36 = (std::__shared_weak_count *)operator new();
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)v35;
  }
  else
  {
    v36 = 0;
  }
  v46 = v36;
  v55 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 184))(v34, &v45);
  v37 = v46;
  if (v46)
  {
    v38 = (unint64_t *)&v46->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *a3;
  v62[0] = &off_1EA9A0CD8;
  v63 = v62;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v40 + 216))(v40, v62);
  v41 = v63;
  if (v63 == v62)
  {
    v42 = 4;
    v41 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_57;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_57:
  result = v55;
  if (v55)
  {
    v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v55);
    return MEMORY[0x1E0C023A0](v44, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0776FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t *v38;
  uint64_t v40;

  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a22, 0);
  v40 = *v38;
  *v38 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateConst(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t Attribute;
  uint64_t v6;
  uint64_t v7;
  MIL *Type;
  const MIL::IRValueType *v9;
  const MIL::IRValueType *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31[2];
  char v32;

  std::string::basic_string[abi:ne180100]<0>(v31, "val");
  Attribute = MIL::IRObject::TryGetAttribute((uint64_t)this, (unsigned __int8 *)v31);
  v6 = Attribute;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    if (v6)
    {
LABEL_3:
      v7 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 176))(this);
      if (*(_QWORD *)(v7 + 8) == *(_QWORD *)v7)
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      Type = (MIL *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v7);
      v9 = (const MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      if ((MIL::IsEqualOrStrongerType(Type, v9, v10) & 1) != 0)
      {
        MIL::ValidationResult::ValidationResult(a2);
        return;
      }
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
      v19 = (std::__shared_weak_count *)LocationPtr[1];
      v25 = *LocationPtr;
      v26 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v23, "Attribute val has incompatible type with operation output");
      MIL::ValidationResult::ValidationResult(a2, &v25, 306, v23);
      if (v24 < 0)
        operator delete(v23[0]);
      v15 = v26;
      if (v26)
      {
        v22 = (unint64_t *)&v26->__shared_owners_;
        do
          v17 = __ldaxr(v22);
        while (__stlxr(v17 - 1, v22));
LABEL_24:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return;
      }
      return;
    }
  }
  else if (Attribute)
  {
    goto LABEL_3;
  }
  v11 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v12 = (std::__shared_weak_count *)v11[1];
  v29 = *v11;
  v30 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Attribute val is undefined for const");
  MIL::ValidationResult::ValidationResult(a2, &v29, 315, __p);
  if (v28 < 0)
    operator delete(__p[0]);
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    goto LABEL_24;
  }
}

void sub_1E0777344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateWhileLoop(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v5;
  BOOL IsParameterSet;
  BOOL v7;
  uint64_t v8;
  _QWORD **v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD **v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const MIL::IRValueType *ParameterType;
  uint64_t Name;
  uint64_t v22;
  MIL *v23;
  uint64_t v24;
  MIL *v25;
  const MIL::IRValueType *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  MIL::IRTensorValueType *v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t Type;
  uint64_t v43;
  MIL *v44;
  const MIL::IRValueType *v45;
  const MIL::IRValueType *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t OutputType;
  MIL::Validation *v50;
  const MIL::IRValueType *v51;
  const MIL::IRValueType *v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  size_t v59;
  void **v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  size_t v71;
  void **v72;
  char *v73;
  unint64_t *v74;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  size_t v81;
  void **v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  size_t v93;
  void **v94;
  char *v95;
  unint64_t *v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  std::string *v104;
  char *v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type v113;
  std::string *v114;
  __int128 v115;
  unint64_t *v116;
  uint64_t *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  size_t v123;
  std::string *v124;
  char *v125;
  std::string *v126;
  std::string::size_type size;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  std::string::size_type v133;
  std::string *v134;
  __int128 v135;
  unint64_t *v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  const void **v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  const void **v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  const void **v152;
  unint64_t v153;
  std::string *v154;
  std::string::size_type v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  __int128 v159;
  std::string *v160;
  std::string::size_type v161;
  std::string *v162;
  __int128 v163;
  std::string *v164;
  __int128 v165;
  _QWORD *v166;
  uint64_t *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  size_t v173;
  std::string *v174;
  char *v175;
  int v176;
  const std::string::value_type *v177;
  std::string::size_type v178;
  std::string *v179;
  __int128 v180;
  std::string *v181;
  __int128 v182;
  int v183;
  const std::string::value_type *v184;
  std::string::size_type v185;
  std::string *v186;
  __int128 v187;
  unint64_t *v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  const void **v193;
  std::string *v194;
  std::string::size_type v195;
  std::string *v196;
  __int128 v197;
  std::string *v198;
  __int128 v199;
  std::string *v200;
  std::string::size_type v201;
  std::string *v202;
  __int128 v203;
  _QWORD *v204;
  MIL::ValidationResult *v205;
  void *v206[2];
  std::string::size_type v207;
  _QWORD v208[2];
  std::string v209;
  std::string v210;
  void *v211[2];
  std::string::size_type v212;
  _QWORD v213[2];
  std::string v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  _QWORD v219[2];
  void *v220[2];
  char v221;
  _QWORD v222[2];
  void *v223[2];
  char v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  std::string::size_type v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  std::string v231;
  std::string v232;
  std::string v233;
  std::string v234;
  void *v235[2];
  std::string::size_type v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  std::string __p;
  void *v240[2];
  char v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  void ***v244;
  uint64_t v245;
  uint64_t v246;
  const void **v247;
  uint64_t v248;
  uint64_t v249;
  void *v250[2];
  char v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  const void *v254[2];
  uint64_t v255;
  void *v256[2];
  char v257;
  uint64_t v258;
  std::__shared_weak_count *v259;

  v5 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, const MIL::IROperation *))(*(_QWORD *)this + 208))(this, a2);
  if (*(_QWORD *)(*(_QWORD *)v5 + 8) - **(_QWORD **)v5 == 32)
  {
    std::string::basic_string[abi:ne180100]<0>(v254, "loop_vars");
    IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v254);
    v7 = IsParameterSet;
    if (SHIBYTE(v255) < 0)
    {
      operator delete((void *)v254[0]);
      if (v7)
      {
LABEL_4:
        v8 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 160))(this);
        std::string::basic_string[abi:ne180100]<0>(&v247, "loop_vars");
        v9 = (_QWORD **)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(v8, (const void **)&v247);
        v254[0] = 0;
        v254[1] = 0;
        v255 = 0;
        std::vector<std::shared_ptr<MIL::IRArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>((char *)v254, *v9, v9[1], ((char *)v9[1] - (char *)*v9) >> 4);
        if (SHIBYTE(v249) < 0)
          operator delete(v247);
        std::string::basic_string[abi:ne180100]<0>(&v247, "loop_vars");
        v10 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *, const void ***))(*(_QWORD *)this + 152))(this, &v247);
        if (SHIBYTE(v249) < 0)
          operator delete(v247);
        v11 = *(_QWORD *)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 208))(this);
        if (*(_QWORD *)(v11 + 8) == *(_QWORD *)v11)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v12 = **(_QWORD ***)v11;
        v13 = *(_QWORD **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 208))(this);
        if (v13[1] - *v13 <= 0x10uLL)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v14 = *(_QWORD **)(*v13 + 16);
        v15 = (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v12 + 40))(v12);
        v247 = 0;
        v248 = 0;
        v249 = 0;
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((char *)&v247, *v15, v15[1], ((char *)v15[1] - (char *)*v15) >> 4);
        v16 = (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v14 + 40))(v14);
        v244 = 0;
        v245 = 0;
        v246 = 0;
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((char *)&v244, *v16, v16[1], ((char *)v16[1] - (char *)*v16) >> 4);
        v17 = v10;
        if (v10 != (v248 - (uint64_t)v247) >> 4 || v10 != (v245 - (uint64_t)v244) >> 4)
        {
          LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          v76 = (std::__shared_weak_count *)LocationPtr[1];
          v242 = *LocationPtr;
          v243 = v76;
          if (v76)
          {
            p_shared_owners = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldxr(p_shared_owners);
            while (__stxr(v78 + 1, p_shared_owners));
          }
          v79 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
          v80 = (char *)v79;
          if (*(char *)(v79 + 23) >= 0)
            v81 = *(unsigned __int8 *)(v79 + 23);
          else
            v81 = *(_QWORD *)(v79 + 8);
          v82 = v240;
          std::string::basic_string[abi:ne180100]((uint64_t)v240, v81 + 96);
          if (v241 < 0)
            v82 = (void **)v240[0];
          if (v81)
          {
            if (v80[23] >= 0)
              v83 = v80;
            else
              v83 = *(char **)v80;
            memmove(v82, v83, v81);
          }
          strcpy((char *)v82 + v81, " cond and body blocks must declare the same number of inputs as num arguments bound to loop_vars");
          MIL::ValidationResult::ValidationResult(a3, &v242, 100, v240);
          if (v241 < 0)
            operator delete(v240[0]);
          v84 = v243;
          if (!v243)
            goto LABEL_220;
          v85 = (unint64_t *)&v243->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          goto LABEL_104;
        }
        v204 = v14;
        v205 = a3;
        if (v10)
        {
          v18 = 0;
          v19 = 0;
          while (1)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "loop_vars");
            ParameterType = (const MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v19 >= (v245 - (uint64_t)v244) >> 4)
              std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
            Name = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v244[v18]);
            v22 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v204[8] + 16))(v204 + 8, Name, 1);
            if (v19 >= (v248 - (uint64_t)v247) >> 4)
              std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
            v23 = (MIL *)v22;
            v24 = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v247[v18]);
            v25 = (MIL *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12[8] + 16))(v12 + 8, v24, 1);
            if ((MIL::IsEqualOrStrongerType(v25, ParameterType, v26) & 1) == 0)
              break;
            if (v23 != v25)
            {
              v117 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
              v118 = (std::__shared_weak_count *)v117[1];
              v229 = *v117;
              v230 = v118;
              if (v118)
              {
                v119 = (unint64_t *)&v118->__shared_owners_;
                do
                  v120 = __ldxr(v119);
                while (__stxr(v120 + 1, v119));
              }
              v121 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this
                                                                                                  + 56))(this);
              v122 = (char *)v121;
              if (*(char *)(v121 + 23) >= 0)
                v123 = *(unsigned __int8 *)(v121 + 23);
              else
                v123 = *(_QWORD *)(v121 + 8);
              v124 = &v233;
              std::string::basic_string[abi:ne180100]((uint64_t)&v233, v123 + 27);
              if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v124 = (std::string *)v233.__r_.__value_.__r.__words[0];
              if (v123)
              {
                if (v122[23] >= 0)
                  v125 = v122;
                else
                  v125 = *(char **)v122;
                memmove(v124, v125, v123);
              }
              strcpy((char *)v124 + v123, " body block input at index ");
              std::to_string(&v232, v19);
              if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v126 = &v232;
              else
                v126 = (std::string *)v232.__r_.__value_.__r.__words[0];
              if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v232.__r_.__value_.__r.__words[2]);
              else
                size = v232.__r_.__value_.__l.__size_;
              v128 = std::string::append(&v233, (const std::string::value_type *)v126, size);
              v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
              v234.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v129;
              v128->__r_.__value_.__l.__size_ = 0;
              v128->__r_.__value_.__r.__words[2] = 0;
              v128->__r_.__value_.__r.__words[0] = 0;
              v130 = std::string::append(&v234, " must be the same type as its cond block input at index ");
              v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v131;
              v130->__r_.__value_.__l.__size_ = 0;
              v130->__r_.__value_.__r.__words[2] = 0;
              v130->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v231, v19);
              if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v132 = &v231;
              else
                v132 = (std::string *)v231.__r_.__value_.__r.__words[0];
              if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v133 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
              else
                v133 = v231.__r_.__value_.__l.__size_;
              v134 = std::string::append(&__p, (const std::string::value_type *)v132, v133);
              v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
              v228 = v134->__r_.__value_.__r.__words[2];
              *(_OWORD *)v227 = v135;
              v134->__r_.__value_.__l.__size_ = 0;
              v134->__r_.__value_.__r.__words[2] = 0;
              v134->__r_.__value_.__r.__words[0] = 0;
              MIL::ValidationResult::ValidationResult(v205, &v229, 304, v227);
              if (SHIBYTE(v228) < 0)
                operator delete(v227[0]);
              if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v231.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v234.__r_.__value_.__l.__data_);
              if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v232.__r_.__value_.__l.__data_);
              if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v233.__r_.__value_.__l.__data_);
              v84 = v230;
              if (v230)
              {
                v136 = (unint64_t *)&v230->__shared_owners_;
                do
                  v86 = __ldaxr(v136);
                while (__stlxr(v86 - 1, v136));
                goto LABEL_104;
              }
              goto LABEL_220;
            }
            ++v19;
            v18 += 2;
            a3 = v205;
            if (v17 == v19)
              goto LABEL_21;
          }
          v97 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          v98 = (std::__shared_weak_count *)v97[1];
          v237 = *v97;
          v238 = v98;
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldxr(v99);
            while (__stxr(v100 + 1, v99));
          }
          v101 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
          v102 = (char *)v101;
          if (*(char *)(v101 + 23) >= 0)
            v103 = *(unsigned __int8 *)(v101 + 23);
          else
            v103 = *(_QWORD *)(v101 + 8);
          v104 = &v233;
          std::string::basic_string[abi:ne180100]((uint64_t)&v233, v103 + 28);
          if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v104 = (std::string *)v233.__r_.__value_.__r.__words[0];
          if (v103)
          {
            if (v102[23] >= 0)
              v105 = v102;
            else
              v105 = *(char **)v102;
            memmove(v104, v105, v103);
          }
          strcpy((char *)v104 + v103, " loop_var argument at index ");
          std::to_string(&v232, v19);
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v106 = &v232;
          else
            v106 = (std::string *)v232.__r_.__value_.__r.__words[0];
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
          else
            v107 = v232.__r_.__value_.__l.__size_;
          v108 = std::string::append(&v233, (const std::string::value_type *)v106, v107);
          v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
          v234.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v109;
          v108->__r_.__value_.__l.__size_ = 0;
          v108->__r_.__value_.__r.__words[2] = 0;
          v108->__r_.__value_.__r.__words[0] = 0;
          v110 = std::string::append(&v234, " must be a compatible with its cond block input at index ");
          v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v231, v19);
          if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = &v231;
          else
            v112 = (std::string *)v231.__r_.__value_.__r.__words[0];
          if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v113 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
          else
            v113 = v231.__r_.__value_.__l.__size_;
          v114 = std::string::append(&__p, (const std::string::value_type *)v112, v113);
          v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v236 = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)v235 = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(v205, &v237, 304, v235);
          if (SHIBYTE(v236) < 0)
            operator delete(v235[0]);
          if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v231.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v234.__r_.__value_.__l.__data_);
          if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v232.__r_.__value_.__l.__data_);
          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v233.__r_.__value_.__l.__data_);
          v84 = v238;
          if (v238)
          {
            v116 = (unint64_t *)&v238->__shared_owners_;
            do
              v86 = __ldaxr(v116);
            while (__stlxr(v86 - 1, v116));
            goto LABEL_104;
          }
          goto LABEL_220;
        }
LABEL_21:
        v27 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 88))(v12);
        if (v27[1] - *v27 != 24)
        {
          v87 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
          v88 = (std::__shared_weak_count *)v87[1];
          v225 = *v87;
          v226 = v88;
          if (v88)
          {
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
          }
          v91 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
          v92 = (char *)v91;
          if (*(char *)(v91 + 23) >= 0)
            v93 = *(unsigned __int8 *)(v91 + 23);
          else
            v93 = *(_QWORD *)(v91 + 8);
          v94 = v223;
          std::string::basic_string[abi:ne180100]((uint64_t)v223, v93 + 43);
          if (v224 < 0)
            v94 = (void **)v223[0];
          if (v93)
          {
            if (v92[23] >= 0)
              v95 = v92;
            else
              v95 = *(char **)v92;
            memmove(v94, v95, v93);
          }
          strcpy((char *)v94 + v93, " cond block body should output only 1 value");
          MIL::ValidationResult::ValidationResult(a3, &v225, 300, v223);
          if (v224 < 0)
            operator delete(v223[0]);
          v84 = v226;
          if (!v226)
            goto LABEL_220;
          v96 = (unint64_t *)&v226->__shared_owners_;
          do
            v86 = __ldaxr(v96);
          while (__stlxr(v86 - 1, v96));
          goto LABEL_104;
        }
        v28 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 88))(v12);
        if (v28[1] == *v28)
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        v29 = (*(uint64_t (**)(_QWORD *))(v12[8] + 16))(v12 + 8);
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
        v31 = (MIL::IRTensorValueType *)v30;
        if (!v30
          || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 88))(v30) != 2
          && (*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v31 + 88))(v31) != 5)
        {
          goto LABEL_207;
        }
        if (!MIL::IRTensorValueType::IsScalar(v31))
        {
          v32 = (_QWORD **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v31 + 96))(v31);
          if (v32[1] == *v32)
            goto LABEL_331;
          if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)**v32 + 16))(**v32))
          {
            v33 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(_QWORD *)v31 + 96))(v31);
            if (*(_QWORD *)(v33 + 8) != *(_QWORD *)v33)
            {
              v34 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v33);
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34) == 1)
                goto LABEL_31;
LABEL_207:
              v137 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
              v138 = v137[1];
              v222[0] = *v137;
              v222[1] = v138;
              if (v138)
              {
                v139 = (unint64_t *)(v138 + 8);
                do
                  v140 = __ldxr(v139);
                while (__stxr(v140 + 1, v139));
              }
              v141 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" cond block body should output a BOOLean or fp32 tensor of shape scalar or [1]", v141, v220);
              MIL::ValidationResult::ValidationResult(a3, v222, 304, v220);
              if (v221 < 0)
                operator delete(v220[0]);
              v142 = v222;
              goto LABEL_219;
            }
LABEL_331:
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          }
        }
LABEL_31:
        v35 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v204 + 88))(v204);
        v36 = v35[1];
        if (0xAAAAAAAAAAAAAAABLL * ((v36 - *v35) >> 3) == v17)
        {
          if (v36 != *v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            while (1)
            {
              if (v39 >= (v245 - (uint64_t)v244) >> 4)
                std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
              v40 = MIL::IRNamedValueType::GetName((MIL::IRNamedValueType *)v244[v38]);
              if (v39 >= (v245 - (uint64_t)v244) >> 4)
                std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
              v41 = v40;
              Type = MIL::IRNamedValueType::GetType((MIL::IRNamedValueType *)v244[v38]);
              v43 = *v35;
              if (0xAAAAAAAAAAAAAAABLL * ((v35[1] - *v35) >> 3) <= v39)
                std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
              v44 = (MIL *)Type;
              v45 = (const MIL::IRValueType *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v204[8] + 16))(v204 + 8, v43 + v37, 1);
              if ((MIL::IsEqualOrStrongerType(v44, v45, v46) & 1) == 0)
                break;
              ++v39;
              v38 += 2;
              v37 += 24;
              if (v39 >= 0xAAAAAAAAAAAAAAABLL * ((v35[1] - *v35) >> 3))
                goto LABEL_39;
            }
            v167 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
            v168 = (std::__shared_weak_count *)v167[1];
            v215 = *v167;
            v216 = v168;
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldxr(v169);
              while (__stxr(v170 + 1, v169));
            }
            v171 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
            v172 = (char *)v171;
            if (*(char *)(v171 + 23) >= 0)
              v173 = *(unsigned __int8 *)(v171 + 23);
            else
              v173 = *(_QWORD *)(v171 + 8);
            v174 = &v233;
            std::string::basic_string[abi:ne180100]((uint64_t)&v233, v173 + 23);
            if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v174 = (std::string *)v233.__r_.__value_.__r.__words[0];
            if (v173)
            {
              if (v172[23] >= 0)
                v175 = v172;
              else
                v175 = *(char **)v172;
              memmove(v174, v175, v173);
            }
            strcpy((char *)v174 + v173, " body block input type ");
            v176 = *(char *)(v41 + 23);
            if (v176 >= 0)
              v177 = (const std::string::value_type *)v41;
            else
              v177 = *(const std::string::value_type **)v41;
            if (v176 >= 0)
              v178 = *(unsigned __int8 *)(v41 + 23);
            else
              v178 = *(_QWORD *)(v41 + 8);
            v179 = std::string::append(&v233, v177, v178);
            v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
            v234.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v180;
            v179->__r_.__value_.__l.__size_ = 0;
            v179->__r_.__value_.__r.__words[2] = 0;
            v179->__r_.__value_.__r.__words[0] = 0;
            v181 = std::string::append(&v234, " is not compatible with the type of the corresponding body block output ");
            v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v182;
            v181->__r_.__value_.__l.__size_ = 0;
            v181->__r_.__value_.__r.__words[2] = 0;
            v181->__r_.__value_.__r.__words[0] = 0;
            v183 = *(char *)(v43 + v37 + 23);
            if (v183 >= 0)
              v184 = (const std::string::value_type *)(v43 + v37);
            else
              v184 = *(const std::string::value_type **)(v43 + v37);
            if (v183 >= 0)
              v185 = *(unsigned __int8 *)(v43 + v37 + 23);
            else
              v185 = *(_QWORD *)(v43 + v37 + 8);
            v186 = std::string::append(&__p, v184, v185);
            if (SHIBYTE(v186->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v214, v186->__r_.__value_.__l.__data_, v186->__r_.__value_.__l.__size_);
            }
            else
            {
              v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
              v214.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v187;
            }
            MIL::ValidationResult::ValidationResult(v205, &v215, 103, &v214);
            if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v214.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v234.__r_.__value_.__l.__data_);
            if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v233.__r_.__value_.__l.__data_);
            v84 = v216;
            if (!v216)
              goto LABEL_220;
            v188 = (unint64_t *)&v216->__shared_owners_;
            do
              v86 = __ldaxr(v188);
            while (__stlxr(v86 - 1, v188));
LABEL_104:
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
            goto LABEL_220;
          }
LABEL_39:
          (*(void (**)(std::string *__return_ptr, MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 200))(&__p, this);
          if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == v35[1] - *v35)
          {
            if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
            {
LABEL_45:
              MIL::ValidationResult::ValidationResult(v205);
LABEL_321:
              v234.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
              goto LABEL_220;
            }
            v47 = 0;
            v48 = 0;
            while (1)
            {
              OutputType = MIL::IROperation::GetOutputType(this, v48);
              if (0xAAAAAAAAAAAAAAABLL * ((v35[1] - *v35) >> 3) <= v48)
                std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
              v50 = (MIL::Validation *)OutputType;
              v51 = (const MIL::IRValueType *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v204[8] + 16))(v204 + 8, *v35 + v47, 1);
              if (!MIL::Validation::TypeShapeAndDataTypeMatch(v50, v51, v52))
                break;
              ++v48;
              v47 += 24;
              if (v48 >= 0xAAAAAAAAAAAAAAABLL
                        * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3))
                goto LABEL_45;
            }
            v189 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
            v190 = v189[1];
            v208[0] = *v189;
            v208[1] = v190;
            if (v190)
            {
              v191 = (unint64_t *)(v190 + 8);
              do
                v192 = __ldxr(v191);
              while (__stxr(v192 + 1, v191));
            }
            v193 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" output at index ", v193, (void **)&v232.__r_.__value_.__l.__data_);
            std::to_string(&v231, v48);
            if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v194 = &v231;
            else
              v194 = (std::string *)v231.__r_.__value_.__r.__words[0];
            if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v195 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
            else
              v195 = v231.__r_.__value_.__l.__size_;
            v196 = std::string::append(&v232, (const std::string::value_type *)v194, v195);
            v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
            v233.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v197;
            v196->__r_.__value_.__l.__size_ = 0;
            v196->__r_.__value_.__r.__words[2] = 0;
            v196->__r_.__value_.__r.__words[0] = 0;
            v198 = std::string::append(&v233, " must be the same type as the body block output at index ");
            v199 = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
            v234.__r_.__value_.__r.__words[2] = v198->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v199;
            v198->__r_.__value_.__l.__size_ = 0;
            v198->__r_.__value_.__r.__words[2] = 0;
            v198->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v210, v48);
            if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v200 = &v210;
            else
              v200 = (std::string *)v210.__r_.__value_.__r.__words[0];
            if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v201 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
            else
              v201 = v210.__r_.__value_.__l.__size_;
            v202 = std::string::append(&v234, (const std::string::value_type *)v200, v201);
            v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
            v207 = v202->__r_.__value_.__r.__words[2];
            *(_OWORD *)v206 = v203;
            v202->__r_.__value_.__l.__size_ = 0;
            v202->__r_.__value_.__r.__words[2] = 0;
            v202->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(v205, v208, 103, v206);
            if (SHIBYTE(v207) < 0)
              operator delete(v206[0]);
            if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v210.__r_.__value_.__l.__data_);
            if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v234.__r_.__value_.__l.__data_);
            if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v233.__r_.__value_.__l.__data_);
            if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v231.__r_.__value_.__l.__data_);
            if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v232.__r_.__value_.__l.__data_);
            v166 = v208;
          }
          else
          {
            v148 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
            v149 = v148[1];
            v213[0] = *v148;
            v213[1] = v149;
            if (v149)
            {
              v150 = (unint64_t *)(v149 + 8);
              do
                v151 = __ldxr(v150);
              while (__stxr(v151 + 1, v150));
            }
            v152 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" returns ", v152, (void **)&v231.__r_.__value_.__l.__data_);
            v153 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 192))(this);
            std::to_string(&v210, v153);
            if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v154 = &v210;
            else
              v154 = (std::string *)v210.__r_.__value_.__r.__words[0];
            if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v155 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
            else
              v155 = v210.__r_.__value_.__l.__size_;
            v156 = std::string::append(&v231, (const std::string::value_type *)v154, v155);
            v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
            v232.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v157;
            v156->__r_.__value_.__l.__size_ = 0;
            v156->__r_.__value_.__r.__words[2] = 0;
            v156->__r_.__value_.__r.__words[0] = 0;
            v158 = std::string::append(&v232, " outputs, but its body block declares ");
            v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
            v233.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v159;
            v158->__r_.__value_.__l.__size_ = 0;
            v158->__r_.__value_.__r.__words[2] = 0;
            v158->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v209, 0xAAAAAAAAAAAAAAABLL * ((v35[1] - *v35) >> 3));
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v160 = &v209;
            else
              v160 = (std::string *)v209.__r_.__value_.__r.__words[0];
            if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v161 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
            else
              v161 = v209.__r_.__value_.__l.__size_;
            v162 = std::string::append(&v233, (const std::string::value_type *)v160, v161);
            v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
            v234.__r_.__value_.__r.__words[2] = v162->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v163;
            v162->__r_.__value_.__l.__size_ = 0;
            v162->__r_.__value_.__r.__words[2] = 0;
            v162->__r_.__value_.__r.__words[0] = 0;
            v164 = std::string::append(&v234, " outputs.");
            v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
            v212 = v164->__r_.__value_.__r.__words[2];
            *(_OWORD *)v211 = v165;
            v164->__r_.__value_.__l.__size_ = 0;
            v164->__r_.__value_.__r.__words[2] = 0;
            v164->__r_.__value_.__r.__words[0] = 0;
            MIL::ValidationResult::ValidationResult(v205, v213, 102, v211);
            if (SHIBYTE(v212) < 0)
              operator delete(v211[0]);
            if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v234.__r_.__value_.__l.__data_);
            if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v209.__r_.__value_.__l.__data_);
            if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v233.__r_.__value_.__l.__data_);
            if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v232.__r_.__value_.__l.__data_);
            if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v210.__r_.__value_.__l.__data_);
            if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v231.__r_.__value_.__l.__data_);
            v166 = v213;
          }
          std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v166);
          goto LABEL_321;
        }
        v143 = (_QWORD *)MIL::IRObject::GetLocationPtr(this);
        v144 = v143[1];
        v219[0] = *v143;
        v219[1] = v144;
        if (v144)
        {
          v145 = (unint64_t *)(v144 + 8);
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        v147 = (const void **)(*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" loop body's block output count must match the number of input variables bound to loop_vars. This count does not include any immediate constant bound to loop_vars", v147, v217);
        MIL::ValidationResult::ValidationResult(a3, v219, 100, v217);
        if (v218 < 0)
          operator delete(v217[0]);
        v142 = v219;
LABEL_219:
        std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)v142);
LABEL_220:
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v244 = (void ***)&v247;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
        v247 = v254;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v247);
        return;
      }
    }
    else if (IsParameterSet)
    {
      goto LABEL_4;
    }
    v65 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v66 = (std::__shared_weak_count *)v65[1];
    v252 = *v65;
    v253 = v66;
    if (v66)
    {
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
    }
    v69 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
    v70 = (char *)v69;
    if (*(char *)(v69 + 23) >= 0)
      v71 = *(unsigned __int8 *)(v69 + 23);
    else
      v71 = *(_QWORD *)(v69 + 8);
    v72 = v250;
    std::string::basic_string[abi:ne180100]((uint64_t)v250, v71 + 33);
    if (v251 < 0)
      v72 = (void **)v250[0];
    if (v71)
    {
      if (v70[23] >= 0)
        v73 = v70;
      else
        v73 = *(char **)v70;
      memmove(v72, v73, v71);
    }
    strcpy((char *)v72 + v71, " must define at least 1 loop_var.");
    MIL::ValidationResult::ValidationResult(a3, &v252, 317, v250);
    if (v251 < 0)
      operator delete(v250[0]);
    v62 = v253;
    if (v253)
    {
      v74 = (unint64_t *)&v253->__shared_owners_;
      do
        v64 = __ldaxr(v74);
      while (__stlxr(v64 - 1, v74));
      goto LABEL_84;
    }
  }
  else
  {
    v53 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v54 = (std::__shared_weak_count *)v53[1];
    v258 = *v53;
    v259 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v57 = (*(uint64_t (**)(MIL::Operators::Common::ios15::CustomValidators *))(*(_QWORD *)this + 56))(this);
    v58 = (char *)v57;
    if (*(char *)(v57 + 23) >= 0)
      v59 = *(unsigned __int8 *)(v57 + 23);
    else
      v59 = *(_QWORD *)(v57 + 8);
    v60 = v256;
    std::string::basic_string[abi:ne180100]((uint64_t)v256, v59 + 29);
    if (v257 < 0)
      v60 = (void **)v256[0];
    if (v59)
    {
      if (v58[23] >= 0)
        v61 = v58;
      else
        v61 = *(char **)v58;
      memmove(v60, v61, v59);
    }
    strcpy((char *)v60 + v59, " must have exactly two blocks");
    MIL::ValidationResult::ValidationResult(a3, &v258, 308, v256);
    if (v257 < 0)
      operator delete(v256[0]);
    v62 = v259;
    if (v259)
    {
      v63 = (unint64_t *)&v259->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
LABEL_84:
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
}

void sub_1E0778848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  uint64_t v75;

  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a75 < 0)
    operator delete(a74);
  if (a73 < 0)
    operator delete(a72);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a66);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  a74 = &STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a74);
  a74 = (void *)(v75 - 240);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a74);
  *(_QWORD *)(v75 - 240) = v75 - 216;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v75 - 240));
  *(_QWORD *)(v75 - 216) = v75 - 152;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v75 - 216));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCond(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X4>, void **a4@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (***v20)(MIL::MILContextImpl *__hidden);
  uint64_t *v21;
  uint64_t *v22;
  void (***v23)(MIL::MILContextImpl *__hidden);
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  void *exception;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  void *__p[3];
  _QWORD v57[3];
  __int128 v58;
  _QWORD v59[3];
  __int128 v60;
  _QWORD v61[3];
  __int128 v62;
  _QWORD v63[3];
  __int128 v64;

  v6 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 48)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v48 = a2[1];
    *(_QWORD *)&v64 = *a2;
    *((_QWORD *)&v64 + 1) = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    std::string::basic_string[abi:ne180100]<0>(v63, "Output types of two and only two blocks have to be set to infer cond output types.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v64, (uint64_t)v63, 315);
  }
  v8 = *v6;
  v7 = v6[1];
  v9 = v7 - *v6;
  if (v9 != v6[4] - v6[3])
  {
    v51 = __cxa_allocate_exception(0x48uLL);
    v52 = a2[1];
    *(_QWORD *)&v62 = *a2;
    *((_QWORD *)&v62 + 1) = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    std::string::basic_string[abi:ne180100]<0>(v61, "Two blocks outputs must have same number of outputs.");
    MIL::ValidationError::ValidationError((uint64_t)v51, &v62, (uint64_t)v61, 315);
  }
  *a4 = 0;
  a4[1] = 0;
  v12 = v9 >> 3;
  a4[2] = 0;
  std::vector<std::string const*>::reserve(a4, v9 >> 3);
  if (v7 != v8)
  {
    v13 = 0;
    if (v12 <= 1)
      v14 = 1;
    else
      v14 = v12;
    do
    {
      v15 = *(_QWORD *)(**a3 + 8 * v13);
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15)
        || (v16 = *(_QWORD *)((*a3)[3] + 8 * v13), !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16)))
      {
        v39 = __cxa_allocate_exception(0x48uLL);
        v40 = a2[1];
        *(_QWORD *)&v60 = *a2;
        *((_QWORD *)&v60 + 1) = v40;
        if (v40)
        {
          v41 = (unint64_t *)(v40 + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        std::string::basic_string[abi:ne180100]<0>(v59, "The case of non-tensor blocks outputs has not been implemented yet.");
        MIL::ValidationError::ValidationError((uint64_t)v39, &v60, (uint64_t)v59, 315);
      }
      v17 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)(**a3 + 8 * v13));
      v18 = MIL::IRValueType::AsTensorType(*(MIL::IRValueType **)((*a3)[3] + 8 * v13));
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17);
      if (v19 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 88))(v18))
      {
        v43 = __cxa_allocate_exception(0x48uLL);
        v44 = a2[1];
        *(_QWORD *)&v58 = *a2;
        *((_QWORD *)&v58 + 1) = v44;
        if (v44)
        {
          v45 = (unint64_t *)(v44 + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        std::string::basic_string[abi:ne180100]<0>(v57, "Input a and input b should have the same dtype.");
        MIL::ValidationError::ValidationError((uint64_t)v43, &v58, (uint64_t)v57, 315);
      }
      v20 = *a1;
      v21 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 96))(v17);
      v22 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 96))(v18);
      v23 = *a1;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 88))(v17);
      v25 = MIL::IRTensorValueType::MakeWithShape(v23, v24, (uint64_t)__p);
      v26 = v25;
      v28 = (uint64_t *)a4[1];
      v27 = (unint64_t)a4[2];
      if ((unint64_t)v28 >= v27)
      {
        v30 = ((char *)v28 - (_BYTE *)*a4) >> 3;
        if ((unint64_t)(v30 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v31 = v27 - (_QWORD)*a4;
        v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1))
          v32 = v30 + 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v32;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v33);
        else
          v34 = 0;
        v35 = (uint64_t *)&v34[8 * v30];
        *v35 = v26;
        v29 = (char *)(v35 + 1);
        v37 = (char *)*a4;
        v36 = (char *)a4[1];
        if (v36 != *a4)
        {
          do
          {
            v38 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *--v35 = v38;
          }
          while (v36 != v37);
          v36 = (char *)*a4;
        }
        *a4 = v35;
        a4[1] = v29;
        a4[2] = &v34[8 * v33];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *v28 = v25;
        v29 = (char *)(v28 + 1);
      }
      a4[1] = v29;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v13;
    }
    while (v13 != v14);
  }
}

void sub_1E0779174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a35 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
    if ((v37 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
    if (!v37)
LABEL_8:
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void MIL::Operators::Common::ios15::`anonymous namespace'::DeduceSameShape(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _BOOL4 HasVariadicUnknownDims;
  _BOOL4 v9;
  int v10;
  unint64_t VariadicUnknownDimIndex;
  unint64_t v12;
  const void *v13;
  const void *v14;
  unint64_t v15;
  const MIL::IRDimension *v16;
  unint64_t v17;
  _QWORD *v18;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v19;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  const void *v43;
  unint64_t v44;
  const MIL::IRDimension *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v63;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  const MIL::IRDimension *v83;
  uint64_t v84;
  unint64_t v85;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *CompatibleDim;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v87;
  unint64_t v88;
  MIL::Operators::Common::ios15::_anonymous_namespace_ **v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  MIL::Operators::Common::ios15::_anonymous_namespace_ **v96;
  char *v97;
  char *v98;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void *exception;
  _QWORD *v111;
  char *v112;
  void (***v113)(MIL::MILContextImpl *__hidden);
  unint64_t v114;
  _QWORD v115[3];
  __int128 v116;
  void *v117;
  _BYTE *v118;
  uint64_t v119;
  void *__p;
  _BYTE *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  unint64_t v125;
  char *v126;
  char *v127;
  _QWORD v128[2];

  HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)a2);
  v9 = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t)a3);
  v10 = !v9;
  if (!HasVariadicUnknownDims || (v10 & 1) != 0)
  {
    if (!HasVariadicUnknownDims || v9)
    {
      if (((HasVariadicUnknownDims | v10) & 1) != 0)
      {
        v82 = (a2[1] - *a2) >> 3;
        if (v82 != (a3[1] - *a3) >> 3)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          MIL::UnknownLocation::Make(&v126);
          *(_QWORD *)&v116 = v126;
          if (v126)
          {
            v111 = (_QWORD *)operator new();
            v112 = v126;
            *v111 = &unk_1EA9940C8;
            v111[1] = 0;
            v111[2] = 0;
            v111[3] = v112;
          }
          else
          {
            v111 = 0;
          }
          *((_QWORD *)&v116 + 1) = v111;
          v126 = 0;
          std::string::basic_string[abi:ne180100]<0>(v115, "Incompatible Shape.");
          MIL::ValidationError::ValidationError((uint64_t)exception, &v116, (uint64_t)v115, 315);
        }
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
        std::vector<std::string const*>::reserve((void **)a4, v82);
        v84 = *a2;
        if (a2[1] != *a2)
        {
          v85 = 0;
          do
          {
            v87 = CompatibleDim;
            v89 = *(MIL::Operators::Common::ios15::_anonymous_namespace_ ***)(a4 + 8);
            v88 = *(_QWORD *)(a4 + 16);
            if ((unint64_t)v89 >= v88)
            {
              v91 = ((uint64_t)v89 - *(_QWORD *)a4) >> 3;
              if ((unint64_t)(v91 + 1) >> 61)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v92 = v88 - *(_QWORD *)a4;
              v93 = v92 >> 2;
              if (v92 >> 2 <= (unint64_t)(v91 + 1))
                v93 = v91 + 1;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v93;
              if (v94)
                v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a4 + 16, v94);
              else
                v95 = 0;
              v96 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)&v95[8 * v91];
              *v96 = v87;
              v90 = v96 + 1;
              v98 = *(char **)a4;
              v97 = *(char **)(a4 + 8);
              if (v97 != *(char **)a4)
              {
                do
                {
                  v99 = (MIL::Operators::Common::ios15::_anonymous_namespace_ *)*((_QWORD *)v97 - 1);
                  v97 -= 8;
                  *--v96 = v99;
                }
                while (v97 != v98);
                v97 = *(char **)a4;
              }
              *(_QWORD *)a4 = v96;
              *(_QWORD *)(a4 + 8) = v90;
              *(_QWORD *)(a4 + 16) = &v95[8 * v94];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *v89 = CompatibleDim;
              v90 = v89 + 1;
            }
            *(_QWORD *)(a4 + 8) = v90;
            ++v85;
            v84 = *a2;
          }
          while (v85 < (a2[1] - *a2) >> 3);
        }
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
    VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex((uint64_t)a2);
    v12 = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex((uint64_t)a3);
    v13 = (const void *)*a2;
    v124 = 0;
    v125 = 0;
    v123 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&v123, v13, (uint64_t)v13 + 8 * VariadicUnknownDimIndex, VariadicUnknownDimIndex);
    v14 = (const void *)*a3;
    v121 = 0;
    v122 = 0;
    __p = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&__p, v14, (uint64_t)v14 + 8 * v12, v12);
    v114 = VariadicUnknownDimIndex;
    v113 = a1;
    v126 = 0;
    v127 = 0;
    v128[0] = 0;
    if ((v124 - (_BYTE *)v123) >> 3 <= (unint64_t)((v121 - (_BYTE *)__p) >> 3))
      v15 = (v121 - (_BYTE *)__p) >> 3;
    else
      v15 = (v124 - (_BYTE *)v123) >> 3;
    std::vector<std::string const*>::reserve((void **)&v126, v15);
    if (v15)
    {
      v17 = 0;
      while (1)
      {
        v18 = v123;
        if (v17 >= (v124 - (_BYTE *)v123) >> 3)
          break;
        if (v17 >= (v121 - (_BYTE *)__p) >> 3)
        {
          v23 = v127;
          if ((unint64_t)v127 >= v128[0])
          {
            v28 = (v127 - v126) >> 3;
            if ((unint64_t)(v28 + 1) >> 61)
LABEL_163:
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v29 = (uint64_t)(v128[0] - (_QWORD)v126) >> 2;
            if (v29 <= v28 + 1)
              v29 = v28 + 1;
            if (v128[0] - (_QWORD)v126 >= 0x7FFFFFFFFFFFFFF8uLL)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v29;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v128, v26);
            else
              v27 = 0;
            v32 = &v27[8 * v28];
            *(_QWORD *)v32 = v18[v17];
            v22 = v32 + 8;
            v36 = v126;
            v33 = v127;
            if (v127 != v126)
            {
              do
              {
                v37 = *((_QWORD *)v33 - 1);
                v33 -= 8;
                *((_QWORD *)v32 - 1) = v37;
                v32 -= 8;
              }
              while (v33 != v36);
              goto LABEL_50;
            }
            goto LABEL_51;
          }
LABEL_22:
          *(_QWORD *)v23 = v18[v17];
          v22 = v23 + 8;
          goto LABEL_53;
        }
        v20 = v19;
        v21 = v127;
        if ((unint64_t)v127 >= v128[0])
        {
          v30 = (v127 - v126) >> 3;
          if ((unint64_t)(v30 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v31 = (uint64_t)(v128[0] - (_QWORD)v126) >> 2;
          if (v31 <= v30 + 1)
            v31 = v30 + 1;
          if (v128[0] - (_QWORD)v126 >= 0x7FFFFFFFFFFFFFF8uLL)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v31;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v128, v26);
          else
            v27 = 0;
          v32 = &v27[8 * v30];
          *(_QWORD *)v32 = v20;
          v22 = v32 + 8;
          v38 = v126;
          v33 = v127;
          if (v127 != v126)
          {
            do
            {
              v39 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *((_QWORD *)v32 - 1) = v39;
              v32 -= 8;
            }
            while (v33 != v38);
            goto LABEL_50;
          }
          goto LABEL_51;
        }
        *(_QWORD *)v127 = v19;
        v22 = v21 + 8;
LABEL_53:
        v127 = v22;
        if (++v17 == v15)
          goto LABEL_54;
      }
      v18 = __p;
      v23 = v127;
      if ((unint64_t)v127 >= v128[0])
      {
        v24 = (v127 - v126) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          goto LABEL_163;
        v25 = (uint64_t)(v128[0] - (_QWORD)v126) >> 2;
        if (v25 <= v24 + 1)
          v25 = v24 + 1;
        if (v128[0] - (_QWORD)v126 >= 0x7FFFFFFFFFFFFFF8uLL)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v128, v26);
        else
          v27 = 0;
        v32 = &v27[8 * v24];
        *(_QWORD *)v32 = v18[v17];
        v22 = v32 + 8;
        v34 = v126;
        v33 = v127;
        if (v127 != v126)
        {
          do
          {
            v35 = *((_QWORD *)v33 - 1);
            v33 -= 8;
            *((_QWORD *)v32 - 1) = v35;
            v32 -= 8;
          }
          while (v33 != v34);
LABEL_50:
          v33 = v126;
        }
LABEL_51:
        v126 = v32;
        v127 = v22;
        v128[0] = &v27[8 * v26];
        if (v33)
          operator delete(v33);
        goto LABEL_53;
      }
      goto LABEL_22;
    }
LABEL_54:
    if (__p)
    {
      v121 = __p;
      operator delete(__p);
    }
    if (v123)
    {
      v124 = (char *)v123;
      operator delete(v123);
    }
    v40 = a2[1];
    v41 = (const void *)(*a2 + 8 * v114 + 8);
    v121 = 0;
    v122 = 0;
    __p = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&__p, v41, v40, (v40 - (uint64_t)v41) >> 3);
    v42 = a3[1];
    v43 = (const void *)(*a3 + 8 * v12 + 8);
    v118 = 0;
    v119 = 0;
    v117 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const* const*>,std::__wrap_iter<MIL::IRDimension const* const*>>(&v117, v43, v42, (v42 - (uint64_t)v43) >> 3);
    v123 = 0;
    v124 = 0;
    v125 = 0;
    if ((v121 - (_BYTE *)__p) >> 3 <= (unint64_t)((v118 - (_BYTE *)v117) >> 3))
      v44 = (v118 - (_BYTE *)v117) >> 3;
    else
      v44 = (v121 - (_BYTE *)__p) >> 3;
    std::vector<std::string const*>::reserve(&v123, v44);
    if (v44)
    {
      v46 = 0;
      while (1)
      {
        v47 = __p;
        v48 = v46 + ((v121 - (_BYTE *)__p) >> 3);
        v49 = v117;
        v50 = (v118 - (_BYTE *)v117) >> 3;
        v51 = v48 - v44;
        if (v48 < v44)
          break;
        v55 = v50 + v46;
        v56 = v55 >= v44;
        v57 = v55 - v44;
        if (!v56)
        {
          v53 = v124;
          if ((unint64_t)v124 >= v125)
          {
            v66 = (v124 - (_BYTE *)v123) >> 3;
            if ((unint64_t)(v66 + 1) >> 61)
LABEL_162:
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            v67 = (uint64_t)(v125 - (_QWORD)v123) >> 2;
            if (v67 <= v66 + 1)
              v67 = v66 + 1;
            if (v125 - (unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
              v61 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v61 = v67;
            if (v61)
              v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v125, v61);
            else
              v62 = 0;
            v70 = &v62[8 * v66];
            *(_QWORD *)v70 = v47[v51];
            v58 = v70 + 8;
            v74 = (char *)v123;
            v71 = v124;
            if (v124 != v123)
            {
              do
              {
                v75 = *((_QWORD *)v71 - 1);
                v71 -= 8;
                *((_QWORD *)v70 - 1) = v75;
                v70 -= 8;
              }
              while (v71 != v74);
              goto LABEL_107;
            }
            goto LABEL_108;
          }
          v54 = *((_QWORD *)__p + v51);
          goto LABEL_69;
        }
        v64 = v63;
        v65 = v124;
        if ((unint64_t)v124 >= v125)
        {
          v68 = (v124 - (_BYTE *)v123) >> 3;
          if ((unint64_t)(v68 + 1) >> 61)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v69 = (uint64_t)(v125 - (_QWORD)v123) >> 2;
          if (v69 <= v68 + 1)
            v69 = v68 + 1;
          if (v125 - (unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v69;
          if (v61)
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v125, v61);
          else
            v62 = 0;
          v70 = &v62[8 * v68];
          *(_QWORD *)v70 = v64;
          v58 = v70 + 8;
          v76 = (char *)v123;
          v71 = v124;
          if (v124 != v123)
          {
            do
            {
              v77 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *((_QWORD *)v70 - 1) = v77;
              v70 -= 8;
            }
            while (v71 != v76);
LABEL_107:
            v71 = (char *)v123;
          }
LABEL_108:
          v123 = v70;
          v124 = v58;
          v125 = (unint64_t)&v62[8 * v61];
          if (v71)
            operator delete(v71);
          goto LABEL_110;
        }
        *(_QWORD *)v124 = v63;
        v58 = v65 + 8;
LABEL_110:
        v124 = v58;
        if (++v46 == v44)
          goto LABEL_111;
      }
      v52 = v46 - v44 + v50;
      v53 = v124;
      if ((unint64_t)v124 >= v125)
      {
        v59 = (v124 - (_BYTE *)v123) >> 3;
        if ((unint64_t)(v59 + 1) >> 61)
          goto LABEL_162;
        v60 = (uint64_t)(v125 - (_QWORD)v123) >> 2;
        if (v60 <= v59 + 1)
          v60 = v59 + 1;
        if (v125 - (unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v125, v61);
        else
          v62 = 0;
        v70 = &v62[8 * v59];
        *(_QWORD *)v70 = v49[v52];
        v58 = v70 + 8;
        v72 = (char *)v123;
        v71 = v124;
        if (v124 != v123)
        {
          do
          {
            v73 = *((_QWORD *)v71 - 1);
            v71 -= 8;
            *((_QWORD *)v70 - 1) = v73;
            v70 -= 8;
          }
          while (v71 != v72);
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      v54 = *((_QWORD *)v117 + v52);
LABEL_69:
      *(_QWORD *)v53 = v54;
      v58 = v53 + 8;
      goto LABEL_110;
    }
LABEL_111:
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
    if (__p)
    {
      v121 = __p;
      operator delete(__p);
    }
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(a4, 0, v126, v127, (v127 - v126) >> 3);
    v78 = MIL::IRUnknownDimension::Make(v113, (MIL::MILContext *)1);
    v79 = *(_QWORD *)(a4 + 16);
    v80 = *(uint64_t **)(a4 + 8);
    if ((unint64_t)v80 >= v79)
    {
      v100 = ((uint64_t)v80 - *(_QWORD *)a4) >> 3;
      if ((unint64_t)(v100 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v101 = v79 - *(_QWORD *)a4;
      v102 = v101 >> 2;
      if (v101 >> 2 <= (unint64_t)(v100 + 1))
        v102 = v100 + 1;
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
        v103 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v103 = v102;
      if (v103)
        v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a4 + 16, v103);
      else
        v104 = 0;
      v105 = (uint64_t *)&v104[8 * v100];
      v106 = &v104[8 * v103];
      *v105 = v78;
      v81 = (uint64_t)(v105 + 1);
      v108 = *(char **)a4;
      v107 = *(char **)(a4 + 8);
      if (v107 != *(char **)a4)
      {
        do
        {
          v109 = *((_QWORD *)v107 - 1);
          v107 -= 8;
          *--v105 = v109;
        }
        while (v107 != v108);
        v107 = *(char **)a4;
      }
      *(_QWORD *)a4 = v105;
      *(_QWORD *)(a4 + 8) = v81;
      *(_QWORD *)(a4 + 16) = v106;
      if (v107)
        operator delete(v107);
    }
    else
    {
      *v80 = v78;
      v81 = (uint64_t)(v80 + 1);
    }
    *(_QWORD *)(a4 + 8) = v81;
    std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(a4, v81, (char *)v123, v124, (v124 - (_BYTE *)v123) >> 3);
    if (v123)
    {
      v124 = (char *)v123;
      operator delete(v123);
    }
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
  }
}

void sub_1E0779BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;
  uint64_t v29;
  uint64_t v31;

  v31 = *(_QWORD *)(v29 - 112);
  *(_QWORD *)(v29 - 112) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSelect(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  MIL::IRValueType *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (***v17)(MIL::MILContextImpl *__hidden);
  int v18;
  uint64_t v19;
  uint64_t *v20;
  void *exception;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  void *__p[2];
  uint64_t v30;

  std::string::basic_string[abi:ne180100]<0>(__p, "a");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "b");
  v10 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v11 = MIL::IRValueType::AsTensorType(v10);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  if (v12 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 88))(v11))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v22 = a2[1];
    *(_QWORD *)&v28 = *a2;
    *((_QWORD *)&v28 + 1) = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    std::string::basic_string[abi:ne180100]<0>(v27, "Two inputs should have the same dtype.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v28, (uint64_t)v27, 315);
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 96))(v11);
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  v15 = *(char **)v13;
  v16 = *(_QWORD *)(v13 + 8);
  if (*(_QWORD *)v13 == v16)
  {
    if (__p == (void **)v14)
      goto LABEL_15;
    v15 = *(char **)v14;
    v16 = *(_QWORD *)(v14 + 8);
LABEL_14:
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)__p, v15, v16, (v16 - (uint64_t)v15) >> 3);
    goto LABEL_15;
  }
  if (*(_QWORD *)v14 == *(_QWORD *)(v14 + 8))
  {
    if (__p == (void **)v13)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v25;
  v30 = v26;
LABEL_15:
  v17 = *a1;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v19 = MIL::IRTensorValueType::MakeWithShape(v17, v18, (uint64_t)__p);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v20 = (uint64_t *)operator new(8uLL);
  *a4 = v20;
  *v20++ = v19;
  a4[1] = v20;
  a4[2] = v20;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1E0779FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceWhileLoop@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, uint64_t *a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  __int128 v25;
  void *__p[2];
  char v27;
  _QWORD v28[3];
  __int128 v29;

  v6 = *a3;
  if (a3[1] - *a3 != 48)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    v17 = a1[1];
    *(_QWORD *)&v29 = *a1;
    *((_QWORD *)&v29 + 1) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    std::string::basic_string[abi:ne180100]<0>(v28, "Output types of exactly two blocks have to be set to infer while_loop output types.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v29, (uint64_t)v28, 315);
  }
  v10 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(v6 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, "loop_vars");
  v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v12 = (v9 - v10) >> 3;
  v13 = (uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 4;
  if (v27 < 0)
    operator delete(__p[0]);
  if (v12 != v13)
  {
    v20 = __cxa_allocate_exception(0x48uLL);
    v21 = a1[1];
    *(_QWORD *)&v25 = *a1;
    *((_QWORD *)&v25 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    std::string::basic_string[abi:ne180100]<0>(v24, "while_loop body block must output same number of values as input.");
    MIL::ValidationError::ValidationError((uint64_t)v20, &v25, (uint64_t)v24, 315);
  }
  v14 = *a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  return std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(a4, *(const void **)(v14 + 24), *(_QWORD *)(v14 + 32), (uint64_t)(*(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24)) >> 3);
}

void sub_1E077A208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if ((v30 & 1) == 0)
      goto LABEL_8;
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    if (!v30)
LABEL_8:
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void MIL::Operators::Common::ios15::`anonymous namespace'::DeduceSameShapeOneVariadic(_QWORD *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>)
{
  uint64_t VariadicUnknownDimIndex;
  uint64_t v7;
  uint64_t v8;
  const MIL::IRDimension *v9;
  unint64_t v10;
  uint64_t v11;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *CompatibleDim;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v13;
  unint64_t v14;
  MIL::Operators::Common::ios15::_anonymous_namespace_ **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  MIL::Operators::Common::ios15::_anonymous_namespace_ **v22;
  char *v23;
  char *v24;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t i;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v42;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v43;
  unint64_t v44;
  MIL::Operators::Common::ios15::_anonymous_namespace_ **v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  MIL::Operators::Common::ios15::_anonymous_namespace_ **v52;
  char *v53;
  char *v54;
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v55;
  void *exception;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  __int128 v62;

  VariadicUnknownDimIndex = MIL::ValueTypeInferenceUtils::FindVariadicUnknownDimIndex((uint64_t)a1);
  v7 = a2[1] - *a2;
  if (((uint64_t)(a1[1] - *a1) >> 3) - 1 > (unint64_t)(v7 >> 3))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(&v61);
    *(_QWORD *)&v62 = v61;
    if (v61)
    {
      v57 = (_QWORD *)operator new();
      v58 = v61;
      *v57 = &unk_1EA9940C8;
      v57[1] = 0;
      v57[2] = 0;
      v57[3] = v58;
    }
    else
    {
      v57 = 0;
    }
    *((_QWORD *)&v62 + 1) = v57;
    v61 = 0;
    std::string::basic_string[abi:ne180100]<0>(v60, "Incompatible Shape.");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v62, (uint64_t)v60, 315);
  }
  v8 = VariadicUnknownDimIndex;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::string const*>::reserve((void **)a3, v7 >> 3);
  v59 = v8;
  v10 = v8 - 1;
  if (v8 != 1)
  {
    v11 = 0;
    do
    {
      v13 = CompatibleDim;
      v15 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)a3[1];
      v14 = (unint64_t)a3[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = ((char *)v15 - *a3) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v18 = v14 - (_QWORD)*a3;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v20);
        else
          v21 = 0;
        v22 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)&v21[8 * v17];
        *v22 = v13;
        v16 = (char *)(v22 + 1);
        v24 = *a3;
        v23 = a3[1];
        if (v23 != *a3)
        {
          do
          {
            v25 = (MIL::Operators::Common::ios15::_anonymous_namespace_ *)*((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v22 = v25;
          }
          while (v23 != v24);
          v23 = *a3;
        }
        *a3 = (char *)v22;
        a3[1] = v16;
        a3[2] = &v21[8 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v15 = CompatibleDim;
        v16 = (char *)(v15 + 1);
      }
      a3[1] = v16;
      ++v11;
    }
    while (v11 != v10);
  }
  v26 = *a2;
  v27 = a2[1] - *a2;
  v28 = v59 + (v27 >> 3) - ((uint64_t)(a1[1] - *a1) >> 3) + 1;
  if (v10 < v28)
  {
    v29 = a3 + 2;
    v30 = a3[1];
    do
    {
      v31 = *a2;
      if ((unint64_t)v30 >= *v29)
      {
        v32 = (v30 - *a3) >> 3;
        if ((unint64_t)(v32 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v33 = *v29 - (_QWORD)*a3;
        v34 = v33 >> 2;
        if (v33 >> 2 <= (unint64_t)(v32 + 1))
          v34 = v32 + 1;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v35);
        else
          v36 = 0;
        v37 = &v36[8 * v32];
        *(_QWORD *)v37 = *(_QWORD *)(v31 + 8 * v10);
        v30 = v37 + 8;
        v39 = *a3;
        v38 = a3[1];
        if (v38 != *a3)
        {
          do
          {
            v40 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v37 - 1) = v40;
            v37 -= 8;
          }
          while (v38 != v39);
          v38 = *a3;
        }
        *a3 = v37;
        a3[1] = v30;
        a3[2] = &v36[8 * v35];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *(_QWORD *)v30 = *(_QWORD *)(v31 + 8 * v10);
        v30 += 8;
      }
      a3[1] = v30;
      ++v10;
    }
    while (v10 < v28);
    v26 = *a2;
    v27 = a2[1] - *a2;
  }
  for (i = v27 >> 3; v10 < i; i = (a2[1] - *a2) >> 3)
  {
    v43 = v42;
    v45 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)a3[1];
    v44 = (unint64_t)a3[2];
    if ((unint64_t)v45 >= v44)
    {
      v47 = ((char *)v45 - *a3) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v48 = v44 - (_QWORD)*a3;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v50);
      else
        v51 = 0;
      v52 = (MIL::Operators::Common::ios15::_anonymous_namespace_ **)&v51[8 * v47];
      *v52 = v43;
      v46 = (char *)(v52 + 1);
      v54 = *a3;
      v53 = a3[1];
      if (v53 != *a3)
      {
        do
        {
          v55 = (MIL::Operators::Common::ios15::_anonymous_namespace_ *)*((_QWORD *)v53 - 1);
          v53 -= 8;
          *--v52 = v55;
        }
        while (v53 != v54);
        v53 = *a3;
      }
      *a3 = (char *)v52;
      a3[1] = v46;
      a3[2] = &v51[8 * v50];
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v45 = v42;
      v46 = (char *)(v45 + 1);
    }
    a3[1] = v46;
    ++v10;
    v26 = *a2;
  }
}

void sub_1E077A6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

MIL::Operators::Common::ios15::_anonymous_namespace_ *MIL::Operators::Common::ios15::`anonymous namespace'::GetCompatibleDim(MIL::Operators::Common::ios15::_anonymous_namespace_ *this, const MIL::IRDimension *a2, const MIL::IRDimension *a3)
{
  MIL::Operators::Common::ios15::_anonymous_namespace_ *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *exception;
  _QWORD *v10;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  __int128 v15;

  v3 = a2;
  v5 = (*(uint64_t (**)(MIL::Operators::Common::ios15::_anonymous_namespace_ *, const MIL::IRDimension *, const MIL::IRDimension *))(*(_QWORD *)this + 16))(this, a2, a3);
  v6 = (*(uint64_t (**)(MIL::Operators::Common::ios15::_anonymous_namespace_ *))(*(_QWORD *)v3 + 16))(v3);
  if (v5)
  {
    v7 = v6;
    if (v6)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      v3 = this;
      if (v8 != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7))
      {
        exception = __cxa_allocate_exception(0x48uLL);
        MIL::UnknownLocation::Make(&v14);
        *(_QWORD *)&v15 = v14;
        if (v14)
        {
          v10 = (_QWORD *)operator new();
          v12 = v14;
          *v10 = &unk_1EA9940C8;
          v10[1] = 0;
          v10[2] = 0;
          v10[3] = v12;
        }
        else
        {
          v10 = 0;
        }
        *((_QWORD *)&v15 + 1) = v10;
        v14 = 0;
        std::string::basic_string[abi:ne180100]<0>(v13, "Incompatible Dimension.");
        MIL::ValidationError::ValidationError((uint64_t)exception, &v15, (uint64_t)v13, 315);
      }
    }
    else
    {
      return this;
    }
  }
  return v3;
}

void sub_1E077A8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;

  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

char *std::vector<MIL::IRDimension const*>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MIL::IRDimension const**>,std::__wrap_iter<MIL::IRDimension const**>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<MIL::IRDimension const*>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1E077AB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A0B38;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0B38;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(MIL::IRObject *a1@<X1>, _QWORD *a2@<X8>)
{
  void *exception;
  _QWORD *LocationPtr;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  void *__p[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr((uint64_t)a1, (unsigned __int8 *)__p, a2);
  if (v11 < 0)
    operator delete(__p[0]);
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    LocationPtr = (_QWORD *)MIL::IRObject::GetLocationPtr(a1);
    v6 = LocationPtr[1];
    *(_QWORD *)&v9 = *LocationPtr;
    *((_QWORD *)&v9 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    (*(void (**)(MIL::IRObject *))(*(_QWORD *)a1 + 56))(a1);
    std::operator+<char>();
    MIL::ValidationError::ValidationError((uint64_t)exception, &v9, (uint64_t)__p, 321);
  }
}

void sub_1E077AC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  char v21;
  char v22;

  if (a17 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100](v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(v19);
    if ((v22 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A0BC8;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0BC8;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  void *__p[2];
  char v15;

  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  *(_QWORD *)&v13 = v5;
  *((_QWORD *)&v13 + 1) = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  MIL::IRObject::SetAttribute(a2, (unsigned __int8 *)__p, &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1E077AEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a11)
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::operator()(a11);
  if (a17 < 0)
    operator delete(__p);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_1>,void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A0C58;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0C58;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator()(uint64_t *a1@<X2>, _QWORD *a2@<X4>, uint64_t **a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  void *exception;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  void *__p[2];
  char v17;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v15 = v6;
    *((_QWORD *)&v15 + 1) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribute val is undefined for const");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v15, (uint64_t)__p, 315);
  }
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 5) + 32))(*((_QWORD *)v7 + 5));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v9 = (uint64_t *)operator new(8uLL);
  *a3 = v9;
  *v9++ = v8;
  a3[1] = v9;
  a3[2] = v9;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1E077B118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v18;
  _QWORD *v19;
  char v21;
  char v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a17 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(v19);
    if ((v22 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_2>,std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::target_type()
{
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A0CD8;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A0CD8;
}

void std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator()(uint64_t *a1@<X2>, _QWORD *a2@<X4>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v22;
  void *__p;
  char v24;
  char v25;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (v25 < 0)
    operator delete(__p);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    *(_QWORD *)&v22 = v6;
    *((_QWORD *)&v22 + 1) = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Attribute val is undefined for const");
    MIL::ValidationError::ValidationError((uint64_t)exception, &v22, (uint64_t)&__p, 315);
  }
  v9 = *((_QWORD *)v7 + 5);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __p = a3;
  v24 = 0;
  v12 = operator new(0x10uLL);
  *a3 = v12;
  a3[1] = v12;
  v13 = v12 + 2;
  a3[2] = v12 + 2;
  *v12 = v9;
  v12[1] = v8;
  if (v8)
  {
    v14 = (unint64_t *)&v8->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    a3[1] = v13;
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    a3[1] = v13;
  }
  if (v5)
  {
    v17 = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1E077B43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count *v17;
  void *v18;
  _QWORD *v19;
  char v21;
  char v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  if (a17 < 0)
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(&__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else
  {
    std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()(v19);
    if ((v22 & 1) == 0)
      goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3,std::allocator<MIL::Operators::Common::ios15::Const::Make(MIL::MILContext &,std::string)::$_3>,std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::target_type()
{
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_2_1(void **a1)
{
  operator delete(*a1);
}

void OUTLINED_FUNCTION_4_1()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

uint64_t MIL::Operators::Common::ios15::Cond::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count_vtbl *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *v36[2];
  uint64_t v37;
  void *__p;
  void *v39;
  _QWORD *v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v43 = v6;
  v50[0] = MIL::IRTensorValueType::MakeScalar(a1, 2);
  v7 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v39 = v8 + 1;
  v40 = v8 + 1;
  v50[1] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)v50, 2, &v41);
  MIL::IRParameter::Make(&v41, &v42);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "pred", &v42);
  v9 = v42;
  v42 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v41.n128_u64[1];
  if (v41.n128_u64[1])
  {
    v11 = (unint64_t *)(v41.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  __p = 0;
  *(_OWORD *)v36 = *(_OWORD *)a2;
  v37 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v13 = v43;
  v34 = v43;
  if (v43)
  {
    v14 = (std::__shared_weak_count *)operator new();
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
    v35 = v14;
    v43 = 0;
    v32 = __p;
    if (__p)
    {
      v15 = (std::__shared_weak_count *)operator new();
      v16 = (std::__shared_weak_count_vtbl *)__p;
      v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v15->__shared_owners_ = 0;
      v15->__shared_weak_owners_ = 0;
      v15[1].__vftable = v16;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 0;
    v35 = 0;
    v43 = 0;
    v32 = 0;
  }
  v33 = v15;
  __p = 0;
  v48[0] = &unk_1EA99FAC8;
  v48[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateCond;
  v49 = v48;
  v47 = 0;
  MIL::IROperator::Make((__int128 *)v36, 1, 1, 1, -1, (uint64_t)&v34, (uint64_t)&v32, (uint64_t)v48, a3, (uint64_t)v46);
  v17 = v47;
  if (v47 == v46)
  {
    v18 = 4;
    v17 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_20;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_20:
  v19 = v49;
  if (v49 == v48)
  {
    v20 = 4;
    v19 = v48;
    goto LABEL_24;
  }
  if (v49)
  {
    v20 = 5;
LABEL_24:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  v21 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v35;
  if (v35)
  {
    v25 = (unint64_t *)&v35->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (SHIBYTE(v37) < 0)
    operator delete(v36[0]);
  v27 = *a3;
  v44[0] = &off_1EA99FBD8;
  v44[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCond;
  v45 = v44;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v27 + 200))(v27, v44);
  v28 = v45;
  if (v45 == v44)
  {
    v29 = 4;
    v28 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_42;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_42:
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = v43;
  if (v43)
  {
    v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v43);
    return MEMORY[0x1E0C023A0](v31, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E077B9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a22, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a28, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::Select::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count_vtbl *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  void **v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void **v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void **v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  void **v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  void **v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void **v116;
  uint64_t result;
  uint64_t v118;
  void **v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  __int128 v138;
  void *v139[2];
  uint64_t v140;
  void *v141;
  void *v142;
  _QWORD *v143;
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  char **v148;
  __n128 v149;
  void *__p;
  void *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  _QWORD *v155;
  __n128 v156;
  __n128 v157;
  _QWORD *v158;
  _QWORD v159[3];
  _QWORD *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  void **v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  char **v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v158 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  v172 = v8;
  *v8 = (void *)v7;
  v173 = v8 + 1;
  v174 = (uint64_t)(v8 + 1);
  v169 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v172);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v165);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "cond", (uint64_t *)&v165);
  v9 = v165;
  v165 = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  v10 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v11 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  v13 = v158;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v15;
  v15->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v14;
  v166 = (uint64_t)&v15->~__shared_weak_count_0;
  v167 = (uint64_t)&v15->~__shared_weak_count_0;
  v172 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(8uLL);
  v169 = v17;
  *v17 = v16;
  v170 = v17 + 1;
  v171 = v17 + 1;
  v173 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v169);
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = operator new(8uLL);
  v153 = v19;
  *v19 = v18;
  v154 = v19 + 1;
  v155 = v19 + 1;
  v174 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v153);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  __p = v21;
  *v21 = v20;
  v151 = v21 + 1;
  v152 = v21 + 1;
  v175 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v172, 4, &v156);
  MIL::IRParameter::Make(&v156, (uint64_t *)&v141);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "a", (uint64_t *)&v141);
  v22 = v141;
  v141 = 0;
  if (v22)
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
  v23 = (std::__shared_weak_count *)v156.n128_u64[1];
  if (v156.n128_u64[1])
  {
    v24 = (unint64_t *)(v156.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  v26 = v158;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v166 = (uint64_t)&v28->~__shared_weak_count_0;
  v167 = (uint64_t)&v28->~__shared_weak_count_0;
  v172 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v165);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v169 = v30;
  *v30 = v29;
  v170 = v30 + 1;
  v171 = v30 + 1;
  v173 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v169);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v153 = v32;
  *v32 = v31;
  v154 = v32 + 1;
  v155 = v32 + 1;
  v174 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v153);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  __p = v34;
  *v34 = v33;
  v151 = v34 + 1;
  v152 = v34 + 1;
  v175 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v172, 4, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&v141);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v26, "b", (uint64_t *)&v141);
  v35 = v141;
  v141 = 0;
  if (v35)
    (*(void (**)(void *))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v37 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  v148 = 0;
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  v172 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v148, (void **)v39);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v172, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v148, 1uLL);
  v40 = v148;
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v169 = v42;
  *v42 = v41;
  v170 = v42 + 1;
  v171 = v42 + 1;
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v169);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v153 = v44;
  *v44 = v43;
  v154 = v44 + 1;
  v155 = v44 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v153);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  __p = v46;
  *v46 = v45;
  v151 = v46 + 1;
  v152 = v46 + 1;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v141 = v48;
  *v48 = v47;
  v142 = v48 + 1;
  v143 = v48 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v141);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 4, &v144);
  MIL::IRParameter::Make(&v144, &v145);
  v49 = v145;
  v146 = v145;
  if (v145)
  {
    v50 = (_QWORD *)operator new();
    v51 = v145;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v147 = v50;
  v145 = 0;
  v52 = v40[2];
  v53 = v40[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v40) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v40;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v176 = v40 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v40 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v146 = 0;
    v147 = 0;
    v63 = *v40;
    v62 = v40[1];
    if (v62 == *v40)
    {
      v66 = (void **)v40[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = (void **)*v40;
      v62 = v40[1];
    }
    v54 = (char *)(v61 + 2);
    *v40 = v64;
    v172 = v66;
    v173 = v66;
    v40[1] = (char *)(v61 + 2);
    v174 = (uint64_t)v62;
    v67 = v40[2];
    v40[2] = &v59[16 * v60];
    v175 = (uint64_t)v67;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v172);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v146 = 0;
    v147 = 0;
  }
  v40[1] = v54;
  v68 = v145;
  v145 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v70 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  *(_OWORD *)v139 = *(_OWORD *)a2;
  v140 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v158;
  *(_QWORD *)&v138 = v158;
  if (v158)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v138 + 1) = v73;
  v158 = 0;
  *(_QWORD *)&v137 = v148;
  if (v148)
  {
    v74 = (_QWORD *)operator new();
    v75 = v148;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v137 + 1) = v74;
  v148 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v139, &v138, &v137, (uint64_t)v163, (uint64_t)v161, a3);
  v76 = v162;
  if (v162 == v161)
  {
    v77 = 4;
    v76 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_83;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_83:
  v78 = v164;
  if (v164 == v163)
  {
    v79 = 4;
    v78 = v163;
    goto LABEL_87;
  }
  if (v164)
  {
    v79 = 5;
LABEL_87:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v138 + 1);
  if (*((_QWORD *)&v138 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v138 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v140) < 0)
    operator delete(v139[0]);
  v86 = *a3;
  v159[0] = &off_1EA99FBD8;
  v159[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceSelect;
  v160 = v159;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v86 + 200))(v86, v159);
  v87 = v160;
  if (v160 == v159)
  {
    v88 = 4;
    v87 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_105;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_105:
  MIL::Validation::TensorDTypeConstraints::Make(&v172);
  v89 = v172;
  std::string::basic_string[abi:ne180100]<0>(v133, "a");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&v165);
  v135 = v165;
  if (v165)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v165;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v136 = v90;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v89 + 3))(v89, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v92 = v136;
  if (v136)
  {
    p_shared_owners = (unint64_t *)&v136->__shared_owners_;
    do
      v94 = __ldaxr(p_shared_owners);
    while (__stlxr(v94 - 1, p_shared_owners));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v165;
  v165 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v134 < 0)
    operator delete(v133[0]);
  v96 = v172;
  std::string::basic_string[abi:ne180100]<0>(v127, "b");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&v165);
  v129 = v165;
  if (v165)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v165;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v130 = v97;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v96 + 3))(v96, &v129, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v99 = v130;
  if (v130)
  {
    v100 = (unint64_t *)&v130->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v165;
  v165 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v128 < 0)
    operator delete(v127[0]);
  v103 = v172;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v165);
  v123 = v165;
  if (v165)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v165;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v124 = v104;
  v165 = 0;
  std::string::basic_string[abi:ne180100]<0>(v121, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v103 + 3))(v103, &v123, v121);
  if (v122 < 0)
    operator delete(v121[0]);
  v106 = v124;
  if (v124)
  {
    v107 = (unint64_t *)&v124->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v165;
  v165 = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  v110 = *a3;
  v119 = v172;
  if (v172)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v172;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
  }
  else
  {
    v111 = 0;
  }
  v120 = v111;
  v172 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v110 + 56))(v110, &v119);
  v113 = v120;
  if (v120)
  {
    v114 = (unint64_t *)&v120->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v172;
  v172 = 0;
  if (v116)
    (*((void (**)(void **))*v116 + 1))(v116);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v148, 0);
  result = (uint64_t)v158;
  if (v158)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E077C894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  v64 = *(_QWORD *)(v62 - 112);
  *(_QWORD *)(v62 - 112) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v61;
  *v61 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a48, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::WhileLoop::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  MIL::MILContext *Scalar;
  const MIL::IRValueType *v28;
  const MIL::IRDimension *v29;
  uint64_t v30;
  _QWORD *v31;
  MIL::MILContext *v32;
  const MIL::IRValueType *v33;
  const MIL::IRDimension *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  MIL::MILContext *v38;
  const MIL::IRValueType *v39;
  const MIL::IRDimension *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  MIL::MILContext *v45;
  const MIL::IRValueType *v46;
  const MIL::IRDimension *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  MIL::MILContext *v53;
  const MIL::IRValueType *v54;
  const MIL::IRDimension *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  MIL::MILContext *v62;
  const MIL::IRValueType *v63;
  const MIL::IRDimension *v64;
  unsigned __int8 *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  void **v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;
  void **v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void *v93[2];
  uint64_t v94;
  void *__p;
  void *v96;
  _QWORD *v97;
  void *v98;
  void *v99;
  _QWORD *v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  void *v104;
  void *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  _QWORD *v109;
  void *v110;
  void *v111;
  _QWORD *v112;
  void *v113;
  void *v114;
  _QWORD *v115;
  void *v116;
  void *v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  _QWORD *v121;
  void *v122;
  void *v123;
  _QWORD *v124;
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD v128[3];
  _QWORD *v129;
  _BYTE v130[24];
  _BYTE *v131;
  _QWORD v132[3];
  _QWORD *v133;
  void **v134[13];

  v134[12] = *(void ***)MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v127 = v6;
  v134[0] = (void **)MIL::IRTensorValueType::MakeScalar(a1, 18);
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = operator new(8uLL);
  v122 = v8;
  *v8 = v7;
  v123 = v8 + 1;
  v124 = v8 + 1;
  v134[1] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v122);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x10uLL);
  v120 = v11 + 2;
  v121 = v11 + 2;
  *v11 = v9;
  v11[1] = v10;
  v119 = v11;
  v134[2] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v119);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = operator new(0x18uLL);
  v117 = v15 + 3;
  v118 = v15 + 3;
  *v15 = v12;
  v15[1] = v13;
  v15[2] = v14;
  v116 = v15;
  v134[3] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v116);
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = MIL::IRUnknownDimension::Make(a1, 0);
  v19 = MIL::IRUnknownDimension::Make(a1, 0);
  v20 = operator new(0x20uLL);
  v114 = v20 + 4;
  v115 = v20 + 4;
  *v20 = v16;
  v20[1] = v17;
  v20[2] = v18;
  v20[3] = v19;
  v113 = v20;
  v134[4] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v113);
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x28uLL);
  v111 = v26 + 5;
  v112 = v26 + 5;
  *v26 = v21;
  v26[1] = v22;
  v26[2] = v23;
  v26[3] = v24;
  v26[4] = v25;
  v110 = v26;
  v134[5] = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v110);
  Scalar = (MIL::MILContext *)MIL::IRTensorValueType::MakeScalar(a1, 18);
  v28 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v134[6] = (void **)MIL::IRListValueType::MakeWithDimension(a1, Scalar, v28, v29);
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = operator new(8uLL);
  v107 = v31;
  *v31 = v30;
  v108 = v31 + 1;
  v109 = v31 + 1;
  v32 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v107);
  v33 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v134[7] = (void **)MIL::IRListValueType::MakeWithDimension(a1, v32, v33, v34);
  v35 = MIL::IRUnknownDimension::Make(a1, 0);
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = operator new(0x10uLL);
  v105 = v37 + 2;
  v106 = v37 + 2;
  *v37 = v35;
  v37[1] = v36;
  v104 = v37;
  v38 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v104);
  v39 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v134[8] = (void **)MIL::IRListValueType::MakeWithDimension(a1, v38, v39, v40);
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = MIL::IRUnknownDimension::Make(a1, 0);
  v44 = operator new(0x18uLL);
  v102 = v44 + 3;
  v103 = v44 + 3;
  *v44 = v41;
  v44[1] = v42;
  v44[2] = v43;
  v101 = v44;
  v45 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v101);
  v46 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v134[9] = (void **)MIL::IRListValueType::MakeWithDimension(a1, v45, v46, v47);
  v48 = MIL::IRUnknownDimension::Make(a1, 0);
  v49 = MIL::IRUnknownDimension::Make(a1, 0);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = operator new(0x20uLL);
  v99 = v52 + 4;
  v100 = v52 + 4;
  *v52 = v48;
  v52[1] = v49;
  v52[2] = v50;
  v52[3] = v51;
  v98 = v52;
  v53 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&v98);
  v54 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v134[10] = (void **)MIL::IRListValueType::MakeWithDimension(a1, v53, v54, v55);
  v56 = MIL::IRUnknownDimension::Make(a1, 0);
  v57 = MIL::IRUnknownDimension::Make(a1, 0);
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = MIL::IRUnknownDimension::Make(a1, 0);
  v60 = MIL::IRUnknownDimension::Make(a1, 0);
  v61 = operator new(0x28uLL);
  v96 = v61 + 5;
  v97 = v61 + 5;
  *v61 = v56;
  v61[1] = v57;
  v61[2] = v58;
  v61[3] = v59;
  v61[4] = v60;
  __p = v61;
  v62 = (MIL::MILContext *)MIL::IRTensorValueType::MakeWithShape(a1, 18, (uint64_t)&__p);
  v63 = (const MIL::IRValueType *)MIL::IRUnknownDimension::Make(a1, 0);
  v134[11] = (void **)MIL::IRListValueType::MakeWithDimension(a1, v62, v63, v64);
  MIL::IRParameter::MakeTypeSet((uint64_t)v134, 12, &v125);
  MIL::IRParameter::Make(&v125, &v126);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "loop_vars", &v126);
  v66 = v126;
  v126 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v125.n128_u64[1];
  if (v125.n128_u64[1])
  {
    v68 = (unint64_t *)(v125.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (__p)
  {
    v96 = __p;
    operator delete(__p);
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 64))(*((_QWORD *)v65 + 5), 1);
  v134[0] = 0;
  *(_OWORD *)v93 = *(_OWORD *)a2;
  v94 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v70 = v127;
  v91 = v127;
  if (v127)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = (std::__shared_weak_count_vtbl *)v70;
    v92 = v71;
    v127 = 0;
    v89 = v134[0];
    if (v134[0])
    {
      v72 = (std::__shared_weak_count *)operator new();
      v73 = v134[0];
      v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F948;
      v72->__shared_owners_ = 0;
      v72->__shared_weak_owners_ = 0;
      v72[1].__vftable = (std::__shared_weak_count_vtbl *)v73;
    }
    else
    {
      v72 = 0;
    }
  }
  else
  {
    v72 = 0;
    v92 = 0;
    v127 = 0;
    v89 = 0;
  }
  v90 = v72;
  v134[0] = 0;
  v132[0] = &unk_1EA99FAC8;
  v132[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateWhileLoop;
  v133 = v132;
  v131 = 0;
  MIL::IROperator::Make((__int128 *)v93, 1, 1, 1, -1, (uint64_t)&v91, (uint64_t)&v89, (uint64_t)v132, a3, (uint64_t)v130);
  v74 = v131;
  if (v131 == v130)
  {
    v75 = 4;
    v74 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_38;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_38:
  v76 = v133;
  if (v133 == v132)
  {
    v77 = 4;
    v76 = v132;
    goto LABEL_42;
  }
  if (v133)
  {
    v77 = 5;
LABEL_42:
    (*(void (**)(void))(*v76 + 8 * v77))();
  }
  v78 = v90;
  if (v90)
  {
    p_shared_owners = (unint64_t *)&v90->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v92;
  if (v92)
  {
    v82 = (unint64_t *)&v92->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (SHIBYTE(v94) < 0)
    operator delete(v93[0]);
  v84 = *a3;
  v128[0] = &off_1EA99FBD8;
  v128[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceWhileLoop;
  v129 = v128;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 200))(v84, v128);
  v85 = v129;
  if (v129 == v128)
  {
    v86 = 4;
    v85 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_60;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_60:
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](v134, 0);
  result = v127;
  if (v127)
  {
    v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v127);
    return MEMORY[0x1E0C023A0](v88, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E077D5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;

  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v60 - 184), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios15::CustomValidators::ValidateBatchNorm(MIL::Operators::Common::ios15::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  MIL::IRValueType *ParameterType;
  MIL::IRValueType *v6;
  uint64_t v7;
  char *v8;
  BOOL IsParameterSet;
  BOOL v10;
  MIL::IRValueType *v11;
  MIL::IRValueType *v12;
  void *v13;
  char v14;
  void *v15[2];
  char v16;
  void *v17;
  char v18;
  void *__p[2];
  char v20;
  int v21;

  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v6 = (MIL::IRValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v20 < 0)
    operator delete(__p[0]);
  v7 = 0;
  while (1)
  {
    v8 = off_1EA9A0D48[v7];
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
    v10 = IsParameterSet;
    if ((v20 & 0x80000000) == 0)
      break;
    operator delete(__p[0]);
    if (v10)
      goto LABEL_8;
LABEL_16:
    if (++v7 == 4)
    {
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  if (!IsParameterSet)
    goto LABEL_16;
LABEL_8:
  std::string::basic_string[abi:ne180100]<0>(&v17, v8);
  v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v12 = (MIL::IRValueType *)MIL::IRValueType::AsTensorType(v11);
  std::string::basic_string[abi:ne180100]<0>(v15, "x");
  std::string::basic_string[abi:ne180100]<0>(&v13, v8);
  MIL::Validation::VerifyDimSizeIsNumChannels(v6, v12, (uint64_t)v15, this, 0, (MIL::ValidationResult *)__p);
  if (v14 < 0)
    operator delete(v13);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17);
  if (((*((uint64_t (**)(void **))__p[0] + 2))(__p) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
    goto LABEL_16;
  }
  MIL::MILResult::MILResult((std::string *)a2, (uint64_t)__p);
  *(_QWORD *)a2 = &off_1EA99F170;
  *((_DWORD *)a2 + 12) = v21;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)__p);
}

void sub_1E077D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::BatchNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  void **v88;
  char *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char **v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *p_shared_owners;
  unint64_t v117;
  void *v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  void **v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  void **v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  void **v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  void *v146;
  void **v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void *v153;
  void **v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  void **v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  void **v167;
  void **v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  void **v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void **v181;
  void **v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  void *v188;
  void **v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  void *v195;
  void **v196;
  std::__shared_weak_count *v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  void *v202;
  void **v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void *v209;
  void **v210;
  std::__shared_weak_count *v211;
  std::__shared_weak_count_vtbl *v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  void **v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  void **v223;
  uint64_t result;
  uint64_t v225;
  void **v226;
  std::__shared_weak_count *v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  void *v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  void *v236[2];
  char v237;
  void *v238;
  std::__shared_weak_count *v239;
  void *v240[2];
  char v241;
  void *v242[2];
  char v243;
  void *v244;
  std::__shared_weak_count *v245;
  void *v246[2];
  char v247;
  void *v248[2];
  char v249;
  void *v250;
  std::__shared_weak_count *v251;
  void *v252[2];
  char v253;
  void *v254[2];
  char v255;
  void *v256;
  std::__shared_weak_count *v257;
  void **v258;
  std::__shared_weak_count *v259;
  void *v260[2];
  char v261;
  void *v262;
  std::__shared_weak_count *v263;
  void **v264;
  std::__shared_weak_count *v265;
  void *v266[2];
  char v267;
  void *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  void *v272[2];
  char v273;
  void *v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  void *v278[2];
  char v279;
  void *v280;
  std::__shared_weak_count *v281;
  void *v282[2];
  char v283;
  void *v284[2];
  char v285;
  void *v286;
  std::__shared_weak_count *v287;
  void *v288[2];
  char v289;
  void *v290[2];
  char v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294[2];
  char v295;
  void *v296[2];
  char v297;
  void *v298;
  std::__shared_weak_count *v299;
  void *v300[2];
  char v301;
  void *v302[2];
  char v303;
  void *v304;
  std::__shared_weak_count *v305;
  __int128 v306;
  __int128 v307;
  void *v308[2];
  uint64_t v309;
  __n128 v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  char **v314;
  __n128 v315;
  __n128 v316;
  __n128 v317;
  __n128 v318;
  __n128 v319;
  void *__p;
  void *v321;
  _QWORD *v322;
  __n128 v323;
  _QWORD *v324;
  _BYTE v325[24];
  _BYTE *v326;
  _BYTE v327[24];
  _BYTE *v328;
  _QWORD v329[3];
  _QWORD *v330;
  void *v331;
  uint64_t v332;
  _QWORD *v333;
  _QWORD v334[2];
  void **Scalar;
  void **v336;
  void **v337;
  char *v338;
  char **v339;
  uint64_t v340;

  v340 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v324 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v336 = (void **)(v10 + 24);
  v337 = (void **)(v10 + 24);
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  Scalar = (void **)v10;
  v331 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v322 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v321 = v14 + 3;
  v332 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v331, 2, &v323);
  MIL::IRParameter::Make(&v323, &v312);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v312);
  v15 = v312;
  v312 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v323.n128_u64[1];
  if (v323.n128_u64[1])
  {
    v17 = (unint64_t *)(v323.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v321 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v336 = Scalar;
    operator delete(Scalar);
  }
  v19 = v324;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  Scalar = v21;
  *v21 = (void *)v20;
  v336 = v21 + 1;
  v337 = v21 + 1;
  v331 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v322 = v23 + 1;
  v321 = v23 + 1;
  v332 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v331, 2, &v319);
  MIL::IRParameter::Make(&v319, &v312);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "mean", &v312);
  v25 = v312;
  v312 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v319.n128_u64[1];
  if (v319.n128_u64[1])
  {
    v27 = (unint64_t *)(v319.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v321 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v336 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v324;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (void **)operator new(8uLL);
  Scalar = v31;
  *v31 = (void *)v30;
  v336 = v31 + 1;
  v337 = v31 + 1;
  v331 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v322 = v33 + 1;
  v321 = v33 + 1;
  v332 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v331, 2, &v318);
  MIL::IRParameter::Make(&v318, &v312);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v29, "variance", &v312);
  v35 = v312;
  v312 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v318.n128_u64[1];
  if (v318.n128_u64[1])
  {
    v37 = (unint64_t *)(v318.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v321 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v336 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v324;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (void **)operator new(8uLL);
  Scalar = v41;
  *v41 = (void *)v40;
  v336 = v41 + 1;
  v337 = v41 + 1;
  v331 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = operator new(8uLL);
  __p = v43;
  *v43 = v42;
  v322 = v43 + 1;
  v321 = v43 + 1;
  v332 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v331, 2, &v317);
  MIL::IRParameter::Make(&v317, &v312);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v39, "beta", &v312);
  v45 = v312;
  v312 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v317.n128_u64[1];
  if (v317.n128_u64[1])
  {
    v47 = (unint64_t *)(v317.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v321 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v336 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v324;
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = (void **)operator new(8uLL);
  Scalar = v51;
  *v51 = (void *)v50;
  v336 = v51 + 1;
  v337 = v51 + 1;
  v331 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = operator new(8uLL);
  __p = v53;
  *v53 = v52;
  v322 = v53 + 1;
  v321 = v53 + 1;
  v332 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v331, 2, &v316);
  MIL::IRParameter::Make(&v316, &v312);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v49, "gamma", &v312);
  v55 = v312;
  v312 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v316.n128_u64[1];
  if (v316.n128_u64[1])
  {
    v57 = (unint64_t *)(v316.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (__p)
  {
    v321 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v336 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v324;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v336 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v315);
  MIL::IRParameter::Make(&v315, (uint64_t *)&__p);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v59, "epsilon", (uint64_t *)&__p);
  v61 = __p;
  __p = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  v62 = (std::__shared_weak_count *)v315.n128_u64[1];
  if (v315.n128_u64[1])
  {
    v63 = (unint64_t *)(v315.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  v314 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v314, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v314, 1uLL);
  v66 = v314;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = operator new(8uLL);
  __p = v68;
  *v68 = v67;
  v322 = v68 + 1;
  v321 = v68 + 1;
  v334[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = operator new(8uLL);
  v331 = v70;
  *v70 = v69;
  v332 = (uint64_t)(v70 + 1);
  v333 = v70 + 1;
  v334[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v331);
  MIL::IRParameter::MakeTypeSet((uint64_t)v334, 2, &v310);
  MIL::IRParameter::Make(&v310, &v311);
  v71 = v311;
  v312 = v311;
  if (v311)
  {
    v72 = (_QWORD *)operator new();
    v73 = v311;
    *v72 = &unk_1EA99F888;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  v313 = v72;
  v311 = 0;
  v74 = v66[2];
  v75 = v66[1];
  if (v75 >= v74)
  {
    v77 = (v75 - *v66) >> 4;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v79 = v74 - *v66;
    if (v79 >> 3 > v78)
      v78 = v79 >> 3;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v80 = 0xFFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    v339 = v66 + 2;
    v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v66 + 2), v80);
    v83 = (uint64_t *)&v81[16 * v77];
    *v83 = v71;
    v83[1] = (uint64_t)v72;
    v313 = 0;
    v312 = 0;
    v85 = *v66;
    v84 = v66[1];
    if (v84 == *v66)
    {
      v88 = (void **)v66[1];
      v86 = &v81[16 * v77];
    }
    else
    {
      v86 = &v81[16 * v77];
      do
      {
        v87 = *((_OWORD *)v84 - 1);
        v84 -= 16;
        *((_OWORD *)v86 - 1) = v87;
        v86 -= 16;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
      }
      while (v84 != v85);
      v88 = (void **)*v66;
      v84 = v66[1];
    }
    v76 = (char *)(v83 + 2);
    *v66 = v86;
    Scalar = v88;
    v336 = v88;
    v66[1] = (char *)(v83 + 2);
    v337 = (void **)v84;
    v89 = v66[2];
    v66[2] = &v81[16 * v82];
    v338 = v89;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v75 = v71;
    *((_QWORD *)v75 + 1) = v72;
    v76 = v75 + 16;
    v313 = 0;
    v312 = 0;
  }
  v66[1] = v76;
  v90 = v311;
  v311 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v310.n128_u64[1];
  if (v310.n128_u64[1])
  {
    v92 = (unint64_t *)(v310.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v331)
  {
    v332 = (uint64_t)v331;
    operator delete(v331);
  }
  if (__p)
  {
    v321 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v308 = *(_OWORD *)a2;
  v309 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v94 = (uint64_t)v324;
  *(_QWORD *)&v307 = v324;
  if (v324)
  {
    v95 = (_QWORD *)operator new();
    *v95 = &unk_1EA99F8E8;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v307 + 1) = v95;
  v324 = 0;
  *(_QWORD *)&v306 = v314;
  if (v314)
  {
    v96 = (_QWORD *)operator new();
    v97 = v314;
    *v96 = &unk_1EA99F948;
    v96[1] = 0;
    v96[2] = 0;
    v96[3] = v97;
  }
  else
  {
    v96 = 0;
  }
  *((_QWORD *)&v306 + 1) = v96;
  v314 = 0;
  v329[0] = &unk_1EA99FAC8;
  v329[1] = MIL::Operators::Common::ios15::CustomValidators::ValidateBatchNorm;
  v330 = v329;
  v328 = 0;
  MIL::IROperator::Make((__int128 *)v308, &v307, &v306, (uint64_t)v329, (uint64_t)v327, a3);
  v98 = v328;
  if (v328 == v327)
  {
    v99 = 4;
    v98 = v327;
  }
  else
  {
    if (!v328)
      goto LABEL_102;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_102:
  v100 = v330;
  if (v330 == v329)
  {
    v101 = 4;
    v100 = v329;
    goto LABEL_106;
  }
  if (v330)
  {
    v101 = 5;
LABEL_106:
    (*(void (**)(void))(*v100 + 8 * v101))();
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v306 + 1);
  if (*((_QWORD *)&v306 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v306 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v307 + 1);
  if (*((_QWORD *)&v307 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v307 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (SHIBYTE(v309) < 0)
    operator delete(v308[0]);
  v108 = *a3;
  v109 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v109, (uint64_t)v325);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v108 + 200))(v108, v325);
  v110 = v326;
  if (v326 == v325)
  {
    v111 = 4;
    v110 = v325;
  }
  else
  {
    if (!v326)
      goto LABEL_124;
    v111 = 5;
  }
  (*(void (**)(void))(*v110 + 8 * v111))();
LABEL_124:
  if (SHIBYTE(v337) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v112 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v302, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v302, 0, (uint64_t *)&__p);
  v304 = __p;
  if (__p)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)__p;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v305 = v113;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v300, "T");
  (*((void (**)(void **, void **, void **))*v112 + 3))(v112, &v304, v300);
  if (v301 < 0)
    operator delete(v300[0]);
  v115 = v305;
  if (v305)
  {
    p_shared_owners = (unint64_t *)&v305->__shared_owners_;
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = __p;
  __p = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  if (v303 < 0)
    operator delete(v302[0]);
  v119 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v296, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v296, 0, (uint64_t *)&__p);
  v298 = __p;
  if (__p)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)__p;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v299 = v120;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v294, "T");
  (*((void (**)(void **, void **, void **))*v119 + 3))(v119, &v298, v294);
  if (v295 < 0)
    operator delete(v294[0]);
  v122 = v299;
  if (v299)
  {
    v123 = (unint64_t *)&v299->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  if (v297 < 0)
    operator delete(v296[0]);
  v126 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v290, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v290, 0, (uint64_t *)&__p);
  v292 = __p;
  if (__p)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = (std::__shared_weak_count_vtbl *)__p;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v293 = v127;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v288, "T");
  (*((void (**)(void **, void **, void **))*v126 + 3))(v126, &v292, v288);
  if (v289 < 0)
    operator delete(v288[0]);
  v129 = v293;
  if (v293)
  {
    v130 = (unint64_t *)&v293->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = __p;
  __p = 0;
  if (v132)
    (*(void (**)(void *))(*(_QWORD *)v132 + 8))(v132);
  if (v291 < 0)
    operator delete(v290[0]);
  v133 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v284, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v284, 1, (uint64_t *)&__p);
  v286 = __p;
  if (__p)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)__p;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v287 = v134;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v282, "T");
  (*((void (**)(void **, void **, void **))*v133 + 3))(v133, &v286, v282);
  if (v283 < 0)
    operator delete(v282[0]);
  v136 = v287;
  if (v287)
  {
    v137 = (unint64_t *)&v287->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = __p;
  __p = 0;
  if (v139)
    (*(void (**)(void *))(*(_QWORD *)v139 + 8))(v139);
  if (v285 < 0)
    operator delete(v284[0]);
  v140 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v278, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v278, 1, (uint64_t *)&__p);
  v280 = __p;
  if (__p)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = (std::__shared_weak_count_vtbl *)__p;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v281 = v141;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v276, "T");
  (*((void (**)(void **, void **, void **))*v140 + 3))(v140, &v280, v276);
  if (v277 < 0)
    operator delete(v276[0]);
  v143 = v281;
  if (v281)
  {
    v144 = (unint64_t *)&v281->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = __p;
  __p = 0;
  if (v146)
    (*(void (**)(void *))(*(_QWORD *)v146 + 8))(v146);
  if (v279 < 0)
    operator delete(v278[0]);
  v147 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v272, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 0, (uint64_t *)&__p);
  v274 = __p;
  if (__p)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = (std::__shared_weak_count_vtbl *)__p;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v275 = v148;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v270, "T");
  (*((void (**)(void **, void **, void **))*v147 + 3))(v147, &v274, v270);
  if (v271 < 0)
    operator delete(v270[0]);
  v150 = v275;
  if (v275)
  {
    v151 = (unint64_t *)&v275->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = __p;
  __p = 0;
  if (v153)
    (*(void (**)(void *))(*(_QWORD *)v153 + 8))(v153);
  if (v273 < 0)
    operator delete(v272[0]);
  v154 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v268 = __p;
  if (__p)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = (std::__shared_weak_count_vtbl *)__p;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v269 = v155;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v266, "T");
  (*((void (**)(void **, void **, void **))*v154 + 3))(v154, &v268, v266);
  if (v267 < 0)
    operator delete(v266[0]);
  v157 = v269;
  if (v269)
  {
    v158 = (unint64_t *)&v269->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = __p;
  __p = 0;
  if (v160)
    (*(void (**)(void *))(*(_QWORD *)v160 + 8))(v160);
  v161 = *a3;
  v264 = Scalar;
  if (Scalar)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = Scalar;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = (std::__shared_weak_count_vtbl *)v163;
  }
  else
  {
    v162 = 0;
  }
  v265 = v162;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v161 + 56))(v161, &v264);
  v164 = v265;
  if (v265)
  {
    v165 = (unint64_t *)&v265->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = Scalar;
  Scalar = 0;
  if (v167)
    (*((void (**)(void **))*v167 + 1))(v167);
  MIL::Validation::TensorRankValueConstraints::Make(&Scalar);
  v168 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v260, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v260, 0, (uint64_t *)&__p);
  v262 = __p;
  if (__p)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = (std::__shared_weak_count_vtbl *)__p;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v263 = v169;
  __p = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v168 + 4))(v168, &v262, 3, 5);
  v171 = v263;
  if (v263)
  {
    v172 = (unint64_t *)&v263->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = __p;
  __p = 0;
  if (v174)
    (*(void (**)(void *))(*(_QWORD *)v174 + 8))(v174);
  if (v261 < 0)
    operator delete(v260[0]);
  v175 = *a3;
  v258 = Scalar;
  if (Scalar)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = Scalar;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  }
  else
  {
    v176 = 0;
  }
  v259 = v176;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v175 + 56))(v175, &v258);
  v178 = v259;
  if (v259)
  {
    v179 = (unint64_t *)&v259->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = Scalar;
  Scalar = 0;
  if (v181)
    (*((void (**)(void **))*v181 + 1))(v181);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v182 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v254, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v254, 0, (uint64_t *)&__p);
  v256 = __p;
  if (__p)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = (std::__shared_weak_count_vtbl *)__p;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v257 = v183;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v252, "C");
  (*((void (**)(void **, void **, uint64_t, void **))*v182 + 3))(v182, &v256, 1, v252);
  if (v253 < 0)
    operator delete(v252[0]);
  v185 = v257;
  if (v257)
  {
    v186 = (unint64_t *)&v257->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = __p;
  __p = 0;
  if (v188)
    (*(void (**)(void *))(*(_QWORD *)v188 + 8))(v188);
  if (v255 < 0)
    operator delete(v254[0]);
  v189 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v248, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v248, 0, (uint64_t *)&__p);
  v250 = __p;
  if (__p)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = (std::__shared_weak_count_vtbl *)__p;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v251 = v190;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v246, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v189 + 3))(v189, &v250, 0, v246);
  if (v247 < 0)
    operator delete(v246[0]);
  v192 = v251;
  if (v251)
  {
    v193 = (unint64_t *)&v251->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = __p;
  __p = 0;
  if (v195)
    (*(void (**)(void *))(*(_QWORD *)v195 + 8))(v195);
  if (v249 < 0)
    operator delete(v248[0]);
  v196 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v242, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v242, 0, (uint64_t *)&__p);
  v244 = __p;
  if (__p)
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = (std::__shared_weak_count_vtbl *)__p;
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = v198;
  }
  else
  {
    v197 = 0;
  }
  v245 = v197;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v240, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v196 + 3))(v196, &v244, 0, v240);
  if (v241 < 0)
    operator delete(v240[0]);
  v199 = v245;
  if (v245)
  {
    v200 = (unint64_t *)&v245->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = __p;
  __p = 0;
  if (v202)
    (*(void (**)(void *))(*(_QWORD *)v202 + 8))(v202);
  if (v243 < 0)
    operator delete(v242[0]);
  v203 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v236, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v236, 1, (uint64_t *)&__p);
  v238 = __p;
  if (__p)
  {
    v204 = (std::__shared_weak_count *)operator new();
    v205 = (std::__shared_weak_count_vtbl *)__p;
    v204->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v204->__shared_owners_ = 0;
    v204->__shared_weak_owners_ = 0;
    v204[1].__vftable = v205;
  }
  else
  {
    v204 = 0;
  }
  v239 = v204;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v234, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v203 + 3))(v203, &v238, 0, v234);
  if (v235 < 0)
    operator delete(v234[0]);
  v206 = v239;
  if (v239)
  {
    v207 = (unint64_t *)&v239->__shared_owners_;
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  v209 = __p;
  __p = 0;
  if (v209)
    (*(void (**)(void *))(*(_QWORD *)v209 + 8))(v209);
  if (v237 < 0)
    operator delete(v236[0]);
  v210 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v230, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v230, 1, (uint64_t *)&__p);
  v232 = __p;
  if (__p)
  {
    v211 = (std::__shared_weak_count *)operator new();
    v212 = (std::__shared_weak_count_vtbl *)__p;
    v211->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v211->__shared_owners_ = 0;
    v211->__shared_weak_owners_ = 0;
    v211[1].__vftable = v212;
  }
  else
  {
    v211 = 0;
  }
  v233 = v211;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v228, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v210 + 3))(v210, &v232, 0, v228);
  if (v229 < 0)
    operator delete(v228[0]);
  v213 = v233;
  if (v233)
  {
    v214 = (unint64_t *)&v233->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = __p;
  __p = 0;
  if (v216)
    (*(void (**)(void *))(*(_QWORD *)v216 + 8))(v216);
  if (v231 < 0)
    operator delete(v230[0]);
  v217 = *a3;
  v226 = Scalar;
  if (Scalar)
  {
    v218 = (std::__shared_weak_count *)operator new();
    v219 = Scalar;
    v218->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v218->__shared_owners_ = 0;
    v218->__shared_weak_owners_ = 0;
    v218[1].__vftable = (std::__shared_weak_count_vtbl *)v219;
  }
  else
  {
    v218 = 0;
  }
  v227 = v218;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v217 + 56))(v217, &v226);
  v220 = v227;
  if (v227)
  {
    v221 = (unint64_t *)&v227->__shared_owners_;
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 - 1, v221));
    if (!v222)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  v223 = Scalar;
  Scalar = 0;
  if (v223)
    (*((void (**)(void **))*v223 + 1))(v223);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v314, 0);
  result = (uint64_t)v324;
  if (v324)
  {
    v225 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v324);
    return MEMORY[0x1E0C023A0](v225, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E077F610(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x3A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::InstanceNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  void **v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  void *v98;
  void **v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  void **v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  void **v147;
  void **v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count_vtbl *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void *v154;
  void **v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  void **v162;
  std::__shared_weak_count *v163;
  std::__shared_weak_count_vtbl *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  void **v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void **v175;
  uint64_t result;
  uint64_t v177;
  void **v178;
  std::__shared_weak_count *v179;
  void *v180[2];
  char v181;
  void *v182[2];
  char v183;
  void *v184;
  std::__shared_weak_count *v185;
  void *v186[2];
  char v187;
  void *v188[2];
  char v189;
  void *v190;
  std::__shared_weak_count *v191;
  void *v192[2];
  char v193;
  void *v194[2];
  char v195;
  void *v196;
  std::__shared_weak_count *v197;
  void **v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202;
  std::__shared_weak_count *v203;
  void **v204;
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  void *v208;
  std::__shared_weak_count *v209;
  void *v210[2];
  char v211;
  void *v212[2];
  char v213;
  void *v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  void *v218[2];
  char v219;
  void *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  void *v224[2];
  char v225;
  void *v226;
  std::__shared_weak_count *v227;
  void *v228[2];
  char v229;
  void *v230[2];
  char v231;
  void *v232;
  std::__shared_weak_count *v233;
  __int128 v234;
  __int128 v235;
  void *v236[2];
  uint64_t v237;
  __n128 v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  char **v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  void *__p;
  void *v247;
  _QWORD *v248;
  __n128 v249;
  _QWORD *v250;
  _BYTE v251[24];
  _BYTE *v252;
  _BYTE v253[24];
  _BYTE *v254;
  _BYTE v255[24];
  _BYTE *v256;
  void *v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD v260[2];
  void **Scalar;
  void **v262;
  void **v263;
  char *v264;
  char **v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v250 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v262 = (void **)(v10 + 24);
  v263 = (void **)(v10 + 24);
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  Scalar = (void **)v10;
  v257 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v248 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v247 = v14 + 3;
  v258 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v257, 2, &v249);
  MIL::IRParameter::Make(&v249, &v240);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v240);
  v15 = v240;
  v240 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v249.n128_u64[1];
  if (v249.n128_u64[1])
  {
    v17 = (unint64_t *)(v249.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v247 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v262 = Scalar;
    operator delete(Scalar);
  }
  v19 = v250;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (void **)operator new(8uLL);
  Scalar = v21;
  *v21 = (void *)v20;
  v262 = v21 + 1;
  v263 = v21 + 1;
  v257 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v248 = v23 + 1;
  v247 = v23 + 1;
  v258 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v257, 2, &v245);
  MIL::IRParameter::Make(&v245, &v240);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "beta", &v240);
  v25 = v240;
  v240 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v245.n128_u64[1];
  if (v245.n128_u64[1])
  {
    v27 = (unint64_t *)(v245.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (__p)
  {
    v247 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v262 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v29 = v250;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (void **)operator new(8uLL);
  Scalar = v31;
  *v31 = (void *)v30;
  v262 = v31 + 1;
  v263 = v31 + 1;
  v257 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v248 = v33 + 1;
  v247 = v33 + 1;
  v258 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v257, 2, &v244);
  MIL::IRParameter::Make(&v244, &v240);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v29, "gamma", &v240);
  v35 = v240;
  v240 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v244.n128_u64[1];
  if (v244.n128_u64[1])
  {
    v37 = (unint64_t *)(v244.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v247 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v262 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v39 = v250;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v262 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v243);
  MIL::IRParameter::Make(&v243, (uint64_t *)&__p);
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v39, "epsilon", (uint64_t *)&__p);
  v41 = __p;
  __p = 0;
  if (v41)
    (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
  v42 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v43 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  v242 = 0;
  v45 = operator new();
  *(_QWORD *)v45 = 0;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v242, (void **)v45);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v242, 1uLL);
  v46 = v242;
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  __p = v48;
  *v48 = v47;
  v248 = v48 + 1;
  v247 = v48 + 1;
  v260[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v257 = v50;
  *v50 = v49;
  v258 = (uint64_t)(v50 + 1);
  v259 = v50 + 1;
  v260[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v257);
  MIL::IRParameter::MakeTypeSet((uint64_t)v260, 2, &v238);
  MIL::IRParameter::Make(&v238, &v239);
  v51 = v239;
  v240 = v239;
  if (v239)
  {
    v52 = (_QWORD *)operator new();
    v53 = v239;
    *v52 = &unk_1EA99F888;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  v241 = v52;
  v239 = 0;
  v54 = v46[2];
  v55 = v46[1];
  if (v55 >= v54)
  {
    v57 = (v55 - *v46) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v59 = v54 - *v46;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    v265 = v46 + 2;
    v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v46 + 2), v60);
    v63 = (uint64_t *)&v61[16 * v57];
    *v63 = v51;
    v63[1] = (uint64_t)v52;
    v241 = 0;
    v240 = 0;
    v65 = *v46;
    v64 = v46[1];
    if (v64 == *v46)
    {
      v68 = (void **)v46[1];
      v66 = &v61[16 * v57];
    }
    else
    {
      v66 = &v61[16 * v57];
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v64 -= 16;
        *((_OWORD *)v66 - 1) = v67;
        v66 -= 16;
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
      }
      while (v64 != v65);
      v68 = (void **)*v46;
      v64 = v46[1];
    }
    v56 = (char *)(v63 + 2);
    *v46 = v66;
    Scalar = v68;
    v262 = v68;
    v46[1] = (char *)(v63 + 2);
    v263 = (void **)v64;
    v69 = v46[2];
    v46[2] = &v61[16 * v62];
    v264 = v69;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v55 = v51;
    *((_QWORD *)v55 + 1) = v52;
    v56 = v55 + 16;
    v241 = 0;
    v240 = 0;
  }
  v46[1] = v56;
  v70 = v239;
  v239 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v238.n128_u64[1];
  if (v238.n128_u64[1])
  {
    v72 = (unint64_t *)(v238.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v257)
  {
    v258 = (uint64_t)v257;
    operator delete(v257);
  }
  if (__p)
  {
    v247 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v236 = *(_OWORD *)a2;
  v237 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v74 = (uint64_t)v250;
  *(_QWORD *)&v235 = v250;
  if (v250)
  {
    v75 = (_QWORD *)operator new();
    *v75 = &unk_1EA99F8E8;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v74;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v235 + 1) = v75;
  v250 = 0;
  *(_QWORD *)&v234 = v242;
  if (v242)
  {
    v76 = (_QWORD *)operator new();
    v77 = v242;
    *v76 = &unk_1EA99F948;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v234 + 1) = v76;
  v242 = 0;
  v256 = 0;
  v254 = 0;
  MIL::IROperator::Make((__int128 *)v236, &v235, &v234, (uint64_t)v255, (uint64_t)v253, a3);
  v78 = v254;
  if (v254 == v253)
  {
    v79 = 4;
    v78 = v253;
  }
  else
  {
    if (!v254)
      goto LABEL_80;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_80:
  v80 = v256;
  if (v256 == v255)
  {
    v81 = 4;
    v80 = v255;
    goto LABEL_84;
  }
  if (v256)
  {
    v81 = 5;
LABEL_84:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v234 + 1);
  if (*((_QWORD *)&v234 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v234 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SHIBYTE(v237) < 0)
    operator delete(v236[0]);
  v88 = *a3;
  v89 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v89, (uint64_t)v251);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v88 + 200))(v88, v251);
  v90 = v252;
  if (v252 == v251)
  {
    v91 = 4;
    v90 = v251;
  }
  else
  {
    if (!v252)
      goto LABEL_102;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_102:
  if (SHIBYTE(v263) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v92 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v230, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v230, 0, (uint64_t *)&__p);
  v232 = __p;
  if (__p)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = (std::__shared_weak_count_vtbl *)__p;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v233 = v93;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v228, "T");
  (*((void (**)(void **, void **, void **))*v92 + 3))(v92, &v232, v228);
  if (v229 < 0)
    operator delete(v228[0]);
  v95 = v233;
  if (v233)
  {
    p_shared_owners = (unint64_t *)&v233->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = __p;
  __p = 0;
  if (v98)
    (*(void (**)(void *))(*(_QWORD *)v98 + 8))(v98);
  if (v231 < 0)
    operator delete(v230[0]);
  v99 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v224, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v224, 1, (uint64_t *)&__p);
  v226 = __p;
  if (__p)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = (std::__shared_weak_count_vtbl *)__p;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v227 = v100;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "T");
  (*((void (**)(void **, void **, void **))*v99 + 3))(v99, &v226, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v102 = v227;
  if (v227)
  {
    v103 = (unint64_t *)&v227->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = __p;
  __p = 0;
  if (v105)
    (*(void (**)(void *))(*(_QWORD *)v105 + 8))(v105);
  if (v225 < 0)
    operator delete(v224[0]);
  v106 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v218, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v218, 1, (uint64_t *)&__p);
  v220 = __p;
  if (__p)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)__p;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v221 = v107;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v216, "T");
  (*((void (**)(void **, void **, void **))*v106 + 3))(v106, &v220, v216);
  if (v217 < 0)
    operator delete(v216[0]);
  v109 = v221;
  if (v221)
  {
    v110 = (unint64_t *)&v221->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = __p;
  __p = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  if (v219 < 0)
    operator delete(v218[0]);
  v113 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v212, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v212, 0, (uint64_t *)&__p);
  v214 = __p;
  if (__p)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)__p;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v215 = v114;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v210, "T");
  (*((void (**)(void **, void **, void **))*v113 + 3))(v113, &v214, v210);
  if (v211 < 0)
    operator delete(v210[0]);
  v116 = v215;
  if (v215)
  {
    v117 = (unint64_t *)&v215->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = __p;
  __p = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  if (v213 < 0)
    operator delete(v212[0]);
  v120 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v208 = __p;
  if (__p)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)__p;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v209 = v121;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v206, "T");
  (*((void (**)(void **, void **, void **))*v120 + 3))(v120, &v208, v206);
  if (v207 < 0)
    operator delete(v206[0]);
  v123 = v209;
  if (v209)
  {
    v124 = (unint64_t *)&v209->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  v127 = *a3;
  v204 = Scalar;
  if (Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v205 = v128;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v204);
  v130 = v205;
  if (v205)
  {
    v131 = (unint64_t *)&v205->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = Scalar;
  Scalar = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  MIL::Validation::TensorRankValueConstraints::Make(&Scalar);
  v134 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v200, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v200, 0, (uint64_t *)&__p);
  v202 = __p;
  if (__p)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = (std::__shared_weak_count_vtbl *)__p;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v203 = v135;
  __p = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v134 + 4))(v134, &v202, 3, 4);
  v137 = v203;
  if (v203)
  {
    v138 = (unint64_t *)&v203->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = __p;
  __p = 0;
  if (v140)
    (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
  if (v201 < 0)
    operator delete(v200[0]);
  v141 = *a3;
  v198 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = (std::__shared_weak_count_vtbl *)v143;
  }
  else
  {
    v142 = 0;
  }
  v199 = v142;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v141 + 56))(v141, &v198);
  v144 = v199;
  if (v199)
  {
    v145 = (unint64_t *)&v199->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(void **))*v147 + 1))(v147);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v148 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v194, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v194, 0, (uint64_t *)&__p);
  v196 = __p;
  if (__p)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = (std::__shared_weak_count_vtbl *)__p;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = v150;
  }
  else
  {
    v149 = 0;
  }
  v197 = v149;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v192, "C");
  (*((void (**)(void **, void **, uint64_t, void **))*v148 + 3))(v148, &v196, 1, v192);
  if (v193 < 0)
    operator delete(v192[0]);
  v151 = v197;
  if (v197)
  {
    v152 = (unint64_t *)&v197->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = __p;
  __p = 0;
  if (v154)
    (*(void (**)(void *))(*(_QWORD *)v154 + 8))(v154);
  if (v195 < 0)
    operator delete(v194[0]);
  v155 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v188, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v188, 1, (uint64_t *)&__p);
  v190 = __p;
  if (__p)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = (std::__shared_weak_count_vtbl *)__p;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v191 = v156;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v186, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v155 + 3))(v155, &v190, 0, v186);
  if (v187 < 0)
    operator delete(v186[0]);
  v158 = v191;
  if (v191)
  {
    v159 = (unint64_t *)&v191->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  v161 = __p;
  __p = 0;
  if (v161)
    (*(void (**)(void *))(*(_QWORD *)v161 + 8))(v161);
  if (v189 < 0)
    operator delete(v188[0]);
  v162 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v182, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v182, 1, (uint64_t *)&__p);
  v184 = __p;
  if (__p)
  {
    v163 = (std::__shared_weak_count *)operator new();
    v164 = (std::__shared_weak_count_vtbl *)__p;
    v163->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v163->__shared_owners_ = 0;
    v163->__shared_weak_owners_ = 0;
    v163[1].__vftable = v164;
  }
  else
  {
    v163 = 0;
  }
  v185 = v163;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v180, "C");
  (*((void (**)(void **, void **, _QWORD, void **))*v162 + 3))(v162, &v184, 0, v180);
  if (v181 < 0)
    operator delete(v180[0]);
  v165 = v185;
  if (v185)
  {
    v166 = (unint64_t *)&v185->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  v168 = __p;
  __p = 0;
  if (v168)
    (*(void (**)(void *))(*(_QWORD *)v168 + 8))(v168);
  if (v183 < 0)
    operator delete(v182[0]);
  v169 = *a3;
  v178 = Scalar;
  if (Scalar)
  {
    v170 = (std::__shared_weak_count *)operator new();
    v171 = Scalar;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v170->__shared_owners_ = 0;
    v170->__shared_weak_owners_ = 0;
    v170[1].__vftable = (std::__shared_weak_count_vtbl *)v171;
  }
  else
  {
    v170 = 0;
  }
  v179 = v170;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v169 + 56))(v169, &v178);
  v172 = v179;
  if (v179)
  {
    v173 = (unint64_t *)&v179->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v175 = Scalar;
  Scalar = 0;
  if (v175)
    (*((void (**)(void **))*v175 + 1))(v175);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v242, 0);
  result = (uint64_t)v250;
  if (v250)
  {
    v177 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v250);
    return MEMORY[0x1E0C023A0](v177, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07813B4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 - 112);
  *(_QWORD *)(v2 - 112) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::L2Norm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  void **v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  void **v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  void *v78;
  void **v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  void **v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void **v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void **v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void **v127;
  uint64_t result;
  uint64_t v129;
  void **v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  void **v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  void **v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  void *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  void *v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  __int128 v163;
  void *v164[2];
  uint64_t v165;
  __n128 v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  char **v170;
  __n128 v171;
  void *__p;
  void *v173;
  _QWORD *v174;
  __n128 v175;
  _QWORD *v176;
  _BYTE v177[24];
  _BYTE *v178;
  _BYTE v179[24];
  _BYTE *v180;
  _BYTE v181[24];
  _BYTE *v182;
  void *v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD v186[2];
  void **Scalar;
  void **v188;
  char *v189;
  char *v190;
  char **v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v176 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v188 = (void **)(v10 + 24);
  v189 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  Scalar = (void **)v10;
  v183 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x18uLL);
  v173 = v14 + 3;
  v174 = v14 + 3;
  *v14 = v11;
  v14[1] = v12;
  v14[2] = v13;
  __p = v14;
  v184 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v183, 2, &v175);
  MIL::IRParameter::Make(&v175, &v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v168);
  v15 = v168;
  v168 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v17 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v188 = Scalar;
    operator delete(Scalar);
  }
  v19 = v176;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v188 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&__p);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v19, "epsilon", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v23 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v170 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v170, 1uLL);
  v26 = v170;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v173 = v28 + 1;
  v174 = v28 + 1;
  v186[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v183 = v30;
  *v30 = v29;
  v184 = (uint64_t)(v30 + 1);
  v185 = v30 + 1;
  v186[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v183);
  MIL::IRParameter::MakeTypeSet((uint64_t)v186, 2, &v166);
  MIL::IRParameter::Make(&v166, &v167);
  v31 = v167;
  v168 = v167;
  if (v167)
  {
    v32 = (_QWORD *)operator new();
    v33 = v167;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v169 = v32;
  v167 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v191 = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v168 = 0;
    v169 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = (void **)v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = (void **)*v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    Scalar = v48;
    v188 = v48;
    v26[1] = (char *)(v43 + 2);
    v189 = v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v190 = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v168 = 0;
    v169 = 0;
  }
  v26[1] = v36;
  v50 = v167;
  v167 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v52 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v183)
  {
    v184 = (uint64_t)v183;
    operator delete(v183);
  }
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v164 = *(_OWORD *)a2;
  v165 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v176;
  *(_QWORD *)&v163 = v176;
  if (v176)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v163 + 1) = v55;
  v176 = 0;
  *(_QWORD *)&v162 = v170;
  if (v170)
  {
    v56 = (_QWORD *)operator new();
    v57 = v170;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v162 + 1) = v56;
  v170 = 0;
  v182 = 0;
  v180 = 0;
  MIL::IROperator::Make((__int128 *)v164, &v163, &v162, (uint64_t)v181, (uint64_t)v179, a3);
  v58 = v180;
  if (v180 == v179)
  {
    v59 = 4;
    v58 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_58;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_58:
  v60 = v182;
  if (v182 == v181)
  {
    v61 = 4;
    v60 = v181;
    goto LABEL_62;
  }
  if (v182)
  {
    v61 = 5;
LABEL_62:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v165) < 0)
    operator delete(v164[0]);
  v68 = *a3;
  v69 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v69, (uint64_t)v177);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v68 + 200))(v68, v177);
  v70 = v178;
  if (v178 == v177)
  {
    v71 = 4;
    v70 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_80;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_80:
  if (SHIBYTE(v189) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v72 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&__p);
  v160 = __p;
  if (__p)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = (std::__shared_weak_count_vtbl *)__p;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = v74;
  }
  else
  {
    v73 = 0;
  }
  v161 = v73;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*((void (**)(void **, void **, void **))*v72 + 3))(v72, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v75 = v161;
  if (v161)
  {
    p_shared_owners = (unint64_t *)&v161->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = __p;
  __p = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  if (v159 < 0)
    operator delete(v158[0]);
  v79 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v152, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&__p);
  v154 = __p;
  if (__p)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)__p;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v155 = v80;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*((void (**)(void **, void **, void **))*v79 + 3))(v79, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v82 = v155;
  if (v155)
  {
    v83 = (unint64_t *)&v155->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = __p;
  __p = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v153 < 0)
    operator delete(v152[0]);
  v86 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v148 = __p;
  if (__p)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)__p;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v149 = v87;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*((void (**)(void **, void **, void **))*v86 + 3))(v86, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v89 = v149;
  if (v149)
  {
    v90 = (unint64_t *)&v149->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = __p;
  __p = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  v93 = *a3;
  v144 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
  }
  else
  {
    v94 = 0;
  }
  v145 = v94;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v93 + 56))(v93, &v144);
  v96 = v145;
  if (v145)
  {
    v97 = (unint64_t *)&v145->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(void **))*v99 + 1))(v99);
  MIL::Validation::TensorRankValueConstraints::Make(&Scalar);
  v100 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v140, 0, (uint64_t *)&__p);
  v142 = __p;
  if (__p)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)__p;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v143 = v101;
  __p = 0;
  (*((void (**)(void **, void **, uint64_t, uint64_t))*v100 + 4))(v100, &v142, 3, 5);
  v103 = v143;
  if (v143)
  {
    v104 = (unint64_t *)&v143->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = __p;
  __p = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  if (v141 < 0)
    operator delete(v140[0]);
  v107 = *a3;
  v138 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v139 = v108;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v107 + 56))(v107, &v138);
  v110 = v139;
  if (v139)
  {
    v111 = (unint64_t *)&v139->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(void **))*v113 + 1))(v113);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v114 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&__p);
  v136 = __p;
  if (__p)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)__p;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v137 = v115;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "C");
  (*((void (**)(void **, void **, uint64_t, void **))*v114 + 3))(v114, &v136, 1, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v117 = v137;
  if (v137)
  {
    v118 = (unint64_t *)&v137->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = __p;
  __p = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v135 < 0)
    operator delete(v134[0]);
  v121 = *a3;
  v130 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v131 = v122;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v121 + 56))(v121, &v130);
  v124 = v131;
  if (v131)
  {
    v125 = (unint64_t *)&v131->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(void **))*v127 + 1))(v127);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v170, 0);
  result = (uint64_t)v176;
  if (v176)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v176);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07828A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;

  v64 = *(_QWORD *)(v62 - 112);
  *(_QWORD *)(v62 - 112) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *v61;
  *v61 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v62 - 256), 0);
  _Unwind_Resume(a1);
}

void sub_1E0782CE8()
{
  JUMPOUT(0x1E0782CA0);
}

uint64_t MIL::Operators::Common::ios15::LayerNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  void **v76;
  char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char **v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  void **v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  void *v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void **v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void **v155;
  uint64_t result;
  uint64_t v157;
  void **v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  void *v162[2];
  char v163;
  void *v164;
  std::__shared_weak_count *v165;
  void **v166;
  std::__shared_weak_count *v167;
  void *v168[2];
  char v169;
  void *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  void *v174[2];
  char v175;
  void *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  void *v182;
  std::__shared_weak_count *v183;
  void *v184[2];
  char v185;
  void *v186[2];
  char v187;
  void *v188;
  std::__shared_weak_count *v189;
  void *v190[2];
  char v191;
  void *v192[2];
  char v193;
  void *v194;
  std::__shared_weak_count *v195;
  __int128 v196;
  __int128 v197;
  void *v198[2];
  uint64_t v199;
  __n128 v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char **v204;
  __n128 v205;
  __n128 v206;
  __n128 v207;
  __n128 v208;
  void *__p;
  void *v210;
  _QWORD *v211;
  __n128 v212;
  _QWORD *v213;
  _BYTE v214[24];
  _BYTE *v215;
  _BYTE v216[24];
  _BYTE *v217;
  _BYTE v218[24];
  _BYTE *v219;
  void *v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD v223[2];
  void **Scalar;
  void **v225;
  void **v226;
  char *v227;
  char **v228;
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v213 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (void **)operator new(8uLL);
  Scalar = v8;
  *v8 = (void *)v7;
  v225 = v8 + 1;
  v226 = v8 + 1;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v211 = v10 + 1;
  v210 = v10 + 1;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 2, &v212);
  MIL::IRParameter::Make(&v212, &v202);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v202);
  v11 = v202;
  v202 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v212.n128_u64[1];
  if (v212.n128_u64[1])
  {
    v13 = (unint64_t *)(v212.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  v15 = v213;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (void **)operator new(8uLL);
  Scalar = v17;
  *v17 = (void *)v16;
  v225 = v17 + 1;
  v226 = v17 + 1;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 1, &v208);
  MIL::IRParameter::Make(&v208, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "axes", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v21 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v213;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (char *)operator new(0x10uLL);
  v225 = (void **)(v26 + 16);
  v226 = (void **)(v26 + 16);
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  Scalar = (void **)v26;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v211 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v210 = v29 + 2;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 2, &v207);
  MIL::IRParameter::Make(&v207, &v202);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "gamma", &v202);
  v31 = v202;
  v202 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v207.n128_u64[1];
  if (v207.n128_u64[1])
  {
    v33 = (unint64_t *)(v207.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v213;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (char *)operator new(0x10uLL);
  v225 = (void **)(v38 + 16);
  v226 = (void **)(v38 + 16);
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  Scalar = (void **)v38;
  v220 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = operator new(0x10uLL);
  v211 = v41 + 2;
  *v41 = v39;
  v41[1] = v40;
  __p = v41;
  v210 = v41 + 2;
  v221 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v220, 2, &v206);
  MIL::IRParameter::Make(&v206, &v202);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "beta", &v202);
  v43 = v202;
  v202 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v206.n128_u64[1];
  if (v206.n128_u64[1])
  {
    v45 = (unint64_t *)(v206.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v225 = Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v213;
  Scalar = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v225 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v205);
  MIL::IRParameter::Make(&v205, (uint64_t *)&__p);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v47, "epsilon", (uint64_t *)&__p);
  v49 = __p;
  __p = 0;
  if (v49)
    (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v205.n128_u64[1];
  if (v205.n128_u64[1])
  {
    v51 = (unint64_t *)(v205.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v204 = 0;
  v53 = operator new();
  *(_QWORD *)v53 = 0;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v204, (void **)v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v204, 1uLL);
  v54 = v204;
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = operator new(8uLL);
  __p = v56;
  *v56 = v55;
  v211 = v56 + 1;
  v210 = v56 + 1;
  v223[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = operator new(8uLL);
  v220 = v58;
  *v58 = v57;
  v221 = (uint64_t)(v58 + 1);
  v222 = v58 + 1;
  v223[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v220);
  MIL::IRParameter::MakeTypeSet((uint64_t)v223, 2, &v200);
  MIL::IRParameter::Make(&v200, &v201);
  v59 = v201;
  v202 = v201;
  if (v201)
  {
    v60 = (_QWORD *)operator new();
    v61 = v201;
    *v60 = &unk_1EA99F888;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  v203 = v60;
  v201 = 0;
  v62 = v54[2];
  v63 = v54[1];
  if (v63 >= v62)
  {
    v65 = (v63 - *v54) >> 4;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v67 = v62 - *v54;
    if (v67 >> 3 > v66)
      v66 = v67 >> 3;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v68 = 0xFFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    v228 = v54 + 2;
    v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v54 + 2), v68);
    v71 = (uint64_t *)&v69[16 * v65];
    *v71 = v59;
    v71[1] = (uint64_t)v60;
    v202 = 0;
    v203 = 0;
    v73 = *v54;
    v72 = v54[1];
    if (v72 == *v54)
    {
      v76 = (void **)v54[1];
      v74 = &v69[16 * v65];
    }
    else
    {
      v74 = &v69[16 * v65];
      do
      {
        v75 = *((_OWORD *)v72 - 1);
        v72 -= 16;
        *((_OWORD *)v74 - 1) = v75;
        v74 -= 16;
        *(_QWORD *)v72 = 0;
        *((_QWORD *)v72 + 1) = 0;
      }
      while (v72 != v73);
      v76 = (void **)*v54;
      v72 = v54[1];
    }
    v64 = (char *)(v71 + 2);
    *v54 = v74;
    Scalar = v76;
    v225 = v76;
    v54[1] = (char *)(v71 + 2);
    v226 = (void **)v72;
    v77 = v54[2];
    v54[2] = &v69[16 * v70];
    v227 = v77;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v63 = v59;
    *((_QWORD *)v63 + 1) = v60;
    v64 = v63 + 16;
    v202 = 0;
    v203 = 0;
  }
  v54[1] = v64;
  v78 = v201;
  v201 = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v200.n128_u64[1];
  if (v200.n128_u64[1])
  {
    v80 = (unint64_t *)(v200.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v220)
  {
    v221 = (uint64_t)v220;
    operator delete(v220);
  }
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v198 = *(_OWORD *)a2;
  v199 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v82 = (uint64_t)v213;
  *(_QWORD *)&v197 = v213;
  if (v213)
  {
    v83 = (_QWORD *)operator new();
    *v83 = &unk_1EA99F8E8;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v82;
  }
  else
  {
    v83 = 0;
  }
  *((_QWORD *)&v197 + 1) = v83;
  v213 = 0;
  *(_QWORD *)&v196 = v204;
  if (v204)
  {
    v84 = (_QWORD *)operator new();
    v85 = v204;
    *v84 = &unk_1EA99F948;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  *((_QWORD *)&v196 + 1) = v84;
  v204 = 0;
  v219 = 0;
  v217 = 0;
  MIL::IROperator::Make((__int128 *)v198, &v197, &v196, (uint64_t)v218, (uint64_t)v216, a3);
  v86 = v217;
  if (v217 == v216)
  {
    v87 = 4;
    v86 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_89;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_89:
  v88 = v219;
  if (v219 == v218)
  {
    v89 = 4;
    v88 = v218;
    goto LABEL_93;
  }
  if (v219)
  {
    v89 = 5;
LABEL_93:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
  if (*((_QWORD *)&v196 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
  if (*((_QWORD *)&v197 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (SHIBYTE(v199) < 0)
    operator delete(v198[0]);
  v96 = *a3;
  v97 = std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v97, (uint64_t)v214);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v96 + 200))(v96, v214);
  v98 = v215;
  if (v215 == v214)
  {
    v99 = 4;
    v98 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_111;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_111:
  if (SHIBYTE(v226) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v100 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v192, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v192, 0, (uint64_t *)&__p);
  v194 = __p;
  if (__p)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)__p;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v195 = v101;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v190, "T");
  (*((void (**)(void **, void **, void **))*v100 + 3))(v100, &v194, v190);
  if (v191 < 0)
    operator delete(v190[0]);
  v103 = v195;
  if (v195)
  {
    p_shared_owners = (unint64_t *)&v195->__shared_owners_;
    do
      v105 = __ldaxr(p_shared_owners);
    while (__stlxr(v105 - 1, p_shared_owners));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = __p;
  __p = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  if (v193 < 0)
    operator delete(v192[0]);
  v107 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v186, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v186, 1, (uint64_t *)&__p);
  v188 = __p;
  if (__p)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)__p;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v189 = v108;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v184, "T");
  (*((void (**)(void **, void **, void **))*v107 + 3))(v107, &v188, v184);
  if (v185 < 0)
    operator delete(v184[0]);
  v110 = v189;
  if (v189)
  {
    v111 = (unint64_t *)&v189->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  if (v187 < 0)
    operator delete(v186[0]);
  v114 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v180, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v180, 1, (uint64_t *)&__p);
  v182 = __p;
  if (__p)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)__p;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v183 = v115;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "T");
  (*((void (**)(void **, void **, void **))*v114 + 3))(v114, &v182, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v117 = v183;
  if (v183)
  {
    v118 = (unint64_t *)&v183->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = __p;
  __p = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v181 < 0)
    operator delete(v180[0]);
  v121 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v174, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v174, 0, (uint64_t *)&__p);
  v176 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v177 = v122;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v172, "T");
  (*((void (**)(void **, void **, void **))*v121 + 3))(v121, &v176, v172);
  if (v173 < 0)
    operator delete(v172[0]);
  v124 = v177;
  if (v177)
  {
    v125 = (unint64_t *)&v177->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v175 < 0)
    operator delete(v174[0]);
  v128 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v170 = __p;
  if (__p)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)__p;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v171 = v129;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v168, "T");
  (*((void (**)(void **, void **, void **))*v128 + 3))(v128, &v170, v168);
  if (v169 < 0)
    operator delete(v168[0]);
  v131 = v171;
  if (v171)
  {
    v132 = (unint64_t *)&v171->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = __p;
  __p = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  v135 = *a3;
  v166 = Scalar;
  if (Scalar)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = Scalar;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  }
  else
  {
    v136 = 0;
  }
  v167 = v136;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v135 + 56))(v135, &v166);
  v138 = v167;
  if (v167)
  {
    v139 = (unint64_t *)&v167->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = Scalar;
  Scalar = 0;
  if (v141)
    (*((void (**)(void **))*v141 + 1))(v141);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v142 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v162, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v162, 0, (uint64_t *)&__p);
  v164 = __p;
  if (__p)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = (std::__shared_weak_count_vtbl *)__p;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v165 = v143;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v160, "K");
  (*((void (**)(void **, void **, _QWORD, void **))*v142 + 3))(v142, &v164, 0, v160);
  if (v161 < 0)
    operator delete(v160[0]);
  v145 = v165;
  if (v165)
  {
    v146 = (unint64_t *)&v165->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = __p;
  __p = 0;
  if (v148)
    (*(void (**)(void *))(*(_QWORD *)v148 + 8))(v148);
  if (v163 < 0)
    operator delete(v162[0]);
  v149 = *a3;
  v158 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = (std::__shared_weak_count_vtbl *)v151;
  }
  else
  {
    v150 = 0;
  }
  v159 = v150;
  Scalar = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v149 + 56))(v149, &v158);
  v152 = v159;
  if (v159)
  {
    v153 = (unint64_t *)&v159->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(void **))*v155 + 1))(v155);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v204, 0);
  result = (uint64_t)v213;
  if (v213)
  {
    v157 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v213);
    return MEMORY[0x1E0C023A0](v157, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0783F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void **a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v74 = *(_QWORD *)(v72 - 112);
  *(_QWORD *)(v72 - 112) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *v71;
  *v71 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 256), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios15::LocalResponseNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  void **v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  void **v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void **v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void **v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void **v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void **v131;
  void **v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void **v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void **v145;
  void **v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void **v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  void **v159;
  uint64_t result;
  uint64_t v161;
  void **v162;
  std::__shared_weak_count *v163;
  void *v164[2];
  char v165;
  void *v166[2];
  char v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  void **v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  void **v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  void *v182[2];
  char v183;
  void *v184[2];
  char v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  void *v188[2];
  char v189;
  void *v190[2];
  char v191;
  std::__shared_weak_count_vtbl *v192;
  std::__shared_weak_count *v193;
  void *v194[2];
  char v195;
  void *v196[2];
  char v197;
  std::__shared_weak_count_vtbl *v198;
  std::__shared_weak_count *v199;
  void *v200[2];
  char v201;
  void *v202[2];
  char v203;
  std::__shared_weak_count_vtbl *v204;
  std::__shared_weak_count *v205;
  __int128 v206;
  __int128 v207;
  void *__p[2];
  uint64_t v209;
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char **v214;
  __n128 v215;
  __n128 v216;
  __n128 v217;
  __n128 v218;
  __n128 v219;
  _QWORD *v220;
  _BYTE v221[24];
  _BYTE *v222;
  _BYTE v223[24];
  _BYTE *v224;
  _BYTE v225[24];
  _BYTE *v226;
  void *v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD v230[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v233;
  void **v234;
  void **v235;
  char *v236;
  char *v237;
  char **v238;
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v220 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v235 = (void **)(v10 + 24);
  v236 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  v234 = (void **)v10;
  v227 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v234);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v233 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  Scalar = v14;
  v228 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v227, 2, &v219);
  MIL::IRParameter::Make(&v219, &v212);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v212);
  v15 = v212;
  v212 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v219.n128_u64[1];
  if (v219.n128_u64[1])
  {
    v17 = (unint64_t *)(v219.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  v19 = v220;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v218);
  MIL::IRParameter::Make(&v218, (uint64_t *)&v234);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "size", (uint64_t *)&v234);
  v21 = v234;
  v234 = 0;
  if (v21)
    (*((void (**)(void **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v218.n128_u64[1];
  if (v218.n128_u64[1])
  {
    v23 = (unint64_t *)(v218.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v220;
  v234 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v235 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 2, &v217);
  MIL::IRParameter::Make(&v217, (uint64_t *)&Scalar);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v25, "alpha", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v217.n128_u64[1];
  if (v217.n128_u64[1])
  {
    v29 = (unint64_t *)(v217.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v220;
  v234 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v235 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 2, &v216);
  MIL::IRParameter::Make(&v216, (uint64_t *)&Scalar);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "beta", (uint64_t *)&Scalar);
  v33 = Scalar;
  Scalar = 0;
  if (v33)
    (*((void (**)(std::__shared_weak_count_vtbl *))v33->~__shared_weak_count + 1))(v33);
  v34 = (std::__shared_weak_count *)v216.n128_u64[1];
  if (v216.n128_u64[1])
  {
    v35 = (unint64_t *)(v216.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v220;
  v234 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v235 = (void **)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v234, 2, &v215);
  MIL::IRParameter::Make(&v215, (uint64_t *)&Scalar);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v37, "k", (uint64_t *)&Scalar);
  v39 = Scalar;
  Scalar = 0;
  if (v39)
    (*((void (**)(std::__shared_weak_count_vtbl *))v39->~__shared_weak_count + 1))(v39);
  v40 = (std::__shared_weak_count *)v215.n128_u64[1];
  if (v215.n128_u64[1])
  {
    v41 = (unint64_t *)(v215.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v214 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v234 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v214, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v234, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v214, 1uLL);
  v44 = v214;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v46;
  v46->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v46->~__shared_weak_count_0;
  v233 = &v46->~__shared_weak_count_0;
  v230[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  v227 = v48;
  *v48 = v47;
  v228 = (uint64_t)(v48 + 1);
  v229 = v48 + 1;
  v230[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v227);
  MIL::IRParameter::MakeTypeSet((uint64_t)v230, 2, &v210);
  MIL::IRParameter::Make(&v210, &v211);
  v49 = v211;
  v212 = v211;
  if (v211)
  {
    v50 = (_QWORD *)operator new();
    v51 = v211;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v213 = v50;
  v211 = 0;
  v52 = v44[2];
  v53 = v44[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v44) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v44;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v238 = v44 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v213 = 0;
    v212 = 0;
    v63 = *v44;
    v62 = v44[1];
    if (v62 == *v44)
    {
      v66 = (void **)v44[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = (void **)*v44;
      v62 = v44[1];
    }
    v54 = (char *)(v61 + 2);
    *v44 = v64;
    v234 = v66;
    v235 = v66;
    v44[1] = (char *)(v61 + 2);
    v236 = v62;
    v67 = v44[2];
    v44[2] = &v59[16 * v60];
    v237 = v67;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v234);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v213 = 0;
    v212 = 0;
  }
  v44[1] = v54;
  v68 = v211;
  v211 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v210.n128_u64[1];
  if (v210.n128_u64[1])
  {
    v70 = (unint64_t *)(v210.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v227)
  {
    v228 = (uint64_t)v227;
    operator delete(v227);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v209 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v220;
  *(_QWORD *)&v207 = v220;
  if (v220)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v207 + 1) = v73;
  v220 = 0;
  *(_QWORD *)&v206 = v214;
  if (v214)
  {
    v74 = (_QWORD *)operator new();
    v75 = v214;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v206 + 1) = v74;
  v214 = 0;
  v226 = 0;
  v224 = 0;
  MIL::IROperator::Make((__int128 *)__p, &v207, &v206, (uint64_t)v225, (uint64_t)v223, a3);
  v76 = v224;
  if (v224 == v223)
  {
    v77 = 4;
    v76 = v223;
  }
  else
  {
    if (!v224)
      goto LABEL_79;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_79:
  v78 = v226;
  if (v226 == v225)
  {
    v79 = 4;
    v78 = v225;
    goto LABEL_83;
  }
  if (v226)
  {
    v79 = 5;
LABEL_83:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
  if (*((_QWORD *)&v206 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v209) < 0)
    operator delete(__p[0]);
  v86 = *a3;
  v87 = std::string::basic_string[abi:ne180100]<0>(&v234, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)v87, (uint64_t)v221);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v86 + 200))(v86, v221);
  v88 = v222;
  if (v222 == v221)
  {
    v89 = 4;
    v88 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_101;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_101:
  if (SHIBYTE(v236) < 0)
    operator delete(v234);
  MIL::Validation::TensorDTypeConstraints::Make(&v234);
  v90 = v234;
  std::string::basic_string[abi:ne180100]<0>(v202, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v202, 0, (uint64_t *)&Scalar);
  v204 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v205 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v200, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v204, v200);
  if (v201 < 0)
    operator delete(v200[0]);
  v93 = v205;
  if (v205)
  {
    p_shared_owners = (unint64_t *)&v205->__shared_owners_;
    do
      v95 = __ldaxr(p_shared_owners);
    while (__stlxr(v95 - 1, p_shared_owners));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v203 < 0)
    operator delete(v202[0]);
  v97 = v234;
  std::string::basic_string[abi:ne180100]<0>(v196, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v196, 0, (uint64_t *)&Scalar);
  v198 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v199 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v194, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v198, v194);
  if (v195 < 0)
    operator delete(v194[0]);
  v100 = v199;
  if (v199)
  {
    v101 = (unint64_t *)&v199->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  if (v197 < 0)
    operator delete(v196[0]);
  v104 = v234;
  std::string::basic_string[abi:ne180100]<0>(v190, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v190, 0, (uint64_t *)&Scalar);
  v192 = Scalar;
  if (Scalar)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = Scalar;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v193 = v105;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v188, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v104 + 3))(v104, &v192, v188);
  if (v189 < 0)
    operator delete(v188[0]);
  v107 = v193;
  if (v193)
  {
    v108 = (unint64_t *)&v193->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = Scalar;
  Scalar = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v191 < 0)
    operator delete(v190[0]);
  v111 = v234;
  std::string::basic_string[abi:ne180100]<0>(v184, "k");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v184, 0, (uint64_t *)&Scalar);
  v186 = Scalar;
  if (Scalar)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = Scalar;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v187 = v112;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v182, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v111 + 3))(v111, &v186, v182);
  if (v183 < 0)
    operator delete(v182[0]);
  v114 = v187;
  if (v187)
  {
    v115 = (unint64_t *)&v187->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = Scalar;
  Scalar = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v185 < 0)
    operator delete(v184[0]);
  v118 = v234;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v180 = Scalar;
  if (Scalar)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = Scalar;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v181 = v119;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v118 + 3))(v118, &v180, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v121 = v181;
  if (v181)
  {
    v122 = (unint64_t *)&v181->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = Scalar;
  Scalar = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  v125 = *a3;
  v176 = v234;
  if (v234)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v234;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = (std::__shared_weak_count_vtbl *)v127;
  }
  else
  {
    v126 = 0;
  }
  v177 = v126;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v125 + 56))(v125, &v176);
  v128 = v177;
  if (v177)
  {
    v129 = (unint64_t *)&v177->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v234;
  v234 = 0;
  if (v131)
    (*((void (**)(void **))*v131 + 1))(v131);
  MIL::Validation::TensorRankValueConstraints::Make(&v234);
  v132 = v234;
  std::string::basic_string[abi:ne180100]<0>(v172, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v172, 0, (uint64_t *)&Scalar);
  v174 = Scalar;
  if (Scalar)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = Scalar;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v175 = v133;
  Scalar = 0;
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))*v132 + 4))(v132, &v174, 3, 5);
  v135 = v175;
  if (v175)
  {
    v136 = (unint64_t *)&v175->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = Scalar;
  Scalar = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v173 < 0)
    operator delete(v172[0]);
  v139 = *a3;
  v170 = v234;
  if (v234)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v234;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v171 = v140;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v139 + 56))(v139, &v170);
  v142 = v171;
  if (v171)
  {
    v143 = (unint64_t *)&v171->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v234;
  v234 = 0;
  if (v145)
    (*((void (**)(void **))*v145 + 1))(v145);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v234);
  v146 = v234;
  std::string::basic_string[abi:ne180100]<0>(v166, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v166, 0, (uint64_t *)&Scalar);
  v168 = Scalar;
  if (Scalar)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = Scalar;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v169 = v147;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v164, "C");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v146 + 3))(v146, &v168, 1, v164);
  if (v165 < 0)
    operator delete(v164[0]);
  v149 = v169;
  if (v169)
  {
    v150 = (unint64_t *)&v169->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = Scalar;
  Scalar = 0;
  if (v152)
    (*((void (**)(std::__shared_weak_count_vtbl *))v152->~__shared_weak_count + 1))(v152);
  if (v167 < 0)
    operator delete(v166[0]);
  v153 = *a3;
  v162 = v234;
  if (v234)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = v234;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = (std::__shared_weak_count_vtbl *)v155;
  }
  else
  {
    v154 = 0;
  }
  v163 = v154;
  v234 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v153 + 56))(v153, &v162);
  v156 = v163;
  if (v163)
  {
    v157 = (unint64_t *)&v163->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v234;
  v234 = 0;
  if (v159)
    (*((void (**)(void **))*v159 + 1))(v159);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v214, 0);
  result = (uint64_t)v220;
  if (v220)
  {
    v161 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v220);
    return MEMORY[0x1E0C023A0](v161, 0x10A0C408EF24B1CLL);
  }
  return result;
}

