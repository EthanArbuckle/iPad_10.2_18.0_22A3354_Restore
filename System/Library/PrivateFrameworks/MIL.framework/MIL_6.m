void sub_1E07FB87C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x430];
  STACK[0x430] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x418], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x470], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E07FC3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAdd(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAdd(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceEqual(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceEqual(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloorDiv(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloorDiv(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceGreater(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreater(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceGreaterEqual(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceGreaterEqual(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLess(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLess(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLessEqual(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLessEqual(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalAnd(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalAnd(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalOr(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalOr(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalXor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalXor(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FC970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMaximum(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMaximum(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMinimum(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMinimum(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMod(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMod(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMul(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceMul(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceNotEqual(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceNotEqual(a1, (uint64_t)&v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferencePow(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferencePow(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRealDiv(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRealDiv(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSub(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSub(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E07FCE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ElementwiseBinary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  char **v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _OWORD *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_owners;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t i;
  uint64_t v91;
  std::__shared_weak_count *v92;
  std::string *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::string *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  std::string *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::string *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t j;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t result;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  std::string *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::string *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  std::string *v159;
  std::__shared_weak_count *v160;
  void *v161;
  std::__shared_weak_count *v162;
  __n128 v163;
  __int128 v164;
  __int128 v165;
  void *v166[2];
  uint64_t v167;
  void *v168;
  void *v169;
  _QWORD *v170;
  __n128 v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char **v175;
  __n128 v176;
  void *__p;
  void *v178;
  _QWORD *v179;
  void *p_Scalar;
  void *v181;
  _QWORD *v182;
  __n128 v183;
  _QWORD *v184;
  __int128 v185;
  uint64_t v186;
  _QWORD v187[3];
  __int128 v188;
  uint64_t v189[3];
  _QWORD v190[3];
  std::string *Scalar;
  std::string *v192;
  __int128 *v193;
  _BYTE v194[24];
  _BYTE *v195;
  _BYTE v196[24];
  _BYTE *v197;
  _BYTE v198[24];
  _BYTE *v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v184 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v10;
  *(_QWORD *)v10 = v9;
  v192 = (std::string *)((char *)v10 + 8);
  v193 = (__int128 *)((char *)v10 + 8);
  *(_QWORD *)&v185 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  p_Scalar = v12;
  *v12 = v11;
  v181 = v12 + 1;
  v182 = v12 + 1;
  *((_QWORD *)&v185 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v178 = v14 + 1;
  v179 = v14 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 3, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v168);
  v15 = v168;
  v168 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v17 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v181 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v192 = Scalar;
    operator delete(Scalar);
  }
  v19 = v184;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v21;
  *(_QWORD *)v21 = v20;
  v192 = (std::string *)((char *)v21 + 8);
  v193 = (__int128 *)((char *)v21 + 8);
  *(_QWORD *)&v185 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  p_Scalar = v23;
  *v23 = v22;
  v181 = v23 + 1;
  v182 = v23 + 1;
  *((_QWORD *)&v185 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v178 = v25 + 1;
  v179 = v25 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 3, &v176);
  MIL::IRParameter::Make(&v176, (uint64_t *)&v168);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v168);
  v26 = v168;
  v168 = 0;
  if (v26)
    (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = (std::__shared_weak_count *)v176.n128_u64[1];
  if (v176.n128_u64[1])
  {
    v28 = (unint64_t *)(v176.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v181 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v192 = Scalar;
    operator delete(Scalar);
  }
  v175 = 0;
  v30 = operator new();
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)&v185 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v175, (void **)v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v185, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v175, 1uLL);
  v31 = v175;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  p_Scalar = v33;
  *v33 = v32;
  v181 = v33 + 1;
  v182 = v33 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  __p = v35;
  *v35 = v34;
  v178 = v35 + 1;
  v179 = v35 + 1;
  v192 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v36 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v37 = operator new(8uLL);
  v168 = v37;
  *v37 = v36;
  v169 = v37 + 1;
  v170 = v37 + 1;
  v193 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v168);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v171);
  MIL::IRParameter::Make(&v171, &v172);
  v38 = v172;
  v173 = v172;
  if (v172)
  {
    v39 = (_QWORD *)operator new();
    v40 = v172;
    *v39 = &unk_1EA99F888;
    v39[1] = 0;
    v39[2] = 0;
    v39[3] = v40;
  }
  else
  {
    v39 = 0;
  }
  v174 = v39;
  v172 = 0;
  v41 = v31[2];
  v42 = v31[1];
  if (v42 >= v41)
  {
    v44 = (v42 - *v31) >> 4;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v46 = v41 - *v31;
    if (v46 >> 3 > v45)
      v45 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v47 = 0xFFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    v187[1] = v31 + 2;
    v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v31 + 2), v47);
    v50 = (uint64_t *)&v48[16 * v44];
    *v50 = v38;
    v50[1] = (uint64_t)v39;
    v173 = 0;
    v174 = 0;
    v52 = *v31;
    v51 = v31[1];
    if (v51 == *v31)
    {
      v55 = v31[1];
      v53 = &v48[16 * v44];
    }
    else
    {
      v53 = &v48[16 * v44];
      do
      {
        v54 = *((_OWORD *)v51 - 1);
        v51 -= 16;
        *((_OWORD *)v53 - 1) = v54;
        v53 -= 16;
        *(_QWORD *)v51 = 0;
        *((_QWORD *)v51 + 1) = 0;
      }
      while (v51 != v52);
      v55 = *v31;
      v51 = v31[1];
    }
    v43 = (char *)(v50 + 2);
    *v31 = v53;
    *(_QWORD *)&v185 = v55;
    *((_QWORD *)&v185 + 1) = v55;
    v31[1] = (char *)(v50 + 2);
    v186 = (uint64_t)v51;
    v56 = v31[2];
    v31[2] = &v48[16 * v49];
    v187[0] = v56;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v185);
  }
  else
  {
    *(_QWORD *)v42 = v38;
    *((_QWORD *)v42 + 1) = v39;
    v43 = v42 + 16;
    v173 = 0;
    v174 = 0;
  }
  v31[1] = v43;
  v57 = v172;
  v172 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v59 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v181 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v166 = *(_OWORD *)a2;
  v167 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v61 = (uint64_t)v184;
  *(_QWORD *)&v165 = v184;
  if (v184)
  {
    v62 = (_QWORD *)operator new();
    *v62 = &unk_1EA99F8E8;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v61;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v165 + 1) = v62;
  v184 = 0;
  *(_QWORD *)&v164 = v175;
  if (v175)
  {
    v63 = (_QWORD *)operator new();
    v64 = v175;
    *v63 = &unk_1EA99F948;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v64;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v164 + 1) = v63;
  v175 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v198, a3);
  v197 = 0;
  MIL::IROperator::Make((__int128 *)v166, &v165, &v164, (uint64_t)v198, (uint64_t)v196, a4);
  v65 = v197;
  if (v197 == v196)
  {
    v66 = 4;
    v65 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_68;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_68:
  v67 = v199;
  if (v199 == v198)
  {
    v68 = 4;
    v67 = v198;
    goto LABEL_72;
  }
  if (v199)
  {
    v68 = 5;
LABEL_72:
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (SHIBYTE(v167) < 0)
    operator delete(v166[0]);
  __p = 0;
  v75 = (_OWORD *)operator new();
  *v75 = 0u;
  v75[1] = 0u;
  *((_DWORD *)v75 + 8) = 1065353216;
  __p = v75;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&v185);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v75, "minimum_compute_type", (uint64_t *)&v185);
  v77 = v185;
  *(_QWORD *)&v185 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v79 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 48))(*((_QWORD *)v76 + 5), 1);
  v81 = *a4;
  v82 = (std::__shared_weak_count_vtbl *)__p;
  v161 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v82;
  }
  else
  {
    v83 = 0;
  }
  v162 = v83;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v81 + 184))(v81, &v161);
  v84 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v86 = __ldaxr(p_shared_owners);
    while (__stlxr(v86 - 1, p_shared_owners));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v185, "x");
  std::string::basic_string[abi:ne180100]<0>(v187, "y");
  Scalar = 0;
  v192 = 0;
  v193 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v181) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v192 = Scalar;
  v193 = (__int128 *)&Scalar[2];
  v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193, &v185, &v188, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v194);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v87 + 200))(v87, v194);
  v88 = v195;
  if (v195 == v194)
  {
    v89 = 4;
    v88 = v194;
    goto LABEL_104;
  }
  if (v195)
  {
    v89 = 5;
LABEL_104:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v187[i + 2]) < 0)
      operator delete((void *)v187[i]);
  }
  MIL::Validation::TensorDTypeConstraints::Make(&v185);
  v91 = v185;
  std::string::basic_string[abi:ne180100]<0>(v157, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v157, 0, (uint64_t *)&Scalar);
  v159 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = (std::__shared_weak_count_vtbl *)v93;
  }
  else
  {
    v92 = 0;
  }
  v160 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v91 + 24))(v91, &v159, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v94 = v160;
  if (v160)
  {
    v95 = (unint64_t *)&v160->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*(void (**)(std::string *))(v97->__r_.__value_.__r.__words[0] + 8))(v97);
  if (v158 < 0)
    operator delete(v157[0]);
  v98 = v185;
  std::string::basic_string[abi:ne180100]<0>(v151, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&Scalar);
  v153 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = (std::__shared_weak_count_vtbl *)v100;
  }
  else
  {
    v99 = 0;
  }
  v154 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v98 + 24))(v98, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v101 = v154;
  if (v154)
  {
    v102 = (unint64_t *)&v154->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*(void (**)(std::string *))(v104->__r_.__value_.__r.__words[0] + 8))(v104);
  if (v152 < 0)
    operator delete(v151[0]);
  v105 = v185;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v148 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v105 + 24))(v105, &v147, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v108 = v148;
  if (v148)
  {
    v109 = (unint64_t *)&v148->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*(void (**)(std::string *))(v111->__r_.__value_.__r.__words[0] + 8))(v111);
  v112 = *a4;
  v143 = v185;
  if ((_QWORD)v185)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = (std::__shared_weak_count_vtbl *)v185;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v144 = v113;
  *(_QWORD *)&v185 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v112 + 56))(v112, &v143);
  v115 = v144;
  if (v144)
  {
    v116 = (unint64_t *)&v144->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v185;
  *(_QWORD *)&v185 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v119 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v139, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v139, 1, (uint64_t *)&v168);
  v141 = v168;
  if (v168)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)v168;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v142 = v120;
  v168 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v185, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v187, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v188, "int32");
  std::string::basic_string[abi:ne180100]<0>(v189, "int8");
  std::string::basic_string[abi:ne180100]<0>(v190, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v185, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v119 + 24))(v119, &v141, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v190[j + 2]) < 0)
      operator delete((void *)v190[j]);
  }
  v123 = v142;
  if (v142)
  {
    v124 = (unint64_t *)&v142->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v168;
  v168 = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v140 < 0)
    operator delete(v139[0]);
  v127 = *a4;
  v137 = p_Scalar;
  if (p_Scalar)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v138 = v128;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v127 + 56))(v127, &v137);
  v130 = v138;
  if (v138)
  {
    v131 = (unint64_t *)&v138->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = p_Scalar;
  p_Scalar = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (__p)
  {
    v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v134, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v175, 0);
  result = (uint64_t)v184;
  if (v184)
  {
    v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v184);
    return MEMORY[0x1E0C023A0](v136, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07FDEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Add::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAdd;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E07FF514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ElementwiseBinaryBoolOutput::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count_vtbl *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  void ***v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count_vtbl *v34;
  _QWORD *v35;
  std::__shared_weak_count_vtbl *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void **v47;
  void **v48;
  char *v49;
  __int128 v50;
  void **v51;
  void **v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _OWORD *v71;
  unsigned __int8 *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void **v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  void **v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  void **v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void **v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  uint64_t i;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t v122;
  uint64_t result;
  uint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  void **v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  std::__shared_weak_count_vtbl *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  void *v145;
  std::__shared_weak_count *v146;
  __n128 v147;
  __int128 v148;
  __int128 v149;
  void *v150[2];
  uint64_t v151;
  __n128 v152;
  __n128 v153;
  void *__p;
  void *v155;
  _QWORD *v156;
  void *v157;
  void *v158;
  _QWORD *v159;
  __n128 v160;
  std::__shared_weak_count_vtbl *v161;
  _QWORD *v162;
  void **v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  uint64_t v167[3];
  uint64_t v168[3];
  _QWORD v169[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v171;
  void (__cdecl **v172)(std::__shared_weak_count *__hidden);
  _QWORD v173[3];
  _QWORD *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _BYTE v177[24];
  _BYTE *v178;
  uint64_t v179[2];

  v179[1] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v162 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v171 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v172 = &v10->~__shared_weak_count_0;
  v163 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v157 = v12;
  *v12 = v11;
  v158 = v12 + 1;
  v159 = v12 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v157);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v155 = v14 + 1;
  v156 = v14 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v163, 3, &v160);
  MIL::IRParameter::Make(&v160, (uint64_t *)&v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v161);
  v15 = v161;
  v161 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v160.n128_u64[1];
  if (v160.n128_u64[1])
  {
    v17 = (unint64_t *)(v160.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  v19 = v162;
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v21;
  v21->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v20;
  v171 = (std::__shared_weak_count_vtbl *)&v21->~__shared_weak_count_0;
  v172 = &v21->~__shared_weak_count_0;
  v163 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  v157 = v23;
  *v23 = v22;
  v158 = v23 + 1;
  v159 = v23 + 1;
  v164 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v157);
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = v24;
  v155 = v25 + 1;
  v156 = v25 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v163, 3, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v19, "y", (uint64_t *)&v161);
  v26 = v161;
  v161 = 0;
  if (v26)
    (*((void (**)(std::__shared_weak_count_vtbl *))v26->~__shared_weak_count + 1))(v26);
  v27 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v28 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v30 = operator new();
  *(_QWORD *)v30 = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  v163 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v163, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v31 = (void ***)__p;
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  v171 = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v172 = &v33->~__shared_weak_count_0;
  v179[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v179, 1, &v152);
  MIL::IRParameter::Make(&v152, (uint64_t *)&v161);
  v34 = v161;
  v157 = v161;
  if (v161)
  {
    v35 = (_QWORD *)operator new();
    v36 = v161;
    *v35 = &unk_1EA99F888;
    v35[1] = 0;
    v35[2] = 0;
    v35[3] = v36;
  }
  else
  {
    v35 = 0;
  }
  v158 = v35;
  v161 = 0;
  v37 = (unint64_t)v31[2];
  v38 = v31[1];
  if ((unint64_t)v38 >= v37)
  {
    v40 = ((char *)v38 - (char *)*v31) >> 4;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v42 = v37 - (_QWORD)*v31;
    if (v42 >> 3 > v41)
      v41 = v42 >> 3;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    v166[1] = v31 + 2;
    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v31 + 2), v43);
    v46 = &v44[16 * v40];
    *(_QWORD *)v46 = v34;
    *((_QWORD *)v46 + 1) = v35;
    v157 = 0;
    v158 = 0;
    v48 = *v31;
    v47 = v31[1];
    if (v47 == *v31)
    {
      v51 = v31[1];
      v49 = &v44[16 * v40];
    }
    else
    {
      v49 = &v44[16 * v40];
      do
      {
        v50 = *((_OWORD *)v47 - 1);
        v47 -= 2;
        *((_OWORD *)v49 - 1) = v50;
        v49 -= 16;
        *v47 = 0;
        v47[1] = 0;
      }
      while (v47 != v48);
      v51 = *v31;
      v47 = v31[1];
    }
    v39 = (void **)(v46 + 16);
    *v31 = (void **)v49;
    v163 = v51;
    v164 = (uint64_t)v51;
    v31[1] = (void **)(v46 + 16);
    v165 = (uint64_t)v47;
    v52 = v31[2];
    v31[2] = (void **)&v44[16 * v45];
    v166[0] = v52;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v163);
  }
  else
  {
    *v38 = v34;
    v38[1] = v35;
    v39 = v38 + 2;
    v157 = 0;
    v158 = 0;
  }
  v31[1] = v39;
  v53 = v161;
  v161 = 0;
  if (v53)
    (*((void (**)(std::__shared_weak_count_vtbl *))v53->~__shared_weak_count + 1))(v53);
  v54 = (std::__shared_weak_count *)v152.n128_u64[1];
  if (v152.n128_u64[1])
  {
    v55 = (unint64_t *)(v152.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (Scalar)
  {
    v171 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v150 = *(_OWORD *)a2;
  v151 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v57 = (uint64_t)v162;
  *(_QWORD *)&v149 = v162;
  if (v162)
  {
    v58 = (_QWORD *)operator new();
    *v58 = &unk_1EA99F8E8;
    v58[1] = 0;
    v58[2] = 0;
    v58[3] = v57;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)&v149 + 1) = v58;
  v162 = 0;
  *(_QWORD *)&v148 = __p;
  if (__p)
  {
    v59 = (_QWORD *)operator new();
    v60 = __p;
    *v59 = &unk_1EA99F948;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v60;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v148 + 1) = v59;
  __p = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v177, a3);
  v176 = 0;
  MIL::IROperator::Make((__int128 *)v150, &v149, &v148, (uint64_t)v177, (uint64_t)v175, a4);
  v61 = v176;
  if (v176 == v175)
  {
    v62 = 4;
    v61 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_64;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_64:
  v63 = v178;
  if (v178 == v177)
  {
    v64 = 4;
    v63 = v177;
    goto LABEL_68;
  }
  if (v178)
  {
    v64 = 5;
LABEL_68:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (SHIBYTE(v151) < 0)
    operator delete(v150[0]);
  v157 = 0;
  v71 = (_OWORD *)operator new();
  *v71 = 0u;
  v71[1] = 0u;
  *((_DWORD *)v71 + 8) = 1065353216;
  v157 = v71;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&v163);
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v71, "minimum_compute_type", (uint64_t *)&v163);
  v73 = v163;
  v163 = 0;
  if (v73)
    (*((void (**)(void **))*v73 + 1))(v73);
  v74 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v75 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 32))(*((_QWORD *)v72 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v72 + 5) + 48))(*((_QWORD *)v72 + 5), 1);
  v77 = *a4;
  v78 = (std::__shared_weak_count_vtbl *)v157;
  v145 = v157;
  if (v157)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v78;
  }
  else
  {
    v79 = 0;
  }
  v146 = v79;
  v157 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v77 + 184))(v77, &v145);
  v80 = v146;
  if (v146)
  {
    p_shared_owners = (unint64_t *)&v146->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *a4;
  v173[0] = &off_1EA99FBD8;
  v173[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v174 = v173;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 200))(v83, v173);
  v84 = v174;
  if (v174 == v173)
  {
    v85 = 4;
    v84 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_101;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_101:
  MIL::Validation::TensorDTypeConstraints::Make(&v163);
  v86 = v163;
  std::string::basic_string[abi:ne180100]<0>(v141, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v141, 0, (uint64_t *)&Scalar);
  v143 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v144 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v86 + 3))(v86, &v143, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v89 = v144;
  if (v144)
  {
    v90 = (unint64_t *)&v144->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  if (v142 < 0)
    operator delete(v141[0]);
  v93 = v163;
  std::string::basic_string[abi:ne180100]<0>(v135, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v135, 0, (uint64_t *)&Scalar);
  v137 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v138 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v133, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v93 + 3))(v93, &v137, v133);
  if (v134 < 0)
    operator delete(v133[0]);
  v96 = v138;
  if (v138)
  {
    v97 = (unint64_t *)&v138->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  if (v136 < 0)
    operator delete(v135[0]);
  v100 = *a4;
  v131 = v163;
  if (v163)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v163;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v132 = v101;
  v163 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v100 + 56))(v100, &v131);
  v103 = v132;
  if (v132)
  {
    v104 = (unint64_t *)&v132->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v163;
  v163 = 0;
  if (v106)
    (*((void (**)(void **))*v106 + 1))(v106);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v161);
  v107 = v161;
  std::string::basic_string[abi:ne180100]<0>(v127, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v127, 1, v179);
  v129 = v179[0];
  if (v179[0])
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v179[0];
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v130 = v108;
  v179[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v163, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v166, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v167, "int32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int8");
  std::string::basic_string[abi:ne180100]<0>(v169, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v163, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v107->~__shared_weak_count
   + 3))(v107, &v129, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v169[i + 2]) < 0)
      operator delete((void *)v169[i]);
  }
  v111 = v130;
  if (v130)
  {
    v112 = (unint64_t *)&v130->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v179[0];
  v179[0] = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v128 < 0)
    operator delete(v127[0]);
  v115 = *a4;
  v125 = v161;
  if (v161)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = v161;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v126 = v116;
  v161 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v115 + 56))(v115, &v125);
  v118 = v126;
  if (v126)
  {
    v119 = (unint64_t *)&v126->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = v161;
  v161 = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v157)
  {
    v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v157);
    MEMORY[0x1E0C023A0](v122, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v162;
  if (v162)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    return MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0800930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ElementwiseBinaryLogical::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char **v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  void *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t i;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t result;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void *v119[2];
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125[2];
  char v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  char **v146;
  __n128 v147;
  __n128 v148;
  _QWORD *v149;
  void *__p;
  void *v151;
  char *v152;
  _QWORD v153[3];
  uint64_t v154[3];
  uint64_t v155[3];
  _QWORD v156[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v158;
  void (__cdecl **v159)(std::__shared_weak_count *__hidden);
  _QWORD v160[3];
  _QWORD *v161;
  _BYTE v162[24];
  _BYTE *v163;
  _BYTE v164[24];
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v149 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v151 = v10 + 1;
  v152 = (char *)(v10 + 1);
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v13 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  v15 = v149;
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(8uLL);
  __p = v17;
  *v17 = v16;
  v151 = v17 + 1;
  v152 = (char *)(v17 + 1);
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v167, 1, &v147);
  MIL::IRParameter::Make(&v147, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v15, "y", (uint64_t *)&Scalar);
  v18 = Scalar;
  Scalar = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v20 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v151 = __p;
    operator delete(__p);
  }
  v146 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v146, 1uLL);
  v23 = v146;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v25;
  v25->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v24;
  v158 = (std::__shared_weak_count_vtbl *)&v25->~__shared_weak_count_0;
  v159 = &v25->~__shared_weak_count_0;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v166, 1, &v144);
  MIL::IRParameter::Make(&v144, &v145);
  v26 = v145;
  v167 = v145;
  if (v145)
  {
    v27 = (_QWORD *)operator new();
    v28 = v145;
    *v27 = &unk_1EA99F888;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
  }
  else
  {
    v27 = 0;
  }
  v168 = v27;
  v145 = 0;
  v29 = v23[2];
  v30 = v23[1];
  if (v30 >= v29)
  {
    v32 = (v30 - *v23) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v34 = v29 - *v23;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v153[1] = v23 + 2;
    v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v35);
    v38 = (uint64_t *)&v36[16 * v32];
    *v38 = v26;
    v38[1] = (uint64_t)v27;
    v167 = 0;
    v168 = 0;
    v40 = *v23;
    v39 = v23[1];
    if (v39 == *v23)
    {
      v43 = v23[1];
      v41 = &v36[16 * v32];
    }
    else
    {
      v41 = &v36[16 * v32];
      do
      {
        v42 = *((_OWORD *)v39 - 1);
        v39 -= 16;
        *((_OWORD *)v41 - 1) = v42;
        v41 -= 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
      }
      while (v39 != v40);
      v43 = *v23;
      v39 = v23[1];
    }
    v31 = (char *)(v38 + 2);
    *v23 = v41;
    __p = v43;
    v151 = v43;
    v23[1] = (char *)(v38 + 2);
    v152 = v39;
    v44 = v23[2];
    v23[2] = &v36[16 * v37];
    v153[0] = v44;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v30 = v26;
    *((_QWORD *)v30 + 1) = v27;
    v31 = v30 + 16;
    v167 = 0;
    v168 = 0;
  }
  v23[1] = v31;
  v45 = v145;
  v145 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v47 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (Scalar)
  {
    v158 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v49 = (uint64_t)v149;
  *(_QWORD *)&v141 = v149;
  if (v149)
  {
    v50 = (_QWORD *)operator new();
    *v50 = &unk_1EA99F8E8;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v49;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v141 + 1) = v50;
  v149 = 0;
  *(_QWORD *)&v140 = v146;
  if (v146)
  {
    v51 = (_QWORD *)operator new();
    v52 = v146;
    *v51 = &unk_1EA99F948;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v52;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v140 + 1) = v51;
  v146 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v164, a3);
  v163 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v164, (uint64_t)v162, a4);
  v53 = v163;
  if (v163 == v162)
  {
    v54 = 4;
    v53 = v162;
  }
  else
  {
    if (!v163)
      goto LABEL_56;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_56:
  v55 = v165;
  if (v165 == v164)
  {
    v56 = 4;
    v55 = v164;
    goto LABEL_60;
  }
  if (v165)
  {
    v56 = 5;
LABEL_60:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v167 = 0;
  v63 = operator new();
  *(_OWORD *)v63 = 0u;
  *(_OWORD *)(v63 + 16) = 0u;
  *(_DWORD *)(v63 + 32) = 1065353216;
  v167 = v63;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&__p);
  v64 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v63, "minimum_compute_type", (uint64_t *)&__p);
  v65 = __p;
  __p = 0;
  if (v65)
    (*(void (**)(void *))(*(_QWORD *)v65 + 8))(v65);
  v66 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v67 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 32))(*((_QWORD *)v64 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v64 + 5) + 48))(*((_QWORD *)v64 + 5), 1);
  v69 = *a4;
  v70 = v167;
  v137 = v167;
  if (v167)
  {
    v71 = (std::__shared_weak_count *)operator new();
    v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v71->__shared_owners_ = 0;
    v71->__shared_weak_owners_ = 0;
    v71[1].__vftable = (std::__shared_weak_count_vtbl *)v70;
  }
  else
  {
    v71 = 0;
  }
  v138 = v71;
  v167 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v69 + 184))(v69, &v137);
  v72 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *a4;
  v160[0] = &off_1EA99FBD8;
  v160[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v161 = v160;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v75 + 200))(v75, v160);
  v76 = v161;
  if (v161 == v160)
  {
    v77 = 4;
    v76 = v160;
  }
  else
  {
    if (!v161)
      goto LABEL_93;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_93:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v78 = __p;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = Scalar;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v136 = v79;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v78 + 24))(v78, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v81 = v136;
  if (v136)
  {
    v82 = (unint64_t *)&v136->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = Scalar;
  Scalar = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  if (v134 < 0)
    operator delete(v133[0]);
  v85 = __p;
  std::string::basic_string[abi:ne180100]<0>(v127, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v127, 0, (uint64_t *)&Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = Scalar;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v130 = v86;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v125, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v85 + 24))(v85, &v129, v125);
  if (v126 < 0)
    operator delete(v125[0]);
  v88 = v130;
  if (v130)
  {
    v89 = (unint64_t *)&v130->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = Scalar;
  Scalar = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v128 < 0)
    operator delete(v127[0]);
  v92 = *a4;
  v123 = __p;
  if (__p)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = (std::__shared_weak_count_vtbl *)__p;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v124 = v93;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v92 + 56))(v92, &v123);
  v95 = v124;
  if (v124)
  {
    v96 = (unint64_t *)&v124->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = __p;
  __p = 0;
  if (v98)
    (*(void (**)(void *))(*(_QWORD *)v98 + 8))(v98);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v145);
  v99 = v145;
  std::string::basic_string[abi:ne180100]<0>(v119, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v119, 1, &v166);
  v121 = v166;
  if (v166)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v166;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v122 = v100;
  v166 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v153, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v154, "int32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int8");
  std::string::basic_string[abi:ne180100]<0>(v156, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v99 + 24))(v99, &v121, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v156[i + 2]) < 0)
      operator delete((void *)v156[i]);
  }
  v103 = v122;
  if (v122)
  {
    v104 = (unint64_t *)&v122->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = v166;
  v166 = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  if (v120 < 0)
    operator delete(v119[0]);
  v107 = *a4;
  v117 = v145;
  if (v145)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = v145;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = (std::__shared_weak_count_vtbl *)v109;
  }
  else
  {
    v108 = 0;
  }
  v118 = v108;
  v145 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v107 + 56))(v107, &v117);
  v110 = v118;
  if (v118)
  {
    v111 = (unint64_t *)&v118->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v145;
  v145 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  if (v167)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v167);
    MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, 0);
  result = (uint64_t)v149;
  if (v149)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v149);
    return MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0801AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 104), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LogicalAnd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  void *v157[3];
  void *Scalar;
  void *v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _BYTE v167[24];
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v159 = v23 + 1;
  v160 = v23 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v170 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v171 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v170 = 0;
    v171 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v170 = 0;
    v171 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v159 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v168 = 0;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v167, (uint64_t)v165, a3);
  v51 = v166;
  if (v166 == v165)
  {
    v52 = 4;
    v51 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v168;
  if (v168 == v167)
  {
    v54 = 4;
    v53 = v167;
    goto LABEL_60;
  }
  if (v168)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v170 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v170 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v170;
  v138 = v170;
  if (v170)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v170 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v163);
  v74 = v164;
  if (v164 == v163)
  {
    v75 = 4;
    v74 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v161[0] = &off_1EA9A00F8;
  v161[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalAnd;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v161);
  v77 = v162;
  if (v162 == v161)
  {
    v78 = 4;
    v77 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v169);
  v122 = v169;
  if (v169)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v169;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int8");
  std::string::basic_string[abi:ne180100]<0>(v157, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v157[i + 2]) < 0)
      operator delete(v157[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v169;
  v169 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v170)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v170);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0802CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 88), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LogicalOr::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  void *v157[3];
  void *Scalar;
  void *v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _BYTE v167[24];
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v159 = v23 + 1;
  v160 = v23 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v170 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v171 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v170 = 0;
    v171 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v170 = 0;
    v171 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v159 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v168 = 0;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v167, (uint64_t)v165, a3);
  v51 = v166;
  if (v166 == v165)
  {
    v52 = 4;
    v51 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v168;
  if (v168 == v167)
  {
    v54 = 4;
    v53 = v167;
    goto LABEL_60;
  }
  if (v168)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v170 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v170 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v170;
  v138 = v170;
  if (v170)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v170 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v163);
  v74 = v164;
  if (v164 == v163)
  {
    v75 = 4;
    v74 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v161[0] = &off_1EA9A00F8;
  v161[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalOr;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v161);
  v77 = v162;
  if (v162 == v161)
  {
    v78 = 4;
    v77 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v169);
  v122 = v169;
  if (v169)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v169;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int8");
  std::string::basic_string[abi:ne180100]<0>(v157, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v157[i + 2]) < 0)
      operator delete(v157[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v169;
  v169 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v170)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v170);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0803E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 88), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LogicalXor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char **v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __n128 v140;
  __int128 v141;
  __int128 v142;
  void *v143[2];
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  char **v147;
  __n128 v148;
  __n128 v149;
  _QWORD *v150;
  void *__p;
  void *v152;
  char *v153;
  _QWORD v154[3];
  uint64_t v155[3];
  uint64_t v156[3];
  void *v157[3];
  void *Scalar;
  void *v159;
  _QWORD *v160;
  _QWORD v161[3];
  _QWORD *v162;
  _QWORD v163[3];
  _QWORD *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _BYTE v167[24];
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v150 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v152 = v8 + 1;
  v153 = (char *)(v8 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v149);
  MIL::IRParameter::Make(&v149, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v149.n128_u64[1];
  if (v149.n128_u64[1])
  {
    v11 = (unint64_t *)(v149.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v13 = v150;
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(8uLL);
  __p = v15;
  *v15 = v14;
  v152 = v15 + 1;
  v153 = (char *)(v15 + 1);
  v170 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v170, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v13, "y", (uint64_t *)&Scalar);
  v16 = Scalar;
  Scalar = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v18 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  v147 = 0;
  v20 = operator new();
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, (void **)v20);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v147, 1uLL);
  v21 = v147;
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  Scalar = v23;
  *v23 = v22;
  v159 = v23 + 1;
  v160 = v23 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v169, 1, &v145);
  MIL::IRParameter::Make(&v145, &v146);
  v24 = v146;
  v170 = v146;
  if (v146)
  {
    v25 = (_QWORD *)operator new();
    v26 = v146;
    *v25 = &unk_1EA99F888;
    v25[1] = 0;
    v25[2] = 0;
    v25[3] = v26;
  }
  else
  {
    v25 = 0;
  }
  v171 = v25;
  v146 = 0;
  v27 = v21[2];
  v28 = v21[1];
  if (v28 >= v27)
  {
    v30 = (v28 - *v21) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v32 = v27 - *v21;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    v154[1] = v21 + 2;
    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v21 + 2), v33);
    v36 = (uint64_t *)&v34[16 * v30];
    *v36 = v24;
    v36[1] = (uint64_t)v25;
    v170 = 0;
    v171 = 0;
    v38 = *v21;
    v37 = v21[1];
    if (v37 == *v21)
    {
      v41 = v21[1];
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *(_QWORD *)v37 = 0;
        *((_QWORD *)v37 + 1) = 0;
      }
      while (v37 != v38);
      v41 = *v21;
      v37 = v21[1];
    }
    v29 = (char *)(v36 + 2);
    *v21 = v39;
    __p = v41;
    v152 = v41;
    v21[1] = (char *)(v36 + 2);
    v153 = v37;
    v42 = v21[2];
    v21[2] = &v34[16 * v35];
    v154[0] = v42;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v28 = v24;
    *((_QWORD *)v28 + 1) = v25;
    v29 = v28 + 16;
    v170 = 0;
    v171 = 0;
  }
  v21[1] = v29;
  v43 = v146;
  v146 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v45 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (Scalar)
  {
    v159 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v143 = *(_OWORD *)a2;
  v144 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = (uint64_t)v150;
  *(_QWORD *)&v142 = v150;
  if (v150)
  {
    v48 = (_QWORD *)operator new();
    *v48 = &unk_1EA99F8E8;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v47;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v142 + 1) = v48;
  v150 = 0;
  *(_QWORD *)&v141 = v147;
  if (v147)
  {
    v49 = (_QWORD *)operator new();
    v50 = v147;
    *v49 = &unk_1EA99F948;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v50;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v147 = 0;
  v168 = 0;
  v166 = 0;
  MIL::IROperator::Make((__int128 *)v143, &v142, &v141, (uint64_t)v167, (uint64_t)v165, a3);
  v51 = v166;
  if (v166 == v165)
  {
    v52 = 4;
    v51 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_56;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_56:
  v53 = v168;
  if (v168 == v167)
  {
    v54 = 4;
    v53 = v167;
    goto LABEL_60;
  }
  if (v168)
  {
    v54 = 5;
LABEL_60:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
  if (*((_QWORD *)&v142 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  v170 = 0;
  v61 = operator new();
  *(_OWORD *)v61 = 0u;
  *(_OWORD *)(v61 + 16) = 0u;
  *(_DWORD *)(v61 + 32) = 1065353216;
  v170 = v61;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v140);
  MIL::IRParameter::Make(&v140, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v61, "minimum_compute_type", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v65 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 48))(*((_QWORD *)v62 + 5), 1);
  v67 = *a3;
  v68 = v170;
  v138 = v170;
  if (v170)
  {
    v69 = (std::__shared_weak_count *)operator new();
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v69 = 0;
  }
  v139 = v69;
  v170 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v67 + 184))(v67, &v138);
  v70 = v139;
  if (v139)
  {
    p_shared_owners = (unint64_t *)&v139->__shared_owners_;
    do
      v72 = __ldaxr(p_shared_owners);
    while (__stlxr(v72 - 1, p_shared_owners));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *a3;
  v163[0] = &off_1EA99FBD8;
  v163[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v164 = v163;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 200))(v73, v163);
  v74 = v164;
  if (v164 == v163)
  {
    v75 = 4;
    v74 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_93;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_93:
  v76 = *a3;
  v161[0] = &off_1EA9A00F8;
  v161[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalXor;
  v162 = v161;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v76 + 216))(v76, v161);
  v77 = v162;
  if (v162 == v161)
  {
    v78 = 4;
    v77 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_98;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_98:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v79 = __p;
  std::string::basic_string[abi:ne180100]<0>(v134, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v134, 0, (uint64_t *)&Scalar);
  v136 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = (std::__shared_weak_count_vtbl *)Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v137 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v79 + 24))(v79, &v136, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v82 = v137;
  if (v137)
  {
    v83 = (unint64_t *)&v137->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*(void (**)(void *))(*(_QWORD *)v85 + 8))(v85);
  if (v135 < 0)
    operator delete(v134[0]);
  v86 = __p;
  std::string::basic_string[abi:ne180100]<0>(v128, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&Scalar);
  v130 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v131 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v129 < 0)
    operator delete(v128[0]);
  v93 = *a3;
  v124 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v146);
  v100 = v146;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, &v169);
  v122 = v169;
  if (v169)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = v169;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v154, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v155, "int32");
  std::string::basic_string[abi:ne180100]<0>(v156, "int8");
  std::string::basic_string[abi:ne180100]<0>(v157, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v157[i + 2]) < 0)
      operator delete(v157[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v169;
  v169 = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a3;
  v118 = v146;
  if (v146)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v146;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  v146 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v146;
  v146 = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  if (v170)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v170);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  result = (uint64_t)v150;
  if (v150)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v150);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0805078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t *v54;
  uint64_t v55;
  uint64_t v57;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v55 - 88), 0);
  v57 = *v54;
  *v54 = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a49, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a54, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Equal::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v181 = 0;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0806378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Greater::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v181 = 0;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceGreater;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08076D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::GreaterEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v181 = 0;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceGreaterEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0808A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Less::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v181 = 0;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLess;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0809D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LessEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v181 = 0;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLessEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E080B0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::NotEqual::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count_vtbl *v32;
  _QWORD *v33;
  std::__shared_weak_count_vtbl *v34;
  unint64_t v35;
  void **v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void **v45;
  void **v46;
  char *v47;
  __int128 v48;
  void **v49;
  void **v50;
  std::__shared_weak_count_vtbl *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _OWORD *v69;
  unsigned __int8 *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  void **v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count_vtbl *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  void **v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void **v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  uint64_t i;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  void *v128[2];
  char v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void **v132;
  std::__shared_weak_count *v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  void *v146;
  std::__shared_weak_count *v147;
  __n128 v148;
  __int128 v149;
  __int128 v150;
  void *v151[2];
  uint64_t v152;
  __n128 v153;
  __n128 v154;
  void *__p;
  void *v156;
  _QWORD *v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  std::__shared_weak_count_vtbl *v162;
  _QWORD *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168[3];
  uint64_t v169[3];
  _QWORD v170[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v172;
  void (__cdecl **v173)(std::__shared_weak_count *__hidden);
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  uint64_t v182[2];

  v182[1] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v163 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v172 = (std::__shared_weak_count_vtbl *)&v8->~__shared_weak_count_0;
  v173 = &v8->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v158 = v10;
  *v10 = v9;
  v159 = v10 + 1;
  v160 = v10 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v156 = v12 + 1;
  v157 = v12 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*((void (**)(std::__shared_weak_count_vtbl *))v13->~__shared_weak_count + 1))(v13);
  v14 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v15 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  v17 = v163;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v19;
  v19->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v18;
  v172 = (std::__shared_weak_count_vtbl *)&v19->~__shared_weak_count_0;
  v173 = &v19->~__shared_weak_count_0;
  v164 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  v158 = v21;
  *v21 = v20;
  v159 = v21 + 1;
  v160 = v21 + 1;
  v165 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v158);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v156 = v23 + 1;
  v157 = v23 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v164, 3, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v162);
  v24 = v162;
  v162 = 0;
  if (v24)
    (*((void (**)(std::__shared_weak_count_vtbl *))v24->~__shared_weak_count + 1))(v24);
  v25 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v26 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v156 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  __p = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  v164 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v164, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve((char **)__p, 1uLL);
  v29 = (void ***)__p;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v31;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v30;
  v172 = (std::__shared_weak_count_vtbl *)&v31->~__shared_weak_count_0;
  v173 = &v31->~__shared_weak_count_0;
  v182[0] = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)v182, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&v162);
  v32 = v162;
  v158 = v162;
  if (v162)
  {
    v33 = (_QWORD *)operator new();
    v34 = v162;
    *v33 = &unk_1EA99F888;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v34;
  }
  else
  {
    v33 = 0;
  }
  v159 = v33;
  v162 = 0;
  v35 = (unint64_t)v29[2];
  v36 = v29[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = ((char *)v36 - (char *)*v29) >> 4;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v40 = v35 - (_QWORD)*v29;
    if (v40 >> 3 > v39)
      v39 = v40 >> 3;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
      v41 = 0xFFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    v167[1] = v29 + 2;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v41);
    v44 = &v42[16 * v38];
    *(_QWORD *)v44 = v32;
    *((_QWORD *)v44 + 1) = v33;
    v158 = 0;
    v159 = 0;
    v46 = *v29;
    v45 = v29[1];
    if (v45 == *v29)
    {
      v49 = v29[1];
      v47 = &v42[16 * v38];
    }
    else
    {
      v47 = &v42[16 * v38];
      do
      {
        v48 = *((_OWORD *)v45 - 1);
        v45 -= 2;
        *((_OWORD *)v47 - 1) = v48;
        v47 -= 16;
        *v45 = 0;
        v45[1] = 0;
      }
      while (v45 != v46);
      v49 = *v29;
      v45 = v29[1];
    }
    v37 = (void **)(v44 + 16);
    *v29 = (void **)v47;
    v164 = v49;
    v165 = (uint64_t)v49;
    v29[1] = (void **)(v44 + 16);
    v166 = (uint64_t)v45;
    v50 = v29[2];
    v29[2] = (void **)&v42[16 * v43];
    v167[0] = v50;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v164);
  }
  else
  {
    *v36 = v32;
    v36[1] = v33;
    v37 = v36 + 2;
    v158 = 0;
    v159 = 0;
  }
  v29[1] = v37;
  v51 = v162;
  v162 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  v52 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v53 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (Scalar)
  {
    v172 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v151 = *(_OWORD *)a2;
  v152 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v55 = (uint64_t)v163;
  *(_QWORD *)&v150 = v163;
  if (v163)
  {
    v56 = (_QWORD *)operator new();
    *v56 = &unk_1EA99F8E8;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v55;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v150 + 1) = v56;
  v163 = 0;
  *(_QWORD *)&v149 = __p;
  if (__p)
  {
    v57 = (_QWORD *)operator new();
    v58 = __p;
    *v57 = &unk_1EA99F948;
    v57[1] = 0;
    v57[2] = 0;
    v57[3] = v58;
  }
  else
  {
    v57 = 0;
  }
  *((_QWORD *)&v149 + 1) = v57;
  __p = 0;
  v181 = 0;
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v151, &v150, &v149, (uint64_t)v180, (uint64_t)v178, a3);
  v59 = v179;
  if (v179 == v178)
  {
    v60 = 4;
    v59 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_64;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_64:
  v61 = v181;
  if (v181 == v180)
  {
    v62 = 4;
    v61 = v180;
    goto LABEL_68;
  }
  if (v181)
  {
    v62 = 5;
LABEL_68:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
  if (*((_QWORD *)&v150 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v152) < 0)
    operator delete(v151[0]);
  v158 = 0;
  v69 = (_OWORD *)operator new();
  *v69 = 0u;
  v69[1] = 0u;
  *((_DWORD *)v69 + 8) = 1065353216;
  v158 = v69;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v148);
  MIL::IRParameter::Make(&v148, (uint64_t *)&v164);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v69, "minimum_compute_type", (uint64_t *)&v164);
  v71 = v164;
  v164 = 0;
  if (v71)
    (*((void (**)(void **))*v71 + 1))(v71);
  v72 = (std::__shared_weak_count *)v148.n128_u64[1];
  if (v148.n128_u64[1])
  {
    v73 = (unint64_t *)(v148.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 48))(*((_QWORD *)v70 + 5), 1);
  v75 = *a3;
  v76 = (std::__shared_weak_count_vtbl *)v158;
  v146 = v158;
  if (v158)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v76;
  }
  else
  {
    v77 = 0;
  }
  v147 = v77;
  v158 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v75 + 184))(v75, &v146);
  v78 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v80 = __ldaxr(p_shared_owners);
    while (__stlxr(v80 - 1, p_shared_owners));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = *a3;
  v176[0] = &off_1EA99FBD8;
  v176[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceElementwiseBinaryBoolOutput;
  v177 = v176;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v81 + 200))(v81, v176);
  v82 = v177;
  if (v177 == v176)
  {
    v83 = 4;
    v82 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_101;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_101:
  v84 = *a3;
  v174[0] = &off_1EA9A00F8;
  v174[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceNotEqual;
  v175 = v174;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 216))(v84, v174);
  v85 = v175;
  if (v175 == v174)
  {
    v86 = 4;
    v85 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_106;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&v164);
  v87 = v164;
  std::string::basic_string[abi:ne180100]<0>(v142, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&Scalar);
  v144 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v145 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v87 + 3))(v87, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v90 = v145;
  if (v145)
  {
    v91 = (unint64_t *)&v145->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v164;
  std::string::basic_string[abi:ne180100]<0>(v136, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v136, 0, (uint64_t *)&Scalar);
  v138 = Scalar;
  if (Scalar)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = Scalar;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v139 = v95;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v134, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v94 + 3))(v94, &v138, v134);
  if (v135 < 0)
    operator delete(v134[0]);
  v97 = v139;
  if (v139)
  {
    v98 = (unint64_t *)&v139->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = Scalar;
  Scalar = 0;
  if (v100)
    (*((void (**)(std::__shared_weak_count_vtbl *))v100->~__shared_weak_count + 1))(v100);
  if (v137 < 0)
    operator delete(v136[0]);
  v101 = *a3;
  v132 = v164;
  if (v164)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = v164;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
  }
  else
  {
    v102 = 0;
  }
  v133 = v102;
  v164 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v101 + 56))(v101, &v132);
  v104 = v133;
  if (v133)
  {
    v105 = (unint64_t *)&v133->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v164;
  v164 = 0;
  if (v107)
    (*((void (**)(void **))*v107 + 1))(v107);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v162);
  v108 = v162;
  std::string::basic_string[abi:ne180100]<0>(v128, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v128, 1, v182);
  v130 = v182[0];
  if (v182[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v182[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
  }
  else
  {
    v109 = 0;
  }
  v131 = v109;
  v182[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v164, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v167, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v168, "int32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int8");
  std::string::basic_string[abi:ne180100]<0>(v170, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v164, 5);
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))v108->~__shared_weak_count
   + 3))(v108, &v130, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v170[i + 2]) < 0)
      operator delete((void *)v170[i]);
  }
  v112 = v131;
  if (v131)
  {
    v113 = (unint64_t *)&v131->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v182[0];
  v182[0] = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  if (v129 < 0)
    operator delete(v128[0]);
  v116 = *a3;
  v126 = v162;
  if (v162)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = v162;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v127 = v117;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v116 + 56))(v116, &v126);
  v119 = v127;
  if (v127)
  {
    v120 = (unint64_t *)&v127->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = v162;
  v162 = 0;
  if (v122)
    (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
  if (v158)
  {
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v158);
    MEMORY[0x1E0C023A0](v123, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  result = (uint64_t)v163;
  if (v163)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v163);
    return MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E080C430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v62;
  uint64_t v63;

  v62 = a59;
  a59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&a51, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::FloorDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloorDiv;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E080D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Maximum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMaximum;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E080F01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Minimum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMinimum;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Mod::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMod;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0811D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Mul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceMul;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081339C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Pow::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferencePow;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0814A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::RealDiv::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRealDiv;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Sub::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char **v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _OWORD *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t i;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::string *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::string *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  uint64_t j;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t result;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  std::string *v148;
  std::__shared_weak_count *v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;
  std::string *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::string *v160;
  std::__shared_weak_count *v161;
  void *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  __n128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char **v176;
  __n128 v177;
  void *__p;
  void *v179;
  _QWORD *v180;
  void *p_Scalar;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  __int128 v186;
  uint64_t v187;
  _QWORD v188[3];
  __int128 v189;
  uint64_t v190[3];
  _QWORD v191[3];
  std::string *Scalar;
  std::string *v193;
  __int128 *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v8;
  *(_QWORD *)v8 = v7;
  v193 = (std::string *)((char *)v8 + 8);
  v194 = (__int128 *)((char *)v8 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  p_Scalar = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v169);
  v13 = v169;
  v169 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v15 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v17 = v185;
  v18 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v19 = (__int128 *)operator new(8uLL);
  Scalar = (std::string *)v19;
  *(_QWORD *)v19 = v18;
  v193 = (std::string *)((char *)v19 + 8);
  v194 = (__int128 *)((char *)v19 + 8);
  *(_QWORD *)&v186 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v20 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v21 = operator new(8uLL);
  p_Scalar = v21;
  *v21 = v20;
  v182 = v21 + 1;
  v183 = v21 + 1;
  *((_QWORD *)&v186 + 1) = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&p_Scalar);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = operator new(8uLL);
  __p = v23;
  *v23 = v22;
  v179 = v23 + 1;
  v180 = v23 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v169);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v17, "y", (uint64_t *)&v169);
  v24 = v169;
  v169 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v26 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  if (Scalar)
  {
    v193 = Scalar;
    operator delete(Scalar);
  }
  v176 = 0;
  v28 = operator new();
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)&v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, (void **)v28);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v176, 1uLL);
  v29 = v176;
  v30 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v31 = operator new(8uLL);
  p_Scalar = v31;
  *v31 = v30;
  v182 = v31 + 1;
  v183 = v31 + 1;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&p_Scalar);
  v32 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v33 = operator new(8uLL);
  __p = v33;
  *v33 = v32;
  v179 = v33 + 1;
  v180 = v33 + 1;
  v193 = (std::string *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v34 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v35 = operator new(8uLL);
  v169 = v35;
  *v35 = v34;
  v170 = v35 + 1;
  v171 = v35 + 1;
  v194 = (__int128 *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v169);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v172);
  MIL::IRParameter::Make(&v172, &v173);
  v36 = v173;
  v174 = v173;
  if (v173)
  {
    v37 = (_QWORD *)operator new();
    v38 = v173;
    *v37 = &unk_1EA99F888;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v38;
  }
  else
  {
    v37 = 0;
  }
  v175 = v37;
  v173 = 0;
  v39 = v29[2];
  v40 = v29[1];
  if (v40 >= v39)
  {
    v42 = (v40 - *v29) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v44 = v39 - *v29;
    if (v44 >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    v188[1] = v29 + 2;
    v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v29 + 2), v45);
    v48 = (uint64_t *)&v46[16 * v42];
    *v48 = v36;
    v48[1] = (uint64_t)v37;
    v174 = 0;
    v175 = 0;
    v50 = *v29;
    v49 = v29[1];
    if (v49 == *v29)
    {
      v53 = v29[1];
      v51 = &v46[16 * v42];
    }
    else
    {
      v51 = &v46[16 * v42];
      do
      {
        v52 = *((_OWORD *)v49 - 1);
        v49 -= 16;
        *((_OWORD *)v51 - 1) = v52;
        v51 -= 16;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
      }
      while (v49 != v50);
      v53 = *v29;
      v49 = v29[1];
    }
    v41 = (char *)(v48 + 2);
    *v29 = v51;
    *(_QWORD *)&v186 = v53;
    *((_QWORD *)&v186 + 1) = v53;
    v29[1] = (char *)(v48 + 2);
    v187 = (uint64_t)v49;
    v54 = v29[2];
    v29[2] = &v46[16 * v47];
    v188[0] = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v40 = v36;
    *((_QWORD *)v40 + 1) = v37;
    v41 = v40 + 16;
    v174 = 0;
    v175 = 0;
  }
  v29[1] = v41;
  v55 = v173;
  v173 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v172.n128_u64[1];
  if (v172.n128_u64[1])
  {
    v57 = (unint64_t *)(v172.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  if (p_Scalar)
  {
    v182 = p_Scalar;
    operator delete(p_Scalar);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v59 = (uint64_t)v185;
  *(_QWORD *)&v166 = v185;
  if (v185)
  {
    v60 = (_QWORD *)operator new();
    *v60 = &unk_1EA99F8E8;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v166 + 1) = v60;
  v185 = 0;
  *(_QWORD *)&v165 = v176;
  if (v176)
  {
    v61 = (_QWORD *)operator new();
    v62 = v176;
    *v61 = &unk_1EA99F948;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v62;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v165 + 1) = v61;
  v176 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v201, (uint64_t)v199, a3);
  v63 = v200;
  if (v200 == v199)
  {
    v64 = 4;
    v63 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_68;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_68:
  v65 = v202;
  if (v202 == v201)
  {
    v66 = 4;
    v65 = v201;
    goto LABEL_72;
  }
  if (v202)
  {
    v66 = 5;
LABEL_72:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  __p = 0;
  v73 = (_OWORD *)operator new();
  *v73 = 0u;
  v73[1] = 0u;
  *((_DWORD *)v73 + 8) = 1065353216;
  __p = v73;
  Scalar = (std::string *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&v186);
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v73, "minimum_compute_type", (uint64_t *)&v186);
  v75 = v186;
  *(_QWORD *)&v186 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v77 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 32))(*((_QWORD *)v74 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v74 + 5) + 48))(*((_QWORD *)v74 + 5), 1);
  v79 = *a3;
  v80 = (std::__shared_weak_count_vtbl *)__p;
  v162 = __p;
  if (__p)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v80;
  }
  else
  {
    v81 = 0;
  }
  v163 = v81;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 184))(v79, &v162);
  v82 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v186, "x");
  std::string::basic_string[abi:ne180100]<0>(v188, "y");
  Scalar = 0;
  v193 = 0;
  v194 = 0;
  p_Scalar = &Scalar;
  LOBYTE(v182) = 0;
  Scalar = (std::string *)operator new(0x30uLL);
  v193 = Scalar;
  v194 = (__int128 *)&Scalar[2];
  v193 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v194, &v186, &v189, Scalar);
  MIL::ValueTypeInference::BroadcastFromInputs((__int128 **)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v85 + 200))(v85, v197);
  v86 = v198;
  if (v198 == v197)
  {
    v87 = 4;
    v86 = v197;
    goto LABEL_104;
  }
  if (v198)
  {
    v87 = 5;
LABEL_104:
    (*(void (**)(void))(*v86 + 8 * v87))();
  }
  p_Scalar = &Scalar;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v188[i + 2]) < 0)
      operator delete((void *)v188[i]);
  }
  v89 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSub;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v89 + 216))(v89, v195);
  v90 = v196;
  if (v196 == v195)
  {
    v91 = 4;
    v90 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_114;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_114:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v158, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&Scalar);
  v160 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  }
  else
  {
    v93 = 0;
  }
  v161 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v92 + 24))(v92, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v95 = v161;
  if (v161)
  {
    v96 = (unint64_t *)&v161->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*(void (**)(std::string *))(v98->__r_.__value_.__r.__words[0] + 8))(v98);
  if (v159 < 0)
    operator delete(v158[0]);
  v99 = v186;
  std::string::basic_string[abi:ne180100]<0>(v152, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v152, 0, (uint64_t *)&Scalar);
  v154 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v155 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v150, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v99 + 24))(v99, &v154, v150);
  if (v151 < 0)
    operator delete(v150[0]);
  v102 = v155;
  if (v155)
  {
    v103 = (unint64_t *)&v155->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*(void (**)(std::string *))(v105->__r_.__value_.__r.__words[0] + 8))(v105);
  if (v153 < 0)
    operator delete(v152[0]);
  v106 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v148 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v149 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(uint64_t, std::string **, void **))(*(_QWORD *)v106 + 24))(v106, &v148, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v109 = v149;
  if (v149)
  {
    v110 = (unint64_t *)&v149->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(std::string *))(v112->__r_.__value_.__r.__words[0] + 8))(v112);
  v113 = *a3;
  v144 = v186;
  if ((_QWORD)v186)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v186;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v145 = v114;
  *(_QWORD *)&v186 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v113 + 56))(v113, &v144);
  v116 = v145;
  if (v145)
  {
    v117 = (unint64_t *)&v145->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v186;
  *(_QWORD *)&v186 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  MIL::Validation::PossibleStringValuesConstraints::Make(&p_Scalar);
  v120 = p_Scalar;
  std::string::basic_string[abi:ne180100]<0>(v140, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v140, 1, (uint64_t *)&v169);
  v142 = v169;
  if (v169)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = (std::__shared_weak_count_vtbl *)v169;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v143 = v121;
  v169 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(&v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::string **, uint64_t))(*(_QWORD *)v120 + 24))(v120, &v142, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v191[j + 2]) < 0)
      operator delete((void *)v191[j]);
  }
  v124 = v143;
  if (v143)
  {
    v125 = (unint64_t *)&v143->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v169;
  v169 = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v141 < 0)
    operator delete(v140[0]);
  v128 = *a3;
  v138 = p_Scalar;
  if (p_Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = (std::__shared_weak_count_vtbl *)p_Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v139 = v129;
  p_Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v128 + 56))(v128, &v138);
  v131 = v139;
  if (v139)
  {
    v132 = (unint64_t *)&v139->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = p_Scalar;
  p_Scalar = 0;
  if (v134)
    (*(void (**)(void *))(*(_QWORD *)v134 + 8))(v134);
  if (__p)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
    MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v176, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v137, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a64;
  a64 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a61, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCast(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0817D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAbs(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAbs(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0817DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcos(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcos(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0817E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcosh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAcosh(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0817EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsin(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsin(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0817F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsinh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAsinh(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtan(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtan(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08180A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtanh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceAtanh(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCast(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCast(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08181CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCeil(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCeil(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceClip(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceClip(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08182F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCos(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCos(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCosh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceCosh(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E081841C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08184B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp2(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceExp2(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloor(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceFloor(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08185D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceInverse(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceInverse(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E081866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLog(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLog(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalNot(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceLogicalNot(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRound(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRound(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRsqrt(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceRsqrt(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08188BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSign(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSign(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSin(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSin(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08189E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSinh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSinh(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSqrt(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSqrt(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSquare(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceSquare(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTan(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTan(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTanh(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceTanh(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceThreshold(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueInference::ValueInferenceThreshold(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0818D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Cast::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void **v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  void **v52;
  char *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _OWORD *v72;
  unsigned __int8 *v73;
  void **v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void **v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void **v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  void **v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void **v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  uint64_t i;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void *v118;
  void *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  uint64_t j;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t result;
  uint64_t v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145;
  std::__shared_weak_count *v146;
  void **v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  std::__shared_weak_count_vtbl *v157;
  std::__shared_weak_count *v158;
  void *v159;
  std::__shared_weak_count *v160;
  __n128 v161;
  __int128 v162;
  __int128 v163;
  void *v164[2];
  uint64_t v165;
  void *v166;
  void *v167;
  _QWORD *v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char **v173;
  __n128 v174;
  void *__p;
  void *v176;
  _QWORD *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  void *v181;
  void *v182;
  _QWORD *v183;
  __n128 v184;
  _QWORD *v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD v190[3];
  _QWORD v191[3];
  _QWORD v192[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD v197[3];
  _QWORD *v198;
  _QWORD v199[3];
  _QWORD *v200;
  _BYTE v201[24];
  _BYTE *v202;
  _QWORD v203[3];
  _QWORD *v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v185 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v194 = (uint64_t)&v8->~__shared_weak_count_0;
  v195 = (uint64_t)&v8->~__shared_weak_count_0;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v181 = v10;
  *v10 = v9;
  v182 = v10 + 1;
  v183 = v10 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v181);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v178 = v12;
  *v12 = v11;
  v179 = v12 + 1;
  v180 = v12 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v178);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v176 = v14 + 1;
  v177 = v14 + 1;
  v189[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 4, &v184);
  MIL::IRParameter::Make(&v184, (uint64_t *)&v166);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v166);
  v15 = v166;
  v166 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v184.n128_u64[1];
  if (v184.n128_u64[1])
  {
    v17 = (unint64_t *)(v184.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  if (Scalar)
  {
    v194 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v19 = v185;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&v186);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v19, "dtype", (uint64_t *)&v186);
  v21 = v186;
  v186 = 0;
  if (v21)
    (*((void (**)(void **))*v21 + 1))(v21);
  v22 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v23 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v173 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v173, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v173, 1uLL);
  v26 = v173;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  v181 = v28;
  *v28 = v27;
  v182 = v28 + 1;
  v183 = v28 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&v181);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v178 = v30;
  *v30 = v29;
  v179 = v30 + 1;
  v180 = v30 + 1;
  v194 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v178);
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  __p = v32;
  *v32 = v31;
  v176 = v32 + 1;
  v177 = v32 + 1;
  v195 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = operator new(8uLL);
  v166 = v34;
  *v34 = v33;
  v167 = v34 + 1;
  v168 = v34 + 1;
  v196 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v166);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v169);
  MIL::IRParameter::Make(&v169, &v170);
  v35 = v170;
  v171 = v170;
  if (v170)
  {
    v36 = (_QWORD *)operator new();
    v37 = v170;
    *v36 = &unk_1EA99F888;
    v36[1] = 0;
    v36[2] = 0;
    v36[3] = v37;
  }
  else
  {
    v36 = 0;
  }
  v172 = v36;
  v170 = 0;
  v38 = v26[2];
  v39 = v26[1];
  if (v39 >= v38)
  {
    v41 = (v39 - *v26) >> 4;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v43 = v38 - *v26;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v189[1] = v26 + 2;
    v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v44);
    v47 = (uint64_t *)&v45[16 * v41];
    *v47 = v35;
    v47[1] = (uint64_t)v36;
    v171 = 0;
    v172 = 0;
    v49 = *v26;
    v48 = v26[1];
    if (v48 == *v26)
    {
      v52 = (void **)v26[1];
      v50 = &v45[16 * v41];
    }
    else
    {
      v50 = &v45[16 * v41];
      do
      {
        v51 = *((_OWORD *)v48 - 1);
        v48 -= 16;
        *((_OWORD *)v50 - 1) = v51;
        v50 -= 16;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
      }
      while (v48 != v49);
      v52 = (void **)*v26;
      v48 = v26[1];
    }
    v40 = (char *)(v47 + 2);
    *v26 = v50;
    v186 = v52;
    v187 = (uint64_t)v52;
    v26[1] = (char *)(v47 + 2);
    v188 = (uint64_t)v48;
    v53 = v26[2];
    v26[2] = &v45[16 * v46];
    v189[0] = v53;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v39 = v35;
    *((_QWORD *)v39 + 1) = v36;
    v40 = v39 + 16;
    v171 = 0;
    v172 = 0;
  }
  v26[1] = v40;
  v54 = v170;
  v170 = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v169.n128_u64[1];
  if (v169.n128_u64[1])
  {
    v56 = (unint64_t *)(v169.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    v182 = v181;
    operator delete(v181);
  }
  *(_OWORD *)v164 = *(_OWORD *)a2;
  v165 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v58 = (uint64_t)v185;
  *(_QWORD *)&v163 = v185;
  if (v185)
  {
    v59 = (_QWORD *)operator new();
    *v59 = &unk_1EA99F8E8;
    v59[1] = 0;
    v59[2] = 0;
    v59[3] = v58;
  }
  else
  {
    v59 = 0;
  }
  *((_QWORD *)&v163 + 1) = v59;
  v185 = 0;
  *(_QWORD *)&v162 = v173;
  if (v173)
  {
    v60 = (_QWORD *)operator new();
    v61 = v173;
    *v60 = &unk_1EA99F948;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  *((_QWORD *)&v162 + 1) = v60;
  v173 = 0;
  v203[0] = &unk_1EA99FAC8;
  v203[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateCast;
  v204 = v203;
  v202 = 0;
  MIL::IROperator::Make((__int128 *)v164, &v163, &v162, (uint64_t)v203, (uint64_t)v201, a3);
  v62 = v202;
  if (v202 == v201)
  {
    v63 = 4;
    v62 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_66;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_66:
  v64 = v204;
  if (v204 == v203)
  {
    v65 = 4;
    v64 = v203;
    goto LABEL_70;
  }
  if (v204)
  {
    v65 = 5;
LABEL_70:
    (*(void (**)(void))(*v64 + 8 * v65))();
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (SHIBYTE(v165) < 0)
    operator delete(v164[0]);
  v181 = 0;
  v72 = (_OWORD *)operator new();
  *v72 = 0u;
  v72[1] = 0u;
  *((_DWORD *)v72 + 8) = 1065353216;
  v181 = v72;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&v186);
  v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v72, "minimum_compute_type", (uint64_t *)&v186);
  v74 = v186;
  v186 = 0;
  if (v74)
    (*((void (**)(void **))*v74 + 1))(v74);
  v75 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v76 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 32))(*((_QWORD *)v73 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v73 + 5) + 48))(*((_QWORD *)v73 + 5), 1);
  v78 = *a3;
  v79 = (std::__shared_weak_count_vtbl *)v181;
  v159 = v181;
  if (v181)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v79;
  }
  else
  {
    v80 = 0;
  }
  v160 = v80;
  v181 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v78 + 184))(v78, &v159);
  v81 = v160;
  if (v160)
  {
    p_shared_owners = (unint64_t *)&v160->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = *a3;
  v199[0] = &off_1EA99FBD8;
  v199[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceCast;
  v200 = v199;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v84 + 200))(v84, v199);
  v85 = v200;
  if (v200 == v199)
  {
    v86 = 4;
    v85 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_103;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_103:
  v87 = *a3;
  v197[0] = &off_1EA9A00F8;
  v197[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCast;
  v198 = v197;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v87 + 216))(v87, v197);
  v88 = v198;
  if (v198 == v197)
  {
    v89 = 4;
    v88 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_108;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_108:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v90 = v186;
  std::string::basic_string[abi:ne180100]<0>(v155, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v155, 0, (uint64_t *)&Scalar);
  v157 = Scalar;
  if (Scalar)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = Scalar;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v158 = v91;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v153, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v90 + 3))(v90, &v157, v153);
  if (v154 < 0)
    operator delete(v153[0]);
  v93 = v158;
  if (v158)
  {
    v94 = (unint64_t *)&v158->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Scalar;
  Scalar = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v156 < 0)
    operator delete(v155[0]);
  v97 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v151 = Scalar;
  if (Scalar)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = Scalar;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v152 = v98;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T_Out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v97 + 3))(v97, &v151, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v100 = v152;
  if (v152)
  {
    v101 = (unint64_t *)&v152->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = Scalar;
  Scalar = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v147 = v186;
  if (v186)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v186;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v148 = v105;
  v186 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v104 + 56))(v104, &v147);
  v107 = v148;
  if (v148)
  {
    v108 = (unint64_t *)&v148->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v186;
  v186 = 0;
  if (v110)
    (*((void (**)(void **))*v110 + 1))(v110);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v178);
  v111 = v178;
  std::string::basic_string[abi:ne180100]<0>(v143, "dtype");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v143, 0, (uint64_t *)&__p);
  v145 = __p;
  if (__p)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = (std::__shared_weak_count_vtbl *)__p;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v146 = v112;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "BOOL");
  std::string::basic_string[abi:ne180100]<0>(v189, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v190, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int32");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 4);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v111 + 24))(v111, &v145, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v191[i + 2]) < 0)
      operator delete((void *)v191[i]);
  }
  v115 = v146;
  if (v146)
  {
    v116 = (unint64_t *)&v146->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = __p;
  __p = 0;
  if (v118)
    (*(void (**)(void *))(*(_QWORD *)v118 + 8))(v118);
  if (v144 < 0)
    operator delete(v143[0]);
  v119 = v178;
  std::string::basic_string[abi:ne180100]<0>(v139, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v139, 1, (uint64_t *)&__p);
  v141 = __p;
  if (__p)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = (std::__shared_weak_count_vtbl *)__p;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v142 = v120;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&v186, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v189, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int32");
  std::string::basic_string[abi:ne180100]<0>(v191, "int8");
  std::string::basic_string[abi:ne180100]<0>(v192, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v186, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v119 + 24))(v119, &v141, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v192[j + 2]) < 0)
      operator delete((void *)v192[j]);
  }
  v123 = v142;
  if (v142)
  {
    v124 = (unint64_t *)&v142->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = __p;
  __p = 0;
  if (v126)
    (*(void (**)(void *))(*(_QWORD *)v126 + 8))(v126);
  if (v140 < 0)
    operator delete(v139[0]);
  v127 = *a3;
  v137 = v178;
  if (v178)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = (std::__shared_weak_count_vtbl *)v178;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = v129;
  }
  else
  {
    v128 = 0;
  }
  v138 = v128;
  v178 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v127 + 56))(v127, &v137);
  v130 = v138;
  if (v138)
  {
    v131 = (unint64_t *)&v138->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v178;
  v178 = 0;
  if (v133)
    (*(void (**)(void *))(*(_QWORD *)v133 + 8))(v133);
  if (v181)
  {
    v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v181);
    MEMORY[0x1E0C023A0](v134, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v173, 0);
  result = (uint64_t)v185;
  if (v185)
  {
    v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    return MEMORY[0x1E0C023A0](v136, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0819E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a66;
  uint64_t a71;
  uint64_t *v71;
  void *v73;
  uint64_t v74;

  v73 = a63;
  a63 = 0;
  if (v73)
    (*(void (**)(void *))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a66, 0);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a71, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ElementwiseUnary::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char **v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _OWORD *v60;
  unsigned __int8 *v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count_vtbl *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t i;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116[2];
  char v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  void *v120;
  std::__shared_weak_count *v121;
  void *v122[2];
  char v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  void *v137[2];
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  char **v143;
  __n128 v144;
  uint64_t v145;
  void *v146;
  void *v147;
  char *v148;
  _QWORD v149[3];
  uint64_t v150[3];
  uint64_t v151[3];
  void *v152[3];
  void *__p;
  void *v154;
  _QWORD *v155;
  _BYTE v156[24];
  _BYTE *v157;
  _BYTE v158[24];
  _BYTE *v159;
  _BYTE v160[24];
  _BYTE *v161;
  std::__shared_weak_count_vtbl *v162;
  uint64_t v163;
  void (__cdecl **v164)(std::__shared_weak_count *__hidden);
  uint64_t v165[3];

  v165[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v145 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v146 = v10;
  *v10 = v9;
  v147 = v10 + 1;
  v148 = (char *)(v10 + 1);
  v162 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v146);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v154 = v12 + 1;
  v155 = v12 + 1;
  v163 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v162, 2, &v144);
  MIL::IRParameter::Make(&v144, &v141);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v141);
  v13 = v141;
  v141 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v144.n128_u64[1];
  if (v144.n128_u64[1])
  {
    v15 = (unint64_t *)(v144.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  v143 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v146 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v146, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v143, 1uLL);
  v18 = v143;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  __p = v20;
  *v20 = v19;
  v154 = v20 + 1;
  v155 = v20 + 1;
  v165[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v162 = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v163 = (uint64_t)&v22->~__shared_weak_count_0;
  v164 = &v22->~__shared_weak_count_0;
  v165[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)v165, 2, &v139);
  MIL::IRParameter::Make(&v139, &v140);
  v23 = v140;
  v141 = v140;
  if (v140)
  {
    v24 = (_QWORD *)operator new();
    v25 = v140;
    *v24 = &unk_1EA99F888;
    v24[1] = 0;
    v24[2] = 0;
    v24[3] = v25;
  }
  else
  {
    v24 = 0;
  }
  v142 = v24;
  v140 = 0;
  v26 = v18[2];
  v27 = v18[1];
  if (v27 >= v26)
  {
    v29 = (v27 - *v18) >> 4;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v31 = v26 - *v18;
    if (v31 >> 3 > v30)
      v30 = v31 >> 3;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    v149[1] = v18 + 2;
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v32);
    v35 = (uint64_t *)&v33[16 * v29];
    *v35 = v23;
    v35[1] = (uint64_t)v24;
    v141 = 0;
    v142 = 0;
    v37 = *v18;
    v36 = v18[1];
    if (v36 == *v18)
    {
      v40 = v18[1];
      v38 = &v33[16 * v29];
    }
    else
    {
      v38 = &v33[16 * v29];
      do
      {
        v39 = *((_OWORD *)v36 - 1);
        v36 -= 16;
        *((_OWORD *)v38 - 1) = v39;
        v38 -= 16;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
      }
      while (v36 != v37);
      v40 = *v18;
      v36 = v18[1];
    }
    v28 = (char *)(v35 + 2);
    *v18 = v38;
    v146 = v40;
    v147 = v40;
    v18[1] = (char *)(v35 + 2);
    v148 = v36;
    v41 = v18[2];
    v18[2] = &v33[16 * v34];
    v149[0] = v41;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v146);
  }
  else
  {
    *(_QWORD *)v27 = v23;
    *((_QWORD *)v27 + 1) = v24;
    v28 = v27 + 16;
    v141 = 0;
    v142 = 0;
  }
  v18[1] = v28;
  v42 = v140;
  v140 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v44 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v162)
  {
    v163 = (uint64_t)v162;
    operator delete(v162);
  }
  if (__p)
  {
    v154 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v137 = *(_OWORD *)a2;
  v138 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v46 = v145;
  *(_QWORD *)&v136 = v145;
  if (v145)
  {
    v47 = (_QWORD *)operator new();
    *v47 = &unk_1EA99F8E8;
    v47[1] = 0;
    v47[2] = 0;
    v47[3] = v46;
  }
  else
  {
    v47 = 0;
  }
  *((_QWORD *)&v136 + 1) = v47;
  v145 = 0;
  *(_QWORD *)&v135 = v143;
  if (v143)
  {
    v48 = (_QWORD *)operator new();
    v49 = v143;
    *v48 = &unk_1EA99F948;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  *((_QWORD *)&v135 + 1) = v48;
  v143 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v160, a3);
  v159 = 0;
  MIL::IROperator::Make((__int128 *)v137, &v136, &v135, (uint64_t)v160, (uint64_t)v158, a4);
  v50 = v159;
  if (v159 == v158)
  {
    v51 = 4;
    v50 = v158;
  }
  else
  {
    if (!v159)
      goto LABEL_51;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_51:
  v52 = v161;
  if (v161 == v160)
  {
    v53 = 4;
    v52 = v160;
    goto LABEL_55;
  }
  if (v161)
  {
    v53 = 5;
LABEL_55:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (SHIBYTE(v138) < 0)
    operator delete(v137[0]);
  v162 = 0;
  v60 = (_OWORD *)operator new();
  *v60 = 0u;
  v60[1] = 0u;
  *((_DWORD *)v60 + 8) = 1065353216;
  v162 = (std::__shared_weak_count_vtbl *)v60;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v134);
  MIL::IRParameter::Make(&v134, (uint64_t *)&v146);
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v60, "minimum_compute_type", (uint64_t *)&v146);
  v62 = v146;
  v146 = 0;
  if (v62)
    (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
  v63 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v64 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 32))(*((_QWORD *)v61 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v61 + 5) + 48))(*((_QWORD *)v61 + 5), 1);
  v66 = *a4;
  v67 = v162;
  v132 = v162;
  if (v162)
  {
    v68 = (std::__shared_weak_count *)operator new();
    v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v68->__shared_owners_ = 0;
    v68->__shared_weak_owners_ = 0;
    v68[1].__vftable = v67;
  }
  else
  {
    v68 = 0;
  }
  v133 = v68;
  v162 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v66 + 184))(v66, &v132);
  v69 = v133;
  if (v133)
  {
    p_shared_owners = (unint64_t *)&v133->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v146, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v146, (uint64_t)v156);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v72 + 200))(v72, v156);
  v73 = v157;
  if (v157 == v156)
  {
    v74 = 4;
    v73 = v156;
  }
  else
  {
    if (!v157)
      goto LABEL_88;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_88:
  if (SHIBYTE(v148) < 0)
    operator delete(v146);
  MIL::Validation::TensorDTypeConstraints::Make(&v146);
  v75 = v146;
  std::string::basic_string[abi:ne180100]<0>(v128, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v128, 0, (uint64_t *)&__p);
  v130 = __p;
  if (__p)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v77 = (std::__shared_weak_count_vtbl *)__p;
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v77;
  }
  else
  {
    v76 = 0;
  }
  v131 = v76;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v75 + 24))(v75, &v130, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v78 = v131;
  if (v131)
  {
    v79 = (unint64_t *)&v131->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = __p;
  __p = 0;
  if (v81)
    (*(void (**)(void *))(*(_QWORD *)v81 + 8))(v81);
  if (v129 < 0)
    operator delete(v128[0]);
  v82 = v146;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v124 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v125 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v122, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v82 + 24))(v82, &v124, v122);
  if (v123 < 0)
    operator delete(v122[0]);
  v85 = v125;
  if (v125)
  {
    v86 = (unint64_t *)&v125->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = *a4;
  v120 = v146;
  if (v146)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)v146;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v121 = v90;
  v146 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v89 + 56))(v89, &v120);
  v92 = v121;
  if (v121)
  {
    v93 = (unint64_t *)&v121->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v146;
  v146 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v141);
  v96 = v141;
  std::string::basic_string[abi:ne180100]<0>(v116, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v116, 1, v165);
  v118 = v165[0];
  if (v165[0])
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v165[0];
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = (std::__shared_weak_count_vtbl *)v98;
  }
  else
  {
    v97 = 0;
  }
  v119 = v97;
  v165[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v146, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v149, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v150, "int32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int8");
  std::string::basic_string[abi:ne180100]<0>(v152, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v146, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v96 + 24))(v96, &v118, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v152[i + 2]) < 0)
      operator delete(v152[i]);
  }
  v100 = v119;
  if (v119)
  {
    v101 = (unint64_t *)&v119->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v165[0];
  v165[0] = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  if (v117 < 0)
    operator delete(v116[0]);
  v104 = *a4;
  v114 = v141;
  if (v141)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v141;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = (std::__shared_weak_count_vtbl *)v106;
  }
  else
  {
    v105 = 0;
  }
  v115 = v105;
  v141 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v104 + 56))(v104, &v114);
  v107 = v115;
  if (v115)
  {
    v108 = (unint64_t *)&v115->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v141;
  v141 = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  if (v162)
  {
    v111 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v162);
    MEMORY[0x1E0C023A0](v111, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v143, 0);
  result = v145;
  if (v145)
  {
    v113 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v145);
    return MEMORY[0x1E0C023A0](v113, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081B0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 128), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Acos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcos;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081C280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Acosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAcosh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081D44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Asin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsin;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081E618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Asinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAsinh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E081F7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Atan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtan;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08209B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Atanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAtanh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0821B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Ceil::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCeil;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0822D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Clip::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  void *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  void *v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t i;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t result;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void *v141[2];
  char v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  void *v145;
  std::__shared_weak_count *v146;
  void *v147[2];
  char v148;
  void *v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  void *v153[2];
  char v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  void *v161;
  std::__shared_weak_count *v162;
  void *v163[2];
  char v164;
  void *v165[2];
  char v166;
  void *v167;
  std::__shared_weak_count *v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  __n128 v171;
  __int128 v172;
  __int128 v173;
  void *v174[2];
  uint64_t v175;
  __n128 v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  char **v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  _QWORD *v184;
  void *Scalar;
  uint64_t v186;
  char *v187;
  _QWORD v188[3];
  uint64_t v189[3];
  uint64_t v190[3];
  void *v191[3];
  void *__p;
  void *v193;
  _QWORD *v194;
  _QWORD v195[3];
  _QWORD *v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  _BYTE v201[24];
  _BYTE *v202;
  std::__shared_weak_count_vtbl *v203;
  uint64_t v204;
  void (__cdecl **v205)(std::__shared_weak_count *__hidden);
  uint64_t v206[3];

  v206[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v184 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v186 = (uint64_t)(v8 + 8);
  v187 = v8 + 8;
  v203 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v194 = v10 + 1;
  v193 = v10 + 1;
  v204 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v203, 2, &v183);
  MIL::IRParameter::Make(&v183, &v178);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v178);
  v11 = v178;
  v178 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v13 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v186 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v15 = v184;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v186 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v15, "alpha", (uint64_t *)&__p);
  v16 = __p;
  __p = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v18 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v184;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v186 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v181);
  MIL::IRParameter::Make(&v181, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v20, "beta", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v181.n128_u64[1];
  if (v181.n128_u64[1])
  {
    v23 = (unint64_t *)(v181.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v180 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v180, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v180, 1uLL);
  v26 = v180;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v194 = v28 + 1;
  v193 = v28 + 1;
  v206[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v203 = v30;
  v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v204 = (uint64_t)&v30->~__shared_weak_count_0;
  v205 = &v30->~__shared_weak_count_0;
  v206[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v203);
  MIL::IRParameter::MakeTypeSet((uint64_t)v206, 2, &v176);
  MIL::IRParameter::Make(&v176, &v177);
  v31 = v177;
  v178 = v177;
  if (v177)
  {
    v32 = (_QWORD *)operator new();
    v33 = v177;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v179 = v32;
  v177 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v188[1] = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v178 = 0;
    v179 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = *v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    Scalar = v48;
    v186 = (uint64_t)v48;
    v26[1] = (char *)(v43 + 2);
    v187 = v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v188[0] = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v178 = 0;
    v179 = 0;
  }
  v26[1] = v36;
  v50 = v177;
  v177 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v176.n128_u64[1];
  if (v176.n128_u64[1])
  {
    v52 = (unint64_t *)(v176.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v203)
  {
    v204 = (uint64_t)v203;
    operator delete(v203);
  }
  if (__p)
  {
    v193 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v174 = *(_OWORD *)a2;
  v175 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v184;
  *(_QWORD *)&v173 = v184;
  if (v184)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v173 + 1) = v55;
  v184 = 0;
  *(_QWORD *)&v172 = v180;
  if (v180)
  {
    v56 = (_QWORD *)operator new();
    v57 = v180;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v172 + 1) = v56;
  v180 = 0;
  v202 = 0;
  v200 = 0;
  MIL::IROperator::Make((__int128 *)v174, &v173, &v172, (uint64_t)v201, (uint64_t)v199, a3);
  v58 = v200;
  if (v200 == v199)
  {
    v59 = 4;
    v58 = v199;
  }
  else
  {
    if (!v200)
      goto LABEL_65;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_65:
  v60 = v202;
  if (v202 == v201)
  {
    v61 = 4;
    v60 = v201;
    goto LABEL_69;
  }
  if (v202)
  {
    v61 = 5;
LABEL_69:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
  if (*((_QWORD *)&v173 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v175) < 0)
    operator delete(v174[0]);
  v203 = 0;
  v68 = (_OWORD *)operator new();
  *v68 = 0u;
  v68[1] = 0u;
  *((_DWORD *)v68 + 8) = 1065353216;
  v203 = (std::__shared_weak_count_vtbl *)v68;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v171);
  MIL::IRParameter::Make(&v171, (uint64_t *)&Scalar);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v68, "minimum_compute_type", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v171.n128_u64[1];
  if (v171.n128_u64[1])
  {
    v72 = (unint64_t *)(v171.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = *a3;
  v75 = v203;
  v169 = v203;
  if (v203)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v75;
  }
  else
  {
    v76 = 0;
  }
  v170 = v76;
  v203 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v74 + 184))(v74, &v169);
  v77 = v170;
  if (v170)
  {
    p_shared_owners = (unint64_t *)&v170->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v197);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 200))(v80, v197);
  v81 = v198;
  if (v198 == v197)
  {
    v82 = 4;
    v81 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_102;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_102:
  if (SHIBYTE(v187) < 0)
    operator delete(Scalar);
  v83 = *a3;
  v195[0] = &off_1EA9A00F8;
  v195[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceClip;
  v196 = v195;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v83 + 216))(v83, v195);
  v84 = v196;
  if (v196 == v195)
  {
    v85 = 4;
    v84 = v195;
  }
  else
  {
    if (!v196)
      goto LABEL_109;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_109:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v86 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v165, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v165, 0, (uint64_t *)&__p);
  v167 = __p;
  if (__p)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = (std::__shared_weak_count_vtbl *)__p;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v168 = v87;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v163, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v86 + 24))(v86, &v167, v163);
  if (v164 < 0)
    operator delete(v163[0]);
  v89 = v168;
  if (v168)
  {
    v90 = (unint64_t *)&v168->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = __p;
  __p = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v166 < 0)
    operator delete(v165[0]);
  v93 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v159, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&__p);
  v161 = __p;
  if (__p)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)__p;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v162 = v94;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v93 + 24))(v93, &v161, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v96 = v162;
  if (v162)
  {
    v97 = (unint64_t *)&v162->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = __p;
  __p = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  if (v160 < 0)
    operator delete(v159[0]);
  v100 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v153, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v153, 0, (uint64_t *)&__p);
  v155 = __p;
  if (__p)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)__p;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v156 = v101;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v151, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v100 + 24))(v100, &v155, v151);
  if (v152 < 0)
    operator delete(v151[0]);
  v103 = v156;
  if (v156)
  {
    v104 = (unint64_t *)&v156->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = __p;
  __p = 0;
  if (v106)
    (*(void (**)(void *))(*(_QWORD *)v106 + 8))(v106);
  if (v154 < 0)
    operator delete(v153[0]);
  v107 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v149 = __p;
  if (__p)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)__p;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v150 = v108;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v147, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v107 + 24))(v107, &v149, v147);
  if (v148 < 0)
    operator delete(v147[0]);
  v110 = v150;
  if (v150)
  {
    v111 = (unint64_t *)&v150->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  v114 = *a3;
  v145 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = (std::__shared_weak_count_vtbl *)Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v146 = v115;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v114 + 56))(v114, &v145);
  v117 = v146;
  if (v146)
  {
    v118 = (unint64_t *)&v146->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v178);
  v121 = v178;
  std::string::basic_string[abi:ne180100]<0>(v141, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v141, 1, v206);
  v143 = v206[0];
  if (v206[0])
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = v206[0];
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = (std::__shared_weak_count_vtbl *)v123;
  }
  else
  {
    v122 = 0;
  }
  v144 = v122;
  v206[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v188, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v189, "int32");
  std::string::basic_string[abi:ne180100]<0>(v190, "int8");
  std::string::basic_string[abi:ne180100]<0>(v191, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v121 + 24))(v121, &v143, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v191[i + 2]) < 0)
      operator delete(v191[i]);
  }
  v125 = v144;
  if (v144)
  {
    v126 = (unint64_t *)&v144->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = v206[0];
  v206[0] = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  if (v142 < 0)
    operator delete(v141[0]);
  v129 = *a3;
  v139 = v178;
  if (v178)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = v178;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = (std::__shared_weak_count_vtbl *)v131;
  }
  else
  {
    v130 = 0;
  }
  v140 = v130;
  v178 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v129 + 56))(v129, &v139);
  v132 = v140;
  if (v140)
  {
    v133 = (unint64_t *)&v140->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v178;
  v178 = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  if (v203)
  {
    v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v203);
    MEMORY[0x1E0C023A0](v136, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v180, 0);
  result = (uint64_t)v184;
  if (v184)
  {
    v138 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v184);
    return MEMORY[0x1E0C023A0](v138, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0824264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a70;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;

  if (a61)
    (*(void (**)(uint64_t))(*(_QWORD *)a61 + 8))(a61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v71 - 112), 0);
  v73 = *v70;
  *v70 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a70, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Cos::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCos;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0825554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Cosh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceCosh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0826720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ElementwiseUnaryWithEpsilon::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count_vtbl *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  void *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  uint64_t i;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void *v129[2];
  char v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  void *v133;
  std::__shared_weak_count *v134;
  void *v135[2];
  char v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  void *v141[2];
  char v142;
  void *v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  void *v147[2];
  char v148;
  void *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  __n128 v153;
  __int128 v154;
  __int128 v155;
  void *v156[2];
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char **v162;
  __n128 v163;
  __n128 v164;
  _QWORD *v165;
  void *Scalar;
  uint64_t v167;
  char *v168;
  _QWORD v169[3];
  uint64_t v170[3];
  uint64_t v171[3];
  void *v172[3];
  void *__p;
  void *v174;
  _QWORD *v175;
  _BYTE v176[24];
  _BYTE *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _BYTE v180[24];
  _BYTE *v181;
  std::__shared_weak_count_vtbl *v182;
  uint64_t v183;
  void (__cdecl **v184)(std::__shared_weak_count *__hidden);
  uint64_t v185[3];

  v185[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v165 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(8uLL);
  Scalar = v10;
  *(_QWORD *)v10 = v9;
  v167 = (uint64_t)(v10 + 8);
  v168 = v10 + 8;
  v182 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v175 = v12 + 1;
  v174 = v12 + 1;
  v183 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v182, 2, &v164);
  MIL::IRParameter::Make(&v164, &v160);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v160);
  v13 = v160;
  v160 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v15 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v167 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v17 = v165;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v167 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v17, "epsilon", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v21 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v162 = 0;
  v23 = operator new();
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, (void **)v23);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v162, 1uLL);
  v24 = v162;
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v175 = v26 + 1;
  v174 = v26 + 1;
  v185[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v182 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v183 = (uint64_t)&v28->~__shared_weak_count_0;
  v184 = &v28->~__shared_weak_count_0;
  v185[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v182);
  MIL::IRParameter::MakeTypeSet((uint64_t)v185, 2, &v158);
  MIL::IRParameter::Make(&v158, &v159);
  v29 = v159;
  v160 = v159;
  if (v159)
  {
    v30 = (_QWORD *)operator new();
    v31 = v159;
    *v30 = &unk_1EA99F888;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  v161 = v30;
  v159 = 0;
  v32 = v24[2];
  v33 = v24[1];
  if (v33 >= v32)
  {
    v35 = (v33 - *v24) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v37 = v32 - *v24;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    v169[1] = v24 + 2;
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v24 + 2), v38);
    v41 = (uint64_t *)&v39[16 * v35];
    *v41 = v29;
    v41[1] = (uint64_t)v30;
    v160 = 0;
    v161 = 0;
    v43 = *v24;
    v42 = v24[1];
    if (v42 == *v24)
    {
      v46 = v24[1];
      v44 = &v39[16 * v35];
    }
    else
    {
      v44 = &v39[16 * v35];
      do
      {
        v45 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v44 - 1) = v45;
        v44 -= 16;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
      }
      while (v42 != v43);
      v46 = *v24;
      v42 = v24[1];
    }
    v34 = (char *)(v41 + 2);
    *v24 = v44;
    Scalar = v46;
    v167 = (uint64_t)v46;
    v24[1] = (char *)(v41 + 2);
    v168 = v42;
    v47 = v24[2];
    v24[2] = &v39[16 * v40];
    v169[0] = v47;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v33 = v29;
    *((_QWORD *)v33 + 1) = v30;
    v34 = v33 + 16;
    v160 = 0;
    v161 = 0;
  }
  v24[1] = v34;
  v48 = v159;
  v159 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v50 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v182)
  {
    v183 = (uint64_t)v182;
    operator delete(v182);
  }
  if (__p)
  {
    v174 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v156 = *(_OWORD *)a2;
  v157 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v52 = (uint64_t)v165;
  *(_QWORD *)&v155 = v165;
  if (v165)
  {
    v53 = (_QWORD *)operator new();
    *v53 = &unk_1EA99F8E8;
    v53[1] = 0;
    v53[2] = 0;
    v53[3] = v52;
  }
  else
  {
    v53 = 0;
  }
  *((_QWORD *)&v155 + 1) = v53;
  v165 = 0;
  *(_QWORD *)&v154 = v162;
  if (v162)
  {
    v54 = (_QWORD *)operator new();
    v55 = v162;
    *v54 = &unk_1EA99F948;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v154 + 1) = v54;
  v162 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v180, a3);
  v179 = 0;
  MIL::IROperator::Make((__int128 *)v156, &v155, &v154, (uint64_t)v180, (uint64_t)v178, a4);
  v56 = v179;
  if (v179 == v178)
  {
    v57 = 4;
    v56 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_58;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_58:
  v58 = v181;
  if (v181 == v180)
  {
    v59 = 4;
    v58 = v180;
    goto LABEL_62;
  }
  if (v181)
  {
    v59 = 5;
LABEL_62:
    (*(void (**)(void))(*v58 + 8 * v59))();
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v156[0]);
  v182 = 0;
  v66 = (_OWORD *)operator new();
  *v66 = 0u;
  v66[1] = 0u;
  *((_DWORD *)v66 + 8) = 1065353216;
  v182 = (std::__shared_weak_count_vtbl *)v66;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v153);
  MIL::IRParameter::Make(&v153, (uint64_t *)&Scalar);
  v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v66, "minimum_compute_type", (uint64_t *)&Scalar);
  v68 = Scalar;
  Scalar = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v153.n128_u64[1];
  if (v153.n128_u64[1])
  {
    v70 = (unint64_t *)(v153.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 32))(*((_QWORD *)v67 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v67 + 5) + 48))(*((_QWORD *)v67 + 5), 1);
  v72 = *a4;
  v73 = v182;
  v151 = v182;
  if (v182)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v73;
  }
  else
  {
    v74 = 0;
  }
  v152 = v74;
  v182 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v72 + 184))(v72, &v151);
  v75 = v152;
  if (v152)
  {
    p_shared_owners = (unint64_t *)&v152->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v176);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v78 + 200))(v78, v176);
  v79 = v177;
  if (v177 == v176)
  {
    v80 = 4;
    v79 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_95;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_95:
  if (SHIBYTE(v168) < 0)
    operator delete(Scalar);
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v81 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v147, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v147, 0, (uint64_t *)&__p);
  v149 = __p;
  if (__p)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v83 = (std::__shared_weak_count_vtbl *)__p;
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v83;
  }
  else
  {
    v82 = 0;
  }
  v150 = v82;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v81 + 24))(v81, &v149, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v84 = v150;
  if (v150)
  {
    v85 = (unint64_t *)&v150->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = __p;
  __p = 0;
  if (v87)
    (*(void (**)(void *))(*(_QWORD *)v87 + 8))(v87);
  if (v148 < 0)
    operator delete(v147[0]);
  v88 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v141, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v141, 0, (uint64_t *)&__p);
  v143 = __p;
  if (__p)
  {
    v89 = (std::__shared_weak_count *)operator new();
    v90 = (std::__shared_weak_count_vtbl *)__p;
    v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v89->__shared_owners_ = 0;
    v89->__shared_weak_owners_ = 0;
    v89[1].__vftable = v90;
  }
  else
  {
    v89 = 0;
  }
  v144 = v89;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v88 + 24))(v88, &v143, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v91 = v144;
  if (v144)
  {
    v92 = (unint64_t *)&v144->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = __p;
  __p = 0;
  if (v94)
    (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
  if (v142 < 0)
    operator delete(v141[0]);
  v95 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v137 = __p;
  if (__p)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v97 = (std::__shared_weak_count_vtbl *)__p;
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v97;
  }
  else
  {
    v96 = 0;
  }
  v138 = v96;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v135, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v95 + 24))(v95, &v137, v135);
  if (v136 < 0)
    operator delete(v135[0]);
  v98 = v138;
  if (v138)
  {
    v99 = (unint64_t *)&v138->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  v102 = *a4;
  v133 = Scalar;
  if (Scalar)
  {
    v103 = (std::__shared_weak_count *)operator new();
    v104 = (std::__shared_weak_count_vtbl *)Scalar;
    v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v103->__shared_owners_ = 0;
    v103->__shared_weak_owners_ = 0;
    v103[1].__vftable = v104;
  }
  else
  {
    v103 = 0;
  }
  v134 = v103;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v102 + 56))(v102, &v133);
  v105 = v134;
  if (v134)
  {
    v106 = (unint64_t *)&v134->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = Scalar;
  Scalar = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v160);
  v109 = v160;
  std::string::basic_string[abi:ne180100]<0>(v129, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v129, 1, v185);
  v131 = v185[0];
  if (v185[0])
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = v185[0];
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = (std::__shared_weak_count_vtbl *)v111;
  }
  else
  {
    v110 = 0;
  }
  v132 = v110;
  v185[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v169, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v170, "int32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int8");
  std::string::basic_string[abi:ne180100]<0>(v172, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v109 + 24))(v109, &v131, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v172[i + 2]) < 0)
      operator delete(v172[i]);
  }
  v113 = v132;
  if (v132)
  {
    v114 = (unint64_t *)&v132->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v185[0];
  v185[0] = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  if (v130 < 0)
    operator delete(v129[0]);
  v117 = *a4;
  v127 = v160;
  if (v160)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v160;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v128 = v118;
  v160 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v117 + 56))(v117, &v127);
  v120 = v128;
  if (v128)
  {
    v121 = (unint64_t *)&v128->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v160;
  v160 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  if (v182)
  {
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v182);
    MEMORY[0x1E0C023A0](v124, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v162, 0);
  result = (uint64_t)v165;
  if (v165)
  {
    v126 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    return MEMORY[0x1E0C023A0](v126, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0827A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;

  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 128), 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Inverse::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  uint64_t i;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void *v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  void *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  void *v157[2];
  uint64_t v158;
  __n128 v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char **v163;
  __n128 v164;
  __n128 v165;
  _QWORD *v166;
  void *Scalar;
  uint64_t v168;
  char *v169;
  _QWORD v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  void *v173[3];
  void *__p;
  void *v175;
  _QWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  _BYTE v179[24];
  _BYTE *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  std::__shared_weak_count_vtbl *v185;
  uint64_t v186;
  void (__cdecl **v187)(std::__shared_weak_count *__hidden);
  uint64_t v188[3];

  v188[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v168 = (uint64_t)(v8 + 8);
  v169 = v8 + 8;
  v185 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v176 = v10 + 1;
  v175 = v10 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 2, &v165);
  MIL::IRParameter::Make(&v165, &v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v161);
  v11 = v161;
  v161 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v13 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v15 = v166;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v168 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v15, "epsilon", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v19 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v163 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v163, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v163, 1uLL);
  v22 = v163;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v176 = v24 + 1;
  v175 = v24 + 1;
  v188[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v185 = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v186 = (uint64_t)&v26->~__shared_weak_count_0;
  v187 = &v26->~__shared_weak_count_0;
  v188[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)v188, 2, &v159);
  MIL::IRParameter::Make(&v159, &v160);
  v27 = v160;
  v161 = v160;
  if (v160)
  {
    v28 = (_QWORD *)operator new();
    v29 = v160;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v162 = v28;
  v160 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v170[1] = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v161 = 0;
    v162 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    Scalar = v44;
    v168 = (uint64_t)v44;
    v22[1] = (char *)(v39 + 2);
    v169 = v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v170[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v161 = 0;
    v162 = 0;
  }
  v22[1] = v32;
  v46 = v160;
  v160 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v159.n128_u64[1];
  if (v159.n128_u64[1])
  {
    v48 = (unint64_t *)(v159.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v185)
  {
    v186 = (uint64_t)v185;
    operator delete(v185);
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v157 = *(_OWORD *)a2;
  v158 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v166;
  *(_QWORD *)&v156 = v166;
  if (v166)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v156 + 1) = v51;
  v166 = 0;
  *(_QWORD *)&v155 = v163;
  if (v163)
  {
    v52 = (_QWORD *)operator new();
    v53 = v163;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v155 + 1) = v52;
  v163 = 0;
  v184 = 0;
  v182 = 0;
  MIL::IROperator::Make((__int128 *)v157, &v156, &v155, (uint64_t)v183, (uint64_t)v181, a3);
  v54 = v182;
  if (v182 == v181)
  {
    v55 = 4;
    v54 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v184;
  if (v184 == v183)
  {
    v57 = 4;
    v56 = v183;
    goto LABEL_62;
  }
  if (v184)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v158) < 0)
    operator delete(v157[0]);
  v185 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v185 = (std::__shared_weak_count_vtbl *)v64;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&Scalar);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&Scalar);
  v66 = Scalar;
  Scalar = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v68 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a3;
  v71 = v185;
  v152 = v185;
  if (v185)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v153 = v72;
  v185 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v70 + 184))(v70, &v152);
  v73 = v153;
  if (v153)
  {
    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v179);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v179);
  v77 = v180;
  if (v180 == v179)
  {
    v78 = 4;
    v77 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_95;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_95:
  if (SHIBYTE(v169) < 0)
    operator delete(Scalar);
  v79 = *a3;
  v177[0] = &off_1EA9A00F8;
  v177[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceInverse;
  v178 = v177;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v79 + 216))(v79, v177);
  v80 = v178;
  if (v178 == v177)
  {
    v81 = 4;
    v80 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_102;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_102:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v82 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v148, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&__p);
  v150 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v151 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v82 + 24))(v82, &v150, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v85 = v151;
  if (v151)
  {
    v86 = (unint64_t *)&v151->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v149 < 0)
    operator delete(v148[0]);
  v89 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v142, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&__p);
  v144 = __p;
  if (__p)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)__p;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v145 = v90;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v89 + 24))(v89, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v92 = v145;
  if (v145)
  {
    v93 = (unint64_t *)&v145->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = __p;
  __p = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  if (v143 < 0)
    operator delete(v142[0]);
  v96 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v138 = __p;
  if (__p)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)__p;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v139 = v97;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v96 + 24))(v96, &v138, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v99 = v139;
  if (v139)
  {
    v100 = (unint64_t *)&v139->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = __p;
  __p = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = *a3;
  v134 = Scalar;
  if (Scalar)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)Scalar;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v135 = v104;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v103 + 56))(v103, &v134);
  v106 = v135;
  if (v135)
  {
    v107 = (unint64_t *)&v135->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = Scalar;
  Scalar = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v161);
  v110 = v161;
  std::string::basic_string[abi:ne180100]<0>(v130, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v130, 1, v188);
  v132 = v188[0];
  if (v188[0])
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v188[0];
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
  }
  else
  {
    v111 = 0;
  }
  v133 = v111;
  v188[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int8");
  std::string::basic_string[abi:ne180100]<0>(v173, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v110 + 24))(v110, &v132, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v173[i + 2]) < 0)
      operator delete(v173[i]);
  }
  v114 = v133;
  if (v133)
  {
    v115 = (unint64_t *)&v133->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v188[0];
  v188[0] = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  if (v131 < 0)
    operator delete(v130[0]);
  v118 = *a3;
  v128 = v161;
  if (v161)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v161;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v129 = v119;
  v161 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v118 + 56))(v118, &v128);
  v121 = v129;
  if (v129)
  {
    v122 = (unint64_t *)&v129->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v161;
  v161 = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  if (v185)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v163, 0);
  result = (uint64_t)v166;
  if (v166)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v166);
    return MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0828E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;

  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 112), 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Log::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  uint64_t i;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void *v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  void *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  void *v157[2];
  uint64_t v158;
  __n128 v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char **v163;
  __n128 v164;
  __n128 v165;
  _QWORD *v166;
  void *Scalar;
  uint64_t v168;
  char *v169;
  _QWORD v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  void *v173[3];
  void *__p;
  void *v175;
  _QWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  _BYTE v179[24];
  _BYTE *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  std::__shared_weak_count_vtbl *v185;
  uint64_t v186;
  void (__cdecl **v187)(std::__shared_weak_count *__hidden);
  uint64_t v188[3];

  v188[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v168 = (uint64_t)(v8 + 8);
  v169 = v8 + 8;
  v185 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v176 = v10 + 1;
  v175 = v10 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 2, &v165);
  MIL::IRParameter::Make(&v165, &v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v161);
  v11 = v161;
  v161 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v13 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v15 = v166;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v168 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v15, "epsilon", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v19 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v163 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v163, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v163, 1uLL);
  v22 = v163;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v176 = v24 + 1;
  v175 = v24 + 1;
  v188[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v185 = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v186 = (uint64_t)&v26->~__shared_weak_count_0;
  v187 = &v26->~__shared_weak_count_0;
  v188[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)v188, 2, &v159);
  MIL::IRParameter::Make(&v159, &v160);
  v27 = v160;
  v161 = v160;
  if (v160)
  {
    v28 = (_QWORD *)operator new();
    v29 = v160;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v162 = v28;
  v160 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v170[1] = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v161 = 0;
    v162 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    Scalar = v44;
    v168 = (uint64_t)v44;
    v22[1] = (char *)(v39 + 2);
    v169 = v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v170[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v161 = 0;
    v162 = 0;
  }
  v22[1] = v32;
  v46 = v160;
  v160 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v159.n128_u64[1];
  if (v159.n128_u64[1])
  {
    v48 = (unint64_t *)(v159.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v185)
  {
    v186 = (uint64_t)v185;
    operator delete(v185);
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v157 = *(_OWORD *)a2;
  v158 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v166;
  *(_QWORD *)&v156 = v166;
  if (v166)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v156 + 1) = v51;
  v166 = 0;
  *(_QWORD *)&v155 = v163;
  if (v163)
  {
    v52 = (_QWORD *)operator new();
    v53 = v163;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v155 + 1) = v52;
  v163 = 0;
  v184 = 0;
  v182 = 0;
  MIL::IROperator::Make((__int128 *)v157, &v156, &v155, (uint64_t)v183, (uint64_t)v181, a3);
  v54 = v182;
  if (v182 == v181)
  {
    v55 = 4;
    v54 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v184;
  if (v184 == v183)
  {
    v57 = 4;
    v56 = v183;
    goto LABEL_62;
  }
  if (v184)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v158) < 0)
    operator delete(v157[0]);
  v185 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v185 = (std::__shared_weak_count_vtbl *)v64;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&Scalar);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&Scalar);
  v66 = Scalar;
  Scalar = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v68 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a3;
  v71 = v185;
  v152 = v185;
  if (v185)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v153 = v72;
  v185 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v70 + 184))(v70, &v152);
  v73 = v153;
  if (v153)
  {
    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v179);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v179);
  v77 = v180;
  if (v180 == v179)
  {
    v78 = 4;
    v77 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_95;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_95:
  if (SHIBYTE(v169) < 0)
    operator delete(Scalar);
  v79 = *a3;
  v177[0] = &off_1EA9A00F8;
  v177[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLog;
  v178 = v177;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v79 + 216))(v79, v177);
  v80 = v178;
  if (v178 == v177)
  {
    v81 = 4;
    v80 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_102;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_102:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v82 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v148, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&__p);
  v150 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v151 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v82 + 24))(v82, &v150, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v85 = v151;
  if (v151)
  {
    v86 = (unint64_t *)&v151->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v149 < 0)
    operator delete(v148[0]);
  v89 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v142, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&__p);
  v144 = __p;
  if (__p)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)__p;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v145 = v90;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v89 + 24))(v89, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v92 = v145;
  if (v145)
  {
    v93 = (unint64_t *)&v145->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = __p;
  __p = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  if (v143 < 0)
    operator delete(v142[0]);
  v96 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v138 = __p;
  if (__p)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)__p;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v139 = v97;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v96 + 24))(v96, &v138, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v99 = v139;
  if (v139)
  {
    v100 = (unint64_t *)&v139->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = __p;
  __p = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = *a3;
  v134 = Scalar;
  if (Scalar)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)Scalar;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v135 = v104;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v103 + 56))(v103, &v134);
  v106 = v135;
  if (v135)
  {
    v107 = (unint64_t *)&v135->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = Scalar;
  Scalar = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v161);
  v110 = v161;
  std::string::basic_string[abi:ne180100]<0>(v130, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v130, 1, v188);
  v132 = v188[0];
  if (v188[0])
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v188[0];
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
  }
  else
  {
    v111 = 0;
  }
  v133 = v111;
  v188[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int8");
  std::string::basic_string[abi:ne180100]<0>(v173, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v110 + 24))(v110, &v132, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v173[i + 2]) < 0)
      operator delete(v173[i]);
  }
  v114 = v133;
  if (v133)
  {
    v115 = (unint64_t *)&v133->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v188[0];
  v188[0] = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  if (v131 < 0)
    operator delete(v130[0]);
  v118 = *a3;
  v128 = v161;
  if (v161)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v161;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v129 = v119;
  v161 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v118 + 56))(v118, &v128);
  v121 = v129;
  if (v129)
  {
    v122 = (unint64_t *)&v129->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v161;
  v161 = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  if (v185)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v163, 0);
  result = (uint64_t)v166;
  if (v166)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v166);
    return MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E082A27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;

  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 112), 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Rsqrt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  uint64_t i;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void *v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138;
  std::__shared_weak_count *v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  void *v144;
  std::__shared_weak_count *v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  void *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  __n128 v154;
  __int128 v155;
  __int128 v156;
  void *v157[2];
  uint64_t v158;
  __n128 v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char **v163;
  __n128 v164;
  __n128 v165;
  _QWORD *v166;
  void *Scalar;
  uint64_t v168;
  char *v169;
  _QWORD v170[3];
  uint64_t v171[3];
  uint64_t v172[3];
  void *v173[3];
  void *__p;
  void *v175;
  _QWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  _BYTE v179[24];
  _BYTE *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  std::__shared_weak_count_vtbl *v185;
  uint64_t v186;
  void (__cdecl **v187)(std::__shared_weak_count *__hidden);
  uint64_t v188[3];

  v188[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v166 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  Scalar = v8;
  *(_QWORD *)v8 = v7;
  v168 = (uint64_t)(v8 + 8);
  v169 = v8 + 8;
  v185 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v176 = v10 + 1;
  v175 = v10 + 1;
  v186 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 2, &v165);
  MIL::IRParameter::Make(&v165, &v161);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v161);
  v11 = v161;
  v161 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v13 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v15 = v166;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v168 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v15, "epsilon", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v19 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v163 = 0;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v163, (void **)v21);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v163, 1uLL);
  v22 = v163;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v176 = v24 + 1;
  v175 = v24 + 1;
  v188[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v185 = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v186 = (uint64_t)&v26->~__shared_weak_count_0;
  v187 = &v26->~__shared_weak_count_0;
  v188[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v185);
  MIL::IRParameter::MakeTypeSet((uint64_t)v188, 2, &v159);
  MIL::IRParameter::Make(&v159, &v160);
  v27 = v160;
  v161 = v160;
  if (v160)
  {
    v28 = (_QWORD *)operator new();
    v29 = v160;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v162 = v28;
  v160 = 0;
  v30 = v22[2];
  v31 = v22[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v22) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v22;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v170[1] = v22 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v22 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v161 = 0;
    v162 = 0;
    v41 = *v22;
    v40 = v22[1];
    if (v40 == *v22)
    {
      v44 = v22[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v22;
      v40 = v22[1];
    }
    v32 = (char *)(v39 + 2);
    *v22 = v42;
    Scalar = v44;
    v168 = (uint64_t)v44;
    v22[1] = (char *)(v39 + 2);
    v169 = v40;
    v45 = v22[2];
    v22[2] = &v37[16 * v38];
    v170[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v161 = 0;
    v162 = 0;
  }
  v22[1] = v32;
  v46 = v160;
  v160 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v159.n128_u64[1];
  if (v159.n128_u64[1])
  {
    v48 = (unint64_t *)(v159.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v185)
  {
    v186 = (uint64_t)v185;
    operator delete(v185);
  }
  if (__p)
  {
    v175 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v157 = *(_OWORD *)a2;
  v158 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = (uint64_t)v166;
  *(_QWORD *)&v156 = v166;
  if (v166)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v156 + 1) = v51;
  v166 = 0;
  *(_QWORD *)&v155 = v163;
  if (v163)
  {
    v52 = (_QWORD *)operator new();
    v53 = v163;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v155 + 1) = v52;
  v163 = 0;
  v184 = 0;
  v182 = 0;
  MIL::IROperator::Make((__int128 *)v157, &v156, &v155, (uint64_t)v183, (uint64_t)v181, a3);
  v54 = v182;
  if (v182 == v181)
  {
    v55 = 4;
    v54 = v181;
  }
  else
  {
    if (!v182)
      goto LABEL_58;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_58:
  v56 = v184;
  if (v184 == v183)
  {
    v57 = 4;
    v56 = v183;
    goto LABEL_62;
  }
  if (v184)
  {
    v57 = 5;
LABEL_62:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v158) < 0)
    operator delete(v157[0]);
  v185 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v185 = (std::__shared_weak_count_vtbl *)v64;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v154);
  MIL::IRParameter::Make(&v154, (uint64_t *)&Scalar);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&Scalar);
  v66 = Scalar;
  Scalar = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v154.n128_u64[1];
  if (v154.n128_u64[1])
  {
    v68 = (unint64_t *)(v154.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a3;
  v71 = v185;
  v152 = v185;
  if (v185)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v153 = v72;
  v185 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v70 + 184))(v70, &v152);
  v73 = v153;
  if (v153)
  {
    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v179);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v179);
  v77 = v180;
  if (v180 == v179)
  {
    v78 = 4;
    v77 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_95;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_95:
  if (SHIBYTE(v169) < 0)
    operator delete(Scalar);
  v79 = *a3;
  v177[0] = &off_1EA9A00F8;
  v177[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRsqrt;
  v178 = v177;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v79 + 216))(v79, v177);
  v80 = v178;
  if (v178 == v177)
  {
    v81 = 4;
    v80 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_102;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_102:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v82 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v148, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v148, 0, (uint64_t *)&__p);
  v150 = __p;
  if (__p)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = (std::__shared_weak_count_vtbl *)__p;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v151 = v83;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v146, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v82 + 24))(v82, &v150, v146);
  if (v147 < 0)
    operator delete(v146[0]);
  v85 = v151;
  if (v151)
  {
    v86 = (unint64_t *)&v151->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  if (v149 < 0)
    operator delete(v148[0]);
  v89 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v142, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v142, 0, (uint64_t *)&__p);
  v144 = __p;
  if (__p)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = (std::__shared_weak_count_vtbl *)__p;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v145 = v90;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v140, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v89 + 24))(v89, &v144, v140);
  if (v141 < 0)
    operator delete(v140[0]);
  v92 = v145;
  if (v145)
  {
    v93 = (unint64_t *)&v145->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = __p;
  __p = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  if (v143 < 0)
    operator delete(v142[0]);
  v96 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v138 = __p;
  if (__p)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)__p;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v139 = v97;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v96 + 24))(v96, &v138, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v99 = v139;
  if (v139)
  {
    v100 = (unint64_t *)&v139->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = __p;
  __p = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  v103 = *a3;
  v134 = Scalar;
  if (Scalar)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = (std::__shared_weak_count_vtbl *)Scalar;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v135 = v104;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v103 + 56))(v103, &v134);
  v106 = v135;
  if (v135)
  {
    v107 = (unint64_t *)&v135->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = Scalar;
  Scalar = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v161);
  v110 = v161;
  std::string::basic_string[abi:ne180100]<0>(v130, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v130, 1, v188);
  v132 = v188[0];
  if (v188[0])
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v188[0];
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = (std::__shared_weak_count_vtbl *)v112;
  }
  else
  {
    v111 = 0;
  }
  v133 = v111;
  v188[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v170, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v171, "int32");
  std::string::basic_string[abi:ne180100]<0>(v172, "int8");
  std::string::basic_string[abi:ne180100]<0>(v173, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v110 + 24))(v110, &v132, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v173[i + 2]) < 0)
      operator delete(v173[i]);
  }
  v114 = v133;
  if (v133)
  {
    v115 = (unint64_t *)&v133->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v188[0];
  v188[0] = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  if (v131 < 0)
    operator delete(v130[0]);
  v118 = *a3;
  v128 = v161;
  if (v161)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v161;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v129 = v119;
  v161 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v118 + 56))(v118, &v128);
  v121 = v129;
  if (v129)
  {
    v122 = (unint64_t *)&v129->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v161;
  v161 = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  if (v185)
  {
    v125 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v185);
    MEMORY[0x1E0C023A0](v125, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v163, 0);
  result = (uint64_t)v166;
  if (v166)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v166);
    return MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E082B6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t *v60;
  uint64_t v61;
  uint64_t v63;

  if (a53)
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v61 - 112), 0);
  v63 = *v60;
  *v60 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a55, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a60, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ElementwiseUnaryWithInt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char **v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  void *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count_vtbl *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count_vtbl *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  uint64_t i;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  void *v118;
  std::__shared_weak_count *v119;
  void *v120[2];
  char v121;
  void *v122;
  std::__shared_weak_count *v123;
  void *v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  void *v136;
  std::__shared_weak_count *v137;
  __n128 v138;
  __int128 v139;
  __int128 v140;
  void *v141[2];
  uint64_t v142;
  void *v143;
  void *v144;
  _QWORD *v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  char **v150;
  void *__p;
  void *v152;
  _QWORD *v153;
  void *v154;
  void *v155;
  _QWORD *v156;
  __n128 v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  uint64_t v163[3];
  uint64_t v164[3];
  _QWORD v165[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v167;
  uint64_t v168;
  _BYTE v169[24];
  _BYTE *v170;
  _BYTE v171[24];
  _BYTE *v172;
  _BYTE v173[24];
  _BYTE *v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v158 = v8;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v167 = (uint64_t)&v10->~__shared_weak_count_0;
  v168 = (uint64_t)&v10->~__shared_weak_count_0;
  v159 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  v154 = v12;
  *v12 = v11;
  v155 = v12 + 1;
  v156 = v12 + 1;
  v160 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v154);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(8uLL);
  __p = v14;
  *v14 = v13;
  v152 = v14 + 1;
  v153 = v14 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v159, 3, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&v143);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v143);
  v15 = v143;
  v143 = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v17 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (Scalar)
  {
    v167 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v150 = 0;
  v19 = operator new();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v159 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, (void **)v19);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v150, 1uLL);
  v20 = v150;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  v154 = v22;
  *v22 = v21;
  v155 = v22 + 1;
  v156 = v22 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v154);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  __p = v24;
  *v24 = v23;
  v152 = v24 + 1;
  v153 = v24 + 1;
  v167 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v143 = v26;
  *v26 = v25;
  v144 = v26 + 1;
  v145 = v26 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v143);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v146);
  MIL::IRParameter::Make(&v146, &v147);
  v27 = v147;
  v148 = v147;
  if (v147)
  {
    v28 = (_QWORD *)operator new();
    v29 = v147;
    *v28 = &unk_1EA99F888;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v29;
  }
  else
  {
    v28 = 0;
  }
  v149 = v28;
  v147 = 0;
  v30 = v20[2];
  v31 = v20[1];
  if (v31 >= v30)
  {
    v33 = (v31 - *v20) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v30 - *v20;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    v162[1] = v20 + 2;
    v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v20 + 2), v36);
    v39 = (uint64_t *)&v37[16 * v33];
    *v39 = v27;
    v39[1] = (uint64_t)v28;
    v148 = 0;
    v149 = 0;
    v41 = *v20;
    v40 = v20[1];
    if (v40 == *v20)
    {
      v44 = v20[1];
      v42 = &v37[16 * v33];
    }
    else
    {
      v42 = &v37[16 * v33];
      do
      {
        v43 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v42 - 1) = v43;
        v42 -= 16;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
      }
      while (v40 != v41);
      v44 = *v20;
      v40 = v20[1];
    }
    v32 = (char *)(v39 + 2);
    *v20 = v42;
    v159 = v44;
    v160 = (uint64_t)v44;
    v20[1] = (char *)(v39 + 2);
    v161 = (uint64_t)v40;
    v45 = v20[2];
    v20[2] = &v37[16 * v38];
    v162[0] = v45;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v159);
  }
  else
  {
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v28;
    v32 = v31 + 16;
    v148 = 0;
    v149 = 0;
  }
  v20[1] = v32;
  v46 = v147;
  v147 = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v146.n128_u64[1];
  if (v146.n128_u64[1])
  {
    v48 = (unint64_t *)(v146.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  *(_OWORD *)v141 = *(_OWORD *)a2;
  v142 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v50 = v158;
  *(_QWORD *)&v140 = v158;
  if (v158)
  {
    v51 = (_QWORD *)operator new();
    *v51 = &unk_1EA99F8E8;
    v51[1] = 0;
    v51[2] = 0;
    v51[3] = v50;
  }
  else
  {
    v51 = 0;
  }
  *((_QWORD *)&v140 + 1) = v51;
  v158 = 0;
  *(_QWORD *)&v139 = v150;
  if (v150)
  {
    v52 = (_QWORD *)operator new();
    v53 = v150;
    *v52 = &unk_1EA99F948;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  *((_QWORD *)&v139 + 1) = v52;
  v150 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v173, a3);
  v172 = 0;
  MIL::IROperator::Make((__int128 *)v141, &v140, &v139, (uint64_t)v173, (uint64_t)v171, a4);
  v54 = v172;
  if (v172 == v171)
  {
    v55 = 4;
    v54 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_55;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_55:
  v56 = v174;
  if (v174 == v173)
  {
    v57 = 4;
    v56 = v173;
    goto LABEL_59;
  }
  if (v174)
  {
    v57 = 5;
LABEL_59:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
  if (*((_QWORD *)&v139 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (SHIBYTE(v142) < 0)
    operator delete(v141[0]);
  v154 = 0;
  v64 = (_OWORD *)operator new();
  *v64 = 0u;
  v64[1] = 0u;
  *((_DWORD *)v64 + 8) = 1065353216;
  v154 = v64;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v138);
  MIL::IRParameter::Make(&v138, (uint64_t *)&v159);
  v65 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v64, "minimum_compute_type", (uint64_t *)&v159);
  v66 = v159;
  v159 = 0;
  if (v66)
    (*(void (**)(void *))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v138.n128_u64[1];
  if (v138.n128_u64[1])
  {
    v68 = (unint64_t *)(v138.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 32))(*((_QWORD *)v65 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v65 + 5) + 48))(*((_QWORD *)v65 + 5), 1);
  v70 = *a4;
  v71 = (std::__shared_weak_count_vtbl *)v154;
  v136 = v154;
  if (v154)
  {
    v72 = (std::__shared_weak_count *)operator new();
    v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v72->__shared_owners_ = 0;
    v72->__shared_weak_owners_ = 0;
    v72[1].__vftable = v71;
  }
  else
  {
    v72 = 0;
  }
  v137 = v72;
  v154 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v70 + 184))(v70, &v136);
  v73 = v137;
  if (v137)
  {
    p_shared_owners = (unint64_t *)&v137->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = *a4;
  std::string::basic_string[abi:ne180100]<0>(&v159, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v159, (uint64_t)v169);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 200))(v76, v169);
  v77 = v170;
  if (v170 == v169)
  {
    v78 = 4;
    v77 = v169;
  }
  else
  {
    if (!v170)
      goto LABEL_92;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_92:
  if (SHIBYTE(v161) < 0)
    operator delete(v159);
  MIL::Validation::TensorDTypeConstraints::Make(&v159);
  v79 = v159;
  std::string::basic_string[abi:ne180100]<0>(v132, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, (uint64_t *)&Scalar);
  v134 = Scalar;
  if (Scalar)
  {
    v80 = (std::__shared_weak_count *)operator new();
    v81 = Scalar;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v80->__shared_owners_ = 0;
    v80->__shared_weak_owners_ = 0;
    v80[1].__vftable = v81;
  }
  else
  {
    v80 = 0;
  }
  v135 = v80;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v79 + 24))(v79, &v134, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v82 = v135;
  if (v135)
  {
    v83 = (unint64_t *)&v135->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = Scalar;
  Scalar = 0;
  if (v85)
    (*((void (**)(std::__shared_weak_count_vtbl *))v85->~__shared_weak_count + 1))(v85);
  if (v133 < 0)
    operator delete(v132[0]);
  v86 = v159;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v128 = Scalar;
  if (Scalar)
  {
    v87 = (std::__shared_weak_count *)operator new();
    v88 = Scalar;
    v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v87->__shared_owners_ = 0;
    v87->__shared_weak_owners_ = 0;
    v87[1].__vftable = v88;
  }
  else
  {
    v87 = 0;
  }
  v129 = v87;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v126, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v86 + 24))(v86, &v128, v126);
  if (v127 < 0)
    operator delete(v126[0]);
  v89 = v129;
  if (v129)
  {
    v90 = (unint64_t *)&v129->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = Scalar;
  Scalar = 0;
  if (v92)
    (*((void (**)(std::__shared_weak_count_vtbl *))v92->~__shared_weak_count + 1))(v92);
  v93 = *a4;
  v124 = v159;
  if (v159)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = (std::__shared_weak_count_vtbl *)v159;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v125 = v94;
  v159 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 56))(v93, &v124);
  v96 = v125;
  if (v125)
  {
    v97 = (unint64_t *)&v125->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v159;
  v159 = 0;
  if (v99)
    (*(void (**)(void *))(*(_QWORD *)v99 + 8))(v99);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v100 = __p;
  std::string::basic_string[abi:ne180100]<0>(v120, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v120, 1, (uint64_t *)&v143);
  v122 = v143;
  if (v143)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = (std::__shared_weak_count_vtbl *)v143;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v123 = v101;
  v143 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v159, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v162, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v163, "int32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int8");
  std::string::basic_string[abi:ne180100]<0>(v165, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v159, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v122, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v165[i + 2]) < 0)
      operator delete((void *)v165[i]);
  }
  v104 = v123;
  if (v123)
  {
    v105 = (unint64_t *)&v123->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v143;
  v143 = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v121 < 0)
    operator delete(v120[0]);
  v108 = *a4;
  v118 = __p;
  if (__p)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = (std::__shared_weak_count_vtbl *)__p;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v119 = v109;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 56))(v108, &v118);
  v111 = v119;
  if (v119)
  {
    v112 = (unint64_t *)&v119->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = __p;
  __p = 0;
  if (v114)
    (*(void (**)(void *))(*(_QWORD *)v114 + 8))(v114);
  if (v154)
  {
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v154);
    MEMORY[0x1E0C023A0](v115, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v150, 0);
  result = v158;
  if (v158)
  {
    v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v158);
    return MEMORY[0x1E0C023A0](v117, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E082C948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Abs::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _BYTE v176[24];
  _BYTE *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177 = 0;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceAbs;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E082DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Exp2::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _BYTE v176[24];
  _BYTE *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177 = 0;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp2;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E082EE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Sign::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _BYTE v176[24];
  _BYTE *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177 = 0;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSign;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08300E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Square::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count_vtbl *v86;
  void *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count_vtbl *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t i;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  void *v119;
  std::__shared_weak_count *v120;
  void *v121[2];
  char v122;
  void *v123;
  std::__shared_weak_count *v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  uint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  __n128 v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char **v151;
  void *__p;
  void *v153;
  _QWORD *v154;
  void *v155;
  void *v156;
  _QWORD *v157;
  __n128 v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  uint64_t v164[3];
  uint64_t v165[3];
  _QWORD v166[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _BYTE v176[24];
  _BYTE *v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v159 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v168 = (uint64_t)&v8->~__shared_weak_count_0;
  v169 = (uint64_t)&v8->~__shared_weak_count_0;
  v160 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v155 = v10;
  *v10 = v9;
  v156 = v10 + 1;
  v157 = v10 + 1;
  v161 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v155);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v153 = v12 + 1;
  v154 = v12 + 1;
  v162 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v160, 3, &v158);
  MIL::IRParameter::Make(&v158, (uint64_t *)&v144);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v144);
  v13 = v144;
  v144 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v158.n128_u64[1];
  if (v158.n128_u64[1])
  {
    v15 = (unint64_t *)(v158.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (Scalar)
  {
    v168 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v151 = 0;
  v17 = operator new();
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v160 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, (void **)v17);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v160, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v151, 1uLL);
  v18 = v151;
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = operator new(8uLL);
  v155 = v20;
  *v20 = v19;
  v156 = v20 + 1;
  v157 = v20 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v155);
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = v21;
  v153 = v22 + 1;
  v154 = v22 + 1;
  v168 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v144 = v24;
  *v24 = v23;
  v145 = v24 + 1;
  v146 = v24 + 1;
  v169 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v144);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v147);
  MIL::IRParameter::Make(&v147, &v148);
  v25 = v148;
  v149 = v148;
  if (v148)
  {
    v26 = (_QWORD *)operator new();
    v27 = v148;
    *v26 = &unk_1EA99F888;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = v27;
  }
  else
  {
    v26 = 0;
  }
  v150 = v26;
  v148 = 0;
  v28 = v18[2];
  v29 = v18[1];
  if (v29 >= v28)
  {
    v31 = (v29 - *v18) >> 4;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v33 = v28 - *v18;
    if (v33 >> 3 > v32)
      v32 = v33 >> 3;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    v163[1] = v18 + 2;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v18 + 2), v34);
    v37 = (uint64_t *)&v35[16 * v31];
    *v37 = v25;
    v37[1] = (uint64_t)v26;
    v149 = 0;
    v150 = 0;
    v39 = *v18;
    v38 = v18[1];
    if (v38 == *v18)
    {
      v42 = v18[1];
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *v18;
      v38 = v18[1];
    }
    v30 = (char *)(v37 + 2);
    *v18 = v40;
    v160 = v42;
    v161 = (uint64_t)v42;
    v18[1] = (char *)(v37 + 2);
    v162 = (uint64_t)v38;
    v43 = v18[2];
    v18[2] = &v35[16 * v36];
    v163[0] = v43;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v160);
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    v30 = v29 + 16;
    v149 = 0;
    v150 = 0;
  }
  v18[1] = v30;
  v44 = v148;
  v148 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = (std::__shared_weak_count *)v147.n128_u64[1];
  if (v147.n128_u64[1])
  {
    v46 = (unint64_t *)(v147.n128_u64[1] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
  }
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  *(_OWORD *)v142 = *(_OWORD *)a2;
  v143 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v48 = v159;
  *(_QWORD *)&v141 = v159;
  if (v159)
  {
    v49 = (_QWORD *)operator new();
    *v49 = &unk_1EA99F8E8;
    v49[1] = 0;
    v49[2] = 0;
    v49[3] = v48;
  }
  else
  {
    v49 = 0;
  }
  *((_QWORD *)&v141 + 1) = v49;
  v159 = 0;
  *(_QWORD *)&v140 = v151;
  if (v151)
  {
    v50 = (_QWORD *)operator new();
    v51 = v151;
    *v50 = &unk_1EA99F948;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  *((_QWORD *)&v140 + 1) = v50;
  v151 = 0;
  v177 = 0;
  v175 = 0;
  MIL::IROperator::Make((__int128 *)v142, &v141, &v140, (uint64_t)v176, (uint64_t)v174, a3);
  v52 = v175;
  if (v175 == v174)
  {
    v53 = 4;
    v52 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_55;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_55:
  v54 = v177;
  if (v177 == v176)
  {
    v55 = 4;
    v54 = v176;
    goto LABEL_59;
  }
  if (v177)
  {
    v55 = 5;
LABEL_59:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (SHIBYTE(v143) < 0)
    operator delete(v142[0]);
  v155 = 0;
  v62 = (_OWORD *)operator new();
  *v62 = 0u;
  v62[1] = 0u;
  *((_DWORD *)v62 + 8) = 1065353216;
  v155 = v62;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v139);
  MIL::IRParameter::Make(&v139, (uint64_t *)&v160);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v62, "minimum_compute_type", (uint64_t *)&v160);
  v64 = v160;
  v160 = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v139.n128_u64[1];
  if (v139.n128_u64[1])
  {
    v66 = (unint64_t *)(v139.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 48))(*((_QWORD *)v63 + 5), 1);
  v68 = *a3;
  v69 = (std::__shared_weak_count_vtbl *)v155;
  v137 = v155;
  if (v155)
  {
    v70 = (std::__shared_weak_count *)operator new();
    v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v70->__shared_owners_ = 0;
    v70->__shared_weak_owners_ = 0;
    v70[1].__vftable = v69;
  }
  else
  {
    v70 = 0;
  }
  v138 = v70;
  v155 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 184))(v68, &v137);
  v71 = v138;
  if (v138)
  {
    p_shared_owners = (unint64_t *)&v138->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v160, (uint64_t)v172);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 200))(v74, v172);
  v75 = v173;
  if (v173 == v172)
  {
    v76 = 4;
    v75 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_92;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_92:
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v77 = *a3;
  v170[0] = &off_1EA9A00F8;
  v170[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSquare;
  v171 = v170;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v77 + 216))(v77, v170);
  v78 = v171;
  if (v171 == v170)
  {
    v79 = 4;
    v78 = v170;
  }
  else
  {
    if (!v171)
      goto LABEL_99;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_99:
  MIL::Validation::TensorDTypeConstraints::Make(&v160);
  v80 = v160;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v136 = v81;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v80 + 24))(v80, &v135, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v83 = v136;
  if (v136)
  {
    v84 = (unint64_t *)&v136->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = Scalar;
  Scalar = 0;
  if (v86)
    (*((void (**)(std::__shared_weak_count_vtbl *))v86->~__shared_weak_count + 1))(v86);
  if (v134 < 0)
    operator delete(v133[0]);
  v87 = v160;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v129 = Scalar;
  if (Scalar)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = Scalar;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = v89;
  }
  else
  {
    v88 = 0;
  }
  v130 = v88;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v87 + 24))(v87, &v129, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v90 = v130;
  if (v130)
  {
    v91 = (unint64_t *)&v130->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = Scalar;
  Scalar = 0;
  if (v93)
    (*((void (**)(std::__shared_weak_count_vtbl *))v93->~__shared_weak_count + 1))(v93);
  v94 = *a3;
  v125 = v160;
  if (v160)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = (std::__shared_weak_count_vtbl *)v160;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = v96;
  }
  else
  {
    v95 = 0;
  }
  v126 = v95;
  v160 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v94 + 56))(v94, &v125);
  v97 = v126;
  if (v126)
  {
    v98 = (unint64_t *)&v126->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v160;
  v160 = 0;
  if (v100)
    (*(void (**)(void *))(*(_QWORD *)v100 + 8))(v100);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v121, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v121, 1, (uint64_t *)&v144);
  v123 = v144;
  if (v144)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = (std::__shared_weak_count_vtbl *)v144;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v124 = v102;
  v144 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v160, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v163, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v164, "int32");
  std::string::basic_string[abi:ne180100]<0>(v165, "int8");
  std::string::basic_string[abi:ne180100]<0>(v166, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v160, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v101 + 24))(v101, &v123, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v166[i + 2]) < 0)
      operator delete((void *)v166[i]);
  }
  v105 = v124;
  if (v124)
  {
    v106 = (unint64_t *)&v124->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v144;
  v144 = 0;
  if (v108)
    (*(void (**)(void *))(*(_QWORD *)v108 + 8))(v108);
  if (v122 < 0)
    operator delete(v121[0]);
  v109 = *a3;
  v119 = __p;
  if (__p)
  {
    v110 = (std::__shared_weak_count *)operator new();
    v111 = (std::__shared_weak_count_vtbl *)__p;
    v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v110->__shared_owners_ = 0;
    v110->__shared_weak_owners_ = 0;
    v110[1].__vftable = v111;
  }
  else
  {
    v110 = 0;
  }
  v120 = v110;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v109 + 56))(v109, &v119);
  v112 = v120;
  if (v120)
  {
    v113 = (unint64_t *)&v120->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = __p;
  __p = 0;
  if (v115)
    (*(void (**)(void *))(*(_QWORD *)v115 + 8))(v115);
  if (v155)
  {
    v116 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v155);
    MEMORY[0x1E0C023A0](v116, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v151, 0);
  result = v159;
  if (v159)
  {
    v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v159);
    return MEMORY[0x1E0C023A0](v118, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0831384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t *v59;
  void *v61;
  uint64_t v62;

  v61 = a51;
  a51 = 0;
  if (v61)
    (*(void (**)(void *))(*(_QWORD *)v61 + 8))(v61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a54, 0);
  v62 = *v59;
  *v59 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a59, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Threshold::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char **v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _OWORD *v67;
  unsigned __int8 *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  uint64_t i;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t result;
  uint64_t v130;
  void *v131;
  std::__shared_weak_count *v132;
  void *v133[2];
  char v134;
  void *v135;
  std::__shared_weak_count *v136;
  void *v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  __n128 v157;
  __int128 v158;
  __int128 v159;
  void *v160[2];
  uint64_t v161;
  void *v162;
  void *v163;
  _QWORD *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char **v169;
  __n128 v170;
  void *__p;
  void *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  __n128 v177;
  _QWORD *v178;
  void *Scalar;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[3];
  uint64_t v183[3];
  uint64_t v184[3];
  _QWORD v185[3];
  std::__shared_weak_count_vtbl *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD *v190;
  _BYTE v191[24];
  _BYTE *v192;
  _BYTE v193[24];
  _BYTE *v194;
  _BYTE v195[24];
  _BYTE *v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v178 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v186 = v8;
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v187 = (uint64_t)&v8->~__shared_weak_count_0;
  v188 = (uint64_t)&v8->~__shared_weak_count_0;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v186);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  v174 = v10;
  *v10 = v9;
  v175 = v10 + 1;
  v176 = v10 + 1;
  v180 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v174);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = v11;
  v172 = v12 + 1;
  v173 = v12 + 1;
  v181 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v177);
  MIL::IRParameter::Make(&v177, (uint64_t *)&v162);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v162);
  v13 = v162;
  v162 = 0;
  if (v13)
    (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v177.n128_u64[1];
  if (v177.n128_u64[1])
  {
    v15 = (unint64_t *)(v177.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v186)
  {
    v187 = (uint64_t)v186;
    operator delete(v186);
  }
  v17 = v178;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v180 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  v181 = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v170);
  MIL::IRParameter::Make(&v170, (uint64_t *)&v186);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v17, "alpha", (uint64_t *)&v186);
  v18 = v186;
  v186 = 0;
  if (v18)
    (*((void (**)(std::__shared_weak_count_vtbl *))v18->~__shared_weak_count + 1))(v18);
  v19 = (std::__shared_weak_count *)v170.n128_u64[1];
  if (v170.n128_u64[1])
  {
    v20 = (unint64_t *)(v170.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v169 = 0;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, (void **)v22);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v169, 1uLL);
  v23 = v169;
  v24 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v25 = operator new(8uLL);
  v174 = v25;
  *v25 = v24;
  v175 = v25 + 1;
  v176 = v25 + 1;
  v186 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v174);
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(8uLL);
  __p = v27;
  *v27 = v26;
  v172 = v27 + 1;
  v173 = v27 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(8uLL);
  v162 = v29;
  *v29 = v28;
  v163 = v29 + 1;
  v164 = v29 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v162);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v165);
  MIL::IRParameter::Make(&v165, &v166);
  v30 = v166;
  v167 = v166;
  if (v166)
  {
    v31 = (_QWORD *)operator new();
    v32 = v166;
    *v31 = &unk_1EA99F888;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v168 = v31;
  v166 = 0;
  v33 = v23[2];
  v34 = v23[1];
  if (v34 >= v33)
  {
    v36 = (v34 - *v23) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v38 = v33 - *v23;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    v182[1] = v23 + 2;
    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v23 + 2), v39);
    v42 = (uint64_t *)&v40[16 * v36];
    *v42 = v30;
    v42[1] = (uint64_t)v31;
    v167 = 0;
    v168 = 0;
    v44 = *v23;
    v43 = v23[1];
    if (v43 == *v23)
    {
      v47 = v23[1];
      v45 = &v40[16 * v36];
    }
    else
    {
      v45 = &v40[16 * v36];
      do
      {
        v46 = *((_OWORD *)v43 - 1);
        v43 -= 16;
        *((_OWORD *)v45 - 1) = v46;
        v45 -= 16;
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
      }
      while (v43 != v44);
      v47 = *v23;
      v43 = v23[1];
    }
    v35 = (char *)(v42 + 2);
    *v23 = v45;
    Scalar = v47;
    v180 = (uint64_t)v47;
    v23[1] = (char *)(v42 + 2);
    v181 = (uint64_t)v43;
    v48 = v23[2];
    v23[2] = &v40[16 * v41];
    v182[0] = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v34 = v30;
    *((_QWORD *)v34 + 1) = v31;
    v35 = v34 + 16;
    v167 = 0;
    v168 = 0;
  }
  v23[1] = v35;
  v49 = v166;
  v166 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v165.n128_u64[1];
  if (v165.n128_u64[1])
  {
    v51 = (unint64_t *)(v165.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (__p)
  {
    v172 = __p;
    operator delete(__p);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  *(_OWORD *)v160 = *(_OWORD *)a2;
  v161 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v53 = (uint64_t)v178;
  *(_QWORD *)&v159 = v178;
  if (v178)
  {
    v54 = (_QWORD *)operator new();
    *v54 = &unk_1EA99F8E8;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v53;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v159 + 1) = v54;
  v178 = 0;
  *(_QWORD *)&v158 = v169;
  if (v169)
  {
    v55 = (_QWORD *)operator new();
    v56 = v169;
    *v55 = &unk_1EA99F948;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v158 + 1) = v55;
  v169 = 0;
  v196 = 0;
  v194 = 0;
  MIL::IROperator::Make((__int128 *)v160, &v159, &v158, (uint64_t)v195, (uint64_t)v193, a3);
  v57 = v194;
  if (v194 == v193)
  {
    v58 = 4;
    v57 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_62;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_62:
  v59 = v196;
  if (v196 == v195)
  {
    v60 = 4;
    v59 = v195;
    goto LABEL_66;
  }
  if (v196)
  {
    v60 = 5;
LABEL_66:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (*((_QWORD *)&v159 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (SHIBYTE(v161) < 0)
    operator delete(v160[0]);
  v174 = 0;
  v67 = (_OWORD *)operator new();
  *v67 = 0u;
  v67[1] = 0u;
  *((_DWORD *)v67 + 8) = 1065353216;
  v174 = v67;
  v186 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 1, &v157);
  MIL::IRParameter::Make(&v157, (uint64_t *)&Scalar);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v67, "minimum_compute_type", (uint64_t *)&Scalar);
  v69 = Scalar;
  Scalar = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v157.n128_u64[1];
  if (v157.n128_u64[1])
  {
    v71 = (unint64_t *)(v157.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 32))(*((_QWORD *)v68 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 48))(*((_QWORD *)v68 + 5), 1);
  v73 = *a3;
  v74 = (std::__shared_weak_count_vtbl *)v174;
  v155 = v174;
  if (v174)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v74;
  }
  else
  {
    v75 = 0;
  }
  v156 = v75;
  v174 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v73 + 184))(v73, &v155);
  v76 = v156;
  if (v156)
  {
    p_shared_owners = (unint64_t *)&v156->__shared_owners_;
    do
      v78 = __ldaxr(p_shared_owners);
    while (__stlxr(v78 - 1, p_shared_owners));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&Scalar, (uint64_t)v191);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v79 + 200))(v79, v191);
  v80 = v192;
  if (v192 == v191)
  {
    v81 = 4;
    v80 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_99;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_99:
  if (SHIBYTE(v181) < 0)
    operator delete(Scalar);
  v82 = *a3;
  v189[0] = &off_1EA9A00F8;
  v189[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceThreshold;
  v190 = v189;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v82 + 216))(v82, v189);
  v83 = v190;
  if (v190 == v189)
  {
    v84 = 4;
    v83 = v189;
  }
  else
  {
    if (!v190)
      goto LABEL_106;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_106:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v85 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v151, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&v186);
  v153 = v186;
  if (v186)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v186;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v154 = v86;
  v186 = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v85 + 24))(v85, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v88 = v154;
  if (v154)
  {
    v89 = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v186;
  v186 = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v152 < 0)
    operator delete(v151[0]);
  v92 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v145, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&v186);
  v147 = v186;
  if (v186)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v186;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v148 = v93;
  v186 = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v92 + 24))(v92, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v95 = v148;
  if (v148)
  {
    v96 = (unint64_t *)&v148->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v186;
  v186 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v146 < 0)
    operator delete(v145[0]);
  v99 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v186);
  v141 = v186;
  if (v186)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v186;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v142 = v100;
  v186 = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v99 + 24))(v99, &v141, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v102 = v142;
  if (v142)
  {
    v103 = (unint64_t *)&v142->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v186;
  v186 = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a3;
  v137 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = (std::__shared_weak_count_vtbl *)Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v138 = v107;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v106 + 56))(v106, &v137);
  v109 = v138;
  if (v138)
  {
    v110 = (unint64_t *)&v138->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v113 = __p;
  std::string::basic_string[abi:ne180100]<0>(v133, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v133, 1, (uint64_t *)&v162);
  v135 = v162;
  if (v162)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = (std::__shared_weak_count_vtbl *)v162;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v136 = v114;
  v162 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v182, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v183, "int32");
  std::string::basic_string[abi:ne180100]<0>(v184, "int8");
  std::string::basic_string[abi:ne180100]<0>(v185, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v186, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v113 + 24))(v113, &v135, &v186, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v186);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v185[i + 2]) < 0)
      operator delete((void *)v185[i]);
  }
  v117 = v136;
  if (v136)
  {
    v118 = (unint64_t *)&v136->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v162;
  v162 = 0;
  if (v120)
    (*(void (**)(void *))(*(_QWORD *)v120 + 8))(v120);
  if (v134 < 0)
    operator delete(v133[0]);
  v121 = *a3;
  v131 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v132 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v131);
  v124 = v132;
  if (v132)
  {
    v125 = (unint64_t *)&v132->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v174)
  {
    v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v174);
    MEMORY[0x1E0C023A0](v128, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v169, 0);
  result = (uint64_t)v178;
  if (v178)
  {
    v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v178);
    return MEMORY[0x1E0C023A0](v130, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08327D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a69;
  uint64_t *v69;
  void *v71;
  uint64_t v72;

  v71 = a61;
  a61 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  v72 = *v69;
  *v69 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Exp::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceExp;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0833A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Floor::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceFloor;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0834C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Round::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceRound;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0835E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Sin::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSin;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0836FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Sinh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSinh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08381A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Sqrt::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceSqrt;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0839370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Tan::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTan;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E083A53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Tanh::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count_vtbl *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t i;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *v121;
  std::__shared_weak_count *v122;
  void *v123[2];
  char v124;
  void *v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  __n128 v135;
  __int128 v136;
  __int128 v137;
  void *v138[2];
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  char **v144;
  __n128 v145;
  uint64_t v146;
  void *v147;
  void *v148;
  char *v149;
  _QWORD v150[3];
  uint64_t v151[3];
  uint64_t v152[3];
  void *v153[3];
  void *__p;
  void *v155;
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  std::__shared_weak_count_vtbl *v165;
  uint64_t v166;
  void (__cdecl **v167)(std::__shared_weak_count *__hidden);
  uint64_t v168[3];

  v168[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v146 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  v147 = v8;
  *v8 = v7;
  v148 = v8 + 1;
  v149 = (char *)(v8 + 1);
  v165 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v147);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = v9;
  v155 = v10 + 1;
  v156 = v10 + 1;
  v166 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v165, 2, &v145);
  MIL::IRParameter::Make(&v145, &v142);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v142);
  v11 = v142;
  v142 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v145.n128_u64[1];
  if (v145.n128_u64[1])
  {
    v13 = (unint64_t *)(v145.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  v144 = 0;
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  v147 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, (void **)v15);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v147, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v144, 1uLL);
  v16 = v144;
  v17 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v18 = operator new(8uLL);
  __p = v18;
  *v18 = v17;
  v155 = v18 + 1;
  v156 = v18 + 1;
  v168[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v19 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v165 = v20;
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v19;
  v166 = (uint64_t)&v20->~__shared_weak_count_0;
  v167 = &v20->~__shared_weak_count_0;
  v168[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)v168, 2, &v140);
  MIL::IRParameter::Make(&v140, &v141);
  v21 = v141;
  v142 = v141;
  if (v141)
  {
    v22 = (_QWORD *)operator new();
    v23 = v141;
    *v22 = &unk_1EA99F888;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
  }
  else
  {
    v22 = 0;
  }
  v143 = v22;
  v141 = 0;
  v24 = v16[2];
  v25 = v16[1];
  if (v25 >= v24)
  {
    v27 = (v25 - *v16) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v29 = v24 - *v16;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v150[1] = v16 + 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v16 + 2), v30);
    v33 = (uint64_t *)&v31[16 * v27];
    *v33 = v21;
    v33[1] = (uint64_t)v22;
    v142 = 0;
    v143 = 0;
    v35 = *v16;
    v34 = v16[1];
    if (v34 == *v16)
    {
      v38 = v16[1];
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 16;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *(_QWORD *)v34 = 0;
        *((_QWORD *)v34 + 1) = 0;
      }
      while (v34 != v35);
      v38 = *v16;
      v34 = v16[1];
    }
    v26 = (char *)(v33 + 2);
    *v16 = v36;
    v147 = v38;
    v148 = v38;
    v16[1] = (char *)(v33 + 2);
    v149 = v34;
    v39 = v16[2];
    v16[2] = &v31[16 * v32];
    v150[0] = v39;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v147);
  }
  else
  {
    *(_QWORD *)v25 = v21;
    *((_QWORD *)v25 + 1) = v22;
    v26 = v25 + 16;
    v142 = 0;
    v143 = 0;
  }
  v16[1] = v26;
  v40 = v141;
  v141 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v140.n128_u64[1];
  if (v140.n128_u64[1])
  {
    v42 = (unint64_t *)(v140.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v165)
  {
    v166 = (uint64_t)v165;
    operator delete(v165);
  }
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v138 = *(_OWORD *)a2;
  v139 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v44 = v146;
  *(_QWORD *)&v137 = v146;
  if (v146)
  {
    v45 = (_QWORD *)operator new();
    *v45 = &unk_1EA99F8E8;
    v45[1] = 0;
    v45[2] = 0;
    v45[3] = v44;
  }
  else
  {
    v45 = 0;
  }
  *((_QWORD *)&v137 + 1) = v45;
  v146 = 0;
  *(_QWORD *)&v136 = v144;
  if (v144)
  {
    v46 = (_QWORD *)operator new();
    v47 = v144;
    *v46 = &unk_1EA99F948;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  *((_QWORD *)&v136 + 1) = v46;
  v144 = 0;
  v164 = 0;
  v162 = 0;
  MIL::IROperator::Make((__int128 *)v138, &v137, &v136, (uint64_t)v163, (uint64_t)v161, a3);
  v48 = v162;
  if (v162 == v161)
  {
    v49 = 4;
    v48 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_51;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
  v50 = v164;
  if (v164 == v163)
  {
    v51 = 4;
    v50 = v163;
    goto LABEL_55;
  }
  if (v164)
  {
    v51 = 5;
LABEL_55:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v139) < 0)
    operator delete(v138[0]);
  v165 = 0;
  v58 = (_OWORD *)operator new();
  *v58 = 0u;
  v58[1] = 0u;
  *((_DWORD *)v58 + 8) = 1065353216;
  v165 = (std::__shared_weak_count_vtbl *)v58;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v135);
  MIL::IRParameter::Make(&v135, (uint64_t *)&v147);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v58, "minimum_compute_type", (uint64_t *)&v147);
  v60 = v147;
  v147 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v135.n128_u64[1];
  if (v135.n128_u64[1])
  {
    v62 = (unint64_t *)(v135.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 48))(*((_QWORD *)v59 + 5), 1);
  v64 = *a3;
  v65 = v165;
  v133 = v165;
  if (v165)
  {
    v66 = (std::__shared_weak_count *)operator new();
    v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v66->__shared_owners_ = 0;
    v66->__shared_weak_owners_ = 0;
    v66[1].__vftable = v65;
  }
  else
  {
    v66 = 0;
  }
  v134 = v66;
  v165 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v64 + 184))(v64, &v133);
  v67 = v134;
  if (v134)
  {
    p_shared_owners = (unint64_t *)&v134->__shared_owners_;
    do
      v69 = __ldaxr(p_shared_owners);
    while (__stlxr(v69 - 1, p_shared_owners));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v147, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&v147, (uint64_t)v159);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v70 + 200))(v70, v159);
  v71 = v160;
  if (v160 == v159)
  {
    v72 = 4;
    v71 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_88;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_88:
  if (SHIBYTE(v149) < 0)
    operator delete(v147);
  v73 = *a3;
  v157[0] = &off_1EA9A00F8;
  v157[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceTanh;
  v158 = v157;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v73 + 216))(v73, v157);
  v74 = v158;
  if (v158 == v157)
  {
    v75 = 4;
    v74 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_95;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&v147);
  v76 = v147;
  std::string::basic_string[abi:ne180100]<0>(v129, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v129, 0, (uint64_t *)&__p);
  v131 = __p;
  if (__p)
  {
    v77 = (std::__shared_weak_count *)operator new();
    v78 = (std::__shared_weak_count_vtbl *)__p;
    v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v77->__shared_owners_ = 0;
    v77->__shared_weak_owners_ = 0;
    v77[1].__vftable = v78;
  }
  else
  {
    v77 = 0;
  }
  v132 = v77;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v127, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v76 + 24))(v76, &v131, v127);
  if (v128 < 0)
    operator delete(v127[0]);
  v79 = v132;
  if (v132)
  {
    v80 = (unint64_t *)&v132->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = __p;
  __p = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  if (v130 < 0)
    operator delete(v129[0]);
  v83 = v147;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v125 = __p;
  if (__p)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = (std::__shared_weak_count_vtbl *)__p;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v126 = v84;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v123, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v83 + 24))(v83, &v125, v123);
  if (v124 < 0)
    operator delete(v123[0]);
  v86 = v126;
  if (v126)
  {
    v87 = (unint64_t *)&v126->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = __p;
  __p = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = *a3;
  v121 = v147;
  if (v147)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = (std::__shared_weak_count_vtbl *)v147;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v122 = v91;
  v147 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 56))(v90, &v121);
  v93 = v122;
  if (v122)
  {
    v94 = (unint64_t *)&v122->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v147;
  v147 = 0;
  if (v96)
    (*(void (**)(void *))(*(_QWORD *)v96 + 8))(v96);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v142);
  v97 = v142;
  std::string::basic_string[abi:ne180100]<0>(v117, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v117, 1, v168);
  v119 = v168[0];
  if (v168[0])
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v168[0];
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
  }
  else
  {
    v98 = 0;
  }
  v120 = v98;
  v168[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v147, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v150, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v151, "int32");
  std::string::basic_string[abi:ne180100]<0>(v152, "int8");
  std::string::basic_string[abi:ne180100]<0>(v153, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v147, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v97 + 24))(v97, &v119, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v153[i + 2]) < 0)
      operator delete(v153[i]);
  }
  v101 = v120;
  if (v120)
  {
    v102 = (unint64_t *)&v120->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = v168[0];
  v168[0] = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  if (v118 < 0)
    operator delete(v117[0]);
  v105 = *a3;
  v115 = v142;
  if (v142)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v142;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v116 = v106;
  v142 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v105 + 56))(v105, &v115);
  v108 = v116;
  if (v116)
  {
    v109 = (unint64_t *)&v116->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v142;
  v142 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  if (v165)
  {
    v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v165);
    MEMORY[0x1E0C023A0](v112, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v144, 0);
  result = v146;
  if (v146)
  {
    v114 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v146);
    return MEMORY[0x1E0C023A0](v114, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E083B708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t *v50;
  uint64_t v51;
  uint64_t v53;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v51 - 112), 0);
  v53 = *v50;
  *v50 = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a50, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LogicalNot::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char **v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  void *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t i;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  __n128 v98;
  __int128 v99;
  __int128 v100;
  void *v101[2];
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  char **v105;
  __n128 v106;
  uint64_t v107;
  void *__p;
  void *v109;
  char *v110;
  _QWORD v111[3];
  uint64_t v112[3];
  uint64_t v113[3];
  void *v114[3];
  void *Scalar;
  void *v116;
  _QWORD *v117;
  _QWORD v118[3];
  _QWORD *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _BYTE v124[24];
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v107 = v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v109 = v8 + 1;
  v110 = (char *)(v8 + 1);
  v127 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v127, 1, &v106);
  MIL::IRParameter::Make(&v106, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v9 = Scalar;
  Scalar = 0;
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  v10 = (std::__shared_weak_count *)v106.n128_u64[1];
  if (v106.n128_u64[1])
  {
    v11 = (unint64_t *)(v106.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v109 = __p;
    operator delete(__p);
  }
  v105 = 0;
  v13 = operator new();
  *(_QWORD *)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v105, (void **)v13);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v105, 1uLL);
  v14 = v105;
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(8uLL);
  Scalar = v16;
  *v16 = v15;
  v116 = v16 + 1;
  v117 = v16 + 1;
  v126 = MIL::IRTensorValueType::MakeWithShape(a1, 2, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v126, 1, &v103);
  MIL::IRParameter::Make(&v103, &v104);
  v17 = v104;
  v127 = v104;
  if (v104)
  {
    v18 = (_QWORD *)operator new();
    v19 = v104;
    *v18 = &unk_1EA99F888;
    v18[1] = 0;
    v18[2] = 0;
    v18[3] = v19;
  }
  else
  {
    v18 = 0;
  }
  v128 = v18;
  v104 = 0;
  v20 = v14[2];
  v21 = v14[1];
  if (v21 >= v20)
  {
    v23 = (v21 - *v14) >> 4;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v25 = v20 - *v14;
    if (v25 >> 3 > v24)
      v24 = v25 >> 3;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v111[1] = v14 + 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v14 + 2), v26);
    v29 = (uint64_t *)&v27[16 * v23];
    *v29 = v17;
    v29[1] = (uint64_t)v18;
    v127 = 0;
    v128 = 0;
    v31 = *v14;
    v30 = v14[1];
    if (v30 == *v14)
    {
      v34 = v14[1];
      v32 = &v27[16 * v23];
    }
    else
    {
      v32 = &v27[16 * v23];
      do
      {
        v33 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v31);
      v34 = *v14;
      v30 = v14[1];
    }
    v22 = (char *)(v29 + 2);
    *v14 = v32;
    __p = v34;
    v109 = v34;
    v14[1] = (char *)(v29 + 2);
    v110 = v30;
    v35 = v14[2];
    v14[2] = &v27[16 * v28];
    v111[0] = v35;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v21 = v17;
    *((_QWORD *)v21 + 1) = v18;
    v22 = v21 + 16;
    v127 = 0;
    v128 = 0;
  }
  v14[1] = v22;
  v36 = v104;
  v104 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = (std::__shared_weak_count *)v103.n128_u64[1];
  if (v103.n128_u64[1])
  {
    v38 = (unint64_t *)(v103.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (Scalar)
  {
    v116 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v101 = *(_OWORD *)a2;
  v102 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v40 = v107;
  *(_QWORD *)&v100 = v107;
  if (v107)
  {
    v41 = (_QWORD *)operator new();
    *v41 = &unk_1EA99F8E8;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v40;
  }
  else
  {
    v41 = 0;
  }
  *((_QWORD *)&v100 + 1) = v41;
  v107 = 0;
  *(_QWORD *)&v99 = v105;
  if (v105)
  {
    v42 = (_QWORD *)operator new();
    v43 = v105;
    *v42 = &unk_1EA99F948;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  *((_QWORD *)&v99 + 1) = v42;
  v105 = 0;
  v125 = 0;
  v123 = 0;
  MIL::IROperator::Make((__int128 *)v101, &v100, &v99, (uint64_t)v124, (uint64_t)v122, a3);
  v44 = v123;
  if (v123 == v122)
  {
    v45 = 4;
    v44 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  v46 = v125;
  if (v125 == v124)
  {
    v47 = 4;
    v46 = v124;
    goto LABEL_51;
  }
  if (v125)
  {
    v47 = 5;
LABEL_51:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v127 = 0;
  v54 = operator new();
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  *(_DWORD *)(v54 + 32) = 1065353216;
  v127 = v54;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v98);
  MIL::IRParameter::Make(&v98, (uint64_t *)&__p);
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v54, "minimum_compute_type", (uint64_t *)&__p);
  v56 = __p;
  __p = 0;
  if (v56)
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v98.n128_u64[1];
  if (v98.n128_u64[1])
  {
    v58 = (unint64_t *)(v98.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 32))(*((_QWORD *)v55 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v55 + 5) + 48))(*((_QWORD *)v55 + 5), 1);
  v60 = *a3;
  v61 = v127;
  v96 = v127;
  if (v127)
  {
    v62 = (std::__shared_weak_count *)operator new();
    v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v62->__shared_owners_ = 0;
    v62->__shared_weak_owners_ = 0;
    v62[1].__vftable = (std::__shared_weak_count_vtbl *)v61;
  }
  else
  {
    v62 = 0;
  }
  v97 = v62;
  v127 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v60 + 184))(v60, &v96);
  v63 = v97;
  if (v97)
  {
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v120);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v66 + 200))(v66, v120);
  v67 = v121;
  if (v121 == v120)
  {
    v68 = 4;
    v67 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_84;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_84:
  if (SHIBYTE(v110) < 0)
    operator delete(__p);
  v69 = *a3;
  v118[0] = &off_1EA9A00F8;
  v118[1] = MIL::Operators::Common::ios16::CustomValueInference::ValueInferenceLogicalNot;
  v119 = v118;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v69 + 216))(v69, v118);
  v70 = v119;
  if (v119 == v118)
  {
    v71 = 4;
    v70 = v118;
    goto LABEL_90;
  }
  if (v119)
  {
    v71 = 5;
LABEL_90:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  MIL::Validation::PossibleStringValuesConstraints::Make(&v104);
  v72 = v104;
  std::string::basic_string[abi:ne180100]<0>(v92, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v92, 1, &v126);
  v94 = v126;
  if (v126)
  {
    v73 = (std::__shared_weak_count *)operator new();
    v74 = v126;
    v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v73->__shared_owners_ = 0;
    v73->__shared_weak_owners_ = 0;
    v73[1].__vftable = (std::__shared_weak_count_vtbl *)v74;
  }
  else
  {
    v73 = 0;
  }
  v95 = v73;
  v126 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v111, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v112, "int32");
  std::string::basic_string[abi:ne180100]<0>(v113, "int8");
  std::string::basic_string[abi:ne180100]<0>(v114, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v72 + 24))(v72, &v94, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v114[i + 2]) < 0)
      operator delete(v114[i]);
  }
  v76 = v95;
  if (v95)
  {
    v77 = (unint64_t *)&v95->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v126;
  v126 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  if (v93 < 0)
    operator delete(v92[0]);
  v80 = *a3;
  v90 = v104;
  if (v104)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = v104;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = (std::__shared_weak_count_vtbl *)v82;
  }
  else
  {
    v81 = 0;
  }
  v91 = v81;
  v104 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v80 + 56))(v80, &v90);
  v83 = v91;
  if (v91)
  {
    v84 = (unint64_t *)&v91->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v104;
  v104 = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  if (v127)
  {
    v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v127);
    MEMORY[0x1E0C023A0](v87, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v105, 0);
  result = v107;
  if (v107)
  {
    v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v107);
    return MEMORY[0x1E0C023A0](v89, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E083C598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,void **a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;

  if (a36)
    (*(void (**)(uint64_t))(*(_QWORD *)a36 + 8))(a36);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 88), 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a37, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a42, 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateGather(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  BOOL IsParameterSet;
  BOOL v6;
  const void *ParameterValue;
  int v8;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v10;
  int v11;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  void *v20[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  char v25;
  std::string v26[2];
  int v27;
  _BYTE v28[48];
  int v29;

  MIL::Operators::Common::Shared::ValidateBaseGatherWithAxis(this, (MIL::ValidationResult *)v28);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)v28))
  {
    exception = __cxa_allocate_exception(0x48uLL);
    MIL::MILResult::MILResult(v26, (uint64_t)v28);
    v26[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1EA99F170;
    v27 = v29;
    MIL::ValidationError::ValidationError(exception, v26);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, (const void **)__p);
  v6 = IsParameterSet;
  if ((v25 & 0x80000000) == 0)
  {
    if (IsParameterSet)
      goto LABEL_4;
LABEL_13:
    MIL::ValidationResult::ValidationResult(a2);
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (!v6)
    goto LABEL_13;
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_dims");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v10 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v25 < 0)
    operator delete(__p[0]);
  v11 = MIL::IRTensorValueType::Rank(v10);
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v10 + 104))(v10)
    || v8 <= v11 && v8 >= -v11)
  {
    goto LABEL_13;
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v13 = (std::__shared_weak_count *)LocationPtr[1];
  v22 = *LocationPtr;
  v23 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "'batch_dims' must be within range (-indices_rank - 1, indices_rank] (exclusive)");
  MIL::ValidationResult::ValidationResult(a2, &v22, 315, v20);
  if (v21 < 0)
    operator delete(v20[0]);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_14:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v28);
}

void sub_1E083CAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v23 - 104));
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateGatherNd(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  BOOL IsParameterSet;
  BOOL v6;
  const void *ParameterValue;
  int v8;
  int v9;
  MIL::IRValueType *ParameterType;
  MIL::IRTensorValueType *v11;
  int v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  MIL::IRValueType *v25;
  MIL::IRTensorValueType *v26;
  int v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  const void *v45[2];
  char v46;

  std::string::basic_string[abi:ne180100]<0>(v45, "batch_dims");
  IsParameterSet = MIL::IROperation::IsParameterSet((uint64_t)this, v45);
  v6 = IsParameterSet;
  if (v46 < 0)
  {
    operator delete((void *)v45[0]);
    if (!v6)
    {
LABEL_44:
      MIL::ValidationResult::ValidationResult(a2);
      return;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_44;
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "batch_dims");
  ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
  v8 = MIL::IRValue::GetScalar<int>(ParameterValue);
  v9 = v8;
  if ((v46 & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_21:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v21 = (std::__shared_weak_count *)LocationPtr[1];
    v43 = *LocationPtr;
    v44 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    MIL::ValidationResult::ValidationResult(a2, &v43, 315, v41);
    if (v42 < 0)
      operator delete(v41[0]);
    v17 = v44;
    if (v44)
    {
      v24 = (unint64_t *)&v44->__shared_owners_;
      do
        v19 = __ldaxr(v24);
      while (__stlxr(v19 - 1, v24));
      goto LABEL_42;
    }
    return;
  }
  operator delete((void *)v45[0]);
  if (v9 < 0)
    goto LABEL_21;
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(v45, "indices");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
  v11 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (v46 < 0)
    operator delete((void *)v45[0]);
  v12 = MIL::IRTensorValueType::Rank(v11);
  if ((*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v11 + 104))(v11) && v9 >= v12)
  {
    v13 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v14 = (std::__shared_weak_count *)v13[1];
    v39 = *v13;
    v40 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "'batch_dims' must be smaller than indices_rank.");
    MIL::ValidationResult::ValidationResult(a2, &v39, 315, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v40;
    if (v40)
    {
      v18 = (unint64_t *)&v40->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_42:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "x");
    v25 = (MIL::IRValueType *)MIL::IROperation::GetParameterType(this);
    v26 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v25);
    if (v46 < 0)
      operator delete((void *)v45[0]);
    v27 = MIL::IRTensorValueType::Rank(v26);
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(_QWORD *)v26 + 104))(v26) || v9 <= v27)
      goto LABEL_44;
    v28 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v29 = (std::__shared_weak_count *)v28[1];
    v35 = *v28;
    v36 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "'batch_dims' must be no larger than input_rank.");
    MIL::ValidationResult::ValidationResult(a2, &v35, 315, v33);
    if (v34 < 0)
      operator delete(v33[0]);
    v17 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v32);
      while (__stlxr(v19 - 1, v32));
      goto LABEL_42;
    }
  }
}

void sub_1E083CEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseGather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  void **v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void **v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  std::__shared_weak_count_vtbl *v84;
  void **v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  void **v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void **v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  void **v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  void **v119;
  uint64_t result;
  uint64_t v121;
  void **v122;
  std::__shared_weak_count *v123;
  void *v124[2];
  char v125;
  void *v126[2];
  char v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  void **v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  void *v136[2];
  char v137;
  void *v138[2];
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  __int128 v148;
  __int128 v149;
  void *v150[2];
  uint64_t v151;
  void *v152;
  void *v153;
  _QWORD *v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char **v159;
  __n128 v160;
  void *__p;
  void *v162;
  _QWORD *v163;
  void *v164;
  void *v165;
  _QWORD *v166;
  __n128 v167;
  _QWORD *v168;
  _BYTE v169[24];
  _BYTE *v170;
  _BYTE v171[24];
  _BYTE *v172;
  std::__shared_weak_count_vtbl *v173;
  uint64_t p_on_zero_shared;
  uint64_t v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char **v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v168 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v175 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v173 = v11;
  v176 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v173);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v165 = v14 + 2;
  v166 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v164 = v14;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v164);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v162 = v17 + 2;
  v163 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v176, 3, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v152);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v152);
  v18 = v152;
  v152 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v20 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v162 = __p;
    operator delete(__p);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v173)
  {
    p_on_zero_shared = (uint64_t)v173;
    operator delete(v173);
  }
  v22 = v168;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v173 = v24;
  v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  p_on_zero_shared = (uint64_t)&v24->~__shared_weak_count_0;
  v175 = (uint64_t)&v24->~__shared_weak_count_0;
  v176 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v173);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v164 = v26;
  *v26 = v25;
  v165 = v26 + 1;
  v166 = v26 + 1;
  v177 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v164);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v162 = v28 + 1;
  v163 = v28 + 1;
  v178 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v176, 3, &v160);
  MIL::IRParameter::Make(&v160, (uint64_t *)&v152);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&v152);
  v29 = v152;
  v152 = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v160.n128_u64[1];
  if (v160.n128_u64[1])
  {
    v31 = (unint64_t *)(v160.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__p)
  {
    v162 = __p;
    operator delete(__p);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  if (v173)
  {
    p_on_zero_shared = (uint64_t)v173;
    operator delete(v173);
  }
  v159 = 0;
  v33 = operator new();
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  v176 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, (void **)v33);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v176, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v159, 1uLL);
  v34 = v159;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v164 = v36;
  *v36 = v35;
  v165 = v36 + 1;
  v166 = v36 + 1;
  v173 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v164);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = operator new(8uLL);
  __p = v38;
  *v38 = v37;
  v162 = v38 + 1;
  v163 = v38 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v152 = v40;
  *v40 = v39;
  v153 = v40 + 1;
  v154 = v40 + 1;
  v175 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v152);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v173, 3, &v155);
  MIL::IRParameter::Make(&v155, &v156);
  v41 = v156;
  v157 = v156;
  if (v156)
  {
    v42 = (_QWORD *)operator new();
    v43 = v156;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v158 = v42;
  v156 = 0;
  v44 = v34[2];
  v45 = v34[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v34) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v34;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v180 = v34 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v34 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v157 = 0;
    v158 = 0;
    v55 = *v34;
    v54 = v34[1];
    if (v54 == *v34)
    {
      v58 = (void **)v34[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = (void **)*v34;
      v54 = v34[1];
    }
    v46 = (char *)(v53 + 2);
    *v34 = v56;
    v176 = v58;
    v177 = (uint64_t)v58;
    v34[1] = (char *)(v53 + 2);
    v178 = (uint64_t)v54;
    v59 = v34[2];
    v34[2] = &v51[16 * v52];
    v179 = v59;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v176);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v157 = 0;
    v158 = 0;
  }
  v34[1] = v46;
  v60 = v156;
  v156 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v62 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (__p)
  {
    v162 = __p;
    operator delete(__p);
  }
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  *(_OWORD *)v150 = *(_OWORD *)a2;
  v151 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v168;
  *(_QWORD *)&v149 = v168;
  if (v168)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v149 + 1) = v65;
  v168 = 0;
  *(_QWORD *)&v148 = v159;
  if (v159)
  {
    v66 = (_QWORD *)operator new();
    v67 = v159;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v148 + 1) = v66;
  v159 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v171, a3);
  v170 = 0;
  MIL::IROperator::Make((__int128 *)v150, &v149, &v148, (uint64_t)v171, (uint64_t)v169, a4);
  v68 = v170;
  if (v170 == v169)
  {
    v69 = 4;
    v68 = v169;
  }
  else
  {
    if (!v170)
      goto LABEL_68;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_68:
  v70 = v172;
  if (v172 == v171)
  {
    v71 = 4;
    v70 = v171;
    goto LABEL_72;
  }
  if (v172)
  {
    v71 = 5;
LABEL_72:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
  if (*((_QWORD *)&v148 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
  if (*((_QWORD *)&v149 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v151) < 0)
    operator delete(v150[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v176);
  v78 = v176;
  std::string::basic_string[abi:ne180100]<0>(v144, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&v173);
  v146 = v173;
  if (v173)
  {
    v79 = (std::__shared_weak_count *)operator new();
    v80 = v173;
    v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v79->__shared_owners_ = 0;
    v79->__shared_weak_owners_ = 0;
    v79[1].__vftable = v80;
  }
  else
  {
    v79 = 0;
  }
  v147 = v79;
  v173 = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v78 + 3))(v78, &v146, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v81 = v147;
  if (v147)
  {
    p_shared_owners = (unint64_t *)&v147->__shared_owners_;
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v173;
  v173 = 0;
  if (v84)
    (*((void (**)(std::__shared_weak_count_vtbl *))v84->~__shared_weak_count + 1))(v84);
  if (v145 < 0)
    operator delete(v144[0]);
  v85 = v176;
  std::string::basic_string[abi:ne180100]<0>(v138, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v138, 0, (uint64_t *)&v173);
  v140 = v173;
  if (v173)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = v173;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v141 = v86;
  v173 = 0;
  std::string::basic_string[abi:ne180100]<0>(v136, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v85 + 3))(v85, &v140, v136);
  if (v137 < 0)
    operator delete(v136[0]);
  v88 = v141;
  if (v141)
  {
    v89 = (unint64_t *)&v141->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = v173;
  v173 = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v139 < 0)
    operator delete(v138[0]);
  v92 = v176;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v173);
  v134 = v173;
  if (v173)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = v173;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v135 = v93;
  v173 = 0;
  std::string::basic_string[abi:ne180100]<0>(v132, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v92 + 3))(v92, &v134, v132);
  if (v133 < 0)
    operator delete(v132[0]);
  v95 = v135;
  if (v135)
  {
    v96 = (unint64_t *)&v135->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = v173;
  v173 = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  v99 = *a4;
  v130 = v176;
  if (v176)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = v176;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
  }
  else
  {
    v100 = 0;
  }
  v131 = v100;
  v176 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v99 + 56))(v99, &v130);
  v102 = v131;
  if (v131)
  {
    v103 = (unint64_t *)&v131->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v176;
  v176 = 0;
  if (v105)
    (*((void (**)(void **))*v105 + 1))(v105);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v176);
  v106 = v176;
  std::string::basic_string[abi:ne180100]<0>(v126, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v126, 0, (uint64_t *)&v173);
  v128 = v173;
  if (v173)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = v173;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v129 = v107;
  v173 = 0;
  std::string::basic_string[abi:ne180100]<0>(v124, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v106 + 3))(v106, &v128, 0, v124);
  if (v125 < 0)
    operator delete(v124[0]);
  v109 = v129;
  if (v129)
  {
    v110 = (unint64_t *)&v129->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v173;
  v173 = 0;
  if (v112)
    (*((void (**)(std::__shared_weak_count_vtbl *))v112->~__shared_weak_count + 1))(v112);
  if (v127 < 0)
    operator delete(v126[0]);
  v113 = *a4;
  v122 = v176;
  if (v176)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = v176;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = (std::__shared_weak_count_vtbl *)v115;
  }
  else
  {
    v114 = 0;
  }
  v123 = v114;
  v176 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v113 + 56))(v113, &v122);
  v116 = v123;
  if (v123)
  {
    v117 = (unint64_t *)&v123->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v176;
  v176 = 0;
  if (v119)
    (*((void (**)(void **))*v119 + 1))(v119);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, 0);
  result = (uint64_t)v168;
  if (v168)
  {
    v121 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v168);
    return MEMORY[0x1E0C023A0](v121, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E083DCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseGatherWithAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  void **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  void **v64;
  char *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char **v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void **v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  std::__shared_weak_count_vtbl *v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  void **v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void **v111;
  void **v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void **v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  uint64_t result;
  uint64_t v127;
  void **v128;
  std::__shared_weak_count *v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  void **v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *v148[2];
  char v149;
  void *v150[2];
  char v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  __int128 v154;
  __int128 v155;
  void *v156[2];
  uint64_t v157;
  void *v158;
  void *v159;
  _QWORD *v160;
  __n128 v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char **v165;
  __n128 v166;
  __n128 v167;
  void *__p;
  void *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  _QWORD *v173;
  __n128 v174;
  _QWORD *v175;
  _BYTE v176[24];
  _BYTE *v177;
  _BYTE v178[24];
  _BYTE *v179;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v182;
  void **v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char **v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v175 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v11->__on_zero_shared;
  v182 = (uint64_t)&v11->__on_zero_shared;
  v11->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  Scalar = v11;
  v183 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = operator new(0x10uLL);
  v172 = v14 + 2;
  v173 = v14 + 2;
  *v14 = v12;
  v14[1] = v13;
  v171 = v14;
  v184 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v171);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v17 = operator new(0x10uLL);
  v169 = v17 + 2;
  v170 = v17 + 2;
  *v17 = v15;
  v17[1] = v16;
  __p = v17;
  v185 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v183, 3, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&v158);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", (uint64_t *)&v158);
  v18 = v158;
  v158 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v20 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v22 = v175;
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v24;
  v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  p_on_zero_shared = (uint64_t)&v24->~__shared_weak_count_0;
  v182 = (uint64_t)&v24->~__shared_weak_count_0;
  v183 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  v171 = v26;
  *v26 = v25;
  v172 = v26 + 1;
  v173 = v26 + 1;
  v184 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v171);
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = operator new(8uLL);
  __p = v28;
  *v28 = v27;
  v169 = v28 + 1;
  v170 = v28 + 1;
  v185 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v183, 3, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v158);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v22, "indices", (uint64_t *)&v158);
  v29 = v158;
  v158 = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v31 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v33 = v175;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v166);
  MIL::IRParameter::Make(&v166, (uint64_t *)&v183);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v33, "axis", (uint64_t *)&v183);
  v35 = v183;
  v183 = 0;
  if (v35)
    (*((void (**)(void **))*v35 + 1))(v35);
  v36 = (std::__shared_weak_count *)v166.n128_u64[1];
  if (v166.n128_u64[1])
  {
    v37 = (unint64_t *)(v166.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v165 = 0;
  v39 = operator new();
  *(_QWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_QWORD *)(v39 + 16) = 0;
  v183 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v165, (void **)v39);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v183, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v165, 1uLL);
  v40 = v165;
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  v171 = v42;
  *v42 = v41;
  v172 = v42 + 1;
  v173 = v42 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v171);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  __p = v44;
  *v44 = v43;
  v169 = v44 + 1;
  v170 = v44 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v158 = v46;
  *v46 = v45;
  v159 = v46 + 1;
  v160 = v46 + 1;
  v182 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v158);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v161);
  MIL::IRParameter::Make(&v161, &v162);
  v47 = v162;
  v163 = v162;
  if (v162)
  {
    v48 = (_QWORD *)operator new();
    v49 = v162;
    *v48 = &unk_1EA99F888;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = v49;
  }
  else
  {
    v48 = 0;
  }
  v164 = v48;
  v162 = 0;
  v50 = v40[2];
  v51 = v40[1];
  if (v51 >= v50)
  {
    v53 = (v51 - *v40) >> 4;
    v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v55 = v50 - *v40;
    if (v55 >> 3 > v54)
      v54 = v55 >> 3;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
      v56 = 0xFFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    v187 = v40 + 2;
    v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v40 + 2), v56);
    v59 = (uint64_t *)&v57[16 * v53];
    *v59 = v47;
    v59[1] = (uint64_t)v48;
    v163 = 0;
    v164 = 0;
    v61 = *v40;
    v60 = v40[1];
    if (v60 == *v40)
    {
      v64 = (void **)v40[1];
      v62 = &v57[16 * v53];
    }
    else
    {
      v62 = &v57[16 * v53];
      do
      {
        v63 = *((_OWORD *)v60 - 1);
        v60 -= 16;
        *((_OWORD *)v62 - 1) = v63;
        v62 -= 16;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
      }
      while (v60 != v61);
      v64 = (void **)*v40;
      v60 = v40[1];
    }
    v52 = (char *)(v59 + 2);
    *v40 = v62;
    v183 = v64;
    v184 = (uint64_t)v64;
    v40[1] = (char *)(v59 + 2);
    v185 = (uint64_t)v60;
    v65 = v40[2];
    v40[2] = &v57[16 * v58];
    v186 = v65;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v183);
  }
  else
  {
    *(_QWORD *)v51 = v47;
    *((_QWORD *)v51 + 1) = v48;
    v52 = v51 + 16;
    v163 = 0;
    v164 = 0;
  }
  v40[1] = v52;
  v66 = v162;
  v162 = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v68 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (__p)
  {
    v169 = __p;
    operator delete(__p);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  *(_OWORD *)v156 = *(_OWORD *)a2;
  v157 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v70 = (uint64_t)v175;
  *(_QWORD *)&v155 = v175;
  if (v175)
  {
    v71 = (_QWORD *)operator new();
    *v71 = &unk_1EA99F8E8;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v70;
  }
  else
  {
    v71 = 0;
  }
  *((_QWORD *)&v155 + 1) = v71;
  v175 = 0;
  *(_QWORD *)&v154 = v165;
  if (v165)
  {
    v72 = (_QWORD *)operator new();
    v73 = v165;
    *v72 = &unk_1EA99F948;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  *((_QWORD *)&v154 + 1) = v72;
  v165 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v178, a3);
  v177 = 0;
  MIL::IROperator::Make((__int128 *)v156, &v155, &v154, (uint64_t)v178, (uint64_t)v176, a4);
  v74 = v177;
  if (v177 == v176)
  {
    v75 = 4;
    v74 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_75;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_75:
  v76 = v179;
  if (v179 == v178)
  {
    v77 = 4;
    v76 = v178;
    goto LABEL_79;
  }
  if (v179)
  {
    v77 = 5;
LABEL_79:
    (*(void (**)(void))(*v76 + 8 * v77))();
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (SHIBYTE(v157) < 0)
    operator delete(v156[0]);
  MIL::Validation::TensorDTypeConstraints::Make(&v183);
  v84 = v183;
  std::string::basic_string[abi:ne180100]<0>(v150, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v150, 0, (uint64_t *)&Scalar);
  v152 = Scalar;
  if (Scalar)
  {
    v85 = (std::__shared_weak_count *)operator new();
    v86 = Scalar;
    v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v85->__shared_owners_ = 0;
    v85->__shared_weak_owners_ = 0;
    v85[1].__vftable = v86;
  }
  else
  {
    v85 = 0;
  }
  v153 = v85;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v148, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v84 + 3))(v84, &v152, v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v87 = v153;
  if (v153)
  {
    p_shared_owners = (unint64_t *)&v153->__shared_owners_;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = Scalar;
  Scalar = 0;
  if (v90)
    (*((void (**)(std::__shared_weak_count_vtbl *))v90->~__shared_weak_count + 1))(v90);
  if (v151 < 0)
    operator delete(v150[0]);
  v91 = v183;
  std::string::basic_string[abi:ne180100]<0>(v144, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&Scalar);
  v146 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v147 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v146, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v147;
  if (v147)
  {
    v95 = (unint64_t *)&v147->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v145 < 0)
    operator delete(v144[0]);
  v98 = v183;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v140 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v141 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v140, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v141;
  if (v141)
  {
    v102 = (unint64_t *)&v141->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  v105 = *a4;
  v136 = v183;
  if (v183)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v183;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  v183 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v183;
  v183 = 0;
  if (v111)
    (*((void (**)(void **))*v111 + 1))(v111);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v183);
  v112 = v183;
  std::string::basic_string[abi:ne180100]<0>(v132, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v132, 0, (uint64_t *)&Scalar);
  v134 = Scalar;
  if (Scalar)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = Scalar;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v130, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v112 + 3))(v112, &v134, 0, v130);
  if (v131 < 0)
    operator delete(v130[0]);
  v115 = v135;
  if (v135)
  {
    v116 = (unint64_t *)&v135->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = Scalar;
  Scalar = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v133 < 0)
    operator delete(v132[0]);
  v119 = *a4;
  v128 = v183;
  if (v183)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v183;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = (std::__shared_weak_count_vtbl *)v121;
  }
  else
  {
    v120 = 0;
  }
  v129 = v120;
  v183 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v119 + 56))(v119, &v128);
  v122 = v129;
  if (v129)
  {
    v123 = (unint64_t *)&v129->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v183;
  v183 = 0;
  if (v125)
    (*((void (**)(void **))*v125 + 1))(v125);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v165, 0);
  result = (uint64_t)v175;
  if (v175)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v175);
    return MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E083EF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 208), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Gather::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  void **v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void **v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *p_shared_owners;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void **v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  void **v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  void **v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  void **v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void **v132;
  uint64_t result;
  uint64_t v134;
  void **v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void **v143;
  std::__shared_weak_count *v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  __int128 v161;
  __int128 v162;
  void *v163[2];
  uint64_t v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  __n128 v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  char **v172;
  __n128 v173;
  __n128 v174;
  __n128 v175;
  void *__p;
  void *v177;
  _QWORD *v178;
  void *v179;
  void *v180;
  _QWORD *v181;
  __n128 v182;
  _QWORD *v183;
  _QWORD v184[3];
  _QWORD *v185;
  _BYTE v186[24];
  _BYTE *v187;
  _QWORD v188[3];
  _QWORD *v189;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v192;
  void **v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char **v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v183 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v192 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v193 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v180 = v12 + 2;
  v181 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v179 = v12;
  v194 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v179);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v177 = v15 + 2;
  v178 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v195 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v193, 3, &v182);
  MIL::IRParameter::Make(&v182, (uint64_t *)&v165);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v165);
  v16 = v165;
  v165 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v182.n128_u64[1];
  if (v182.n128_u64[1])
  {
    v18 = (unint64_t *)(v182.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v177 = __p;
    operator delete(__p);
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v183;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  p_on_zero_shared = (uint64_t)&v22->~__shared_weak_count_0;
  v192 = (uint64_t)&v22->~__shared_weak_count_0;
  v193 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v179 = v24;
  *v24 = v23;
  v180 = v24 + 1;
  v181 = v24 + 1;
  v194 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v179);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v177 = v26 + 1;
  v178 = v26 + 1;
  v195 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v193, 3, &v175);
  MIL::IRParameter::Make(&v175, (uint64_t *)&v165);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v20, "indices", (uint64_t *)&v165);
  v27 = v165;
  v165 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v29 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v177 = __p;
    operator delete(__p);
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v31 = v183;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&v193);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "axis", (uint64_t *)&v193);
  v33 = v193;
  v193 = 0;
  if (v33)
    (*((void (**)(void **))*v33 + 1))(v33);
  v34 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v35 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v183;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v173);
  MIL::IRParameter::Make(&v173, (uint64_t *)&v193);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v37, "batch_dims", (uint64_t *)&v193);
  v39 = v193;
  v193 = 0;
  if (v39)
    (*((void (**)(void **))*v39 + 1))(v39);
  v40 = (std::__shared_weak_count *)v173.n128_u64[1];
  if (v173.n128_u64[1])
  {
    v41 = (unint64_t *)(v173.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v172 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v193 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v172, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v193, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v172, 1uLL);
  v44 = v172;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = operator new(8uLL);
  v179 = v46;
  *v46 = v45;
  v180 = v46 + 1;
  v181 = v46 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v179);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = operator new(8uLL);
  __p = v48;
  *v48 = v47;
  v177 = v48 + 1;
  v178 = v48 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v165 = v50;
  *v50 = v49;
  v166 = v50 + 1;
  v167 = v50 + 1;
  v192 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v165);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v168);
  MIL::IRParameter::Make(&v168, &v169);
  v51 = v169;
  v170 = v169;
  if (v169)
  {
    v52 = (_QWORD *)operator new();
    v53 = v169;
    *v52 = &unk_1EA99F888;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  v171 = v52;
  v169 = 0;
  v54 = v44[2];
  v55 = v44[1];
  if (v55 >= v54)
  {
    v57 = (v55 - *v44) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v59 = v54 - *v44;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    v197 = v44 + 2;
    v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v60);
    v63 = (uint64_t *)&v61[16 * v57];
    *v63 = v51;
    v63[1] = (uint64_t)v52;
    v170 = 0;
    v171 = 0;
    v65 = *v44;
    v64 = v44[1];
    if (v64 == *v44)
    {
      v68 = (void **)v44[1];
      v66 = &v61[16 * v57];
    }
    else
    {
      v66 = &v61[16 * v57];
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v64 -= 16;
        *((_OWORD *)v66 - 1) = v67;
        v66 -= 16;
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
      }
      while (v64 != v65);
      v68 = (void **)*v44;
      v64 = v44[1];
    }
    v56 = (char *)(v63 + 2);
    *v44 = v66;
    v193 = v68;
    v194 = (uint64_t)v68;
    v44[1] = (char *)(v63 + 2);
    v195 = (uint64_t)v64;
    v69 = v44[2];
    v44[2] = &v61[16 * v62];
    v196 = v69;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v193);
  }
  else
  {
    *(_QWORD *)v55 = v51;
    *((_QWORD *)v55 + 1) = v52;
    v56 = v55 + 16;
    v170 = 0;
    v171 = 0;
  }
  v44[1] = v56;
  v70 = v169;
  v169 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v72 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (__p)
  {
    v177 = __p;
    operator delete(__p);
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  *(_OWORD *)v163 = *(_OWORD *)a2;
  v164 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v74 = (uint64_t)v183;
  *(_QWORD *)&v162 = v183;
  if (v183)
  {
    v75 = (_QWORD *)operator new();
    *v75 = &unk_1EA99F8E8;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v74;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v162 + 1) = v75;
  v183 = 0;
  *(_QWORD *)&v161 = v172;
  if (v172)
  {
    v76 = (_QWORD *)operator new();
    v77 = v172;
    *v76 = &unk_1EA99F948;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v161 + 1) = v76;
  v172 = 0;
  v188[0] = &unk_1EA99FAC8;
  v188[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateGather;
  v189 = v188;
  v187 = 0;
  MIL::IROperator::Make((__int128 *)v163, &v162, &v161, (uint64_t)v188, (uint64_t)v186, a3);
  v78 = v187;
  if (v187 == v186)
  {
    v79 = 4;
    v78 = v186;
  }
  else
  {
    if (!v187)
      goto LABEL_82;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_82:
  v80 = v189;
  if (v189 == v188)
  {
    v81 = 4;
    v80 = v188;
    goto LABEL_86;
  }
  if (v189)
  {
    v81 = 5;
LABEL_86:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v161 + 1);
  if (*((_QWORD *)&v161 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v161 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v162 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SHIBYTE(v164) < 0)
    operator delete(v163[0]);
  v88 = *a3;
  v184[0] = &off_1EA99FBD8;
  v184[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGather;
  v185 = v184;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 200))(v88, v184);
  v89 = v185;
  if (v185 == v184)
  {
    v90 = 4;
    v89 = v184;
  }
  else
  {
    if (!v185)
      goto LABEL_104;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_104:
  MIL::Validation::TensorDTypeConstraints::Make(&v193);
  v91 = v193;
  std::string::basic_string[abi:ne180100]<0>(v157, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v157, 0, (uint64_t *)&Scalar);
  v159 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v160 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v91 + 3))(v91, &v159, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v94 = v160;
  if (v160)
  {
    p_shared_owners = (unint64_t *)&v160->__shared_owners_;
    do
      v96 = __ldaxr(p_shared_owners);
    while (__stlxr(v96 - 1, p_shared_owners));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v158 < 0)
    operator delete(v157[0]);
  v98 = v193;
  std::string::basic_string[abi:ne180100]<0>(v151, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&Scalar);
  v153 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v154 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v98 + 3))(v98, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v101 = v154;
  if (v154)
  {
    v102 = (unint64_t *)&v154->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  if (v152 < 0)
    operator delete(v151[0]);
  v105 = v193;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = Scalar;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v148 = v106;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v145, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v105 + 3))(v105, &v147, v145);
  if (v146 < 0)
    operator delete(v145[0]);
  v108 = v148;
  if (v148)
  {
    v109 = (unint64_t *)&v148->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = Scalar;
  Scalar = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  v112 = *a3;
  v143 = v193;
  if (v193)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v193;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v144 = v113;
  v193 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v112 + 56))(v112, &v143);
  v115 = v144;
  if (v144)
  {
    v116 = (unint64_t *)&v144->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v193;
  v193 = 0;
  if (v118)
    (*((void (**)(void **))*v118 + 1))(v118);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v193);
  v119 = v193;
  std::string::basic_string[abi:ne180100]<0>(v139, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v139, 0, (uint64_t *)&Scalar);
  v141 = Scalar;
  if (Scalar)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = Scalar;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v142 = v120;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v137, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v119 + 3))(v119, &v141, 0, v137);
  if (v138 < 0)
    operator delete(v137[0]);
  v122 = v142;
  if (v142)
  {
    v123 = (unint64_t *)&v142->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v140 < 0)
    operator delete(v139[0]);
  v126 = *a3;
  v135 = v193;
  if (v193)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v193;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v136 = v127;
  v193 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v126 + 56))(v126, &v135);
  v129 = v136;
  if (v136)
  {
    v130 = (unint64_t *)&v136->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v193;
  v193 = 0;
  if (v132)
    (*((void (**)(void **))*v132 + 1))(v132);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v172, 0);
  result = (uint64_t)v183;
  if (v183)
  {
    v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v183);
    return MEMORY[0x1E0C023A0](v134, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08402E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::GatherAlongAxis::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  void **v62;
  char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char **v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void **v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void **v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void **v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void **v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  void **v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void **v126;
  uint64_t result;
  uint64_t v128;
  void **v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  __int128 v155;
  __int128 v156;
  void *v157[2];
  uint64_t v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  char **v166;
  __n128 v167;
  __n128 v168;
  void *__p;
  void *v170;
  _QWORD *v171;
  void *v172;
  void *v173;
  _QWORD *v174;
  __n128 v175;
  _QWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  _BYTE v179[24];
  _BYTE *v180;
  _QWORD v181[3];
  _QWORD *v182;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char **v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v176 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v185 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v173 = v12 + 2;
  v174 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v172 = v12;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v172);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v170 = v15 + 2;
  v171 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v175);
  MIL::IRParameter::Make(&v175, (uint64_t *)&v159);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v159);
  v16 = v159;
  v159 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v18 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v176;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  p_on_zero_shared = (uint64_t)&v22->~__shared_weak_count_0;
  v185 = (uint64_t)&v22->~__shared_weak_count_0;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v172 = v24;
  *v24 = v23;
  v173 = v24 + 1;
  v174 = v24 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v172);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v170 = v26 + 1;
  v171 = v26 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v168);
  MIL::IRParameter::Make(&v168, (uint64_t *)&v159);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v20, "indices", (uint64_t *)&v159);
  v27 = v159;
  v159 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v29 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v31 = v176;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v186);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "axis", (uint64_t *)&v186);
  v33 = v186;
  v186 = 0;
  if (v33)
    (*((void (**)(void **))*v33 + 1))(v33);
  v34 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v35 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v166 = 0;
  v37 = operator new();
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v37);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v166, 1uLL);
  v38 = v166;
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v172 = v40;
  *v40 = v39;
  v173 = v40 + 1;
  v174 = v40 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v172);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  __p = v42;
  *v42 = v41;
  v170 = v42 + 1;
  v171 = v42 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v159 = v44;
  *v44 = v43;
  v160 = v44 + 1;
  v161 = v44 + 1;
  v185 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v159);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v162);
  MIL::IRParameter::Make(&v162, &v163);
  v45 = v163;
  v164 = v163;
  if (v163)
  {
    v46 = (_QWORD *)operator new();
    v47 = v163;
    *v46 = &unk_1EA99F888;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  v165 = v46;
  v163 = 0;
  v48 = v38[2];
  v49 = v38[1];
  if (v49 >= v48)
  {
    v51 = (v49 - *v38) >> 4;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v53 = v48 - *v38;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
      v54 = 0xFFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    v190 = v38 + 2;
    v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v38 + 2), v54);
    v57 = (uint64_t *)&v55[16 * v51];
    *v57 = v45;
    v57[1] = (uint64_t)v46;
    v164 = 0;
    v165 = 0;
    v59 = *v38;
    v58 = v38[1];
    if (v58 == *v38)
    {
      v62 = (void **)v38[1];
      v60 = &v55[16 * v51];
    }
    else
    {
      v60 = &v55[16 * v51];
      do
      {
        v61 = *((_OWORD *)v58 - 1);
        v58 -= 16;
        *((_OWORD *)v60 - 1) = v61;
        v60 -= 16;
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
      }
      while (v58 != v59);
      v62 = (void **)*v38;
      v58 = v38[1];
    }
    v50 = (char *)(v57 + 2);
    *v38 = v60;
    v186 = v62;
    v187 = (uint64_t)v62;
    v38[1] = (char *)(v57 + 2);
    v188 = (uint64_t)v58;
    v63 = v38[2];
    v38[2] = &v55[16 * v56];
    v189 = v63;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v49 = v45;
    *((_QWORD *)v49 + 1) = v46;
    v50 = v49 + 16;
    v164 = 0;
    v165 = 0;
  }
  v38[1] = v50;
  v64 = v163;
  v163 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v66 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  *(_OWORD *)v157 = *(_OWORD *)a2;
  v158 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v68 = (uint64_t)v176;
  *(_QWORD *)&v156 = v176;
  if (v176)
  {
    v69 = (_QWORD *)operator new();
    *v69 = &unk_1EA99F8E8;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v68;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v156 + 1) = v69;
  v176 = 0;
  *(_QWORD *)&v155 = v166;
  if (v166)
  {
    v70 = (_QWORD *)operator new();
    v71 = v166;
    *v70 = &unk_1EA99F948;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v155 + 1) = v70;
  v166 = 0;
  v181[0] = &unk_1EA99FAC8;
  v181[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateGatherAlongAxis;
  v182 = v181;
  v180 = 0;
  MIL::IROperator::Make((__int128 *)v157, &v156, &v155, (uint64_t)v181, (uint64_t)v179, a3);
  v72 = v180;
  if (v180 == v179)
  {
    v73 = 4;
    v72 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_75;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_75:
  v74 = v182;
  if (v182 == v181)
  {
    v75 = 4;
    v74 = v181;
    goto LABEL_79;
  }
  if (v182)
  {
    v75 = 5;
LABEL_79:
    (*(void (**)(void))(*v74 + 8 * v75))();
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (SHIBYTE(v158) < 0)
    operator delete(v157[0]);
  v82 = *a3;
  v177[0] = &off_1EA99FBD8;
  v177[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherAlongAxis;
  v178 = v177;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v82 + 200))(v82, v177);
  v83 = v178;
  if (v178 == v177)
  {
    v84 = 4;
    v83 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_97;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_97:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v85 = v186;
  std::string::basic_string[abi:ne180100]<0>(v151, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&Scalar);
  v153 = Scalar;
  if (Scalar)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = Scalar;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v154 = v86;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v85 + 3))(v85, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v88 = v154;
  if (v154)
  {
    p_shared_owners = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = Scalar;
  Scalar = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v152 < 0)
    operator delete(v151[0]);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v145, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v148 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v92 + 3))(v92, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v95 = v148;
  if (v148)
  {
    v96 = (unint64_t *)&v148->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v146 < 0)
    operator delete(v145[0]);
  v99 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v141 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v142 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v99 + 3))(v99, &v141, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v102 = v142;
  if (v142)
  {
    v103 = (unint64_t *)&v142->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a3;
  v137 = v186;
  if (v186)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = v186;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v138 = v107;
  v186 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v106 + 56))(v106, &v137);
  v109 = v138;
  if (v138)
  {
    v110 = (unint64_t *)&v138->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v186;
  v186 = 0;
  if (v112)
    (*((void (**)(void **))*v112 + 1))(v112);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v186);
  v113 = v186;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v136 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v113 + 3))(v113, &v135, 0, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v116 = v136;
  if (v136)
  {
    v117 = (unint64_t *)&v136->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v134 < 0)
    operator delete(v133[0]);
  v120 = *a3;
  v129 = v186;
  if (v186)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = v186;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v122;
  }
  else
  {
    v121 = 0;
  }
  v130 = v121;
  v186 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v120 + 56))(v120, &v129);
  v123 = v130;
  if (v130)
  {
    v124 = (unint64_t *)&v130->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v186;
  v186 = 0;
  if (v126)
    (*((void (**)(void **))*v126 + 1))(v126);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = (uint64_t)v176;
  if (v176)
  {
    v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v176);
    return MEMORY[0x1E0C023A0](v128, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0841638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::GatherNd::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  __int128 v61;
  void **v62;
  char *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char **v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  void **v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  std::__shared_weak_count_vtbl *v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  void **v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  void **v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void **v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  void **v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void **v126;
  uint64_t result;
  uint64_t v128;
  void **v129;
  std::__shared_weak_count *v130;
  void *v131[2];
  char v132;
  void *v133[2];
  char v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  void *v139[2];
  char v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149[2];
  char v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  __int128 v155;
  __int128 v156;
  void *v157[2];
  uint64_t v158;
  void *v159;
  void *v160;
  _QWORD *v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  char **v166;
  __n128 v167;
  __n128 v168;
  void *__p;
  void *v170;
  _QWORD *v171;
  void *v172;
  void *v173;
  _QWORD *v174;
  __n128 v175;
  _QWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  _BYTE v179[24];
  _BYTE *v180;
  _QWORD v181[3];
  _QWORD *v182;
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char **v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v176 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v185 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v173 = v12 + 2;
  v174 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v172 = v12;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v172);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v170 = v15 + 2;
  v171 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v175);
  MIL::IRParameter::Make(&v175, (uint64_t *)&v159);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v159);
  v16 = v159;
  v159 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v18 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v176;
  v21 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v22 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v22;
  v22->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  p_on_zero_shared = (uint64_t)&v22->~__shared_weak_count_0;
  v185 = (uint64_t)&v22->~__shared_weak_count_0;
  v186 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&Scalar);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v172 = v24;
  *v24 = v23;
  v173 = v24 + 1;
  v174 = v24 + 1;
  v187 = MIL::IRTensorValueType::MakeWithShape(a1, 15, (uint64_t)&v172);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(8uLL);
  __p = v26;
  *v26 = v25;
  v170 = v26 + 1;
  v171 = v26 + 1;
  v188 = MIL::IRTensorValueType::MakeWithShape(a1, 10, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v186, 3, &v168);
  MIL::IRParameter::Make(&v168, (uint64_t *)&v159);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v20, "indices", (uint64_t *)&v159);
  v27 = v159;
  v159 = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v29 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v31 = v176;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v167);
  MIL::IRParameter::Make(&v167, (uint64_t *)&v186);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v31, "batch_dims", (uint64_t *)&v186);
  v33 = v186;
  v186 = 0;
  if (v33)
    (*((void (**)(void **))*v33 + 1))(v33);
  v34 = (std::__shared_weak_count *)v167.n128_u64[1];
  if (v167.n128_u64[1])
  {
    v35 = (unint64_t *)(v167.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 48))(*((_QWORD *)v32 + 5), 1);
  v166 = 0;
  v37 = operator new();
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  v186 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, (void **)v37);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v186, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v166, 1uLL);
  v38 = v166;
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = operator new(8uLL);
  v172 = v40;
  *v40 = v39;
  v173 = v40 + 1;
  v174 = v40 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v172);
  v41 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v42 = operator new(8uLL);
  __p = v42;
  *v42 = v41;
  v170 = v42 + 1;
  v171 = v42 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v43 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v44 = operator new(8uLL);
  v159 = v44;
  *v44 = v43;
  v160 = v44 + 1;
  v161 = v44 + 1;
  v185 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v159);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v162);
  MIL::IRParameter::Make(&v162, &v163);
  v45 = v163;
  v164 = v163;
  if (v163)
  {
    v46 = (_QWORD *)operator new();
    v47 = v163;
    *v46 = &unk_1EA99F888;
    v46[1] = 0;
    v46[2] = 0;
    v46[3] = v47;
  }
  else
  {
    v46 = 0;
  }
  v165 = v46;
  v163 = 0;
  v48 = v38[2];
  v49 = v38[1];
  if (v49 >= v48)
  {
    v51 = (v49 - *v38) >> 4;
    v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v53 = v48 - *v38;
    if (v53 >> 3 > v52)
      v52 = v53 >> 3;
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF0)
      v54 = 0xFFFFFFFFFFFFFFFLL;
    else
      v54 = v52;
    v190 = v38 + 2;
    v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v38 + 2), v54);
    v57 = (uint64_t *)&v55[16 * v51];
    *v57 = v45;
    v57[1] = (uint64_t)v46;
    v164 = 0;
    v165 = 0;
    v59 = *v38;
    v58 = v38[1];
    if (v58 == *v38)
    {
      v62 = (void **)v38[1];
      v60 = &v55[16 * v51];
    }
    else
    {
      v60 = &v55[16 * v51];
      do
      {
        v61 = *((_OWORD *)v58 - 1);
        v58 -= 16;
        *((_OWORD *)v60 - 1) = v61;
        v60 -= 16;
        *(_QWORD *)v58 = 0;
        *((_QWORD *)v58 + 1) = 0;
      }
      while (v58 != v59);
      v62 = (void **)*v38;
      v58 = v38[1];
    }
    v50 = (char *)(v57 + 2);
    *v38 = v60;
    v186 = v62;
    v187 = (uint64_t)v62;
    v38[1] = (char *)(v57 + 2);
    v188 = (uint64_t)v58;
    v63 = v38[2];
    v38[2] = &v55[16 * v56];
    v189 = v63;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v186);
  }
  else
  {
    *(_QWORD *)v49 = v45;
    *((_QWORD *)v49 + 1) = v46;
    v50 = v49 + 16;
    v164 = 0;
    v165 = 0;
  }
  v38[1] = v50;
  v64 = v163;
  v163 = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v66 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (__p)
  {
    v170 = __p;
    operator delete(__p);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  *(_OWORD *)v157 = *(_OWORD *)a2;
  v158 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v68 = (uint64_t)v176;
  *(_QWORD *)&v156 = v176;
  if (v176)
  {
    v69 = (_QWORD *)operator new();
    *v69 = &unk_1EA99F8E8;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = v68;
  }
  else
  {
    v69 = 0;
  }
  *((_QWORD *)&v156 + 1) = v69;
  v176 = 0;
  *(_QWORD *)&v155 = v166;
  if (v166)
  {
    v70 = (_QWORD *)operator new();
    v71 = v166;
    *v70 = &unk_1EA99F948;
    v70[1] = 0;
    v70[2] = 0;
    v70[3] = v71;
  }
  else
  {
    v70 = 0;
  }
  *((_QWORD *)&v155 + 1) = v70;
  v166 = 0;
  v181[0] = &unk_1EA99FAC8;
  v181[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateGatherNd;
  v182 = v181;
  v180 = 0;
  MIL::IROperator::Make((__int128 *)v157, &v156, &v155, (uint64_t)v181, (uint64_t)v179, a3);
  v72 = v180;
  if (v180 == v179)
  {
    v73 = 4;
    v72 = v179;
  }
  else
  {
    if (!v180)
      goto LABEL_75;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_75:
  v74 = v182;
  if (v182 == v181)
  {
    v75 = 4;
    v74 = v181;
    goto LABEL_79;
  }
  if (v182)
  {
    v75 = 5;
LABEL_79:
    (*(void (**)(void))(*v74 + 8 * v75))();
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (SHIBYTE(v158) < 0)
    operator delete(v157[0]);
  v82 = *a3;
  v177[0] = &off_1EA99FBD8;
  v177[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGatherNd;
  v178 = v177;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v82 + 200))(v82, v177);
  v83 = v178;
  if (v178 == v177)
  {
    v84 = 4;
    v83 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_97;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_97:
  MIL::Validation::TensorDTypeConstraints::Make(&v186);
  v85 = v186;
  std::string::basic_string[abi:ne180100]<0>(v151, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v151, 0, (uint64_t *)&Scalar);
  v153 = Scalar;
  if (Scalar)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v87 = Scalar;
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v87;
  }
  else
  {
    v86 = 0;
  }
  v154 = v86;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v149, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v85 + 3))(v85, &v153, v149);
  if (v150 < 0)
    operator delete(v149[0]);
  v88 = v154;
  if (v154)
  {
    p_shared_owners = (unint64_t *)&v154->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = Scalar;
  Scalar = 0;
  if (v91)
    (*((void (**)(std::__shared_weak_count_vtbl *))v91->~__shared_weak_count + 1))(v91);
  if (v152 < 0)
    operator delete(v151[0]);
  v92 = v186;
  std::string::basic_string[abi:ne180100]<0>(v145, "indices");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v93 = (std::__shared_weak_count *)operator new();
    v94 = Scalar;
    v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v93->__shared_owners_ = 0;
    v93->__shared_weak_owners_ = 0;
    v93[1].__vftable = v94;
  }
  else
  {
    v93 = 0;
  }
  v148 = v93;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "I");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v92 + 3))(v92, &v147, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v95 = v148;
  if (v148)
  {
    v96 = (unint64_t *)&v148->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = Scalar;
  Scalar = 0;
  if (v98)
    (*((void (**)(std::__shared_weak_count_vtbl *))v98->~__shared_weak_count + 1))(v98);
  if (v146 < 0)
    operator delete(v145[0]);
  v99 = v186;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v141 = Scalar;
  if (Scalar)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v101 = Scalar;
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v101;
  }
  else
  {
    v100 = 0;
  }
  v142 = v100;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v139, "U");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v99 + 3))(v99, &v141, v139);
  if (v140 < 0)
    operator delete(v139[0]);
  v102 = v142;
  if (v142)
  {
    v103 = (unint64_t *)&v142->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = Scalar;
  Scalar = 0;
  if (v105)
    (*((void (**)(std::__shared_weak_count_vtbl *))v105->~__shared_weak_count + 1))(v105);
  v106 = *a3;
  v137 = v186;
  if (v186)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = v186;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = (std::__shared_weak_count_vtbl *)v108;
  }
  else
  {
    v107 = 0;
  }
  v138 = v107;
  v186 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v106 + 56))(v106, &v137);
  v109 = v138;
  if (v138)
  {
    v110 = (unint64_t *)&v138->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = v186;
  v186 = 0;
  if (v112)
    (*((void (**)(void **))*v112 + 1))(v112);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v186);
  v113 = v186;
  std::string::basic_string[abi:ne180100]<0>(v133, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v133, 0, (uint64_t *)&Scalar);
  v135 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v136 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v131, "D");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v113 + 3))(v113, &v135, 0, v131);
  if (v132 < 0)
    operator delete(v131[0]);
  v116 = v136;
  if (v136)
  {
    v117 = (unint64_t *)&v136->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v134 < 0)
    operator delete(v133[0]);
  v120 = *a3;
  v129 = v186;
  if (v186)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = v186;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v122;
  }
  else
  {
    v121 = 0;
  }
  v130 = v121;
  v186 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v120 + 56))(v120, &v129);
  v123 = v130;
  if (v130)
  {
    v124 = (unint64_t *)&v130->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v186;
  v186 = 0;
  if (v126)
    (*((void (**)(void **))*v126 + 1))(v126);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v166, 0);
  result = (uint64_t)v176;
  if (v176)
  {
    v128 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v176);
    return MEMORY[0x1E0C023A0](v128, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0842974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void **a58)
{
  uint64_t *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v61 = *(_QWORD *)(v59 - 112);
  *(_QWORD *)(v59 - 112) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *v58;
  *v58 = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a58, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v59 - 240), 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateUpsampleBilinear(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
  const void *ParameterValue;
  const void *v6;
  int v7;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p;
  char v20;
  void *v21;
  char v22;
  const void *v23[2];
  char v24;

  std::string::basic_string[abi:ne180100]<0>(v23, "half_pixel_centers");
  if (MIL::IROperation::IsParameterSet((uint64_t)this, v23))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "half_pixel_centers");
    ParameterValue = (const void *)MIL::IROperation::GetParameterValue(this);
    if (MIL::IRValue::GetScalar<BOOL>(ParameterValue))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "align_corners");
      v6 = (const void *)MIL::IROperation::GetParameterValue(this);
      v7 = MIL::IRValue::GetScalar<BOOL>(v6);
      if (v20 < 0)
        operator delete(__p);
    }
    else
    {
      v7 = 0;
    }
    if (v22 < 0)
      operator delete(v21);
  }
  else
  {
    v7 = 0;
  }
  if (v24 < 0)
  {
    operator delete((void *)v23[0]);
    if (v7)
      goto LABEL_11;
LABEL_22:
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  if (!v7)
    goto LABEL_22;
LABEL_11:
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  v9 = (std::__shared_weak_count *)LocationPtr[1];
  v17 = *LocationPtr;
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "half_pixel_centers is not supported when align_corners is true.");
  MIL::ValidationResult::ValidationResult(a2, &v17, 315, v15);
  if (v16 < 0)
    operator delete(v15[0]);
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1E0842F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceCropResize(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceCropResize(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E0843058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceAffine(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceAffine(a1, a3, a4);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

void sub_1E08430D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Affine::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned __int8 *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  char *v101;
  __int128 v102;
  char *v103;
  char *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  char **v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _OWORD *v123;
  unsigned __int8 *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_owners;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  void *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  void *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  void *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  void *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  void *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200;
  void *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void *v207;
  void *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  void *v214;
  void *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  void *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void *v228;
  void *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  std::__shared_weak_count *v251;
  uint64_t v252;
  uint64_t i;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  uint64_t v260;
  uint64_t j;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  uint64_t v268;
  uint64_t k;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t result;
  uint64_t v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  void *v286[2];
  char v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  void *v290[2];
  char v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  void *v294[2];
  char v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  void *v298[2];
  char v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  void *v302;
  std::__shared_weak_count *v303;
  void *v304[2];
  char v305;
  void *v306;
  std::__shared_weak_count *v307;
  void *v308[2];
  char v309;
  void *v310;
  std::__shared_weak_count *v311;
  void *v312[2];
  char v313;
  void *v314;
  std::__shared_weak_count *v315;
  void *v316[2];
  char v317;
  void *v318;
  std::__shared_weak_count *v319;
  void *v320[2];
  char v321;
  void *v322[2];
  char v323;
  void *v324;
  std::__shared_weak_count *v325;
  void *v326[2];
  char v327;
  void *v328[2];
  char v329;
  void *v330;
  std::__shared_weak_count *v331;
  void *v332[2];
  char v333;
  void *v334[2];
  char v335;
  void *v336;
  std::__shared_weak_count *v337;
  void *v338[2];
  char v339;
  void *v340[2];
  char v341;
  void *v342;
  std::__shared_weak_count *v343;
  void *v344[2];
  char v345;
  void *v346[2];
  char v347;
  void *v348;
  std::__shared_weak_count *v349;
  void *v350;
  std::__shared_weak_count *v351;
  void *v352[2];
  char v353;
  void *v354;
  std::__shared_weak_count *v355;
  void *v356[2];
  char v357;
  void *v358[2];
  char v359;
  void *v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  void *v364[2];
  char v365;
  void *v366;
  std::__shared_weak_count *v367;
  void *v368[2];
  char v369;
  void *v370[2];
  char v371;
  void *v372;
  std::__shared_weak_count *v373;
  std::__shared_weak_count_vtbl *v374;
  std::__shared_weak_count *v375;
  __n128 v376;
  __int128 v377;
  __int128 v378;
  void *v379[2];
  uint64_t v380;
  __n128 v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  char **v385;
  __n128 v386;
  __n128 v387;
  __n128 v388;
  __n128 v389;
  __n128 v390;
  __n128 v391;
  __n128 v392;
  __n128 v393;
  __n128 v394;
  _QWORD *v395;
  void *Scalar;
  uint64_t v397;
  char *v398;
  _QWORD v399[3];
  uint64_t v400[3];
  uint64_t v401[3];
  void *v402[3];
  void *__p;
  void *v404;
  _QWORD *v405;
  _QWORD v406[3];
  _QWORD *v407;
  _BYTE v408[24];
  _BYTE *v409;
  _QWORD v410[3];
  _QWORD *v411;
  std::__shared_weak_count_vtbl *v412;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v414)(std::__shared_weak_count *__hidden);
  uint64_t v415[3];

  v415[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v395 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = (char *)operator new(0x20uLL);
  v398 = v11 + 32;
  *(_QWORD *)v11 = v7;
  *((_QWORD *)v11 + 1) = v8;
  *((_QWORD *)v11 + 2) = v9;
  *((_QWORD *)v11 + 3) = v10;
  Scalar = v11;
  v397 = (uint64_t)(v11 + 32);
  v412 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v405 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  __p = v16;
  v404 = v16 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v412, 2, &v394);
  MIL::IRParameter::Make(&v394, &v383);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v383);
  v17 = v383;
  v383 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v394.n128_u64[1];
  if (v394.n128_u64[1])
  {
    v19 = (unint64_t *)(v394.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v404 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v397 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v21 = v395;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)6);
  v24 = (char *)operator new(0x10uLL);
  v398 = v24 + 16;
  *(_QWORD *)v24 = v22;
  *((_QWORD *)v24 + 1) = v23;
  Scalar = v24;
  v397 = (uint64_t)(v24 + 16);
  v412 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)6);
  v27 = operator new(0x10uLL);
  v405 = v27 + 2;
  *v27 = v25;
  v27[1] = v26;
  __p = v27;
  v404 = v27 + 2;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v412, 2, &v393);
  MIL::IRParameter::Make(&v393, &v383);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v21, "transform_matrix", &v383);
  v28 = v383;
  v383 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = (std::__shared_weak_count *)v393.n128_u64[1];
  if (v393.n128_u64[1])
  {
    v30 = (unint64_t *)(v393.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v404 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v397 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v32 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v392);
  MIL::IRParameter::Make(&v392, (uint64_t *)&Scalar);
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v32, "output_height", (uint64_t *)&Scalar);
  v34 = Scalar;
  Scalar = 0;
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  v35 = (std::__shared_weak_count *)v392.n128_u64[1];
  if (v392.n128_u64[1])
  {
    v36 = (unint64_t *)(v392.n128_u64[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v33 + 5) + 32))(*((_QWORD *)v33 + 5), 1);
  v38 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v391);
  MIL::IRParameter::Make(&v391, (uint64_t *)&Scalar);
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v38, "output_width", (uint64_t *)&Scalar);
  v40 = Scalar;
  Scalar = 0;
  if (v40)
    (*(void (**)(void *))(*(_QWORD *)v40 + 8))(v40);
  v41 = (std::__shared_weak_count *)v391.n128_u64[1];
  if (v391.n128_u64[1])
  {
    v42 = (unint64_t *)(v391.n128_u64[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v39 + 5) + 32))(*((_QWORD *)v39 + 5), 1);
  v44 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v390);
  MIL::IRParameter::Make(&v390, (uint64_t *)&Scalar);
  v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v44, "sampling_mode", (uint64_t *)&Scalar);
  v46 = Scalar;
  Scalar = 0;
  if (v46)
    (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
  v47 = (std::__shared_weak_count *)v390.n128_u64[1];
  if (v390.n128_u64[1])
  {
    v48 = (unint64_t *)(v390.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 5) + 32))(*((_QWORD *)v45 + 5), 1);
  v50 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v389);
  MIL::IRParameter::Make(&v389, (uint64_t *)&Scalar);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v50, "padding_mode", (uint64_t *)&Scalar);
  v52 = Scalar;
  Scalar = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v389.n128_u64[1];
  if (v389.n128_u64[1])
  {
    v54 = (unint64_t *)(v389.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v395;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v397 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v388);
  MIL::IRParameter::Make(&v388, (uint64_t *)&__p);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v56, "padding_value", (uint64_t *)&__p);
  v58 = __p;
  __p = 0;
  if (v58)
    (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v388.n128_u64[1];
  if (v388.n128_u64[1])
  {
    v60 = (unint64_t *)(v388.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 48))(*((_QWORD *)v57 + 5), 1);
  v62 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v387);
  MIL::IRParameter::Make(&v387, (uint64_t *)&Scalar);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v62, "coordinates_mode", (uint64_t *)&Scalar);
  v64 = Scalar;
  Scalar = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v387.n128_u64[1];
  if (v387.n128_u64[1])
  {
    v66 = (unint64_t *)(v387.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  v68 = v395;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v386);
  MIL::IRParameter::Make(&v386, (uint64_t *)&Scalar);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v68, "align_corners", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v386.n128_u64[1];
  if (v386.n128_u64[1])
  {
    v72 = (unint64_t *)(v386.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  v385 = 0;
  v74 = operator new();
  *(_QWORD *)v74 = 0;
  *(_QWORD *)(v74 + 8) = 0;
  *(_QWORD *)(v74 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v385, (void **)v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v385, 1uLL);
  v75 = v385;
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = MIL::IRUnknownDimension::Make(a1, 0);
  v79 = MIL::IRUnknownDimension::Make(a1, 0);
  v80 = operator new(0x20uLL);
  v405 = v80 + 4;
  *v80 = v76;
  v80[1] = v77;
  v80[2] = v78;
  v80[3] = v79;
  __p = v80;
  v404 = v80 + 4;
  v415[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v81 = MIL::IRUnknownDimension::Make(a1, 0);
  v82 = MIL::IRUnknownDimension::Make(a1, 0);
  v83 = MIL::IRUnknownDimension::Make(a1, 0);
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v85->__on_zero_shared_weak;
  v414 = &v85->__on_zero_shared_weak;
  v85->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v81;
  v85->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
  v85->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v83;
  v85->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v84;
  v412 = v85;
  v415[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v412);
  MIL::IRParameter::MakeTypeSet((uint64_t)v415, 2, &v381);
  MIL::IRParameter::Make(&v381, &v382);
  v86 = v382;
  v383 = v382;
  if (v382)
  {
    v87 = (_QWORD *)operator new();
    v88 = v382;
    *v87 = &unk_1EA99F888;
    v87[1] = 0;
    v87[2] = 0;
    v87[3] = v88;
  }
  else
  {
    v87 = 0;
  }
  v384 = v87;
  v382 = 0;
  v89 = v75[2];
  v90 = v75[1];
  if (v90 >= v89)
  {
    v92 = (v90 - *v75) >> 4;
    v93 = v92 + 1;
    if ((unint64_t)(v92 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v94 = v89 - *v75;
    if (v94 >> 3 > v93)
      v93 = v94 >> 3;
    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0)
      v95 = 0xFFFFFFFFFFFFFFFLL;
    else
      v95 = v93;
    v399[1] = v75 + 2;
    v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v75 + 2), v95);
    v98 = (uint64_t *)&v96[16 * v92];
    *v98 = v86;
    v98[1] = (uint64_t)v87;
    v384 = 0;
    v383 = 0;
    v100 = *v75;
    v99 = v75[1];
    if (v99 == *v75)
    {
      v103 = v75[1];
      v101 = &v96[16 * v92];
    }
    else
    {
      v101 = &v96[16 * v92];
      do
      {
        v102 = *((_OWORD *)v99 - 1);
        v99 -= 16;
        *((_OWORD *)v101 - 1) = v102;
        v101 -= 16;
        *(_QWORD *)v99 = 0;
        *((_QWORD *)v99 + 1) = 0;
      }
      while (v99 != v100);
      v103 = *v75;
      v99 = v75[1];
    }
    v91 = (char *)(v98 + 2);
    *v75 = v101;
    v397 = (uint64_t)v103;
    v75[1] = (char *)(v98 + 2);
    v398 = v99;
    v104 = v75[2];
    v75[2] = &v96[16 * v97];
    v399[0] = v104;
    Scalar = v103;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v90 = v86;
    *((_QWORD *)v90 + 1) = v87;
    v91 = v90 + 16;
    v384 = 0;
    v383 = 0;
  }
  v75[1] = v91;
  v105 = v382;
  v382 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = (std::__shared_weak_count *)v381.n128_u64[1];
  if (v381.n128_u64[1])
  {
    v107 = (unint64_t *)(v381.n128_u64[1] + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (v412)
  {
    p_on_zero_shared_weak = (uint64_t)v412;
    operator delete(v412);
  }
  if (__p)
  {
    v404 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v379 = *(_OWORD *)a2;
  v380 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v109 = (uint64_t)v395;
  *(_QWORD *)&v378 = v395;
  if (v395)
  {
    v110 = (_QWORD *)operator new();
    *v110 = &unk_1EA99F8E8;
    v110[1] = 0;
    v110[2] = 0;
    v110[3] = v109;
  }
  else
  {
    v110 = 0;
  }
  *((_QWORD *)&v378 + 1) = v110;
  v395 = 0;
  *(_QWORD *)&v377 = v385;
  if (v385)
  {
    v111 = (_QWORD *)operator new();
    v112 = v385;
    *v111 = &unk_1EA99F948;
    v111[1] = 0;
    v111[2] = 0;
    v111[3] = v112;
  }
  else
  {
    v111 = 0;
  }
  *((_QWORD *)&v377 + 1) = v111;
  v385 = 0;
  v410[0] = &unk_1EA99FAC8;
  v410[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateAffine;
  v411 = v410;
  v409 = 0;
  MIL::IROperator::Make((__int128 *)v379, &v378, &v377, (uint64_t)v410, (uint64_t)v408, a3);
  v113 = v409;
  if (v409 == v408)
  {
    v114 = 4;
    v113 = v408;
  }
  else
  {
    if (!v409)
      goto LABEL_111;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_111:
  v115 = v411;
  if (v411 == v410)
  {
    v116 = 4;
    v115 = v410;
    goto LABEL_115;
  }
  if (v411)
  {
    v116 = 5;
LABEL_115:
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
  v117 = (std::__shared_weak_count *)*((_QWORD *)&v377 + 1);
  if (*((_QWORD *)&v377 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v377 + 1) + 8);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = (std::__shared_weak_count *)*((_QWORD *)&v378 + 1);
  if (*((_QWORD *)&v378 + 1))
  {
    v121 = (unint64_t *)(*((_QWORD *)&v378 + 1) + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (SHIBYTE(v380) < 0)
    operator delete(v379[0]);
  v412 = 0;
  v123 = (_OWORD *)operator new();
  *v123 = 0u;
  v123[1] = 0u;
  *((_DWORD *)v123 + 8) = 1065353216;
  v412 = (std::__shared_weak_count_vtbl *)v123;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v376);
  MIL::IRParameter::Make(&v376, (uint64_t *)&Scalar);
  v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v123, "minimum_compute_type", (uint64_t *)&Scalar);
  v125 = Scalar;
  Scalar = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v376.n128_u64[1];
  if (v376.n128_u64[1])
  {
    v127 = (unint64_t *)(v376.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 32))(*((_QWORD *)v124 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 48))(*((_QWORD *)v124 + 5), 1);
  v129 = *a3;
  v130 = v412;
  v374 = v412;
  if (v412)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v130;
  }
  else
  {
    v131 = 0;
  }
  v375 = v131;
  v412 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v129 + 184))(v129, &v374);
  v132 = v375;
  if (v375)
  {
    p_shared_owners = (unint64_t *)&v375->__shared_owners_;
    do
      v134 = __ldaxr(p_shared_owners);
    while (__stlxr(v134 - 1, p_shared_owners));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = *a3;
  v406[0] = &off_1EA99FBD8;
  v406[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceAffine;
  v407 = v406;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v135 + 200))(v135, v406);
  v136 = v407;
  if (v407 == v406)
  {
    v137 = 4;
    v136 = v406;
  }
  else
  {
    if (!v407)
      goto LABEL_148;
    v137 = 5;
  }
  (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_148:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v138 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v370, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v370, 0, (uint64_t *)&__p);
  v372 = __p;
  if (__p)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)__p;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v373 = v139;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v368, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v138 + 24))(v138, &v372, v368);
  if (v369 < 0)
    operator delete(v368[0]);
  v141 = v373;
  if (v373)
  {
    v142 = (unint64_t *)&v373->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = __p;
  __p = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  if (v371 < 0)
    operator delete(v370[0]);
  v145 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v364, "transform_matrix");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v364, 0, (uint64_t *)&__p);
  v366 = __p;
  if (__p)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = (std::__shared_weak_count_vtbl *)__p;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v367 = v146;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v362, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v145 + 24))(v145, &v366, v362);
  if (v363 < 0)
    operator delete(v362[0]);
  v148 = v367;
  if (v367)
  {
    v149 = (unint64_t *)&v367->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = __p;
  __p = 0;
  if (v151)
    (*(void (**)(void *))(*(_QWORD *)v151 + 8))(v151);
  if (v365 < 0)
    operator delete(v364[0]);
  v152 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v358, "padding_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v358, 1, (uint64_t *)&__p);
  v360 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v361 = v153;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v356, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v152 + 24))(v152, &v360, v356);
  if (v357 < 0)
    operator delete(v356[0]);
  v155 = v361;
  if (v361)
  {
    v156 = (unint64_t *)&v361->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  if (v359 < 0)
    operator delete(v358[0]);
  v159 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v354 = __p;
  if (__p)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = (std::__shared_weak_count_vtbl *)__p;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v355 = v160;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v352, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v159 + 24))(v159, &v354, v352);
  if (v353 < 0)
    operator delete(v352[0]);
  v162 = v355;
  if (v355)
  {
    v163 = (unint64_t *)&v355->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = __p;
  __p = 0;
  if (v165)
    (*(void (**)(void *))(*(_QWORD *)v165 + 8))(v165);
  v166 = *a3;
  v350 = Scalar;
  if (Scalar)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = (std::__shared_weak_count_vtbl *)Scalar;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v351 = v167;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v166 + 56))(v166, &v350);
  v169 = v351;
  if (v351)
  {
    v170 = (unint64_t *)&v351->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = Scalar;
  Scalar = 0;
  if (v172)
    (*(void (**)(void *))(*(_QWORD *)v172 + 8))(v172);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v173 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v346, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v346, 0, (uint64_t *)&__p);
  v348 = __p;
  if (__p)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = (std::__shared_weak_count_vtbl *)__p;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v349 = v174;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v344, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v173 + 24))(v173, &v348, 0, v344);
  if (v345 < 0)
    operator delete(v344[0]);
  v176 = v349;
  if (v349)
  {
    v177 = (unint64_t *)&v349->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = __p;
  __p = 0;
  if (v179)
    (*(void (**)(void *))(*(_QWORD *)v179 + 8))(v179);
  if (v347 < 0)
    operator delete(v346[0]);
  v180 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v340, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v340, 0, (uint64_t *)&__p);
  v342 = __p;
  if (__p)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)__p;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v343 = v181;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v338, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v180 + 24))(v180, &v342, 1, v338);
  if (v339 < 0)
    operator delete(v338[0]);
  v183 = v343;
  if (v343)
  {
    v184 = (unint64_t *)&v343->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = __p;
  __p = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  if (v341 < 0)
    operator delete(v340[0]);
  v187 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v334, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v334, 0, (uint64_t *)&__p);
  v336 = __p;
  if (__p)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = (std::__shared_weak_count_vtbl *)__p;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v337 = v188;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v332, "H_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v187 + 24))(v187, &v336, 2, v332);
  if (v333 < 0)
    operator delete(v332[0]);
  v190 = v337;
  if (v337)
  {
    v191 = (unint64_t *)&v337->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = __p;
  __p = 0;
  if (v193)
    (*(void (**)(void *))(*(_QWORD *)v193 + 8))(v193);
  if (v335 < 0)
    operator delete(v334[0]);
  v194 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v328, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v328, 0, (uint64_t *)&__p);
  v330 = __p;
  if (__p)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = (std::__shared_weak_count_vtbl *)__p;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v331 = v195;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v326, "W_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v194 + 24))(v194, &v330, 3, v326);
  if (v327 < 0)
    operator delete(v326[0]);
  v197 = v331;
  if (v331)
  {
    v198 = (unint64_t *)&v331->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = __p;
  __p = 0;
  if (v200)
    (*(void (**)(void *))(*(_QWORD *)v200 + 8))(v200);
  if (v329 < 0)
    operator delete(v328[0]);
  v201 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v322, "transform_matrix");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v322, 0, (uint64_t *)&__p);
  v324 = __p;
  if (__p)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = (std::__shared_weak_count_vtbl *)__p;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = v203;
  }
  else
  {
    v202 = 0;
  }
  v325 = v202;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v320, "D");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v201 + 24))(v201, &v324, 0, v320);
  if (v321 < 0)
    operator delete(v320[0]);
  v204 = v325;
  if (v325)
  {
    v205 = (unint64_t *)&v325->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = __p;
  __p = 0;
  if (v207)
    (*(void (**)(void *))(*(_QWORD *)v207 + 8))(v207);
  if (v323 < 0)
    operator delete(v322[0]);
  v208 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v318 = __p;
  if (__p)
  {
    v209 = (std::__shared_weak_count *)operator new();
    v210 = (std::__shared_weak_count_vtbl *)__p;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v209->__shared_owners_ = 0;
    v209->__shared_weak_owners_ = 0;
    v209[1].__vftable = v210;
  }
  else
  {
    v209 = 0;
  }
  v319 = v209;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v316, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v208 + 24))(v208, &v318, 0, v316);
  if (v317 < 0)
    operator delete(v316[0]);
  v211 = v319;
  if (v319)
  {
    v212 = (unint64_t *)&v319->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = __p;
  __p = 0;
  if (v214)
    (*(void (**)(void *))(*(_QWORD *)v214 + 8))(v214);
  v215 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v314 = __p;
  if (__p)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = (std::__shared_weak_count_vtbl *)__p;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v315 = v216;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v312, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v215 + 24))(v215, &v314, 1, v312);
  if (v313 < 0)
    operator delete(v312[0]);
  v218 = v315;
  if (v315)
  {
    v219 = (unint64_t *)&v315->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = __p;
  __p = 0;
  if (v221)
    (*(void (**)(void *))(*(_QWORD *)v221 + 8))(v221);
  v222 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v310 = __p;
  if (__p)
  {
    v223 = (std::__shared_weak_count *)operator new();
    v224 = (std::__shared_weak_count_vtbl *)__p;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v223->__shared_owners_ = 0;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v224;
  }
  else
  {
    v223 = 0;
  }
  v311 = v223;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v308, "H_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v222 + 24))(v222, &v310, 2, v308);
  if (v309 < 0)
    operator delete(v308[0]);
  v225 = v311;
  if (v311)
  {
    v226 = (unint64_t *)&v311->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = __p;
  __p = 0;
  if (v228)
    (*(void (**)(void *))(*(_QWORD *)v228 + 8))(v228);
  v229 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v306 = __p;
  if (__p)
  {
    v230 = (std::__shared_weak_count *)operator new();
    v231 = (std::__shared_weak_count_vtbl *)__p;
    v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v230->__shared_owners_ = 0;
    v230->__shared_weak_owners_ = 0;
    v230[1].__vftable = v231;
  }
  else
  {
    v230 = 0;
  }
  v307 = v230;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v304, "W_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v229 + 24))(v229, &v306, 3, v304);
  if (v305 < 0)
    operator delete(v304[0]);
  v232 = v307;
  if (v307)
  {
    v233 = (unint64_t *)&v307->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = __p;
  __p = 0;
  if (v235)
    (*(void (**)(void *))(*(_QWORD *)v235 + 8))(v235);
  v236 = *a3;
  v302 = Scalar;
  if (Scalar)
  {
    v237 = (std::__shared_weak_count *)operator new();
    v238 = (std::__shared_weak_count_vtbl *)Scalar;
    v237->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v237->__shared_owners_ = 0;
    v237->__shared_weak_owners_ = 0;
    v237[1].__vftable = v238;
  }
  else
  {
    v237 = 0;
  }
  v303 = v237;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v236 + 56))(v236, &v302);
  v239 = v303;
  if (v303)
  {
    v240 = (unint64_t *)&v303->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = Scalar;
  Scalar = 0;
  if (v242)
    (*(void (**)(void *))(*(_QWORD *)v242 + 8))(v242);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v383);
  v243 = v383;
  std::string::basic_string[abi:ne180100]<0>(v298, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v298, 0, v415);
  v300 = v415[0];
  if (v415[0])
  {
    v244 = (std::__shared_weak_count *)operator new();
    v245 = v415[0];
    v244->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = (std::__shared_weak_count_vtbl *)v245;
  }
  else
  {
    v244 = 0;
  }
  v301 = v244;
  v415[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bilinear");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 1);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v243 + 24))(v243, &v300, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  if (SHIBYTE(v405) < 0)
    operator delete(__p);
  v246 = v301;
  if (v301)
  {
    v247 = (unint64_t *)&v301->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = v415[0];
  v415[0] = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  if (v299 < 0)
    operator delete(v298[0]);
  v250 = v383;
  std::string::basic_string[abi:ne180100]<0>(v294, "padding_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v294, 0, v415);
  v296 = v415[0];
  if (v415[0])
  {
    v251 = (std::__shared_weak_count *)operator new();
    v252 = v415[0];
    v251->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v251->__shared_owners_ = 0;
    v251->__shared_weak_owners_ = 0;
    v251[1].__vftable = (std::__shared_weak_count_vtbl *)v252;
  }
  else
  {
    v251 = 0;
  }
  v297 = v251;
  v415[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "border");
  std::string::basic_string[abi:ne180100]<0>(v399, "constant");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 2);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v250 + 24))(v250, &v296, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v399[i + 2]) < 0)
      operator delete((void *)v399[i]);
  }
  v254 = v297;
  if (v297)
  {
    v255 = (unint64_t *)&v297->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = v415[0];
  v415[0] = 0;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  if (v295 < 0)
    operator delete(v294[0]);
  v258 = v383;
  std::string::basic_string[abi:ne180100]<0>(v290, "coordinates_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v290, 0, v415);
  v292 = v415[0];
  if (v415[0])
  {
    v259 = (std::__shared_weak_count *)operator new();
    v260 = v415[0];
    v259->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v259->__shared_owners_ = 0;
    v259->__shared_weak_owners_ = 0;
    v259[1].__vftable = (std::__shared_weak_count_vtbl *)v260;
  }
  else
  {
    v259 = 0;
  }
  v293 = v259;
  v415[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "normalized_minus_one_to_one");
  std::string::basic_string[abi:ne180100]<0>(v399, "unnormalized");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 2);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v258 + 24))(v258, &v292, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v399[j + 2]) < 0)
      operator delete((void *)v399[j]);
  }
  v262 = v293;
  if (v293)
  {
    v263 = (unint64_t *)&v293->__shared_owners_;
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  v265 = v415[0];
  v415[0] = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  if (v291 < 0)
    operator delete(v290[0]);
  v266 = v383;
  std::string::basic_string[abi:ne180100]<0>(v286, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v286, 1, v415);
  v288 = v415[0];
  if (v415[0])
  {
    v267 = (std::__shared_weak_count *)operator new();
    v268 = v415[0];
    v267->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v267->__shared_owners_ = 0;
    v267->__shared_weak_owners_ = 0;
    v267[1].__vftable = (std::__shared_weak_count_vtbl *)v268;
  }
  else
  {
    v267 = 0;
  }
  v289 = v267;
  v415[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v399, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v400, "int32");
  std::string::basic_string[abi:ne180100]<0>(v401, "int8");
  std::string::basic_string[abi:ne180100]<0>(v402, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v266 + 24))(v266, &v288, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v402[k + 2]) < 0)
      operator delete(v402[k]);
  }
  v270 = v289;
  if (v289)
  {
    v271 = (unint64_t *)&v289->__shared_owners_;
    do
      v272 = __ldaxr(v271);
    while (__stlxr(v272 - 1, v271));
    if (!v272)
    {
      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
      std::__shared_weak_count::__release_weak(v270);
    }
  }
  v273 = v415[0];
  v415[0] = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  if (v287 < 0)
    operator delete(v286[0]);
  v274 = *a3;
  v284 = v383;
  if (v383)
  {
    v275 = (std::__shared_weak_count *)operator new();
    v276 = v383;
    v275->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v275->__shared_owners_ = 0;
    v275->__shared_weak_owners_ = 0;
    v275[1].__vftable = (std::__shared_weak_count_vtbl *)v276;
  }
  else
  {
    v275 = 0;
  }
  v285 = v275;
  v383 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v274 + 56))(v274, &v284);
  v277 = v285;
  if (v285)
  {
    v278 = (unint64_t *)&v285->__shared_owners_;
    do
      v279 = __ldaxr(v278);
    while (__stlxr(v279 - 1, v278));
    if (!v279)
    {
      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
      std::__shared_weak_count::__release_weak(v277);
    }
  }
  v280 = v383;
  v383 = 0;
  if (v280)
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
  if (v412)
  {
    v281 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v412);
    MEMORY[0x1E0C023A0](v281, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v385, 0);
  result = (uint64_t)v395;
  if (v395)
  {
    v283 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v395);
    return MEMORY[0x1E0C023A0](v283, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E084543C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x410];
  STACK[0x410] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x420], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x4B8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::CropResize::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count_vtbl *v45;
  char **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  unsigned __int8 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  unsigned __int8 *v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  char **v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void *v98;
  _QWORD *v99;
  void *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  __int128 v114;
  char *v115;
  char *v116;
  void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  char **v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _OWORD *v135;
  unsigned __int8 *v136;
  void *v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count *v144;
  unint64_t *p_shared_owners;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  void *v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  void *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void *v163;
  void *v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  void *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  void *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  void *v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  void *v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  void *v205;
  void *v206;
  std::__shared_weak_count *v207;
  std::__shared_weak_count_vtbl *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  void *v219;
  void *v220;
  std::__shared_weak_count *v221;
  std::__shared_weak_count_vtbl *v222;
  uint64_t i;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  uint64_t j;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count_vtbl *v235;
  void *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count_vtbl *v238;
  uint64_t k;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count_vtbl *v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count_vtbl *v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t result;
  uint64_t v253;
  void *v254;
  std::__shared_weak_count *v255;
  void *v256[2];
  char v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  void *v260[2];
  char v261;
  std::__shared_weak_count_vtbl *v262;
  std::__shared_weak_count *v263;
  void *v264[2];
  char v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  void *v268;
  std::__shared_weak_count *v269;
  void *v270[2];
  char v271;
  void *v272[2];
  char v273;
  void *v274;
  std::__shared_weak_count *v275;
  void *v276[2];
  char v277;
  void *v278[2];
  char v279;
  void *v280;
  std::__shared_weak_count *v281;
  void *v282[2];
  char v283;
  void *v284[2];
  char v285;
  void *v286;
  std::__shared_weak_count *v287;
  void *v288[2];
  char v289;
  void *v290[2];
  char v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294;
  std::__shared_weak_count *v295;
  void *v296[2];
  char v297;
  void *v298;
  std::__shared_weak_count *v299;
  void *v300[2];
  char v301;
  void *v302[2];
  char v303;
  void *v304;
  std::__shared_weak_count *v305;
  void *v306[2];
  char v307;
  void *v308[2];
  char v309;
  void *v310;
  std::__shared_weak_count *v311;
  void *v312[2];
  char v313;
  void *v314[2];
  char v315;
  void *v316;
  std::__shared_weak_count *v317;
  std::__shared_weak_count_vtbl *v318;
  std::__shared_weak_count *v319;
  __n128 v320;
  __int128 v321;
  __int128 v322;
  void *v323[2];
  uint64_t v324;
  __n128 v325;
  void *v326;
  __n128 v327;
  __n128 v328;
  __n128 v329;
  __n128 v330;
  __n128 v331;
  __n128 v332;
  __n128 v333;
  void *v334;
  void *v335;
  _QWORD *v336;
  __n128 v337;
  char **v338;
  __n128 v339;
  _QWORD *v340;
  void *Scalar;
  uint64_t v342;
  uint64_t v343;
  _QWORD v344[3];
  _QWORD v345[3];
  _QWORD v346[3];
  void *v347[3];
  void *__p;
  void *v349;
  _QWORD *v350;
  _QWORD v351[3];
  _QWORD *v352;
  _BYTE v353[24];
  _BYTE *v354;
  _BYTE v355[24];
  _BYTE *v356;
  std::__shared_weak_count_vtbl *v357;
  uint64_t v358;
  std::__shared_weak_count_vtbl *v359;
  std::__shared_weak_count_vtbl *v360;
  uint64_t v361;
  std::__shared_weak_count_vtbl *v362;
  uint64_t v363;

  v363 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v340 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x20uLL);
  v343 = (uint64_t)(v11 + 4);
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v10;
  Scalar = v11;
  v342 = (uint64_t)(v11 + 4);
  v360 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v350 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  __p = v16;
  v349 = v16 + 4;
  v361 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v360, 2, &v339);
  MIL::IRParameter::Make(&v339, (uint64_t *)&v334);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v334);
  v17 = v334;
  v334 = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v339.n128_u64[1];
  if (v339.n128_u64[1])
  {
    v19 = (unint64_t *)(v339.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v349 = __p;
    operator delete(__p);
  }
  if (Scalar)
  {
    v342 = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v21 = v340;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v24 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v25 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v26 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v27 = operator new(0x28uLL);
  v350 = v27 + 5;
  *v27 = v22;
  v27[1] = v23;
  v27[2] = v24;
  v27[3] = v25;
  v27[4] = v26;
  __p = v27;
  v349 = v27 + 5;
  Scalar = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v30 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)4);
  v31 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v32 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v33 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
  v361 = (uint64_t)&v33[1];
  v362 = v33 + 1;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v33->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v33->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v30;
  v33->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v31;
  v33->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  v360 = v33;
  v342 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v360);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v36 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)5);
  v37 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v38 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v39 = operator new(0x28uLL);
  v336 = v39 + 5;
  *v39 = v34;
  v39[1] = v35;
  v39[2] = v36;
  v39[3] = v37;
  v39[4] = v38;
  v334 = v39;
  v335 = v39 + 5;
  v343 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v334);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v42 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)5);
  v43 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v44 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)1);
  v45 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
  v358 = (uint64_t)&v45[1];
  v359 = v45 + 1;
  v45->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v40;
  v45->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
  v45->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v42;
  v45->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v43;
  v45->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v44;
  v357 = v45;
  v344[0] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v357);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 4, &v337);
  MIL::IRParameter::Make(&v337, (uint64_t *)&v338);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v21, "roi", (uint64_t *)&v338);
  v46 = v338;
  v338 = 0;
  if (v46)
    (*((void (**)(char **))*v46 + 1))(v46);
  v47 = (std::__shared_weak_count *)v337.n128_u64[1];
  if (v337.n128_u64[1])
  {
    v48 = (unint64_t *)(v337.n128_u64[1] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  if (v357)
  {
    v358 = (uint64_t)v357;
    operator delete(v357);
  }
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  if (v360)
  {
    v361 = (uint64_t)v360;
    operator delete(v360);
  }
  if (__p)
  {
    v349 = __p;
    operator delete(__p);
  }
  v50 = v340;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v333);
  MIL::IRParameter::Make(&v333, (uint64_t *)&Scalar);
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v50, "target_height", (uint64_t *)&Scalar);
  v52 = Scalar;
  Scalar = 0;
  if (v52)
    (*(void (**)(void *))(*(_QWORD *)v52 + 8))(v52);
  v53 = (std::__shared_weak_count *)v333.n128_u64[1];
  if (v333.n128_u64[1])
  {
    v54 = (unint64_t *)(v333.n128_u64[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v51 + 5) + 32))(*((_QWORD *)v51 + 5), 1);
  v56 = v340;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v332);
  MIL::IRParameter::Make(&v332, (uint64_t *)&Scalar);
  v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v56, "target_width", (uint64_t *)&Scalar);
  v58 = Scalar;
  Scalar = 0;
  if (v58)
    (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v332.n128_u64[1];
  if (v332.n128_u64[1])
  {
    v60 = (unint64_t *)(v332.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v57 + 5) + 32))(*((_QWORD *)v57 + 5), 1);
  v62 = v340;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v331);
  MIL::IRParameter::Make(&v331, (uint64_t *)&Scalar);
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[23],std::unique_ptr<MIL::IRParameter>>(v62, "normalized_coordinates", (uint64_t *)&Scalar);
  v64 = Scalar;
  Scalar = 0;
  if (v64)
    (*(void (**)(void *))(*(_QWORD *)v64 + 8))(v64);
  v65 = (std::__shared_weak_count *)v331.n128_u64[1];
  if (v331.n128_u64[1])
  {
    v66 = (unint64_t *)(v331.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v63 + 5) + 32))(*((_QWORD *)v63 + 5), 1);
  v68 = v340;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v330);
  MIL::IRParameter::Make(&v330, (uint64_t *)&Scalar);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v68, "spatial_scale", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v330.n128_u64[1];
  if (v330.n128_u64[1])
  {
    v72 = (unint64_t *)(v330.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  v74 = v340;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v329);
  MIL::IRParameter::Make(&v329, (uint64_t *)&Scalar);
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v74, "box_coordinate_mode", (uint64_t *)&Scalar);
  v76 = Scalar;
  Scalar = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = (std::__shared_weak_count *)v329.n128_u64[1];
  if (v329.n128_u64[1])
  {
    v78 = (unint64_t *)(v329.n128_u64[1] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  v80 = v340;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v328);
  MIL::IRParameter::Make(&v328, (uint64_t *)&Scalar);
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v80, "sampling_mode", (uint64_t *)&Scalar);
  v82 = Scalar;
  Scalar = 0;
  if (v82)
    (*(void (**)(void *))(*(_QWORD *)v82 + 8))(v82);
  v83 = (std::__shared_weak_count *)v328.n128_u64[1];
  if (v328.n128_u64[1])
  {
    v84 = (unint64_t *)(v328.n128_u64[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v81 + 5) + 32))(*((_QWORD *)v81 + 5), 1);
  v86 = v340;
  Scalar = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v342 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 2, &v327);
  MIL::IRParameter::Make(&v327, (uint64_t *)&__p);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v86, "pad_value", (uint64_t *)&__p);
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v327.n128_u64[1];
  if (v327.n128_u64[1])
  {
    v90 = (unint64_t *)(v327.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 48))(*((_QWORD *)v87 + 5), 1);
  v338 = 0;
  v92 = operator new();
  *(_QWORD *)v92 = 0;
  *(_QWORD *)(v92 + 8) = 0;
  *(_QWORD *)(v92 + 16) = 0;
  Scalar = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v338, (void **)v92);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&Scalar, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v338, 1uLL);
  v93 = v338;
  v94 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v95 = operator new(8uLL);
  __p = v95;
  *v95 = v94;
  v350 = v95 + 1;
  v349 = v95 + 1;
  v357 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v96 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v97 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v360 = v97;
  v97->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v96;
  v361 = (uint64_t)&v97->~__shared_weak_count_0;
  v362 = (std::__shared_weak_count_vtbl *)&v97->~__shared_weak_count_0;
  v358 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v360);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v357, 2, &v325);
  MIL::IRParameter::Make(&v325, (uint64_t *)&v326);
  v98 = v326;
  v334 = v326;
  if (v326)
  {
    v99 = (_QWORD *)operator new();
    v100 = v326;
    *v99 = &unk_1EA99F888;
    v99[1] = 0;
    v99[2] = 0;
    v99[3] = v100;
  }
  else
  {
    v99 = 0;
  }
  v335 = v99;
  v326 = 0;
  v101 = v93[2];
  v102 = v93[1];
  if (v102 >= v101)
  {
    v104 = (v102 - *v93) >> 4;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v106 = v101 - *v93;
    if (v106 >> 3 > v105)
      v105 = v106 >> 3;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0)
      v107 = 0xFFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    v344[1] = v93 + 2;
    v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v93 + 2), v107);
    v110 = &v108[16 * v104];
    *(_QWORD *)v110 = v98;
    *((_QWORD *)v110 + 1) = v99;
    v335 = 0;
    v334 = 0;
    v112 = *v93;
    v111 = v93[1];
    if (v111 == *v93)
    {
      v115 = v93[1];
      v113 = &v108[16 * v104];
    }
    else
    {
      v113 = &v108[16 * v104];
      do
      {
        v114 = *((_OWORD *)v111 - 1);
        v111 -= 16;
        *((_OWORD *)v113 - 1) = v114;
        v113 -= 16;
        *(_QWORD *)v111 = 0;
        *((_QWORD *)v111 + 1) = 0;
      }
      while (v111 != v112);
      v115 = *v93;
      v111 = v93[1];
    }
    v103 = v110 + 16;
    *v93 = v113;
    v342 = (uint64_t)v115;
    v93[1] = v110 + 16;
    v343 = (uint64_t)v111;
    v116 = v93[2];
    v93[2] = &v108[16 * v109];
    v344[0] = v116;
    Scalar = v115;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&Scalar);
  }
  else
  {
    *(_QWORD *)v102 = v98;
    *((_QWORD *)v102 + 1) = v99;
    v103 = v102 + 16;
    v335 = 0;
    v334 = 0;
  }
  v93[1] = v103;
  v117 = v326;
  v326 = 0;
  if (v117)
    (*(void (**)(void *))(*(_QWORD *)v117 + 8))(v117);
  v118 = (std::__shared_weak_count *)v325.n128_u64[1];
  if (v325.n128_u64[1])
  {
    v119 = (unint64_t *)(v325.n128_u64[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v360)
  {
    v361 = (uint64_t)v360;
    operator delete(v360);
  }
  if (__p)
  {
    v349 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v323 = *(_OWORD *)a2;
  v324 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v121 = (uint64_t)v340;
  *(_QWORD *)&v322 = v340;
  if (v340)
  {
    v122 = (_QWORD *)operator new();
    *v122 = &unk_1EA99F8E8;
    v122[1] = 0;
    v122[2] = 0;
    v122[3] = v121;
  }
  else
  {
    v122 = 0;
  }
  *((_QWORD *)&v322 + 1) = v122;
  v340 = 0;
  *(_QWORD *)&v321 = v338;
  if (v338)
  {
    v123 = (_QWORD *)operator new();
    v124 = v338;
    *v123 = &unk_1EA99F948;
    v123[1] = 0;
    v123[2] = 0;
    v123[3] = v124;
  }
  else
  {
    v123 = 0;
  }
  *((_QWORD *)&v321 + 1) = v123;
  v338 = 0;
  v356 = 0;
  v354 = 0;
  MIL::IROperator::Make((__int128 *)v323, &v322, &v321, (uint64_t)v355, (uint64_t)v353, a3);
  v125 = v354;
  if (v354 == v353)
  {
    v126 = 4;
    v125 = v353;
  }
  else
  {
    if (!v354)
      goto LABEL_115;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_115:
  v127 = v356;
  if (v356 == v355)
  {
    v128 = 4;
    v127 = v355;
    goto LABEL_119;
  }
  if (v356)
  {
    v128 = 5;
LABEL_119:
    (*(void (**)(void))(*v127 + 8 * v128))();
  }
  v129 = (std::__shared_weak_count *)*((_QWORD *)&v321 + 1);
  if (*((_QWORD *)&v321 + 1))
  {
    v130 = (unint64_t *)(*((_QWORD *)&v321 + 1) + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
  if (*((_QWORD *)&v322 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (SHIBYTE(v324) < 0)
    operator delete(v323[0]);
  v360 = 0;
  v135 = (_OWORD *)operator new();
  *v135 = 0u;
  v135[1] = 0u;
  *((_DWORD *)v135 + 8) = 1065353216;
  v360 = (std::__shared_weak_count_vtbl *)v135;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v320);
  MIL::IRParameter::Make(&v320, (uint64_t *)&Scalar);
  v136 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v135, "minimum_compute_type", (uint64_t *)&Scalar);
  v137 = Scalar;
  Scalar = 0;
  if (v137)
    (*(void (**)(void *))(*(_QWORD *)v137 + 8))(v137);
  v138 = (std::__shared_weak_count *)v320.n128_u64[1];
  if (v320.n128_u64[1])
  {
    v139 = (unint64_t *)(v320.n128_u64[1] + 8);
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v136 + 5) + 32))(*((_QWORD *)v136 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v136 + 5) + 48))(*((_QWORD *)v136 + 5), 1);
  v141 = *a3;
  v142 = v360;
  v318 = v360;
  if (v360)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v142;
  }
  else
  {
    v143 = 0;
  }
  v319 = v143;
  v360 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v141 + 184))(v141, &v318);
  v144 = v319;
  if (v319)
  {
    p_shared_owners = (unint64_t *)&v319->__shared_owners_;
    do
      v146 = __ldaxr(p_shared_owners);
    while (__stlxr(v146 - 1, p_shared_owners));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = *a3;
  v351[0] = &off_1EA99FBD8;
  v351[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceCropResize;
  v352 = v351;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v147 + 200))(v147, v351);
  v148 = v352;
  if (v352 == v351)
  {
    v149 = 4;
    v148 = v351;
  }
  else
  {
    if (!v352)
      goto LABEL_152;
    v149 = 5;
  }
  (*(void (**)(void))(*v148 + 8 * v149))();
LABEL_152:
  MIL::Validation::TensorDTypeConstraints::Make(&Scalar);
  v150 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v314, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v314, 0, (uint64_t *)&__p);
  v316 = __p;
  if (__p)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = (std::__shared_weak_count_vtbl *)__p;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v317 = v151;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v312, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v150 + 24))(v150, &v316, v312);
  if (v313 < 0)
    operator delete(v312[0]);
  v153 = v317;
  if (v317)
  {
    v154 = (unint64_t *)&v317->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  if (v315 < 0)
    operator delete(v314[0]);
  v157 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v308, "roi");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v308, 0, (uint64_t *)&__p);
  v310 = __p;
  if (__p)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = (std::__shared_weak_count_vtbl *)__p;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v311 = v158;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v306, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v157 + 24))(v157, &v310, v306);
  if (v307 < 0)
    operator delete(v306[0]);
  v160 = v311;
  if (v311)
  {
    v161 = (unint64_t *)&v311->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = __p;
  __p = 0;
  if (v163)
    (*(void (**)(void *))(*(_QWORD *)v163 + 8))(v163);
  if (v309 < 0)
    operator delete(v308[0]);
  v164 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v302, "pad_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v302, 1, (uint64_t *)&__p);
  v304 = __p;
  if (__p)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = (std::__shared_weak_count_vtbl *)__p;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v305 = v165;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v300, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v164 + 24))(v164, &v304, v300);
  if (v301 < 0)
    operator delete(v300[0]);
  v167 = v305;
  if (v305)
  {
    v168 = (unint64_t *)&v305->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = __p;
  __p = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  if (v303 < 0)
    operator delete(v302[0]);
  v171 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v298 = __p;
  if (__p)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = (std::__shared_weak_count_vtbl *)__p;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v299 = v172;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v296, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v171 + 24))(v171, &v298, v296);
  if (v297 < 0)
    operator delete(v296[0]);
  v174 = v299;
  if (v299)
  {
    v175 = (unint64_t *)&v299->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = __p;
  __p = 0;
  if (v177)
    (*(void (**)(void *))(*(_QWORD *)v177 + 8))(v177);
  v178 = *a3;
  v294 = Scalar;
  if (Scalar)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = (std::__shared_weak_count_vtbl *)Scalar;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v295 = v179;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v178 + 56))(v178, &v294);
  v181 = v295;
  if (v295)
  {
    v182 = (unint64_t *)&v295->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = Scalar;
  Scalar = 0;
  if (v184)
    (*(void (**)(void *))(*(_QWORD *)v184 + 8))(v184);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&Scalar);
  v185 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v290, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v290, 0, (uint64_t *)&__p);
  v292 = __p;
  if (__p)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = (std::__shared_weak_count_vtbl *)__p;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v293 = v186;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v288, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v185 + 24))(v185, &v292, 0, v288);
  if (v289 < 0)
    operator delete(v288[0]);
  v188 = v293;
  if (v293)
  {
    v189 = (unint64_t *)&v293->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = __p;
  __p = 0;
  if (v191)
    (*(void (**)(void *))(*(_QWORD *)v191 + 8))(v191);
  if (v291 < 0)
    operator delete(v290[0]);
  v192 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v284, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v284, 0, (uint64_t *)&__p);
  v286 = __p;
  if (__p)
  {
    v193 = (std::__shared_weak_count *)operator new();
    v194 = (std::__shared_weak_count_vtbl *)__p;
    v193->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v193->__shared_owners_ = 0;
    v193->__shared_weak_owners_ = 0;
    v193[1].__vftable = v194;
  }
  else
  {
    v193 = 0;
  }
  v287 = v193;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v282, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v192 + 24))(v192, &v286, 1, v282);
  if (v283 < 0)
    operator delete(v282[0]);
  v195 = v287;
  if (v287)
  {
    v196 = (unint64_t *)&v287->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = __p;
  __p = 0;
  if (v198)
    (*(void (**)(void *))(*(_QWORD *)v198 + 8))(v198);
  if (v285 < 0)
    operator delete(v284[0]);
  v199 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v278, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v278, 0, (uint64_t *)&__p);
  v280 = __p;
  if (__p)
  {
    v200 = (std::__shared_weak_count *)operator new();
    v201 = (std::__shared_weak_count_vtbl *)__p;
    v200->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v200->__shared_owners_ = 0;
    v200->__shared_weak_owners_ = 0;
    v200[1].__vftable = v201;
  }
  else
  {
    v200 = 0;
  }
  v281 = v200;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v276, "H");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v199 + 24))(v199, &v280, 2, v276);
  if (v277 < 0)
    operator delete(v276[0]);
  v202 = v281;
  if (v281)
  {
    v203 = (unint64_t *)&v281->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = __p;
  __p = 0;
  if (v205)
    (*(void (**)(void *))(*(_QWORD *)v205 + 8))(v205);
  if (v279 < 0)
    operator delete(v278[0]);
  v206 = Scalar;
  std::string::basic_string[abi:ne180100]<0>(v272, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v272, 0, (uint64_t *)&__p);
  v274 = __p;
  if (__p)
  {
    v207 = (std::__shared_weak_count *)operator new();
    v208 = (std::__shared_weak_count_vtbl *)__p;
    v207->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v207->__shared_owners_ = 0;
    v207->__shared_weak_owners_ = 0;
    v207[1].__vftable = v208;
  }
  else
  {
    v207 = 0;
  }
  v275 = v207;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v270, "W");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v206 + 24))(v206, &v274, 3, v270);
  if (v271 < 0)
    operator delete(v270[0]);
  v209 = v275;
  if (v275)
  {
    v210 = (unint64_t *)&v275->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  v212 = __p;
  __p = 0;
  if (v212)
    (*(void (**)(void *))(*(_QWORD *)v212 + 8))(v212);
  if (v273 < 0)
    operator delete(v272[0]);
  v213 = *a3;
  v268 = Scalar;
  if (Scalar)
  {
    v214 = (std::__shared_weak_count *)operator new();
    v215 = (std::__shared_weak_count_vtbl *)Scalar;
    v214->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v214->__shared_owners_ = 0;
    v214->__shared_weak_owners_ = 0;
    v214[1].__vftable = v215;
  }
  else
  {
    v214 = 0;
  }
  v269 = v214;
  Scalar = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v213 + 56))(v213, &v268);
  v216 = v269;
  if (v269)
  {
    v217 = (unint64_t *)&v269->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v219 = Scalar;
  Scalar = 0;
  if (v219)
    (*(void (**)(void *))(*(_QWORD *)v219 + 8))(v219);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v334);
  v220 = v334;
  std::string::basic_string[abi:ne180100]<0>(v264, "box_coordinate_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v264, 0, (uint64_t *)&v357);
  v266 = v357;
  if (v357)
  {
    v221 = (std::__shared_weak_count *)operator new();
    v222 = v357;
    v221->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v221->__shared_owners_ = 0;
    v221->__shared_weak_owners_ = 0;
    v221[1].__vftable = v222;
  }
  else
  {
    v221 = 0;
  }
  v267 = v221;
  v357 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "CENTER_SIZE_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v344, "CENTER_SIZE_WIDTH_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v345, "CORNERS_HEIGHT_FIRST");
  std::string::basic_string[abi:ne180100]<0>(v346, "CORNERS_WIDTH_FIRST");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 4);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v220 + 24))(v220, &v266, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v346[i + 2]) < 0)
      operator delete((void *)v346[i]);
  }
  v224 = v267;
  if (v267)
  {
    v225 = (unint64_t *)&v267->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v357;
  v357 = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v265 < 0)
    operator delete(v264[0]);
  v228 = v334;
  std::string::basic_string[abi:ne180100]<0>(v260, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v260, 0, (uint64_t *)&v357);
  v262 = v357;
  if (v357)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = v357;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v263 = v229;
  v357 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v344, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v345, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v346, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v347, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v228 + 24))(v228, &v262, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v347[j + 2]) < 0)
      operator delete(v347[j]);
  }
  v232 = v263;
  if (v263)
  {
    v233 = (unint64_t *)&v263->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = v357;
  v357 = 0;
  if (v235)
    (*((void (**)(std::__shared_weak_count_vtbl *))v235->~__shared_weak_count + 1))(v235);
  if (v261 < 0)
    operator delete(v260[0]);
  v236 = v334;
  std::string::basic_string[abi:ne180100]<0>(v256, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v256, 1, (uint64_t *)&v357);
  v258 = v357;
  if (v357)
  {
    v237 = (std::__shared_weak_count *)operator new();
    v238 = v357;
    v237->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v237->__shared_owners_ = 0;
    v237->__shared_weak_owners_ = 0;
    v237[1].__vftable = v238;
  }
  else
  {
    v237 = 0;
  }
  v259 = v237;
  v357 = 0;
  std::string::basic_string[abi:ne180100]<0>(&Scalar, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v344, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v345, "int32");
  std::string::basic_string[abi:ne180100]<0>(v346, "int8");
  std::string::basic_string[abi:ne180100]<0>(v347, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&Scalar, 5);
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **, uint64_t))(*(_QWORD *)v236 + 24))(v236, &v258, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v347[k + 2]) < 0)
      operator delete(v347[k]);
  }
  v240 = v259;
  if (v259)
  {
    v241 = (unint64_t *)&v259->__shared_owners_;
    do
      v242 = __ldaxr(v241);
    while (__stlxr(v242 - 1, v241));
    if (!v242)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }
  v243 = v357;
  v357 = 0;
  if (v243)
    (*((void (**)(std::__shared_weak_count_vtbl *))v243->~__shared_weak_count + 1))(v243);
  if (v257 < 0)
    operator delete(v256[0]);
  v244 = *a3;
  v254 = v334;
  if (v334)
  {
    v245 = (std::__shared_weak_count *)operator new();
    v246 = (std::__shared_weak_count_vtbl *)v334;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v245->__shared_owners_ = 0;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v246;
  }
  else
  {
    v245 = 0;
  }
  v255 = v245;
  v334 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v244 + 56))(v244, &v254);
  v247 = v255;
  if (v255)
  {
    v248 = (unint64_t *)&v255->__shared_owners_;
    do
      v249 = __ldaxr(v248);
    while (__stlxr(v249 - 1, v248));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
    }
  }
  v250 = v334;
  v334 = 0;
  if (v250)
    (*(void (**)(void *))(*(_QWORD *)v250 + 8))(v250);
  if (v360)
  {
    v251 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v360);
    MEMORY[0x1E0C023A0](v251, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v338, 0);
  result = (uint64_t)v340;
  if (v340)
  {
    v253 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v340);
    return MEMORY[0x1E0C023A0](v253, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0847E24(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x370];
  STACK[0x370] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x398], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x3B0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Resample::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _anonymous_namespace_ *Scalar;
  std::__shared_weak_count *v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  void *v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _anonymous_namespace_ *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  unsigned __int8 *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  unsigned __int8 *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned __int8 *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  void *v111;
  _QWORD *v112;
  void *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  __int128 v127;
  char *v128;
  char *v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  char **v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  _OWORD *v148;
  unsigned __int8 *v149;
  void *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  void *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  std::__shared_weak_count *v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void *v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  void *v183;
  void *v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  void *v197;
  void *v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count_vtbl *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  void *v204;
  void *v205;
  std::__shared_weak_count *v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  void *v211;
  void *v212;
  std::__shared_weak_count *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  void *v218;
  void *v219;
  std::__shared_weak_count *v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  void *v225;
  void *v226;
  std::__shared_weak_count *v227;
  std::__shared_weak_count_vtbl *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  void *v232;
  void *v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void *v239;
  void *v240;
  std::__shared_weak_count *v241;
  std::__shared_weak_count_vtbl *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  void *v246;
  void *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  void *v253;
  void *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  void *v260;
  void *v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  void *v267;
  void *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  void *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  void *v281;
  void *v282;
  std::__shared_weak_count *v283;
  uint64_t v284;
  uint64_t i;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  void *v290;
  std::__shared_weak_count *v291;
  uint64_t v292;
  uint64_t j;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  void *v298;
  std::__shared_weak_count *v299;
  uint64_t v300;
  uint64_t k;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  void *v306;
  std::__shared_weak_count *v307;
  uint64_t v308;
  uint64_t m;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  void *v314;
  std::__shared_weak_count *v315;
  uint64_t v316;
  uint64_t n;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  void *v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  uint64_t ii;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  std::__shared_weak_count_vtbl *v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t result;
  uint64_t v339;
  void *v340;
  std::__shared_weak_count *v341;
  void *v342[2];
  char v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  void *v346[2];
  char v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  void *v350[2];
  char v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  void *v354[2];
  char v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  void *v358[2];
  char v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  void *v362[2];
  char v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  void *v366;
  std::__shared_weak_count *v367;
  void *v368[2];
  char v369;
  void *v370;
  std::__shared_weak_count *v371;
  void *v372[2];
  char v373;
  void *v374;
  std::__shared_weak_count *v375;
  void *v376[2];
  char v377;
  void *v378;
  std::__shared_weak_count *v379;
  void *v380[2];
  char v381;
  void *v382;
  std::__shared_weak_count *v383;
  void *v384[2];
  char v385;
  void *v386[2];
  char v387;
  void *v388;
  std::__shared_weak_count *v389;
  void *v390[2];
  char v391;
  void *v392[2];
  char v393;
  void *v394;
  std::__shared_weak_count *v395;
  void *v396[2];
  char v397;
  void *v398[2];
  char v399;
  void *v400;
  std::__shared_weak_count *v401;
  void *v402[2];
  char v403;
  void *v404[2];
  char v405;
  void *v406;
  std::__shared_weak_count *v407;
  void *v408[2];
  char v409;
  void *v410[2];
  char v411;
  void *v412;
  std::__shared_weak_count *v413;
  void *v414[2];
  char v415;
  void *v416[2];
  char v417;
  void *v418;
  std::__shared_weak_count *v419;
  void *v420[2];
  char v421;
  void *v422[2];
  char v423;
  void *v424;
  std::__shared_weak_count *v425;
  void *v426;
  std::__shared_weak_count *v427;
  void *v428[2];
  char v429;
  void *v430;
  std::__shared_weak_count *v431;
  void *v432[2];
  char v433;
  void *v434[2];
  char v435;
  void *v436;
  std::__shared_weak_count *v437;
  void *v438[2];
  char v439;
  void *v440[2];
  char v441;
  void *v442;
  std::__shared_weak_count *v443;
  void *v444[2];
  char v445;
  void *v446[2];
  char v447;
  void *v448;
  std::__shared_weak_count *v449;
  std::__shared_weak_count_vtbl *v450;
  std::__shared_weak_count *v451;
  __n128 v452;
  __int128 v453;
  __int128 v454;
  void *v455[2];
  uint64_t v456;
  __n128 v457;
  void *v458;
  char **v459;
  __n128 v460;
  __n128 v461;
  __n128 v462;
  __n128 v463;
  __n128 v464;
  void *v465[2];
  char v466;
  void *v467;
  std::__shared_weak_count *v468;
  __n128 v469;
  void *v470[2];
  char v471;
  void *v472;
  std::__shared_weak_count *v473;
  __n128 v474;
  void *v475;
  void *v476;
  _QWORD *v477;
  __n128 v478;
  __n128 v479;
  _QWORD *v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  _QWORD v484[3];
  _QWORD v485[3];
  _QWORD v486[3];
  void *v487[3];
  void *__p;
  void *v489;
  _QWORD *v490;
  _QWORD v491[3];
  _QWORD *v492;
  _BYTE v493[24];
  _BYTE *v494;
  _BYTE v495[24];
  _BYTE *v496;
  uint64_t v497[2];
  std::__shared_weak_count_vtbl *v498;
  uint64_t p_on_zero_shared_weak;
  void (__cdecl **v500)(std::__shared_weak_count *__hidden);
  uint64_t v501;

  v501 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v480 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = operator new(0x20uLL);
  v483 = (uint64_t)(v11 + 4);
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v10;
  v481 = v11;
  v482 = (uint64_t)(v11 + 4);
  v498 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v481);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, 0);
  v16 = operator new(0x20uLL);
  v490 = v16 + 4;
  *v16 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  __p = v16;
  v489 = v16 + 4;
  p_on_zero_shared_weak = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v498, 2, &v479);
  MIL::IRParameter::Make(&v479, (uint64_t *)&v475);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v475);
  v17 = v475;
  v475 = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v479.n128_u64[1];
  if (v479.n128_u64[1])
  {
    v19 = (unint64_t *)(v479.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v489 = __p;
    operator delete(__p);
  }
  if (v481)
  {
    v482 = (uint64_t)v481;
    operator delete(v481);
  }
  v21 = v480;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = MIL::IRUnknownDimension::Make(a1, 0);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v26 = operator new(0x20uLL);
  v490 = v26 + 4;
  *v26 = v22;
  v26[1] = v23;
  v26[2] = v24;
  v26[3] = v25;
  __p = v26;
  v489 = v26 + 4;
  v481 = (void *)MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = MIL::IRUnknownDimension::Make(a1, 0);
  v30 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v31 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v31->__on_zero_shared_weak;
  v500 = &v31->__on_zero_shared_weak;
  v31->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v31->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v31->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v29;
  v31->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v30;
  v498 = v31;
  v482 = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v498);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = MIL::IRConstantDimension::Make(a1, (MIL::MILContext *)2);
  v36 = operator new(0x20uLL);
  v477 = v36 + 4;
  *v36 = v32;
  v36[1] = v33;
  v36[2] = v34;
  v36[3] = v35;
  v475 = v36;
  v476 = v36 + 4;
  v483 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v475);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v481, 3, &v478);
  MIL::IRParameter::Make(&v478, v497);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v21, "coordinates", v497);
  v37 = v497[0];
  v497[0] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = (std::__shared_weak_count *)v478.n128_u64[1];
  if (v478.n128_u64[1])
  {
    v39 = (unint64_t *)(v478.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v475)
  {
    v476 = v475;
    operator delete(v475);
  }
  if (v498)
  {
    p_on_zero_shared_weak = (uint64_t)v498;
    operator delete(v498);
  }
  if (__p)
  {
    v489 = __p;
    operator delete(__p);
  }
  v41 = v480;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v474);
  MIL::IRParameter::Make(&v474, (uint64_t *)&v481);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v41, "coordinates_format", (uint64_t *)&v481);
  v43 = v481;
  v481 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v474.n128_u64[1];
  if (v474.n128_u64[1])
  {
    v45 = (unint64_t *)(v474.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = *((_QWORD *)v42 + 5);
  Scalar = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  std::string::basic_string[abi:ne180100]<0>(v470, "xy");
  MIL::IRTensorValueType::MakeStringValue(Scalar, (const MIL::IRTensorValueType *)v470, &v481);
  v472 = v481;
  if (v481)
  {
    v49 = (std::__shared_weak_count *)operator new();
    v50 = (std::__shared_weak_count_vtbl *)v481;
    v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49[1].__vftable = v50;
  }
  else
  {
    v49 = 0;
  }
  v473 = v49;
  v481 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v47 + 112))(v47, &v472);
  v51 = v473;
  if (v473)
  {
    p_shared_owners = (unint64_t *)&v473->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v481;
  v481 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  if (v471 < 0)
    operator delete(v470[0]);
  v55 = v480;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v469);
  MIL::IRParameter::Make(&v469, (uint64_t *)&v481);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v55, "coordinates_type", (uint64_t *)&v481);
  v57 = v481;
  v481 = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v469.n128_u64[1];
  if (v469.n128_u64[1])
  {
    v59 = (unint64_t *)(v469.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 48))(*((_QWORD *)v56 + 5), 1);
  v61 = *((_QWORD *)v56 + 5);
  v62 = (_anonymous_namespace_ *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  std::string::basic_string[abi:ne180100]<0>(v465, "absolute");
  MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)v465, &v481);
  v467 = v481;
  if (v481)
  {
    v63 = (std::__shared_weak_count *)operator new();
    v64 = (std::__shared_weak_count_vtbl *)v481;
    v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA992A68;
    v63->__shared_owners_ = 0;
    v63->__shared_weak_owners_ = 0;
    v63[1].__vftable = v64;
  }
  else
  {
    v63 = 0;
  }
  v468 = v63;
  v481 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v61 + 112))(v61, &v467);
  v65 = v468;
  if (v468)
  {
    v66 = (unint64_t *)&v468->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v481;
  v481 = 0;
  if (v68)
    (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  if (v466 < 0)
    operator delete(v465[0]);
  v69 = v480;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v464);
  MIL::IRParameter::Make(&v464, (uint64_t *)&v481);
  v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v69, "sampling_mode", (uint64_t *)&v481);
  v71 = v481;
  v481 = 0;
  if (v71)
    (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
  v72 = (std::__shared_weak_count *)v464.n128_u64[1];
  if (v464.n128_u64[1])
  {
    v73 = (unint64_t *)(v464.n128_u64[1] + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v70 + 5) + 32))(*((_QWORD *)v70 + 5), 1);
  v75 = v480;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v463);
  MIL::IRParameter::Make(&v463, (uint64_t *)&v481);
  v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v75, "padding_mode", (uint64_t *)&v481);
  v77 = v481;
  v481 = 0;
  if (v77)
    (*(void (**)(void *))(*(_QWORD *)v77 + 8))(v77);
  v78 = (std::__shared_weak_count *)v463.n128_u64[1];
  if (v463.n128_u64[1])
  {
    v79 = (unint64_t *)(v463.n128_u64[1] + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v76 + 5) + 32))(*((_QWORD *)v76 + 5), 1);
  v81 = v480;
  v481 = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v482 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v481, 2, &v462);
  MIL::IRParameter::Make(&v462, (uint64_t *)&__p);
  v82 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v81, "padding_value", (uint64_t *)&__p);
  v83 = __p;
  __p = 0;
  if (v83)
    (*(void (**)(void *))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v462.n128_u64[1];
  if (v462.n128_u64[1])
  {
    v85 = (unint64_t *)(v462.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v82 + 5) + 32))(*((_QWORD *)v82 + 5), 1);
  v87 = v480;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v461);
  MIL::IRParameter::Make(&v461, (uint64_t *)&v481);
  v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(v87, "coordinates_mode", (uint64_t *)&v481);
  v89 = v481;
  v481 = 0;
  if (v89)
    (*(void (**)(void *))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v461.n128_u64[1];
  if (v461.n128_u64[1])
  {
    v91 = (unint64_t *)(v461.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v88 + 5) + 32))(*((_QWORD *)v88 + 5), 1);
  v93 = v480;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v460);
  MIL::IRParameter::Make(&v460, (uint64_t *)&v481);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v93, "align_corners", (uint64_t *)&v481);
  v95 = v481;
  v481 = 0;
  if (v95)
    (*(void (**)(void *))(*(_QWORD *)v95 + 8))(v95);
  v96 = (std::__shared_weak_count *)v460.n128_u64[1];
  if (v460.n128_u64[1])
  {
    v97 = (unint64_t *)(v460.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 32))(*((_QWORD *)v94 + 5), 1);
  v459 = 0;
  v99 = operator new();
  *(_QWORD *)v99 = 0;
  *(_QWORD *)(v99 + 8) = 0;
  *(_QWORD *)(v99 + 16) = 0;
  v481 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v459, (void **)v99);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v481, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v459, 1uLL);
  v100 = v459;
  v101 = MIL::IRUnknownDimension::Make(a1, 0);
  v102 = MIL::IRUnknownDimension::Make(a1, 0);
  v103 = MIL::IRUnknownDimension::Make(a1, 0);
  v104 = MIL::IRUnknownDimension::Make(a1, 0);
  v105 = operator new(0x20uLL);
  v490 = v105 + 4;
  *v105 = v101;
  v105[1] = v102;
  v105[2] = v103;
  v105[3] = v104;
  __p = v105;
  v489 = v105 + 4;
  v497[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v106 = MIL::IRUnknownDimension::Make(a1, 0);
  v107 = MIL::IRUnknownDimension::Make(a1, 0);
  v108 = MIL::IRUnknownDimension::Make(a1, 0);
  v109 = MIL::IRUnknownDimension::Make(a1, 0);
  v110 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  p_on_zero_shared_weak = (uint64_t)&v110->__on_zero_shared_weak;
  v500 = &v110->__on_zero_shared_weak;
  v110->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v106;
  v110->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v107;
  v110->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v108;
  v110->__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v109;
  v498 = v110;
  v497[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v498);
  MIL::IRParameter::MakeTypeSet((uint64_t)v497, 2, &v457);
  MIL::IRParameter::Make(&v457, (uint64_t *)&v458);
  v111 = v458;
  v475 = v458;
  if (v458)
  {
    v112 = (_QWORD *)operator new();
    v113 = v458;
    *v112 = &unk_1EA99F888;
    v112[1] = 0;
    v112[2] = 0;
    v112[3] = v113;
  }
  else
  {
    v112 = 0;
  }
  v476 = v112;
  v458 = 0;
  v114 = v100[2];
  v115 = v100[1];
  if (v115 >= v114)
  {
    v117 = (v115 - *v100) >> 4;
    v118 = v117 + 1;
    if ((unint64_t)(v117 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v119 = v114 - *v100;
    if (v119 >> 3 > v118)
      v118 = v119 >> 3;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
      v120 = 0xFFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    v484[1] = v100 + 2;
    v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v100 + 2), v120);
    v123 = &v121[16 * v117];
    *(_QWORD *)v123 = v111;
    *((_QWORD *)v123 + 1) = v112;
    v476 = 0;
    v475 = 0;
    v125 = *v100;
    v124 = v100[1];
    if (v124 == *v100)
    {
      v128 = v100[1];
      v126 = &v121[16 * v117];
    }
    else
    {
      v126 = &v121[16 * v117];
      do
      {
        v127 = *((_OWORD *)v124 - 1);
        v124 -= 16;
        *((_OWORD *)v126 - 1) = v127;
        v126 -= 16;
        *(_QWORD *)v124 = 0;
        *((_QWORD *)v124 + 1) = 0;
      }
      while (v124 != v125);
      v128 = *v100;
      v124 = v100[1];
    }
    v116 = v123 + 16;
    *v100 = v126;
    v482 = (uint64_t)v128;
    v100[1] = v123 + 16;
    v483 = (uint64_t)v124;
    v129 = v100[2];
    v100[2] = &v121[16 * v122];
    v484[0] = v129;
    v481 = v128;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v481);
  }
  else
  {
    *(_QWORD *)v115 = v111;
    *((_QWORD *)v115 + 1) = v112;
    v116 = v115 + 16;
    v476 = 0;
    v475 = 0;
  }
  v100[1] = v116;
  v130 = v458;
  v458 = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  v131 = (std::__shared_weak_count *)v457.n128_u64[1];
  if (v457.n128_u64[1])
  {
    v132 = (unint64_t *)(v457.n128_u64[1] + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  if (v498)
  {
    p_on_zero_shared_weak = (uint64_t)v498;
    operator delete(v498);
  }
  if (__p)
  {
    v489 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v455 = *(_OWORD *)a2;
  v456 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v134 = (uint64_t)v480;
  *(_QWORD *)&v454 = v480;
  if (v480)
  {
    v135 = (_QWORD *)operator new();
    *v135 = &unk_1EA99F8E8;
    v135[1] = 0;
    v135[2] = 0;
    v135[3] = v134;
  }
  else
  {
    v135 = 0;
  }
  *((_QWORD *)&v454 + 1) = v135;
  v480 = 0;
  *(_QWORD *)&v453 = v459;
  if (v459)
  {
    v136 = (_QWORD *)operator new();
    v137 = v459;
    *v136 = &unk_1EA99F948;
    v136[1] = 0;
    v136[2] = 0;
    v136[3] = v137;
  }
  else
  {
    v136 = 0;
  }
  *((_QWORD *)&v453 + 1) = v136;
  v459 = 0;
  v496 = 0;
  v494 = 0;
  MIL::IROperator::Make((__int128 *)v455, &v454, &v453, (uint64_t)v495, (uint64_t)v493, a3);
  v138 = v494;
  if (v494 == v493)
  {
    v139 = 4;
    v138 = v493;
  }
  else
  {
    if (!v494)
      goto LABEL_137;
    v139 = 5;
  }
  (*(void (**)(void))(*v138 + 8 * v139))();
LABEL_137:
  v140 = v496;
  if (v496 == v495)
  {
    v141 = 4;
    v140 = v495;
    goto LABEL_141;
  }
  if (v496)
  {
    v141 = 5;
LABEL_141:
    (*(void (**)(void))(*v140 + 8 * v141))();
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
  if (*((_QWORD *)&v453 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v453 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v454 + 1);
  if (*((_QWORD *)&v454 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v454 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  if (SHIBYTE(v456) < 0)
    operator delete(v455[0]);
  v498 = 0;
  v148 = (_OWORD *)operator new();
  *v148 = 0u;
  v148[1] = 0u;
  *((_DWORD *)v148 + 8) = 1065353216;
  v498 = (std::__shared_weak_count_vtbl *)v148;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v452);
  MIL::IRParameter::Make(&v452, (uint64_t *)&v481);
  v149 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v148, "minimum_compute_type", (uint64_t *)&v481);
  v150 = v481;
  v481 = 0;
  if (v150)
    (*(void (**)(void *))(*(_QWORD *)v150 + 8))(v150);
  v151 = (std::__shared_weak_count *)v452.n128_u64[1];
  if (v452.n128_u64[1])
  {
    v152 = (unint64_t *)(v452.n128_u64[1] + 8);
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v149 + 5) + 32))(*((_QWORD *)v149 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v149 + 5) + 48))(*((_QWORD *)v149 + 5), 1);
  v154 = *a3;
  v155 = v498;
  v450 = v498;
  if (v498)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v155;
  }
  else
  {
    v156 = 0;
  }
  v451 = v156;
  v498 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v154 + 184))(v154, &v450);
  v157 = v451;
  if (v451)
  {
    v158 = (unint64_t *)&v451->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = *a3;
  v491[0] = &off_1EA99FBD8;
  v491[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResample;
  v492 = v491;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v160 + 200))(v160, v491);
  v161 = v492;
  if (v492 == v491)
  {
    v162 = 4;
    v161 = v491;
  }
  else
  {
    if (!v492)
      goto LABEL_174;
    v162 = 5;
  }
  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_174:
  MIL::Validation::TensorDTypeConstraints::Make(&v481);
  v163 = v481;
  std::string::basic_string[abi:ne180100]<0>(v446, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v446, 0, (uint64_t *)&__p);
  v448 = __p;
  if (__p)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)__p;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v449 = v164;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v444, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v163 + 24))(v163, &v448, v444);
  if (v445 < 0)
    operator delete(v444[0]);
  v166 = v449;
  if (v449)
  {
    v167 = (unint64_t *)&v449->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = __p;
  __p = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  if (v447 < 0)
    operator delete(v446[0]);
  v170 = v481;
  std::string::basic_string[abi:ne180100]<0>(v440, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v440, 0, (uint64_t *)&__p);
  v442 = __p;
  if (__p)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = (std::__shared_weak_count_vtbl *)__p;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = v172;
  }
  else
  {
    v171 = 0;
  }
  v443 = v171;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v438, "U");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v170 + 24))(v170, &v442, v438);
  if (v439 < 0)
    operator delete(v438[0]);
  v173 = v443;
  if (v443)
  {
    v174 = (unint64_t *)&v443->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = __p;
  __p = 0;
  if (v176)
    (*(void (**)(void *))(*(_QWORD *)v176 + 8))(v176);
  if (v441 < 0)
    operator delete(v440[0]);
  v177 = v481;
  std::string::basic_string[abi:ne180100]<0>(v434, "padding_value");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v434, 0, (uint64_t *)&__p);
  v436 = __p;
  if (__p)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = (std::__shared_weak_count_vtbl *)__p;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v437 = v178;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v432, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v177 + 24))(v177, &v436, v432);
  if (v433 < 0)
    operator delete(v432[0]);
  v180 = v437;
  if (v437)
  {
    v181 = (unint64_t *)&v437->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = __p;
  __p = 0;
  if (v183)
    (*(void (**)(void *))(*(_QWORD *)v183 + 8))(v183);
  if (v435 < 0)
    operator delete(v434[0]);
  v184 = v481;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v430 = __p;
  if (__p)
  {
    v185 = (std::__shared_weak_count *)operator new();
    v186 = (std::__shared_weak_count_vtbl *)__p;
    v185->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v185->__shared_owners_ = 0;
    v185->__shared_weak_owners_ = 0;
    v185[1].__vftable = v186;
  }
  else
  {
    v185 = 0;
  }
  v431 = v185;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v428, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v184 + 24))(v184, &v430, v428);
  if (v429 < 0)
    operator delete(v428[0]);
  v187 = v431;
  if (v431)
  {
    v188 = (unint64_t *)&v431->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  v190 = __p;
  __p = 0;
  if (v190)
    (*(void (**)(void *))(*(_QWORD *)v190 + 8))(v190);
  v191 = *a3;
  v426 = v481;
  if (v481)
  {
    v192 = (std::__shared_weak_count *)operator new();
    v193 = (std::__shared_weak_count_vtbl *)v481;
    v192->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v192->__shared_owners_ = 0;
    v192->__shared_weak_owners_ = 0;
    v192[1].__vftable = v193;
  }
  else
  {
    v192 = 0;
  }
  v427 = v192;
  v481 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v191 + 56))(v191, &v426);
  v194 = v427;
  if (v427)
  {
    v195 = (unint64_t *)&v427->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = v481;
  v481 = 0;
  if (v197)
    (*(void (**)(void *))(*(_QWORD *)v197 + 8))(v197);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v481);
  v198 = v481;
  std::string::basic_string[abi:ne180100]<0>(v422, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v422, 0, (uint64_t *)&__p);
  v424 = __p;
  if (__p)
  {
    v199 = (std::__shared_weak_count *)operator new();
    v200 = (std::__shared_weak_count_vtbl *)__p;
    v199->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v199->__shared_owners_ = 0;
    v199->__shared_weak_owners_ = 0;
    v199[1].__vftable = v200;
  }
  else
  {
    v199 = 0;
  }
  v425 = v199;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v420, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v198 + 24))(v198, &v424, 0, v420);
  if (v421 < 0)
    operator delete(v420[0]);
  v201 = v425;
  if (v425)
  {
    v202 = (unint64_t *)&v425->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v204 = __p;
  __p = 0;
  if (v204)
    (*(void (**)(void *))(*(_QWORD *)v204 + 8))(v204);
  if (v423 < 0)
    operator delete(v422[0]);
  v205 = v481;
  std::string::basic_string[abi:ne180100]<0>(v416, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v416, 0, (uint64_t *)&__p);
  v418 = __p;
  if (__p)
  {
    v206 = (std::__shared_weak_count *)operator new();
    v207 = (std::__shared_weak_count_vtbl *)__p;
    v206->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v206->__shared_owners_ = 0;
    v206->__shared_weak_owners_ = 0;
    v206[1].__vftable = v207;
  }
  else
  {
    v206 = 0;
  }
  v419 = v206;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v414, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v205 + 24))(v205, &v418, 1, v414);
  if (v415 < 0)
    operator delete(v414[0]);
  v208 = v419;
  if (v419)
  {
    v209 = (unint64_t *)&v419->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v211 = __p;
  __p = 0;
  if (v211)
    (*(void (**)(void *))(*(_QWORD *)v211 + 8))(v211);
  if (v417 < 0)
    operator delete(v416[0]);
  v212 = v481;
  std::string::basic_string[abi:ne180100]<0>(v410, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v410, 0, (uint64_t *)&__p);
  v412 = __p;
  if (__p)
  {
    v213 = (std::__shared_weak_count *)operator new();
    v214 = (std::__shared_weak_count_vtbl *)__p;
    v213->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v213->__shared_owners_ = 0;
    v213->__shared_weak_owners_ = 0;
    v213[1].__vftable = v214;
  }
  else
  {
    v213 = 0;
  }
  v413 = v213;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v408, "H_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v212 + 24))(v212, &v412, 2, v408);
  if (v409 < 0)
    operator delete(v408[0]);
  v215 = v413;
  if (v413)
  {
    v216 = (unint64_t *)&v413->__shared_owners_;
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  v218 = __p;
  __p = 0;
  if (v218)
    (*(void (**)(void *))(*(_QWORD *)v218 + 8))(v218);
  if (v411 < 0)
    operator delete(v410[0]);
  v219 = v481;
  std::string::basic_string[abi:ne180100]<0>(v404, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v404, 0, (uint64_t *)&__p);
  v406 = __p;
  if (__p)
  {
    v220 = (std::__shared_weak_count *)operator new();
    v221 = (std::__shared_weak_count_vtbl *)__p;
    v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v220->__shared_owners_ = 0;
    v220->__shared_weak_owners_ = 0;
    v220[1].__vftable = v221;
  }
  else
  {
    v220 = 0;
  }
  v407 = v220;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v402, "W_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v219 + 24))(v219, &v406, 3, v402);
  if (v403 < 0)
    operator delete(v402[0]);
  v222 = v407;
  if (v407)
  {
    v223 = (unint64_t *)&v407->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = __p;
  __p = 0;
  if (v225)
    (*(void (**)(void *))(*(_QWORD *)v225 + 8))(v225);
  if (v405 < 0)
    operator delete(v404[0]);
  v226 = v481;
  std::string::basic_string[abi:ne180100]<0>(v398, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v398, 0, (uint64_t *)&__p);
  v400 = __p;
  if (__p)
  {
    v227 = (std::__shared_weak_count *)operator new();
    v228 = (std::__shared_weak_count_vtbl *)__p;
    v227->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v227->__shared_owners_ = 0;
    v227->__shared_weak_owners_ = 0;
    v227[1].__vftable = v228;
  }
  else
  {
    v227 = 0;
  }
  v401 = v227;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v396, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v226 + 24))(v226, &v400, 0, v396);
  if (v397 < 0)
    operator delete(v396[0]);
  v229 = v401;
  if (v401)
  {
    v230 = (unint64_t *)&v401->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  v232 = __p;
  __p = 0;
  if (v232)
    (*(void (**)(void *))(*(_QWORD *)v232 + 8))(v232);
  if (v399 < 0)
    operator delete(v398[0]);
  v233 = v481;
  std::string::basic_string[abi:ne180100]<0>(v392, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v392, 0, (uint64_t *)&__p);
  v394 = __p;
  if (__p)
  {
    v234 = (std::__shared_weak_count *)operator new();
    v235 = (std::__shared_weak_count_vtbl *)__p;
    v234->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v234->__shared_owners_ = 0;
    v234->__shared_weak_owners_ = 0;
    v234[1].__vftable = v235;
  }
  else
  {
    v234 = 0;
  }
  v395 = v234;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v390, "H_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v233 + 24))(v233, &v394, 1, v390);
  if (v391 < 0)
    operator delete(v390[0]);
  v236 = v395;
  if (v395)
  {
    v237 = (unint64_t *)&v395->__shared_owners_;
    do
      v238 = __ldaxr(v237);
    while (__stlxr(v238 - 1, v237));
    if (!v238)
    {
      ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
      std::__shared_weak_count::__release_weak(v236);
    }
  }
  v239 = __p;
  __p = 0;
  if (v239)
    (*(void (**)(void *))(*(_QWORD *)v239 + 8))(v239);
  if (v393 < 0)
    operator delete(v392[0]);
  v240 = v481;
  std::string::basic_string[abi:ne180100]<0>(v386, "coordinates");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v386, 0, (uint64_t *)&__p);
  v388 = __p;
  if (__p)
  {
    v241 = (std::__shared_weak_count *)operator new();
    v242 = (std::__shared_weak_count_vtbl *)__p;
    v241->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v241->__shared_owners_ = 0;
    v241->__shared_weak_owners_ = 0;
    v241[1].__vftable = v242;
  }
  else
  {
    v241 = 0;
  }
  v389 = v241;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v384, "W_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v240 + 24))(v240, &v388, 2, v384);
  if (v385 < 0)
    operator delete(v384[0]);
  v243 = v389;
  if (v389)
  {
    v244 = (unint64_t *)&v389->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  v246 = __p;
  __p = 0;
  if (v246)
    (*(void (**)(void *))(*(_QWORD *)v246 + 8))(v246);
  if (v387 < 0)
    operator delete(v386[0]);
  v247 = v481;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v382 = __p;
  if (__p)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = (std::__shared_weak_count_vtbl *)__p;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v383 = v248;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v380, "B");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v247 + 24))(v247, &v382, 0, v380);
  if (v381 < 0)
    operator delete(v380[0]);
  v250 = v383;
  if (v383)
  {
    v251 = (unint64_t *)&v383->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = __p;
  __p = 0;
  if (v253)
    (*(void (**)(void *))(*(_QWORD *)v253 + 8))(v253);
  v254 = v481;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v378 = __p;
  if (__p)
  {
    v255 = (std::__shared_weak_count *)operator new();
    v256 = (std::__shared_weak_count_vtbl *)__p;
    v255->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v255->__shared_owners_ = 0;
    v255->__shared_weak_owners_ = 0;
    v255[1].__vftable = v256;
  }
  else
  {
    v255 = 0;
  }
  v379 = v255;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v376, "C");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v254 + 24))(v254, &v378, 1, v376);
  if (v377 < 0)
    operator delete(v376[0]);
  v257 = v379;
  if (v379)
  {
    v258 = (unint64_t *)&v379->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = __p;
  __p = 0;
  if (v260)
    (*(void (**)(void *))(*(_QWORD *)v260 + 8))(v260);
  v261 = v481;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v374 = __p;
  if (__p)
  {
    v262 = (std::__shared_weak_count *)operator new();
    v263 = (std::__shared_weak_count_vtbl *)__p;
    v262->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v262->__shared_owners_ = 0;
    v262->__shared_weak_owners_ = 0;
    v262[1].__vftable = v263;
  }
  else
  {
    v262 = 0;
  }
  v375 = v262;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v372, "H_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v261 + 24))(v261, &v374, 2, v372);
  if (v373 < 0)
    operator delete(v372[0]);
  v264 = v375;
  if (v375)
  {
    v265 = (unint64_t *)&v375->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = __p;
  __p = 0;
  if (v267)
    (*(void (**)(void *))(*(_QWORD *)v267 + 8))(v267);
  v268 = v481;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v370 = __p;
  if (__p)
  {
    v269 = (std::__shared_weak_count *)operator new();
    v270 = (std::__shared_weak_count_vtbl *)__p;
    v269->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v269->__shared_owners_ = 0;
    v269->__shared_weak_owners_ = 0;
    v269[1].__vftable = v270;
  }
  else
  {
    v269 = 0;
  }
  v371 = v269;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v368, "W_out");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v268 + 24))(v268, &v370, 3, v368);
  if (v369 < 0)
    operator delete(v368[0]);
  v271 = v371;
  if (v371)
  {
    v272 = (unint64_t *)&v371->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = __p;
  __p = 0;
  if (v274)
    (*(void (**)(void *))(*(_QWORD *)v274 + 8))(v274);
  v275 = *a3;
  v366 = v481;
  if (v481)
  {
    v276 = (std::__shared_weak_count *)operator new();
    v277 = (std::__shared_weak_count_vtbl *)v481;
    v276->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v276->__shared_owners_ = 0;
    v276->__shared_weak_owners_ = 0;
    v276[1].__vftable = v277;
  }
  else
  {
    v276 = 0;
  }
  v367 = v276;
  v481 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v275 + 56))(v275, &v366);
  v278 = v367;
  if (v367)
  {
    v279 = (unint64_t *)&v367->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v281 = v481;
  v481 = 0;
  if (v281)
    (*(void (**)(void *))(*(_QWORD *)v281 + 8))(v281);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v475);
  v282 = v475;
  std::string::basic_string[abi:ne180100]<0>(v362, "coordinates_format");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v362, 1, v497);
  v364 = v497[0];
  if (v497[0])
  {
    v283 = (std::__shared_weak_count *)operator new();
    v284 = v497[0];
    v283->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v283->__shared_owners_ = 0;
    v283->__shared_weak_owners_ = 0;
    v283[1].__vftable = (std::__shared_weak_count_vtbl *)v284;
  }
  else
  {
    v283 = 0;
  }
  v365 = v283;
  v497[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v481, "xy");
  std::string::basic_string[abi:ne180100]<0>(v484, "yx");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v481, 2);
  (*(void (**)(void *, uint64_t *, void **, _QWORD))(*(_QWORD *)v282 + 24))(v282, &v364, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v484[i + 2]) < 0)
      operator delete((void *)v484[i]);
  }
  v286 = v365;
  if (v365)
  {
    v287 = (unint64_t *)&v365->__shared_owners_;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
  v289 = v497[0];
  v497[0] = 0;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  if (v363 < 0)
    operator delete(v362[0]);
  v290 = v475;
  std::string::basic_string[abi:ne180100]<0>(v358, "coordinates_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v358, 1, v497);
  v360 = v497[0];
  if (v497[0])
  {
    v291 = (std::__shared_weak_count *)operator new();
    v292 = v497[0];
    v291->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v291->__shared_owners_ = 0;
    v291->__shared_weak_owners_ = 0;
    v291[1].__vftable = (std::__shared_weak_count_vtbl *)v292;
  }
  else
  {
    v291 = 0;
  }
  v361 = v291;
  v497[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v481, "absolute");
  std::string::basic_string[abi:ne180100]<0>(v484, "relative");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v481, 2);
  (*(void (**)(void *, uint64_t *, void **, _QWORD))(*(_QWORD *)v290 + 24))(v290, &v360, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v484[j + 2]) < 0)
      operator delete((void *)v484[j]);
  }
  v294 = v361;
  if (v361)
  {
    v295 = (unint64_t *)&v361->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = v497[0];
  v497[0] = 0;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  if (v359 < 0)
    operator delete(v358[0]);
  v298 = v475;
  std::string::basic_string[abi:ne180100]<0>(v354, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v354, 0, v497);
  v356 = v497[0];
  if (v497[0])
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = v497[0];
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = (std::__shared_weak_count_vtbl *)v300;
  }
  else
  {
    v299 = 0;
  }
  v357 = v299;
  v497[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v481, "bilinear");
  std::string::basic_string[abi:ne180100]<0>(v484, "nearest");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v481, 2);
  (*(void (**)(void *, uint64_t *, void **, _QWORD))(*(_QWORD *)v298 + 24))(v298, &v356, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v484[k + 2]) < 0)
      operator delete((void *)v484[k]);
  }
  v302 = v357;
  if (v357)
  {
    v303 = (unint64_t *)&v357->__shared_owners_;
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v305 = v497[0];
  v497[0] = 0;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  if (v355 < 0)
    operator delete(v354[0]);
  v306 = v475;
  std::string::basic_string[abi:ne180100]<0>(v350, "padding_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v350, 0, v497);
  v352 = v497[0];
  if (v497[0])
  {
    v307 = (std::__shared_weak_count *)operator new();
    v308 = v497[0];
    v307->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v307->__shared_owners_ = 0;
    v307->__shared_weak_owners_ = 0;
    v307[1].__vftable = (std::__shared_weak_count_vtbl *)v308;
  }
  else
  {
    v307 = 0;
  }
  v353 = v307;
  v497[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v481, "border");
  std::string::basic_string[abi:ne180100]<0>(v484, "constant");
  std::string::basic_string[abi:ne180100]<0>(v485, "reflection");
  std::string::basic_string[abi:ne180100]<0>(v486, "symmetric");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v481, 4);
  (*(void (**)(void *, uint64_t *, void **, _QWORD))(*(_QWORD *)v306 + 24))(v306, &v352, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (m = 0; m != -12; m -= 3)
  {
    if (SHIBYTE(v486[m + 2]) < 0)
      operator delete((void *)v486[m]);
  }
  v310 = v353;
  if (v353)
  {
    v311 = (unint64_t *)&v353->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  v313 = v497[0];
  v497[0] = 0;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  if (v351 < 0)
    operator delete(v350[0]);
  v314 = v475;
  std::string::basic_string[abi:ne180100]<0>(v346, "coordinates_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v346, 0, v497);
  v348 = v497[0];
  if (v497[0])
  {
    v315 = (std::__shared_weak_count *)operator new();
    v316 = v497[0];
    v315->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v315->__shared_owners_ = 0;
    v315->__shared_weak_owners_ = 0;
    v315[1].__vftable = (std::__shared_weak_count_vtbl *)v316;
  }
  else
  {
    v315 = 0;
  }
  v349 = v315;
  v497[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v481, "normalized_minus_one_to_one");
  std::string::basic_string[abi:ne180100]<0>(v484, "normalized_zero_to_one");
  std::string::basic_string[abi:ne180100]<0>(v485, "unnormalized");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v481, 3);
  (*(void (**)(void *, uint64_t *, void **, _QWORD))(*(_QWORD *)v314 + 24))(v314, &v348, &__p, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (n = 0; n != -9; n -= 3)
  {
    if (SHIBYTE(v485[n + 2]) < 0)
      operator delete((void *)v485[n]);
  }
  v318 = v349;
  if (v349)
  {
    v319 = (unint64_t *)&v349->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v321 = v497[0];
  v497[0] = 0;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  if (v347 < 0)
    operator delete(v346[0]);
  v322 = v475;
  std::string::basic_string[abi:ne180100]<0>(v342, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v342, 1, v497);
  v344 = v497[0];
  if (v497[0])
  {
    v323 = (std::__shared_weak_count *)operator new();
    v324 = v497[0];
    v323->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v323->__shared_owners_ = 0;
    v323->__shared_weak_owners_ = 0;
    v323[1].__vftable = (std::__shared_weak_count_vtbl *)v324;
  }
  else
  {
    v323 = 0;
  }
  v345 = v323;
  v497[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v481, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v484, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v485, "int32");
  std::string::basic_string[abi:ne180100]<0>(v486, "int8");
  std::string::basic_string[abi:ne180100]<0>(v487, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v481, 5);
  (*(void (**)(void *, uint64_t *, void **, uint64_t))(*(_QWORD *)v322 + 24))(v322, &v344, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (ii = 0; ii != -15; ii -= 3)
  {
    if (SHIBYTE(v487[ii + 2]) < 0)
      operator delete(v487[ii]);
  }
  v326 = v345;
  if (v345)
  {
    v327 = (unint64_t *)&v345->__shared_owners_;
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  v329 = v497[0];
  v497[0] = 0;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  if (v343 < 0)
    operator delete(v342[0]);
  v330 = *a3;
  v340 = v475;
  if (v475)
  {
    v331 = (std::__shared_weak_count *)operator new();
    v332 = (std::__shared_weak_count_vtbl *)v475;
    v331->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v331->__shared_owners_ = 0;
    v331->__shared_weak_owners_ = 0;
    v331[1].__vftable = v332;
  }
  else
  {
    v331 = 0;
  }
  v341 = v331;
  v475 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v330 + 56))(v330, &v340);
  v333 = v341;
  if (v341)
  {
    v334 = (unint64_t *)&v341->__shared_owners_;
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
      std::__shared_weak_count::__release_weak(v333);
    }
  }
  v336 = v475;
  v475 = 0;
  if (v336)
    (*(void (**)(void *))(*(_QWORD *)v336 + 8))(v336);
  if (v498)
  {
    v337 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v498);
    MEMORY[0x1E0C023A0](v337, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v459, 0);
  result = (uint64_t)v480;
  if (v480)
  {
    v339 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v480);
    return MEMORY[0x1E0C023A0](v339, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E084B2F0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x5B0];
  STACK[0x5B0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x4E8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x5E8], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::ResizeBilinear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char **v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _OWORD *v78;
  unsigned __int8 *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  void *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count_vtbl *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  void *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  uint64_t i;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  uint64_t j;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t result;
  uint64_t v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void *v160[2];
  char v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  void *v164;
  std::__shared_weak_count *v165;
  void *v166[2];
  char v167;
  void *v168[2];
  char v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  void *v172;
  std::__shared_weak_count *v173;
  void *v174[2];
  char v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  __n128 v186;
  __int128 v187;
  __int128 v188;
  void *v189[2];
  uint64_t v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  char **v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  _QWORD *v200;
  void *__p;
  void *v202;
  char *v203;
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD v206[3];
  _QWORD v207[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v210;
  _QWORD v211[3];
  _QWORD *v212;
  _BYTE v213[24];
  _BYTE *v214;
  _BYTE v215[24];
  _BYTE *v216;
  std::__shared_weak_count_vtbl *v217;
  uint64_t v218;
  void (__cdecl **v219)(std::__shared_weak_count *__hidden);
  uint64_t v220[3];

  v220[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v200 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (char *)operator new(0x10uLL);
  v203 = v9 + 16;
  *(_QWORD *)v9 = v7;
  *((_QWORD *)v9 + 1) = v8;
  __p = v9;
  v202 = v9 + 16;
  v217 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v210 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v218 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v217, 2, &v199);
  MIL::IRParameter::Make(&v199, &v193);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v193);
  v13 = v193;
  v193 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (std::__shared_weak_count *)v199.n128_u64[1];
  if (v199.n128_u64[1])
  {
    v15 = (unint64_t *)(v199.n128_u64[1] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v202 = __p;
    operator delete(__p);
  }
  v17 = v200;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v198);
  MIL::IRParameter::Make(&v198, (uint64_t *)&__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v17, "target_size_height", (uint64_t *)&__p);
  v19 = __p;
  __p = 0;
  if (v19)
    (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
  v20 = (std::__shared_weak_count *)v198.n128_u64[1];
  if (v198.n128_u64[1])
  {
    v21 = (unint64_t *)(v198.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v200;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(v23, "target_size_width", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v27 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v200;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&__p);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v29, "sampling_mode", (uint64_t *)&__p);
  v31 = __p;
  __p = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v33 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v195 = 0;
  v35 = operator new();
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, (void **)v35);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v195, 1uLL);
  v36 = v195;
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v38;
  v38->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v38->~__shared_weak_count_0;
  v210 = &v38->~__shared_weak_count_0;
  v220[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v39 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v40 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v217 = v40;
  v40->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  v218 = (uint64_t)&v40->~__shared_weak_count_0;
  v219 = &v40->~__shared_weak_count_0;
  v220[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  MIL::IRParameter::MakeTypeSet((uint64_t)v220, 2, &v191);
  MIL::IRParameter::Make(&v191, &v192);
  v41 = v192;
  v193 = v192;
  if (v192)
  {
    v42 = (_QWORD *)operator new();
    v43 = v192;
    *v42 = &unk_1EA99F888;
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = v43;
  }
  else
  {
    v42 = 0;
  }
  v194 = v42;
  v192 = 0;
  v44 = v36[2];
  v45 = v36[1];
  if (v45 >= v44)
  {
    v47 = (v45 - *v36) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v49 = v44 - *v36;
    if (v49 >> 3 > v48)
      v48 = v49 >> 3;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    v204[1] = v36 + 2;
    v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v36 + 2), v50);
    v53 = (uint64_t *)&v51[16 * v47];
    *v53 = v41;
    v53[1] = (uint64_t)v42;
    v193 = 0;
    v194 = 0;
    v55 = *v36;
    v54 = v36[1];
    if (v54 == *v36)
    {
      v58 = v36[1];
      v56 = &v51[16 * v47];
    }
    else
    {
      v56 = &v51[16 * v47];
      do
      {
        v57 = *((_OWORD *)v54 - 1);
        v54 -= 16;
        *((_OWORD *)v56 - 1) = v57;
        v56 -= 16;
        *(_QWORD *)v54 = 0;
        *((_QWORD *)v54 + 1) = 0;
      }
      while (v54 != v55);
      v58 = *v36;
      v54 = v36[1];
    }
    v46 = (char *)(v53 + 2);
    *v36 = v56;
    v202 = v58;
    v36[1] = (char *)(v53 + 2);
    v203 = v54;
    v59 = v36[2];
    v36[2] = &v51[16 * v52];
    v204[0] = v59;
    __p = v58;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v45 = v41;
    *((_QWORD *)v45 + 1) = v42;
    v46 = v45 + 16;
    v193 = 0;
    v194 = 0;
  }
  v36[1] = v46;
  v60 = v192;
  v192 = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v191.n128_u64[1];
  if (v191.n128_u64[1])
  {
    v62 = (unint64_t *)(v191.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v217)
  {
    v218 = (uint64_t)v217;
    operator delete(v217);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v189 = *(_OWORD *)a2;
  v190 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = (uint64_t)v200;
  *(_QWORD *)&v188 = v200;
  if (v200)
  {
    v65 = (_QWORD *)operator new();
    *v65 = &unk_1EA99F8E8;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v64;
  }
  else
  {
    v65 = 0;
  }
  *((_QWORD *)&v188 + 1) = v65;
  v200 = 0;
  *(_QWORD *)&v187 = v195;
  if (v195)
  {
    v66 = (_QWORD *)operator new();
    v67 = v195;
    *v66 = &unk_1EA99F948;
    v66[1] = 0;
    v66[2] = 0;
    v66[3] = v67;
  }
  else
  {
    v66 = 0;
  }
  *((_QWORD *)&v187 + 1) = v66;
  v195 = 0;
  v216 = 0;
  v214 = 0;
  MIL::IROperator::Make((__int128 *)v189, &v188, &v187, (uint64_t)v215, (uint64_t)v213, a3);
  v68 = v214;
  if (v214 == v213)
  {
    v69 = 4;
    v68 = v213;
  }
  else
  {
    if (!v214)
      goto LABEL_72;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_72:
  v70 = v216;
  if (v216 == v215)
  {
    v71 = 4;
    v70 = v215;
    goto LABEL_76;
  }
  if (v216)
  {
    v71 = 5;
LABEL_76:
    (*(void (**)(void))(*v70 + 8 * v71))();
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
  if (*((_QWORD *)&v188 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v190) < 0)
    operator delete(v189[0]);
  v217 = 0;
  v78 = (_OWORD *)operator new();
  *v78 = 0u;
  v78[1] = 0u;
  *((_DWORD *)v78 + 8) = 1065353216;
  v217 = (std::__shared_weak_count_vtbl *)v78;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v186);
  MIL::IRParameter::Make(&v186, (uint64_t *)&__p);
  v79 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v78, "minimum_compute_type", (uint64_t *)&__p);
  v80 = __p;
  __p = 0;
  if (v80)
    (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
  v81 = (std::__shared_weak_count *)v186.n128_u64[1];
  if (v186.n128_u64[1])
  {
    v82 = (unint64_t *)(v186.n128_u64[1] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v79 + 5) + 32))(*((_QWORD *)v79 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v79 + 5) + 48))(*((_QWORD *)v79 + 5), 1);
  v84 = *a3;
  v85 = v217;
  v184 = v217;
  if (v217)
  {
    v86 = (std::__shared_weak_count *)operator new();
    v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v86->__shared_owners_ = 0;
    v86->__shared_weak_owners_ = 0;
    v86[1].__vftable = v85;
  }
  else
  {
    v86 = 0;
  }
  v185 = v86;
  v217 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v84 + 184))(v84, &v184);
  v87 = v185;
  if (v185)
  {
    p_shared_owners = (unint64_t *)&v185->__shared_owners_;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = *a3;
  v211[0] = &off_1EA99FBD8;
  v211[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceResizeBilinear;
  v212 = v211;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v90 + 200))(v90, v211);
  v91 = v212;
  if (v212 == v211)
  {
    v92 = 4;
    v91 = v211;
  }
  else
  {
    if (!v212)
      goto LABEL_109;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_109:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v93 = __p;
  std::string::basic_string[abi:ne180100]<0>(v180, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v180, 0, (uint64_t *)&Scalar);
  v182 = Scalar;
  if (Scalar)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v95 = Scalar;
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v95;
  }
  else
  {
    v94 = 0;
  }
  v183 = v94;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v178, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v93 + 24))(v93, &v182, v178);
  if (v179 < 0)
    operator delete(v178[0]);
  v96 = v183;
  if (v183)
  {
    v97 = (unint64_t *)&v183->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = Scalar;
  Scalar = 0;
  if (v99)
    (*((void (**)(std::__shared_weak_count_vtbl *))v99->~__shared_weak_count + 1))(v99);
  if (v181 < 0)
    operator delete(v180[0]);
  v100 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v176 = Scalar;
  if (Scalar)
  {
    v101 = (std::__shared_weak_count *)operator new();
    v102 = Scalar;
    v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v101->__shared_owners_ = 0;
    v101->__shared_weak_owners_ = 0;
    v101[1].__vftable = v102;
  }
  else
  {
    v101 = 0;
  }
  v177 = v101;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v174, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v100 + 24))(v100, &v176, v174);
  if (v175 < 0)
    operator delete(v174[0]);
  v103 = v177;
  if (v177)
  {
    v104 = (unint64_t *)&v177->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = Scalar;
  Scalar = 0;
  if (v106)
    (*((void (**)(std::__shared_weak_count_vtbl *))v106->~__shared_weak_count + 1))(v106);
  v107 = *a3;
  v172 = __p;
  if (__p)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = (std::__shared_weak_count_vtbl *)__p;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v173 = v108;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v107 + 56))(v107, &v172);
  v110 = v173;
  if (v173)
  {
    v111 = (unint64_t *)&v173->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v114 = __p;
  std::string::basic_string[abi:ne180100]<0>(v168, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v168, 0, (uint64_t *)&Scalar);
  v170 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v171 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v166, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v114 + 24))(v114, &v170, 0, v166);
  if (v167 < 0)
    operator delete(v166[0]);
  v117 = v171;
  if (v171)
  {
    v118 = (unint64_t *)&v171->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v169 < 0)
    operator delete(v168[0]);
  v121 = *a3;
  v164 = __p;
  if (__p)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = (std::__shared_weak_count_vtbl *)__p;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v165 = v122;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, &v164);
  v124 = v165;
  if (v165)
  {
    v125 = (unint64_t *)&v165->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = __p;
  __p = 0;
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v193);
  v128 = v193;
  std::string::basic_string[abi:ne180100]<0>(v160, "sampling_mode");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v160, 0, v220);
  v162 = v220[0];
  if (v220[0])
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = v220[0];
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = (std::__shared_weak_count_vtbl *)v130;
  }
  else
  {
    v129 = 0;
  }
  v163 = v129;
  v220[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v204, "DEFAULT");
  std::string::basic_string[abi:ne180100]<0>(v205, "OFFSET_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v206, "STRICT_ALIGN_CORNERS");
  std::string::basic_string[abi:ne180100]<0>(v207, "UNALIGN_CORNERS");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v128 + 24))(v128, &v162, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v207[i + 2]) < 0)
      operator delete((void *)v207[i]);
  }
  v132 = v163;
  if (v163)
  {
    v133 = (unint64_t *)&v163->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = v220[0];
  v220[0] = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  if (v161 < 0)
    operator delete(v160[0]);
  v136 = v193;
  std::string::basic_string[abi:ne180100]<0>(v156, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v156, 1, v220);
  v158 = v220[0];
  if (v220[0])
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = v220[0];
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = (std::__shared_weak_count_vtbl *)v138;
  }
  else
  {
    v137 = 0;
  }
  v159 = v137;
  v220[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v204, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v205, "int32");
  std::string::basic_string[abi:ne180100]<0>(v206, "int8");
  std::string::basic_string[abi:ne180100]<0>(v207, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v136 + 24))(v136, &v158, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v207[j + 2]) < 0)
      operator delete((void *)v207[j]);
  }
  v140 = v159;
  if (v159)
  {
    v141 = (unint64_t *)&v159->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v220[0];
  v220[0] = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  if (v157 < 0)
    operator delete(v156[0]);
  v144 = *a3;
  v154 = v193;
  if (v193)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v193;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = (std::__shared_weak_count_vtbl *)v146;
  }
  else
  {
    v145 = 0;
  }
  v155 = v145;
  v193 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v144 + 56))(v144, &v154);
  v147 = v155;
  if (v155)
  {
    v148 = (unint64_t *)&v155->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v193;
  v193 = 0;
  if (v150)
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  if (v217)
  {
    v151 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v217);
    MEMORY[0x1E0C023A0](v151, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v195, 0);
  result = (uint64_t)v200;
  if (v200)
  {
    v153 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v200);
    return MEMORY[0x1E0C023A0](v153, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E084D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  uint64_t a72;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;

  if (a61)
    (*(void (**)(uint64_t))(*(_QWORD *)a61 + 8))(a61);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v73 - 112), 0);
  v75 = *v72;
  *v72 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a63, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a72, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::UpsampleBilinear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char **v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _OWORD *v90;
  unsigned __int8 *v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  void *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count_vtbl *v111;
  void *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count_vtbl *v118;
  void *v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count_vtbl *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count_vtbl *v125;
  void *v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count_vtbl *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count_vtbl *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  void *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count_vtbl *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count_vtbl *v146;
  void *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count_vtbl *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count_vtbl *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  void *v161;
  std::__shared_weak_count *v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  void *v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count_vtbl *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count_vtbl *v174;
  void *v175;
  std::__shared_weak_count *v176;
  std::__shared_weak_count_vtbl *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count_vtbl *v181;
  void *v182;
  std::__shared_weak_count *v183;
  std::__shared_weak_count_vtbl *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count_vtbl *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  uint64_t i;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t result;
  uint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  void *v216[2];
  char v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  void *v220;
  std::__shared_weak_count *v221;
  void *v222[2];
  char v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  void *v226[2];
  char v227;
  std::__shared_weak_count_vtbl *v228;
  std::__shared_weak_count *v229;
  void *v230[2];
  char v231;
  void *v232[2];
  char v233;
  std::__shared_weak_count_vtbl *v234;
  std::__shared_weak_count *v235;
  void *v236[2];
  char v237;
  void *v238[2];
  char v239;
  std::__shared_weak_count_vtbl *v240;
  std::__shared_weak_count *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  void *v246[2];
  char v247;
  std::__shared_weak_count_vtbl *v248;
  std::__shared_weak_count *v249;
  void *v250;
  std::__shared_weak_count *v251;
  void *v252[2];
  char v253;
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count *v255;
  void *v256[2];
  char v257;
  void *v258[2];
  char v259;
  std::__shared_weak_count_vtbl *v260;
  std::__shared_weak_count *v261;
  void *v262[2];
  char v263;
  void *v264[2];
  char v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  void *v268[2];
  char v269;
  void *v270[2];
  char v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  std::__shared_weak_count_vtbl *v274;
  std::__shared_weak_count *v275;
  __n128 v276;
  __int128 v277;
  __int128 v278;
  void *v279[2];
  uint64_t v280;
  __n128 v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  char **v285;
  __n128 v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  _QWORD *v291;
  void *__p;
  uint64_t Scalar;
  char *v294;
  _QWORD v295[3];
  uint64_t v296[3];
  uint64_t v297[3];
  _QWORD v298[3];
  std::__shared_weak_count_vtbl *v299;
  std::__shared_weak_count_vtbl *p_get_deleter;
  const void *(__cdecl **v301)(const std::__shared_weak_count *__hidden, const std::type_info *);
  _QWORD v302[3];
  _QWORD *v303;
  _BYTE v304[24];
  _BYTE *v305;
  _QWORD v306[3];
  _QWORD *v307;
  std::__shared_weak_count_vtbl *v308;
  uint64_t v309;
  const void *(__cdecl **v310)(const std::__shared_weak_count *__hidden, const std::type_info *);
  uint64_t v311[3];

  v311[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v291 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v294 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  Scalar = (uint64_t)(v10 + 24);
  v308 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v301 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v299 = v14;
  v309 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v299);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v308, 2, &v290);
  MIL::IRParameter::Make(&v290, &v283);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v283);
  v15 = v283;
  v283 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v290.n128_u64[1];
  if (v290.n128_u64[1])
  {
    v17 = (unint64_t *)(v290.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v299)
  {
    p_get_deleter = v299;
    operator delete(v299);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v291;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v289);
  MIL::IRParameter::Make(&v289, (uint64_t *)&v299);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[20],std::unique_ptr<MIL::IRParameter>>(v19, "scale_factor_height", (uint64_t *)&v299);
  v21 = v299;
  v299 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v289.n128_u64[1];
  if (v289.n128_u64[1])
  {
    v23 = (unint64_t *)(v289.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v291;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v288);
  MIL::IRParameter::Make(&v288, (uint64_t *)&v299);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v25, "scale_factor_width", (uint64_t *)&v299);
  v27 = v299;
  v299 = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v288.n128_u64[1];
  if (v288.n128_u64[1])
  {
    v29 = (unint64_t *)(v288.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v291;
  v299 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v299, 1, &v287);
  MIL::IRParameter::Make(&v287, (uint64_t *)&__p);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v31, "align_corners", (uint64_t *)&__p);
  v33 = __p;
  __p = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v287.n128_u64[1];
  if (v287.n128_u64[1])
  {
    v35 = (unint64_t *)(v287.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v291;
  v299 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v299, 1, &v286);
  MIL::IRParameter::Make(&v286, (uint64_t *)&__p);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(v37, "half_pixel_centers", (uint64_t *)&__p);
  v39 = __p;
  __p = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v286.n128_u64[1];
  if (v286.n128_u64[1])
  {
    v41 = (unint64_t *)(v286.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 48))(*((_QWORD *)v38 + 5), 1);
  v285 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v285, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v285, 1uLL);
  v44 = v285;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = MIL::IRUnknownDimension::Make(a1, 0);
  v47 = MIL::IRUnknownDimension::Make(a1, 0);
  v48 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v48->__get_deleter;
  v301 = &v48->__get_deleter;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  v48->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v46;
  v48->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v47;
  v299 = v48;
  v311[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v299);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = MIL::IRUnknownDimension::Make(a1, 0);
  v52 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v309 = (uint64_t)&v52->__get_deleter;
  v310 = &v52->__get_deleter;
  v52->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v49;
  v52->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v50;
  v52->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v51;
  v308 = v52;
  v311[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v308);
  MIL::IRParameter::MakeTypeSet((uint64_t)v311, 2, &v281);
  MIL::IRParameter::Make(&v281, &v282);
  v53 = v282;
  v283 = v282;
  if (v282)
  {
    v54 = (_QWORD *)operator new();
    v55 = v282;
    *v54 = &unk_1EA99F888;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v55;
  }
  else
  {
    v54 = 0;
  }
  v284 = v54;
  v282 = 0;
  v56 = v44[2];
  v57 = v44[1];
  if (v57 >= v56)
  {
    v59 = (v57 - *v44) >> 4;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v61 = v56 - *v44;
    if (v61 >> 3 > v60)
      v60 = v61 >> 3;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
      v62 = 0xFFFFFFFFFFFFFFFLL;
    else
      v62 = v60;
    v295[1] = v44 + 2;
    v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v62);
    v65 = (uint64_t *)&v63[16 * v59];
    *v65 = v53;
    v65[1] = (uint64_t)v54;
    v284 = 0;
    v283 = 0;
    v67 = *v44;
    v66 = v44[1];
    if (v66 == *v44)
    {
      v70 = v44[1];
      v68 = &v63[16 * v59];
    }
    else
    {
      v68 = &v63[16 * v59];
      do
      {
        v69 = *((_OWORD *)v66 - 1);
        v66 -= 16;
        *((_OWORD *)v68 - 1) = v69;
        v68 -= 16;
        *(_QWORD *)v66 = 0;
        *((_QWORD *)v66 + 1) = 0;
      }
      while (v66 != v67);
      v70 = *v44;
      v66 = v44[1];
    }
    v58 = (char *)(v65 + 2);
    *v44 = v68;
    Scalar = (uint64_t)v70;
    v44[1] = (char *)(v65 + 2);
    v294 = v66;
    v71 = v44[2];
    v44[2] = &v63[16 * v64];
    v295[0] = v71;
    __p = v70;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v57 = v53;
    *((_QWORD *)v57 + 1) = v54;
    v58 = v57 + 16;
    v284 = 0;
    v283 = 0;
  }
  v44[1] = v58;
  v72 = v282;
  v282 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = (std::__shared_weak_count *)v281.n128_u64[1];
  if (v281.n128_u64[1])
  {
    v74 = (unint64_t *)(v281.n128_u64[1] + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v308)
  {
    v309 = (uint64_t)v308;
    operator delete(v308);
  }
  if (v299)
  {
    p_get_deleter = v299;
    operator delete(v299);
  }
  *(_OWORD *)v279 = *(_OWORD *)a2;
  v280 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v76 = (uint64_t)v291;
  *(_QWORD *)&v278 = v291;
  if (v291)
  {
    v77 = (_QWORD *)operator new();
    *v77 = &unk_1EA99F8E8;
    v77[1] = 0;
    v77[2] = 0;
    v77[3] = v76;
  }
  else
  {
    v77 = 0;
  }
  *((_QWORD *)&v278 + 1) = v77;
  v291 = 0;
  *(_QWORD *)&v277 = v285;
  if (v285)
  {
    v78 = (_QWORD *)operator new();
    v79 = v285;
    *v78 = &unk_1EA99F948;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v79;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v277 + 1) = v78;
  v285 = 0;
  v306[0] = &unk_1EA99FAC8;
  v306[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateUpsampleBilinear;
  v307 = v306;
  v305 = 0;
  MIL::IROperator::Make((__int128 *)v279, &v278, &v277, (uint64_t)v306, (uint64_t)v304, a3);
  v80 = v305;
  if (v305 == v304)
  {
    v81 = 4;
    v80 = v304;
  }
  else
  {
    if (!v305)
      goto LABEL_79;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_79:
  v82 = v307;
  if (v307 == v306)
  {
    v83 = 4;
    v82 = v306;
    goto LABEL_83;
  }
  if (v307)
  {
    v83 = 5;
LABEL_83:
    (*(void (**)(void))(*v82 + 8 * v83))();
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
  if (*((_QWORD *)&v277 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v278 + 1);
  if (*((_QWORD *)&v278 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v278 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (SHIBYTE(v280) < 0)
    operator delete(v279[0]);
  v308 = 0;
  v90 = (_OWORD *)operator new();
  *v90 = 0u;
  v90[1] = 0u;
  *((_DWORD *)v90 + 8) = 1065353216;
  v308 = (std::__shared_weak_count_vtbl *)v90;
  v299 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v299, 1, &v276);
  MIL::IRParameter::Make(&v276, (uint64_t *)&__p);
  v91 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v90, "minimum_compute_type", (uint64_t *)&__p);
  v92 = __p;
  __p = 0;
  if (v92)
    (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  v93 = (std::__shared_weak_count *)v276.n128_u64[1];
  if (v276.n128_u64[1])
  {
    v94 = (unint64_t *)(v276.n128_u64[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v91 + 5) + 32))(*((_QWORD *)v91 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v91 + 5) + 48))(*((_QWORD *)v91 + 5), 1);
  v96 = *a3;
  v97 = v308;
  v274 = v308;
  if (v308)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v97;
  }
  else
  {
    v98 = 0;
  }
  v275 = v98;
  v308 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v96 + 184))(v96, &v274);
  v99 = v275;
  if (v275)
  {
    p_shared_owners = (unint64_t *)&v275->__shared_owners_;
    do
      v101 = __ldaxr(p_shared_owners);
    while (__stlxr(v101 - 1, p_shared_owners));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = *a3;
  v302[0] = &off_1EA99FBD8;
  v302[1] = MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceUpsampleBilinear;
  v303 = v302;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v102 + 200))(v102, v302);
  v103 = v303;
  if (v303 == v302)
  {
    v104 = 4;
    v103 = v302;
  }
  else
  {
    if (!v303)
      goto LABEL_116;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_116:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v105 = __p;
  std::string::basic_string[abi:ne180100]<0>(v270, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v270, 0, (uint64_t *)&v299);
  v272 = v299;
  if (v299)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = v299;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v273 = v106;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v268, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v105 + 24))(v105, &v272, v268);
  if (v269 < 0)
    operator delete(v268[0]);
  v108 = v273;
  if (v273)
  {
    v109 = (unint64_t *)&v273->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v299;
  v299 = 0;
  if (v111)
    (*((void (**)(std::__shared_weak_count_vtbl *))v111->~__shared_weak_count + 1))(v111);
  if (v271 < 0)
    operator delete(v270[0]);
  v112 = __p;
  std::string::basic_string[abi:ne180100]<0>(v264, "scale_factor_height");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v264, 0, (uint64_t *)&v299);
  v266 = v299;
  if (v299)
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v299;
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = v114;
  }
  else
  {
    v113 = 0;
  }
  v267 = v113;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v262, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v112 + 24))(v112, &v266, v262);
  if (v263 < 0)
    operator delete(v262[0]);
  v115 = v267;
  if (v267)
  {
    v116 = (unint64_t *)&v267->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v299;
  v299 = 0;
  if (v118)
    (*((void (**)(std::__shared_weak_count_vtbl *))v118->~__shared_weak_count + 1))(v118);
  if (v265 < 0)
    operator delete(v264[0]);
  v119 = __p;
  std::string::basic_string[abi:ne180100]<0>(v258, "scale_factor_width");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v258, 0, (uint64_t *)&v299);
  v260 = v299;
  if (v299)
  {
    v120 = (std::__shared_weak_count *)operator new();
    v121 = v299;
    v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v120->__shared_owners_ = 0;
    v120->__shared_weak_owners_ = 0;
    v120[1].__vftable = v121;
  }
  else
  {
    v120 = 0;
  }
  v261 = v120;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v256, "U");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v119 + 24))(v119, &v260, v256);
  if (v257 < 0)
    operator delete(v256[0]);
  v122 = v261;
  if (v261)
  {
    v123 = (unint64_t *)&v261->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v299;
  v299 = 0;
  if (v125)
    (*((void (**)(std::__shared_weak_count_vtbl *))v125->~__shared_weak_count + 1))(v125);
  if (v259 < 0)
    operator delete(v258[0]);
  v126 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v299);
  v254 = v299;
  if (v299)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v299;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = v128;
  }
  else
  {
    v127 = 0;
  }
  v255 = v127;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v252, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v126 + 24))(v126, &v254, v252);
  if (v253 < 0)
    operator delete(v252[0]);
  v129 = v255;
  if (v255)
  {
    v130 = (unint64_t *)&v255->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v299;
  v299 = 0;
  if (v132)
    (*((void (**)(std::__shared_weak_count_vtbl *))v132->~__shared_weak_count + 1))(v132);
  v133 = *a3;
  v250 = __p;
  if (__p)
  {
    v134 = (std::__shared_weak_count *)operator new();
    v135 = (std::__shared_weak_count_vtbl *)__p;
    v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v134->__shared_owners_ = 0;
    v134->__shared_weak_owners_ = 0;
    v134[1].__vftable = v135;
  }
  else
  {
    v134 = 0;
  }
  v251 = v134;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v133 + 56))(v133, &v250);
  v136 = v251;
  if (v251)
  {
    v137 = (unint64_t *)&v251->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = __p;
  __p = 0;
  if (v139)
    (*(void (**)(void *))(*(_QWORD *)v139 + 8))(v139);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v140 = __p;
  std::string::basic_string[abi:ne180100]<0>(v246, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v246, 0, (uint64_t *)&v299);
  v248 = v299;
  if (v299)
  {
    v141 = (std::__shared_weak_count *)operator new();
    v142 = v299;
    v141->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v141->__shared_owners_ = 0;
    v141->__shared_weak_owners_ = 0;
    v141[1].__vftable = v142;
  }
  else
  {
    v141 = 0;
  }
  v249 = v141;
  v299 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v140 + 32))(v140, &v248, 3, 5);
  v143 = v249;
  if (v249)
  {
    v144 = (unint64_t *)&v249->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v299;
  v299 = 0;
  if (v146)
    (*((void (**)(std::__shared_weak_count_vtbl *))v146->~__shared_weak_count + 1))(v146);
  if (v247 < 0)
    operator delete(v246[0]);
  v147 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v299);
  v244 = v299;
  if (v299)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v299;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = v149;
  }
  else
  {
    v148 = 0;
  }
  v245 = v148;
  v299 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v147 + 32))(v147, &v244, 3, 5);
  v150 = v245;
  if (v245)
  {
    v151 = (unint64_t *)&v245->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v299;
  v299 = 0;
  if (v153)
    (*((void (**)(std::__shared_weak_count_vtbl *))v153->~__shared_weak_count + 1))(v153);
  v154 = *a3;
  v242 = __p;
  if (__p)
  {
    v155 = (std::__shared_weak_count *)operator new();
    v156 = (std::__shared_weak_count_vtbl *)__p;
    v155->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v155->__shared_owners_ = 0;
    v155->__shared_weak_owners_ = 0;
    v155[1].__vftable = v156;
  }
  else
  {
    v155 = 0;
  }
  v243 = v155;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v154 + 56))(v154, &v242);
  v157 = v243;
  if (v243)
  {
    v158 = (unint64_t *)&v243->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  v160 = __p;
  __p = 0;
  if (v160)
    (*(void (**)(void *))(*(_QWORD *)v160 + 8))(v160);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v161 = __p;
  std::string::basic_string[abi:ne180100]<0>(v238, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v238, 0, (uint64_t *)&v299);
  v240 = v299;
  if (v299)
  {
    v162 = (std::__shared_weak_count *)operator new();
    v163 = v299;
    v162->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v162->__shared_owners_ = 0;
    v162->__shared_weak_owners_ = 0;
    v162[1].__vftable = v163;
  }
  else
  {
    v162 = 0;
  }
  v241 = v162;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v236, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v161 + 24))(v161, &v240, -2, v236);
  if (v237 < 0)
    operator delete(v236[0]);
  v164 = v241;
  if (v241)
  {
    v165 = (unint64_t *)&v241->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v299;
  v299 = 0;
  if (v167)
    (*((void (**)(std::__shared_weak_count_vtbl *))v167->~__shared_weak_count + 1))(v167);
  if (v239 < 0)
    operator delete(v238[0]);
  v168 = __p;
  std::string::basic_string[abi:ne180100]<0>(v232, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v232, 0, (uint64_t *)&v299);
  v234 = v299;
  if (v299)
  {
    v169 = (std::__shared_weak_count *)operator new();
    v170 = v299;
    v169->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v169->__shared_owners_ = 0;
    v169->__shared_weak_owners_ = 0;
    v169[1].__vftable = v170;
  }
  else
  {
    v169 = 0;
  }
  v235 = v169;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v230, "W");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v168 + 24))(v168, &v234, -1, v230);
  if (v231 < 0)
    operator delete(v230[0]);
  v171 = v235;
  if (v235)
  {
    v172 = (unint64_t *)&v235->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v299;
  v299 = 0;
  if (v174)
    (*((void (**)(std::__shared_weak_count_vtbl *))v174->~__shared_weak_count + 1))(v174);
  if (v233 < 0)
    operator delete(v232[0]);
  v175 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v299);
  v228 = v299;
  if (v299)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v299;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = v177;
  }
  else
  {
    v176 = 0;
  }
  v229 = v176;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v226, "H_out");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v175 + 24))(v175, &v228, -2, v226);
  if (v227 < 0)
    operator delete(v226[0]);
  v178 = v229;
  if (v229)
  {
    v179 = (unint64_t *)&v229->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v299;
  v299 = 0;
  if (v181)
    (*((void (**)(std::__shared_weak_count_vtbl *))v181->~__shared_weak_count + 1))(v181);
  v182 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v299);
  v224 = v299;
  if (v299)
  {
    v183 = (std::__shared_weak_count *)operator new();
    v184 = v299;
    v183->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v183->__shared_owners_ = 0;
    v183->__shared_weak_owners_ = 0;
    v183[1].__vftable = v184;
  }
  else
  {
    v183 = 0;
  }
  v225 = v183;
  v299 = 0;
  std::string::basic_string[abi:ne180100]<0>(v222, "W_out");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v182 + 24))(v182, &v224, -1, v222);
  if (v223 < 0)
    operator delete(v222[0]);
  v185 = v225;
  if (v225)
  {
    v186 = (unint64_t *)&v225->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  v188 = v299;
  v299 = 0;
  if (v188)
    (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188);
  v189 = *a3;
  v220 = __p;
  if (__p)
  {
    v190 = (std::__shared_weak_count *)operator new();
    v191 = (std::__shared_weak_count_vtbl *)__p;
    v190->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v190->__shared_owners_ = 0;
    v190->__shared_weak_owners_ = 0;
    v190[1].__vftable = v191;
  }
  else
  {
    v190 = 0;
  }
  v221 = v190;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v189 + 56))(v189, &v220);
  v192 = v221;
  if (v221)
  {
    v193 = (unint64_t *)&v221->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  v195 = __p;
  __p = 0;
  if (v195)
    (*(void (**)(void *))(*(_QWORD *)v195 + 8))(v195);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v283);
  v196 = v283;
  std::string::basic_string[abi:ne180100]<0>(v216, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v216, 1, v311);
  v218 = v311[0];
  if (v311[0])
  {
    v197 = (std::__shared_weak_count *)operator new();
    v198 = v311[0];
    v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v197->__shared_owners_ = 0;
    v197->__shared_weak_owners_ = 0;
    v197[1].__vftable = (std::__shared_weak_count_vtbl *)v198;
  }
  else
  {
    v197 = 0;
  }
  v219 = v197;
  v311[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v295, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v296, "int32");
  std::string::basic_string[abi:ne180100]<0>(v297, "int8");
  std::string::basic_string[abi:ne180100]<0>(v298, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v299, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v196 + 24))(v196, &v218, &v299, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v299);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v298[i + 2]) < 0)
      operator delete((void *)v298[i]);
  }
  v200 = v219;
  if (v219)
  {
    v201 = (unint64_t *)&v219->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = v311[0];
  v311[0] = 0;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  if (v217 < 0)
    operator delete(v216[0]);
  v204 = *a3;
  v214 = v283;
  if (v283)
  {
    v205 = (std::__shared_weak_count *)operator new();
    v206 = v283;
    v205->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v205->__shared_owners_ = 0;
    v205->__shared_weak_owners_ = 0;
    v205[1].__vftable = (std::__shared_weak_count_vtbl *)v206;
  }
  else
  {
    v205 = 0;
  }
  v215 = v205;
  v283 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v204 + 56))(v204, &v214);
  v207 = v215;
  if (v215)
  {
    v208 = (unint64_t *)&v215->__shared_owners_;
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v210 = v283;
  v283 = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  if (v308)
  {
    v211 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v308);
    MEMORY[0x1E0C023A0](v211, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v285, 0);
  result = (uint64_t)v291;
  if (v291)
  {
    v213 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v291);
    return MEMORY[0x1E0C023A0](v213, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E084F2D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2D0];
  STACK[0x2D0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2E0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x338], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLinear(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLinear(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E084FA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceMatMul(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceMatMul(a1, a3, a4);
  if (v9)
  {
    v7 = (unint64_t *)&v9->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1E084FB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceEinsum(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceEinsum(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E084FBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Einsum::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char **v25;
  uint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char **v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _OWORD *v67;
  unsigned __int8 *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count_vtbl *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count_vtbl *v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t v119;
  uint64_t i;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t result;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void *v137[2];
  char v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  void *v141;
  std::__shared_weak_count *v142;
  void *v143[2];
  char v144;
  void *v145[2];
  char v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  void *v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  __n128 v163;
  __int128 v164;
  __int128 v165;
  void *v166[2];
  uint64_t v167;
  __n128 v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  char **v172;
  __n128 v173;
  __n128 v174;
  _QWORD *v175;
  void *__p;
  void *v177;
  char *v178;
  _QWORD v179[3];
  uint64_t v180[3];
  uint64_t v181[3];
  _QWORD v182[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v185;
  _QWORD v186[3];
  _QWORD *v187;
  _BYTE v188[24];
  _BYTE *v189;
  _QWORD v190[3];
  _QWORD *v191;
  std::__shared_weak_count_vtbl *v192;
  uint64_t v193;
  void (__cdecl **v194)(std::__shared_weak_count *__hidden);
  uint64_t v195[3];

  v195[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v175 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = operator new(0x10uLL);
  v177 = v9 + 2;
  v178 = (char *)(v9 + 2);
  *v9 = v7;
  v9[1] = v8;
  __p = v9;
  v192 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v12->__on_zero_shared;
  v185 = &v12->__on_zero_shared;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  Scalar = v12;
  v193 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v192, 2, &v174);
  MIL::IRParameter::Make(&v174, &v170);
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "values", &v170);
  v14 = v170;
  v170 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v16 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v177 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v13 + 5) + 64))(*((_QWORD *)v13 + 5), 1);
  v18 = v175;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v173);
  MIL::IRParameter::Make(&v173, (uint64_t *)&__p);
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v18, "equation", (uint64_t *)&__p);
  v20 = __p;
  __p = 0;
  if (v20)
    (*(void (**)(void *))(*(_QWORD *)v20 + 8))(v20);
  v21 = (std::__shared_weak_count *)v173.n128_u64[1];
  if (v173.n128_u64[1])
  {
    v22 = (unint64_t *)(v173.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v19 + 5) + 32))(*((_QWORD *)v19 + 5), 1);
  v172 = 0;
  v24 = operator new();
  *(_QWORD *)v24 = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v172, (void **)v24);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v172, 1uLL);
  v25 = v172;
  v26 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v27 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v27;
  v27->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v27->~__shared_weak_count_0;
  v185 = &v27->~__shared_weak_count_0;
  v195[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v192 = v29;
  v29->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v193 = (uint64_t)&v29->~__shared_weak_count_0;
  v194 = &v29->~__shared_weak_count_0;
  v195[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v192);
  MIL::IRParameter::MakeTypeSet((uint64_t)v195, 2, &v168);
  MIL::IRParameter::Make(&v168, &v169);
  v30 = v169;
  v170 = v169;
  if (v169)
  {
    v31 = (_QWORD *)operator new();
    v32 = v169;
    *v31 = &unk_1EA99F888;
    v31[1] = 0;
    v31[2] = 0;
    v31[3] = v32;
  }
  else
  {
    v31 = 0;
  }
  v171 = v31;
  v169 = 0;
  v33 = v25[2];
  v34 = v25[1];
  if (v34 >= v33)
  {
    v36 = (v34 - *v25) >> 4;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v38 = v33 - *v25;
    if (v38 >> 3 > v37)
      v37 = v38 >> 3;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v39 = 0xFFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    v179[1] = v25 + 2;
    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v25 + 2), v39);
    v42 = (uint64_t *)&v40[16 * v36];
    *v42 = v30;
    v42[1] = (uint64_t)v31;
    v170 = 0;
    v171 = 0;
    v44 = *v25;
    v43 = v25[1];
    if (v43 == *v25)
    {
      v47 = v25[1];
      v45 = &v40[16 * v36];
    }
    else
    {
      v45 = &v40[16 * v36];
      do
      {
        v46 = *((_OWORD *)v43 - 1);
        v43 -= 16;
        *((_OWORD *)v45 - 1) = v46;
        v45 -= 16;
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
      }
      while (v43 != v44);
      v47 = *v25;
      v43 = v25[1];
    }
    v35 = (char *)(v42 + 2);
    *v25 = v45;
    __p = v47;
    v177 = v47;
    v25[1] = (char *)(v42 + 2);
    v178 = v43;
    v48 = v25[2];
    v25[2] = &v40[16 * v41];
    v179[0] = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v34 = v30;
    *((_QWORD *)v34 + 1) = v31;
    v35 = v34 + 16;
    v170 = 0;
    v171 = 0;
  }
  v25[1] = v35;
  v49 = v169;
  v169 = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = (std::__shared_weak_count *)v168.n128_u64[1];
  if (v168.n128_u64[1])
  {
    v51 = (unint64_t *)(v168.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v192)
  {
    v193 = (uint64_t)v192;
    operator delete(v192);
  }
  if (Scalar)
  {
    p_on_zero_shared = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v166 = *(_OWORD *)a2;
  v167 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v53 = (uint64_t)v175;
  *(_QWORD *)&v165 = v175;
  if (v175)
  {
    v54 = (_QWORD *)operator new();
    *v54 = &unk_1EA99F8E8;
    v54[1] = 0;
    v54[2] = 0;
    v54[3] = v53;
  }
  else
  {
    v54 = 0;
  }
  *((_QWORD *)&v165 + 1) = v54;
  v175 = 0;
  *(_QWORD *)&v164 = v172;
  if (v172)
  {
    v55 = (_QWORD *)operator new();
    v56 = v172;
    *v55 = &unk_1EA99F948;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v164 + 1) = v55;
  v172 = 0;
  v190[0] = &unk_1EA99FAC8;
  v190[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateEinsum;
  v191 = v190;
  v189 = 0;
  MIL::IROperator::Make((__int128 *)v166, &v165, &v164, (uint64_t)v190, (uint64_t)v188, a3);
  v57 = v189;
  if (v189 == v188)
  {
    v58 = 4;
    v57 = v188;
  }
  else
  {
    if (!v189)
      goto LABEL_58;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_58:
  v59 = v191;
  if (v191 == v190)
  {
    v60 = 4;
    v59 = v190;
    goto LABEL_62;
  }
  if (v191)
  {
    v60 = 5;
LABEL_62:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (SHIBYTE(v167) < 0)
    operator delete(v166[0]);
  v192 = 0;
  v67 = (_OWORD *)operator new();
  *v67 = 0u;
  v67[1] = 0u;
  *((_DWORD *)v67 + 8) = 1065353216;
  v192 = (std::__shared_weak_count_vtbl *)v67;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v163);
  MIL::IRParameter::Make(&v163, (uint64_t *)&__p);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v67, "minimum_compute_type", (uint64_t *)&__p);
  v69 = __p;
  __p = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v71 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 32))(*((_QWORD *)v68 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 48))(*((_QWORD *)v68 + 5), 1);
  v73 = *a3;
  v74 = v192;
  v161 = v192;
  if (v192)
  {
    v75 = (std::__shared_weak_count *)operator new();
    v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v75->__shared_owners_ = 0;
    v75->__shared_weak_owners_ = 0;
    v75[1].__vftable = v74;
  }
  else
  {
    v75 = 0;
  }
  v162 = v75;
  v192 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v73 + 184))(v73, &v161);
  v76 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v78 = __ldaxr(p_shared_owners);
    while (__stlxr(v78 - 1, p_shared_owners));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = *a3;
  v186[0] = &off_1EA99FBD8;
  v186[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceEinsum;
  v187 = v186;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v79 + 200))(v79, v186);
  v80 = v187;
  if (v187 == v186)
  {
    v81 = 4;
    v80 = v186;
  }
  else
  {
    if (!v187)
      goto LABEL_95;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_95:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v82 = __p;
  std::string::basic_string[abi:ne180100]<0>(v157, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v157, 0, (uint64_t *)&Scalar);
  v159 = Scalar;
  if (Scalar)
  {
    v83 = (std::__shared_weak_count *)operator new();
    v84 = Scalar;
    v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v83->__shared_owners_ = 0;
    v83->__shared_weak_owners_ = 0;
    v83[1].__vftable = v84;
  }
  else
  {
    v83 = 0;
  }
  v160 = v83;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v155, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v82 + 24))(v82, &v159, v155);
  if (v156 < 0)
    operator delete(v155[0]);
  v85 = v160;
  if (v160)
  {
    v86 = (unint64_t *)&v160->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = Scalar;
  Scalar = 0;
  if (v88)
    (*((void (**)(std::__shared_weak_count_vtbl *))v88->~__shared_weak_count + 1))(v88);
  if (v158 < 0)
    operator delete(v157[0]);
  v89 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v153 = Scalar;
  if (Scalar)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = Scalar;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v154 = v90;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v151, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v89 + 24))(v89, &v153, v151);
  if (v152 < 0)
    operator delete(v151[0]);
  v92 = v154;
  if (v154)
  {
    v93 = (unint64_t *)&v154->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = Scalar;
  Scalar = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  v96 = *a3;
  v149 = __p;
  if (__p)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = (std::__shared_weak_count_vtbl *)__p;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v150 = v97;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v96 + 56))(v96, &v149);
  v99 = v150;
  if (v150)
  {
    v100 = (unint64_t *)&v150->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = __p;
  __p = 0;
  if (v102)
    (*(void (**)(void *))(*(_QWORD *)v102 + 8))(v102);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v103 = __p;
  std::string::basic_string[abi:ne180100]<0>(v145, "values");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v145, 0, (uint64_t *)&Scalar);
  v147 = Scalar;
  if (Scalar)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = Scalar;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v148 = v104;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v143, "D");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v103 + 24))(v103, &v147, 0, v143);
  if (v144 < 0)
    operator delete(v143[0]);
  v106 = v148;
  if (v148)
  {
    v107 = (unint64_t *)&v148->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = Scalar;
  Scalar = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  if (v146 < 0)
    operator delete(v145[0]);
  v110 = *a3;
  v141 = __p;
  if (__p)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)__p;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v142 = v111;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v110 + 56))(v110, &v141);
  v113 = v142;
  if (v142)
  {
    v114 = (unint64_t *)&v142->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = __p;
  __p = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v170);
  v117 = v170;
  std::string::basic_string[abi:ne180100]<0>(v137, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v137, 1, v195);
  v139 = v195[0];
  if (v195[0])
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v195[0];
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = (std::__shared_weak_count_vtbl *)v119;
  }
  else
  {
    v118 = 0;
  }
  v140 = v118;
  v195[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v179, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v180, "int32");
  std::string::basic_string[abi:ne180100]<0>(v181, "int8");
  std::string::basic_string[abi:ne180100]<0>(v182, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v117 + 24))(v117, &v139, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v182[i + 2]) < 0)
      operator delete((void *)v182[i]);
  }
  v121 = v140;
  if (v140)
  {
    v122 = (unint64_t *)&v140->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v195[0];
  v195[0] = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  if (v138 < 0)
    operator delete(v137[0]);
  v125 = *a3;
  v135 = v170;
  if (v170)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v170;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = (std::__shared_weak_count_vtbl *)v127;
  }
  else
  {
    v126 = 0;
  }
  v136 = v126;
  v170 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v125 + 56))(v125, &v135);
  v128 = v136;
  if (v136)
  {
    v129 = (unint64_t *)&v136->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v170;
  v170 = 0;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  if (v192)
  {
    v132 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v192);
    MEMORY[0x1E0C023A0](v132, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v172, 0);
  result = (uint64_t)v175;
  if (v175)
  {
    v134 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v175);
    return MEMORY[0x1E0C023A0](v134, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0850B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  uint64_t *v62;
  uint64_t v63;
  uint64_t v65;

  if (a55)
    (*(void (**)(uint64_t))(*(_QWORD *)a55 + 8))(a55);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 112), 0);
  v65 = *v62;
  *v62 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a62, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::Linear::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count_vtbl *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  void **v72;
  char *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char **v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _OWORD *v92;
  unsigned __int8 *v93;
  void **v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  void **v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count_vtbl *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count_vtbl *v113;
  void **v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count_vtbl *v120;
  void **v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count_vtbl *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count_vtbl *v127;
  void **v128;
  std::__shared_weak_count *v129;
  std::__shared_weak_count_vtbl *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count_vtbl *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void **v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  void **v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count_vtbl *v148;
  void **v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count_vtbl *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count_vtbl *v155;
  void **v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count_vtbl *v162;
  void **v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count_vtbl *v169;
  uint64_t v170;
  std::__shared_weak_count *v171;
  void **v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  void **v176;
  void *v177;
  std::__shared_weak_count *v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t i;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t result;
  uint64_t v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199;
  std::__shared_weak_count *v200;
  void **v201;
  std::__shared_weak_count *v202;
  void *v203[2];
  char v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209[2];
  char v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void **v227;
  std::__shared_weak_count *v228;
  void *v229[2];
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  void *v241[2];
  char v242;
  std::__shared_weak_count_vtbl *v243;
  std::__shared_weak_count *v244;
  void *v245[2];
  char v246;
  void *v247[2];
  char v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  void *v251;
  std::__shared_weak_count *v252;
  __n128 v253;
  __int128 v254;
  __int128 v255;
  void *v256[2];
  uint64_t v257;
  void *v258;
  void *v259;
  _QWORD *v260;
  __n128 v261;
  uint64_t v262;
  uint64_t v263;
  _QWORD *v264;
  char **v265;
  __n128 v266;
  __n128 v267;
  void *__p;
  void *v269;
  _QWORD *v270;
  void *v271;
  void *v272;
  _QWORD *v273;
  __n128 v274;
  _QWORD *v275;
  void **v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD v279[3];
  uint64_t v280[3];
  uint64_t v281[3];
  _QWORD v282[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v285;
  _QWORD v286[3];
  _QWORD *v287;
  _BYTE v288[24];
  _BYTE *v289;
  _BYTE v290[24];
  _BYTE *v291;
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v275 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v285 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v276 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = operator new(0x10uLL);
  v273 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v271 = v12;
  v272 = v12 + 2;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v271);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = operator new(0x10uLL);
  v270 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v269 = v15 + 2;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v276, 3, &v274);
  MIL::IRParameter::Make(&v274, (uint64_t *)&v258);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v258);
  v16 = v258;
  v258 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v274.n128_u64[1];
  if (v274.n128_u64[1])
  {
    v18 = (unint64_t *)(v274.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v275;
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v23->__on_zero_shared;
  v285 = (uint64_t)&v23->__on_zero_shared;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v23->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  Scalar = v23;
  v276 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = operator new(0x10uLL);
  v273 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v271 = v26;
  v272 = v26 + 2;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v271);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, 0);
  v29 = operator new(0x10uLL);
  v270 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v269 = v29 + 2;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v276, 3, &v267);
  MIL::IRParameter::Make(&v267, (uint64_t *)&v258);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v20, "weight", (uint64_t *)&v258);
  v31 = v258;
  v258 = 0;
  if (v31)
    (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v267.n128_u64[1];
  if (v267.n128_u64[1])
  {
    v33 = (unint64_t *)(v267.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  v35 = v275;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v37;
  v37->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
  p_on_zero_shared = (uint64_t)&v37->~__shared_weak_count_0;
  v285 = (uint64_t)&v37->~__shared_weak_count_0;
  v276 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v38 = MIL::IRUnknownDimension::Make(a1, 0);
  v39 = operator new(8uLL);
  v271 = v39;
  *v39 = v38;
  v273 = v39 + 1;
  v272 = v39 + 1;
  v277 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v271);
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = operator new(8uLL);
  __p = v41;
  *v41 = v40;
  v270 = v41 + 1;
  v269 = v41 + 1;
  v278 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v276, 3, &v266);
  MIL::IRParameter::Make(&v266, (uint64_t *)&v258);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "bias", (uint64_t *)&v258);
  v43 = v258;
  v258 = 0;
  if (v43)
    (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v266.n128_u64[1];
  if (v266.n128_u64[1])
  {
    v45 = (unint64_t *)(v266.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v265 = 0;
  v47 = operator new();
  *(_QWORD *)v47 = 0;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  v276 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v265, (void **)v47);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v276, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v265, 1uLL);
  v48 = v265;
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = operator new(8uLL);
  v271 = v50;
  *v50 = v49;
  v273 = v50 + 1;
  v272 = v50 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v271);
  v51 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v52 = operator new(8uLL);
  __p = v52;
  *v52 = v51;
  v270 = v52 + 1;
  v269 = v52 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v53 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v54 = operator new(8uLL);
  v258 = v54;
  *v54 = v53;
  v260 = v54 + 1;
  v259 = v54 + 1;
  v285 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v258);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v261);
  MIL::IRParameter::Make(&v261, &v262);
  v55 = v262;
  v263 = v262;
  if (v262)
  {
    v56 = (_QWORD *)operator new();
    v57 = v262;
    *v56 = &unk_1EA99F888;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  v264 = v56;
  v262 = 0;
  v58 = v48[2];
  v59 = v48[1];
  if (v59 >= v58)
  {
    v61 = (v59 - *v48) >> 4;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v63 = v58 - *v48;
    if (v63 >> 3 > v62)
      v62 = v63 >> 3;
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
      v64 = 0xFFFFFFFFFFFFFFFLL;
    else
      v64 = v62;
    v279[1] = v48 + 2;
    v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v48 + 2), v64);
    v67 = (uint64_t *)&v65[16 * v61];
    *v67 = v55;
    v67[1] = (uint64_t)v56;
    v264 = 0;
    v263 = 0;
    v69 = *v48;
    v68 = v48[1];
    if (v68 == *v48)
    {
      v72 = (void **)v48[1];
      v70 = &v65[16 * v61];
    }
    else
    {
      v70 = &v65[16 * v61];
      do
      {
        v71 = *((_OWORD *)v68 - 1);
        v68 -= 16;
        *((_OWORD *)v70 - 1) = v71;
        v70 -= 16;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
      }
      while (v68 != v69);
      v72 = (void **)*v48;
      v68 = v48[1];
    }
    v60 = (char *)(v67 + 2);
    *v48 = v70;
    v277 = (uint64_t)v72;
    v48[1] = (char *)(v67 + 2);
    v278 = (uint64_t)v68;
    v73 = v48[2];
    v48[2] = &v65[16 * v66];
    v279[0] = v73;
    v276 = v72;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v276);
  }
  else
  {
    *(_QWORD *)v59 = v55;
    *((_QWORD *)v59 + 1) = v56;
    v60 = v59 + 16;
    v264 = 0;
    v263 = 0;
  }
  v48[1] = v60;
  v74 = v262;
  v262 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = (std::__shared_weak_count *)v261.n128_u64[1];
  if (v261.n128_u64[1])
  {
    v76 = (unint64_t *)(v261.n128_u64[1] + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (__p)
  {
    v269 = __p;
    operator delete(__p);
  }
  if (v271)
  {
    v272 = v271;
    operator delete(v271);
  }
  *(_OWORD *)v256 = *(_OWORD *)a2;
  v257 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v78 = (uint64_t)v275;
  *(_QWORD *)&v255 = v275;
  if (v275)
  {
    v79 = (_QWORD *)operator new();
    *v79 = &unk_1EA99F8E8;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v78;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v255 + 1) = v79;
  v275 = 0;
  *(_QWORD *)&v254 = v265;
  if (v265)
  {
    v80 = (_QWORD *)operator new();
    v81 = v265;
    *v80 = &unk_1EA99F948;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  *((_QWORD *)&v254 + 1) = v80;
  v265 = 0;
  v291 = 0;
  v289 = 0;
  MIL::IROperator::Make((__int128 *)v256, &v255, &v254, (uint64_t)v290, (uint64_t)v288, a3);
  v82 = v289;
  if (v289 == v288)
  {
    v83 = 4;
    v82 = v288;
  }
  else
  {
    if (!v289)
      goto LABEL_81;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_81:
  v84 = v291;
  if (v291 == v290)
  {
    v85 = 4;
    v84 = v290;
    goto LABEL_85;
  }
  if (v291)
  {
    v85 = 5;
LABEL_85:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v254 + 1);
  if (*((_QWORD *)&v254 + 1))
  {
    v87 = (unint64_t *)(*((_QWORD *)&v254 + 1) + 8);
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v255 + 1);
  if (*((_QWORD *)&v255 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v255 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (SHIBYTE(v257) < 0)
    operator delete(v256[0]);
  v271 = 0;
  v92 = (_OWORD *)operator new();
  *v92 = 0u;
  v92[1] = 0u;
  *((_DWORD *)v92 + 8) = 1065353216;
  v271 = v92;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v253);
  MIL::IRParameter::Make(&v253, (uint64_t *)&v276);
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v92, "minimum_compute_type", (uint64_t *)&v276);
  v94 = v276;
  v276 = 0;
  if (v94)
    (*((void (**)(void **))*v94 + 1))(v94);
  v95 = (std::__shared_weak_count *)v253.n128_u64[1];
  if (v253.n128_u64[1])
  {
    v96 = (unint64_t *)(v253.n128_u64[1] + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 32))(*((_QWORD *)v93 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v93 + 5) + 48))(*((_QWORD *)v93 + 5), 1);
  v98 = *a3;
  v99 = (std::__shared_weak_count_vtbl *)v271;
  v251 = v271;
  if (v271)
  {
    v100 = (std::__shared_weak_count *)operator new();
    v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v100->__shared_owners_ = 0;
    v100->__shared_weak_owners_ = 0;
    v100[1].__vftable = v99;
  }
  else
  {
    v100 = 0;
  }
  v252 = v100;
  v271 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v98 + 184))(v98, &v251);
  v101 = v252;
  if (v252)
  {
    p_shared_owners = (unint64_t *)&v252->__shared_owners_;
    do
      v103 = __ldaxr(p_shared_owners);
    while (__stlxr(v103 - 1, p_shared_owners));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = *a3;
  v286[0] = &off_1EA99FBD8;
  v286[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLinear;
  v287 = v286;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v104 + 200))(v104, v286);
  v105 = v287;
  if (v287 == v286)
  {
    v106 = 4;
    v105 = v286;
  }
  else
  {
    if (!v287)
      goto LABEL_118;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_118:
  MIL::Validation::TensorDTypeConstraints::Make(&v276);
  v107 = v276;
  std::string::basic_string[abi:ne180100]<0>(v247, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v247, 0, (uint64_t *)&Scalar);
  v249 = Scalar;
  if (Scalar)
  {
    v108 = (std::__shared_weak_count *)operator new();
    v109 = Scalar;
    v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v108->__shared_owners_ = 0;
    v108->__shared_weak_owners_ = 0;
    v108[1].__vftable = v109;
  }
  else
  {
    v108 = 0;
  }
  v250 = v108;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v245, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v107 + 3))(v107, &v249, v245);
  if (v246 < 0)
    operator delete(v245[0]);
  v110 = v250;
  if (v250)
  {
    v111 = (unint64_t *)&v250->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = Scalar;
  Scalar = 0;
  if (v113)
    (*((void (**)(std::__shared_weak_count_vtbl *))v113->~__shared_weak_count + 1))(v113);
  if (v248 < 0)
    operator delete(v247[0]);
  v114 = v276;
  std::string::basic_string[abi:ne180100]<0>(v241, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v241, 0, (uint64_t *)&Scalar);
  v243 = Scalar;
  if (Scalar)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v116 = Scalar;
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v116;
  }
  else
  {
    v115 = 0;
  }
  v244 = v115;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v114 + 3))(v114, &v243, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v117 = v244;
  if (v244)
  {
    v118 = (unint64_t *)&v244->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = Scalar;
  Scalar = 0;
  if (v120)
    (*((void (**)(std::__shared_weak_count_vtbl *))v120->~__shared_weak_count + 1))(v120);
  if (v242 < 0)
    operator delete(v241[0]);
  v121 = v276;
  std::string::basic_string[abi:ne180100]<0>(v235, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v235, 1, (uint64_t *)&Scalar);
  v237 = Scalar;
  if (Scalar)
  {
    v122 = (std::__shared_weak_count *)operator new();
    v123 = Scalar;
    v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v122->__shared_owners_ = 0;
    v122->__shared_weak_owners_ = 0;
    v122[1].__vftable = v123;
  }
  else
  {
    v122 = 0;
  }
  v238 = v122;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v121 + 3))(v121, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v124 = v238;
  if (v238)
  {
    v125 = (unint64_t *)&v238->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = Scalar;
  Scalar = 0;
  if (v127)
    (*((void (**)(std::__shared_weak_count_vtbl *))v127->~__shared_weak_count + 1))(v127);
  if (v236 < 0)
    operator delete(v235[0]);
  v128 = v276;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v231 = Scalar;
  if (Scalar)
  {
    v129 = (std::__shared_weak_count *)operator new();
    v130 = Scalar;
    v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v129->__shared_owners_ = 0;
    v129->__shared_weak_owners_ = 0;
    v129[1].__vftable = v130;
  }
  else
  {
    v129 = 0;
  }
  v232 = v129;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v229, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v128 + 3))(v128, &v231, v229);
  if (v230 < 0)
    operator delete(v229[0]);
  v131 = v232;
  if (v232)
  {
    v132 = (unint64_t *)&v232->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = Scalar;
  Scalar = 0;
  if (v134)
    (*((void (**)(std::__shared_weak_count_vtbl *))v134->~__shared_weak_count + 1))(v134);
  v135 = *a3;
  v227 = v276;
  if (v276)
  {
    v136 = (std::__shared_weak_count *)operator new();
    v137 = v276;
    v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v136->__shared_owners_ = 0;
    v136->__shared_weak_owners_ = 0;
    v136[1].__vftable = (std::__shared_weak_count_vtbl *)v137;
  }
  else
  {
    v136 = 0;
  }
  v228 = v136;
  v276 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v135 + 56))(v135, &v227);
  v138 = v228;
  if (v228)
  {
    v139 = (unint64_t *)&v228->__shared_owners_;
    do
      v140 = __ldaxr(v139);
    while (__stlxr(v140 - 1, v139));
    if (!v140)
    {
      ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
      std::__shared_weak_count::__release_weak(v138);
    }
  }
  v141 = v276;
  v276 = 0;
  if (v141)
    (*((void (**)(void **))*v141 + 1))(v141);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v276);
  v142 = v276;
  std::string::basic_string[abi:ne180100]<0>(v223, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 0, (uint64_t *)&Scalar);
  v225 = Scalar;
  if (Scalar)
  {
    v143 = (std::__shared_weak_count *)operator new();
    v144 = Scalar;
    v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143[1].__vftable = v144;
  }
  else
  {
    v143 = 0;
  }
  v226 = v143;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v142 + 3))(v142, &v225, -1, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v145 = v226;
  if (v226)
  {
    v146 = (unint64_t *)&v226->__shared_owners_;
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  v148 = Scalar;
  Scalar = 0;
  if (v148)
    (*((void (**)(std::__shared_weak_count_vtbl *))v148->~__shared_weak_count + 1))(v148);
  if (v224 < 0)
    operator delete(v223[0]);
  v149 = v276;
  std::string::basic_string[abi:ne180100]<0>(v217, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v150 = (std::__shared_weak_count *)operator new();
    v151 = Scalar;
    v150->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v150->__shared_owners_ = 0;
    v150->__shared_weak_owners_ = 0;
    v150[1].__vftable = v151;
  }
  else
  {
    v150 = 0;
  }
  v220 = v150;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v149 + 3))(v149, &v219, 0, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v152 = v220;
  if (v220)
  {
    v153 = (unint64_t *)&v220->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = Scalar;
  Scalar = 0;
  if (v155)
    (*((void (**)(std::__shared_weak_count_vtbl *))v155->~__shared_weak_count + 1))(v155);
  if (v218 < 0)
    operator delete(v217[0]);
  v156 = v276;
  std::string::basic_string[abi:ne180100]<0>(v211, "weight");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v211, 0, (uint64_t *)&Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v157 = (std::__shared_weak_count *)operator new();
    v158 = Scalar;
    v157->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v157->__shared_owners_ = 0;
    v157->__shared_weak_owners_ = 0;
    v157[1].__vftable = v158;
  }
  else
  {
    v157 = 0;
  }
  v214 = v157;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v209, "D_in");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, uint64_t, void **))*v156 + 3))(v156, &v213, 1, v209);
  if (v210 < 0)
    operator delete(v209[0]);
  v159 = v214;
  if (v214)
  {
    v160 = (unint64_t *)&v214->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = Scalar;
  Scalar = 0;
  if (v162)
    (*((void (**)(std::__shared_weak_count_vtbl *))v162->~__shared_weak_count + 1))(v162);
  if (v212 < 0)
    operator delete(v211[0]);
  v163 = v276;
  std::string::basic_string[abi:ne180100]<0>(v205, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 1, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = Scalar;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v208 = v164;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v203, "D_out");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v163 + 3))(v163, &v207, 0, v203);
  if (v204 < 0)
    operator delete(v203[0]);
  v166 = v208;
  if (v208)
  {
    v167 = (unint64_t *)&v208->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = Scalar;
  Scalar = 0;
  if (v169)
    (*((void (**)(std::__shared_weak_count_vtbl *))v169->~__shared_weak_count + 1))(v169);
  if (v206 < 0)
    operator delete(v205[0]);
  v170 = *a3;
  v201 = v276;
  if (v276)
  {
    v171 = (std::__shared_weak_count *)operator new();
    v172 = v276;
    v171->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v171->__shared_owners_ = 0;
    v171->__shared_weak_owners_ = 0;
    v171[1].__vftable = (std::__shared_weak_count_vtbl *)v172;
  }
  else
  {
    v171 = 0;
  }
  v202 = v171;
  v276 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v170 + 56))(v170, &v201);
  v173 = v202;
  if (v202)
  {
    v174 = (unint64_t *)&v202->__shared_owners_;
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v276;
  v276 = 0;
  if (v176)
    (*((void (**)(void **))*v176 + 1))(v176);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v177 = __p;
  std::string::basic_string[abi:ne180100]<0>(v197, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v197, 1, (uint64_t *)&v258);
  v199 = v258;
  if (v258)
  {
    v178 = (std::__shared_weak_count *)operator new();
    v179 = (std::__shared_weak_count_vtbl *)v258;
    v178->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v178->__shared_owners_ = 0;
    v178->__shared_weak_owners_ = 0;
    v178[1].__vftable = v179;
  }
  else
  {
    v178 = 0;
  }
  v200 = v178;
  v258 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v276, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v279, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v280, "int32");
  std::string::basic_string[abi:ne180100]<0>(v281, "int8");
  std::string::basic_string[abi:ne180100]<0>(v282, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v276, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v177 + 24))(v177, &v199, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v282[i + 2]) < 0)
      operator delete((void *)v282[i]);
  }
  v181 = v200;
  if (v200)
  {
    v182 = (unint64_t *)&v200->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = v258;
  v258 = 0;
  if (v184)
    (*(void (**)(void *))(*(_QWORD *)v184 + 8))(v184);
  if (v198 < 0)
    operator delete(v197[0]);
  v185 = *a3;
  v195 = __p;
  if (__p)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = (std::__shared_weak_count_vtbl *)__p;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v196 = v186;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v185 + 56))(v185, &v195);
  v188 = v196;
  if (v196)
  {
    v189 = (unint64_t *)&v196->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = __p;
  __p = 0;
  if (v191)
    (*(void (**)(void *))(*(_QWORD *)v191 + 8))(v191);
  if (v271)
  {
    v192 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v271);
    MEMORY[0x1E0C023A0](v192, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v265, 0);
  result = (uint64_t)v275;
  if (v275)
  {
    v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v275);
    return MEMORY[0x1E0C023A0](v194, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0852848(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x300];
  STACK[0x300] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x318], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2D8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x340], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::MatMul::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  void **v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  void **v71;
  char *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char **v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _OWORD *v91;
  unsigned __int8 *v92;
  void **v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void **v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count_vtbl *v112;
  void **v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void **v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count_vtbl *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count_vtbl *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void **v133;
  void **v134;
  std::__shared_weak_count *v135;
  std::__shared_weak_count_vtbl *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  void **v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count_vtbl *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count_vtbl *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  void **v154;
  void *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count_vtbl *v157;
  uint64_t i;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count_vtbl *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t result;
  uint64_t v172;
  void *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177;
  std::__shared_weak_count *v178;
  void **v179;
  std::__shared_weak_count *v180;
  void *v181[2];
  char v182;
  void *v183[2];
  char v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  std::__shared_weak_count_vtbl *v191;
  std::__shared_weak_count *v192;
  void **v193;
  std::__shared_weak_count *v194;
  void *v195[2];
  char v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  void *v199[2];
  char v200;
  void *v201[2];
  char v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  void *v207[2];
  char v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  void *v211;
  std::__shared_weak_count *v212;
  __n128 v213;
  __int128 v214;
  __int128 v215;
  void *v216[2];
  uint64_t v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  __n128 v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  char **v225;
  __n128 v226;
  __n128 v227;
  __n128 v228;
  void *__p;
  void *v230;
  _QWORD *v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  __n128 v235;
  _QWORD *v236;
  void **v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD v240[3];
  uint64_t v241[3];
  uint64_t v242[3];
  _QWORD v243[3];
  std::__shared_weak_count_vtbl *Scalar;
  uint64_t p_on_zero_shared;
  uint64_t v246;
  _QWORD v247[3];
  _QWORD *v248;
  _BYTE v249[24];
  _BYTE *v250;
  _BYTE v251[24];
  _BYTE *v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v236 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v9 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v9->__on_zero_shared;
  v246 = (uint64_t)&v9->__on_zero_shared;
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  v9->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  Scalar = v9;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = operator new(0x10uLL);
  v234 = v12 + 2;
  *v12 = v10;
  v12[1] = v11;
  v232 = v12;
  v233 = v12 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v232);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v15 = operator new(0x10uLL);
  v231 = v15 + 2;
  *v15 = v13;
  v15[1] = v14;
  __p = v15;
  v230 = v15 + 2;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 3, &v235);
  MIL::IRParameter::Make(&v235, (uint64_t *)&v218);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&v218);
  v16 = v218;
  v218 = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (std::__shared_weak_count *)v235.n128_u64[1];
  if (v235.n128_u64[1])
  {
    v18 = (unint64_t *)(v235.n128_u64[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v20 = v236;
  v21 = MIL::IRUnknownDimension::Make(a1, 0);
  v22 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v23 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (uint64_t)&v23->__on_zero_shared;
  v246 = (uint64_t)&v23->__on_zero_shared;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  v23->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  Scalar = v23;
  v237 = (void **)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = operator new(0x10uLL);
  v234 = v26 + 2;
  *v26 = v24;
  v26[1] = v25;
  v232 = v26;
  v233 = v26 + 2;
  v238 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v232);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = operator new(0x10uLL);
  v231 = v29 + 2;
  *v29 = v27;
  v29[1] = v28;
  __p = v29;
  v230 = v29 + 2;
  v239 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v237, 3, &v228);
  MIL::IRParameter::Make(&v228, (uint64_t *)&v218);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v20, "y", (uint64_t *)&v218);
  v30 = v218;
  v218 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = (std::__shared_weak_count *)v228.n128_u64[1];
  if (v228.n128_u64[1])
  {
    v32 = (unint64_t *)(v228.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  if (Scalar)
  {
    p_on_zero_shared = (uint64_t)Scalar;
    operator delete(Scalar);
  }
  v34 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v227);
  MIL::IRParameter::Make(&v227, (uint64_t *)&v237);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v34, "transpose_x", (uint64_t *)&v237);
  v36 = v237;
  v237 = 0;
  if (v36)
    (*((void (**)(void **))*v36 + 1))(v36);
  v37 = (std::__shared_weak_count *)v227.n128_u64[1];
  if (v227.n128_u64[1])
  {
    v38 = (unint64_t *)(v227.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  v40 = v236;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v226);
  MIL::IRParameter::Make(&v226, (uint64_t *)&v237);
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(v40, "transpose_y", (uint64_t *)&v237);
  v42 = v237;
  v237 = 0;
  if (v42)
    (*((void (**)(void **))*v42 + 1))(v42);
  v43 = (std::__shared_weak_count *)v226.n128_u64[1];
  if (v226.n128_u64[1])
  {
    v44 = (unint64_t *)(v226.n128_u64[1] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v41 + 5) + 32))(*((_QWORD *)v41 + 5), 1);
  v225 = 0;
  v46 = operator new();
  *(_QWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  v237 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v225, (void **)v46);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&v237, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v225, 1uLL);
  v47 = v225;
  v48 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v49 = operator new(8uLL);
  v232 = v49;
  *v49 = v48;
  v234 = v49 + 1;
  v233 = v49 + 1;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v232);
  v50 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v51 = operator new(8uLL);
  __p = v51;
  *v51 = v50;
  v231 = v51 + 1;
  v230 = v51 + 1;
  p_on_zero_shared = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  v52 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v53 = operator new(8uLL);
  v218 = v53;
  *v53 = v52;
  v219 = v53 + 1;
  v220 = v53 + 1;
  v246 = MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v218);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 3, &v221);
  MIL::IRParameter::Make(&v221, &v222);
  v54 = v222;
  v223 = v222;
  if (v222)
  {
    v55 = (_QWORD *)operator new();
    v56 = v222;
    *v55 = &unk_1EA99F888;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v56;
  }
  else
  {
    v55 = 0;
  }
  v224 = v55;
  v222 = 0;
  v57 = v47[2];
  v58 = v47[1];
  if (v58 >= v57)
  {
    v60 = (v58 - *v47) >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v62 = v57 - *v47;
    if (v62 >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    v240[1] = v47 + 2;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v47 + 2), v63);
    v66 = (uint64_t *)&v64[16 * v60];
    *v66 = v54;
    v66[1] = (uint64_t)v55;
    v224 = 0;
    v223 = 0;
    v68 = *v47;
    v67 = v47[1];
    if (v67 == *v47)
    {
      v71 = (void **)v47[1];
      v69 = &v64[16 * v60];
    }
    else
    {
      v69 = &v64[16 * v60];
      do
      {
        v70 = *((_OWORD *)v67 - 1);
        v67 -= 16;
        *((_OWORD *)v69 - 1) = v70;
        v69 -= 16;
        *(_QWORD *)v67 = 0;
        *((_QWORD *)v67 + 1) = 0;
      }
      while (v67 != v68);
      v71 = (void **)*v47;
      v67 = v47[1];
    }
    v59 = (char *)(v66 + 2);
    *v47 = v69;
    v238 = (uint64_t)v71;
    v47[1] = (char *)(v66 + 2);
    v239 = (uint64_t)v67;
    v72 = v47[2];
    v47[2] = &v64[16 * v65];
    v240[0] = v72;
    v237 = v71;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v237);
  }
  else
  {
    *(_QWORD *)v58 = v54;
    *((_QWORD *)v58 + 1) = v55;
    v59 = v58 + 16;
    v224 = 0;
    v223 = 0;
  }
  v47[1] = v59;
  v73 = v222;
  v222 = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = (std::__shared_weak_count *)v221.n128_u64[1];
  if (v221.n128_u64[1])
  {
    v75 = (unint64_t *)(v221.n128_u64[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (__p)
  {
    v230 = __p;
    operator delete(__p);
  }
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  *(_OWORD *)v216 = *(_OWORD *)a2;
  v217 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v77 = (uint64_t)v236;
  *(_QWORD *)&v215 = v236;
  if (v236)
  {
    v78 = (_QWORD *)operator new();
    *v78 = &unk_1EA99F8E8;
    v78[1] = 0;
    v78[2] = 0;
    v78[3] = v77;
  }
  else
  {
    v78 = 0;
  }
  *((_QWORD *)&v215 + 1) = v78;
  v236 = 0;
  *(_QWORD *)&v214 = v225;
  if (v225)
  {
    v79 = (_QWORD *)operator new();
    v80 = v225;
    *v79 = &unk_1EA99F948;
    v79[1] = 0;
    v79[2] = 0;
    v79[3] = v80;
  }
  else
  {
    v79 = 0;
  }
  *((_QWORD *)&v214 + 1) = v79;
  v225 = 0;
  v252 = 0;
  v250 = 0;
  MIL::IROperator::Make((__int128 *)v216, &v215, &v214, (uint64_t)v251, (uint64_t)v249, a3);
  v81 = v250;
  if (v250 == v249)
  {
    v82 = 4;
    v81 = v249;
  }
  else
  {
    if (!v250)
      goto LABEL_82;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_82:
  v83 = v252;
  if (v252 == v251)
  {
    v84 = 4;
    v83 = v251;
    goto LABEL_86;
  }
  if (v252)
  {
    v84 = 5;
LABEL_86:
    (*(void (**)(void))(*v83 + 8 * v84))();
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
  if (*((_QWORD *)&v214 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (SHIBYTE(v217) < 0)
    operator delete(v216[0]);
  v232 = 0;
  v91 = (_OWORD *)operator new();
  *v91 = 0u;
  v91[1] = 0u;
  *((_DWORD *)v91 + 8) = 1065353216;
  v232 = v91;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v213);
  MIL::IRParameter::Make(&v213, (uint64_t *)&v237);
  v92 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v91, "minimum_compute_type", (uint64_t *)&v237);
  v93 = v237;
  v237 = 0;
  if (v93)
    (*((void (**)(void **))*v93 + 1))(v93);
  v94 = (std::__shared_weak_count *)v213.n128_u64[1];
  if (v213.n128_u64[1])
  {
    v95 = (unint64_t *)(v213.n128_u64[1] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 32))(*((_QWORD *)v92 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v92 + 5) + 48))(*((_QWORD *)v92 + 5), 1);
  v97 = *a3;
  v98 = (std::__shared_weak_count_vtbl *)v232;
  v211 = v232;
  if (v232)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v98;
  }
  else
  {
    v99 = 0;
  }
  v212 = v99;
  v232 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v97 + 184))(v97, &v211);
  v100 = v212;
  if (v212)
  {
    p_shared_owners = (unint64_t *)&v212->__shared_owners_;
    do
      v102 = __ldaxr(p_shared_owners);
    while (__stlxr(v102 - 1, p_shared_owners));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = *a3;
  v247[0] = &off_1EA99FBD8;
  v247[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceMatMul;
  v248 = v247;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v103 + 200))(v103, v247);
  v104 = v248;
  if (v248 == v247)
  {
    v105 = 4;
    v104 = v247;
  }
  else
  {
    if (!v248)
      goto LABEL_119;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_119:
  MIL::Validation::TensorDTypeConstraints::Make(&v237);
  v106 = v237;
  std::string::basic_string[abi:ne180100]<0>(v207, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v207, 0, (uint64_t *)&Scalar);
  v209 = Scalar;
  if (Scalar)
  {
    v107 = (std::__shared_weak_count *)operator new();
    v108 = Scalar;
    v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v108;
  }
  else
  {
    v107 = 0;
  }
  v210 = v107;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v205, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v106 + 3))(v106, &v209, v205);
  if (v206 < 0)
    operator delete(v205[0]);
  v109 = v210;
  if (v210)
  {
    v110 = (unint64_t *)&v210->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = Scalar;
  Scalar = 0;
  if (v112)
    (*((void (**)(std::__shared_weak_count_vtbl *))v112->~__shared_weak_count + 1))(v112);
  if (v208 < 0)
    operator delete(v207[0]);
  v113 = v237;
  std::string::basic_string[abi:ne180100]<0>(v201, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v201, 0, (uint64_t *)&Scalar);
  v203 = Scalar;
  if (Scalar)
  {
    v114 = (std::__shared_weak_count *)operator new();
    v115 = Scalar;
    v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v114->__shared_owners_ = 0;
    v114->__shared_weak_owners_ = 0;
    v114[1].__vftable = v115;
  }
  else
  {
    v114 = 0;
  }
  v204 = v114;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v199, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v113 + 3))(v113, &v203, v199);
  if (v200 < 0)
    operator delete(v199[0]);
  v116 = v204;
  if (v204)
  {
    v117 = (unint64_t *)&v204->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = Scalar;
  Scalar = 0;
  if (v119)
    (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
  if (v202 < 0)
    operator delete(v201[0]);
  v120 = v237;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v197 = Scalar;
  if (Scalar)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = Scalar;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = v122;
  }
  else
  {
    v121 = 0;
  }
  v198 = v121;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v195, "T");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, void **))*v120 + 3))(v120, &v197, v195);
  if (v196 < 0)
    operator delete(v195[0]);
  v123 = v198;
  if (v198)
  {
    v124 = (unint64_t *)&v198->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = Scalar;
  Scalar = 0;
  if (v126)
    (*((void (**)(std::__shared_weak_count_vtbl *))v126->~__shared_weak_count + 1))(v126);
  v127 = *a3;
  v193 = v237;
  if (v237)
  {
    v128 = (std::__shared_weak_count *)operator new();
    v129 = v237;
    v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v128->__shared_owners_ = 0;
    v128->__shared_weak_owners_ = 0;
    v128[1].__vftable = (std::__shared_weak_count_vtbl *)v129;
  }
  else
  {
    v128 = 0;
  }
  v194 = v128;
  v237 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v127 + 56))(v127, &v193);
  v130 = v194;
  if (v194)
  {
    v131 = (unint64_t *)&v194->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v133 = v237;
  v237 = 0;
  if (v133)
    (*((void (**)(void **))*v133 + 1))(v133);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v237);
  v134 = v237;
  std::string::basic_string[abi:ne180100]<0>(v189, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v189, 0, (uint64_t *)&Scalar);
  v191 = Scalar;
  if (Scalar)
  {
    v135 = (std::__shared_weak_count *)operator new();
    v136 = Scalar;
    v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v135->__shared_owners_ = 0;
    v135->__shared_weak_owners_ = 0;
    v135[1].__vftable = v136;
  }
  else
  {
    v135 = 0;
  }
  v192 = v135;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v187, "XD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v134 + 3))(v134, &v191, 0, v187);
  if (v188 < 0)
    operator delete(v187[0]);
  v137 = v192;
  if (v192)
  {
    v138 = (unint64_t *)&v192->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = Scalar;
  Scalar = 0;
  if (v140)
    (*((void (**)(std::__shared_weak_count_vtbl *))v140->~__shared_weak_count + 1))(v140);
  if (v190 < 0)
    operator delete(v189[0]);
  v141 = v237;
  std::string::basic_string[abi:ne180100]<0>(v183, "y");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v183, 0, (uint64_t *)&Scalar);
  v185 = Scalar;
  if (Scalar)
  {
    v142 = (std::__shared_weak_count *)operator new();
    v143 = Scalar;
    v142->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v142->__shared_owners_ = 0;
    v142->__shared_weak_owners_ = 0;
    v142[1].__vftable = v143;
  }
  else
  {
    v142 = 0;
  }
  v186 = v142;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v181, "YD");
  (*((void (**)(void **, std::__shared_weak_count_vtbl **, _QWORD, void **))*v141 + 3))(v141, &v185, 0, v181);
  if (v182 < 0)
    operator delete(v181[0]);
  v144 = v186;
  if (v186)
  {
    v145 = (unint64_t *)&v186->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = Scalar;
  Scalar = 0;
  if (v147)
    (*((void (**)(std::__shared_weak_count_vtbl *))v147->~__shared_weak_count + 1))(v147);
  if (v184 < 0)
    operator delete(v183[0]);
  v148 = *a3;
  v179 = v237;
  if (v237)
  {
    v149 = (std::__shared_weak_count *)operator new();
    v150 = v237;
    v149->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v149->__shared_owners_ = 0;
    v149->__shared_weak_owners_ = 0;
    v149[1].__vftable = (std::__shared_weak_count_vtbl *)v150;
  }
  else
  {
    v149 = 0;
  }
  v180 = v149;
  v237 = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v148 + 56))(v148, &v179);
  v151 = v180;
  if (v180)
  {
    v152 = (unint64_t *)&v180->__shared_owners_;
    do
      v153 = __ldaxr(v152);
    while (__stlxr(v153 - 1, v152));
    if (!v153)
    {
      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
      std::__shared_weak_count::__release_weak(v151);
    }
  }
  v154 = v237;
  v237 = 0;
  if (v154)
    (*((void (**)(void **))*v154 + 1))(v154);
  MIL::Validation::PossibleStringValuesConstraints::Make(&__p);
  v155 = __p;
  std::string::basic_string[abi:ne180100]<0>(v175, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v175, 1, (uint64_t *)&v218);
  v177 = v218;
  if (v218)
  {
    v156 = (std::__shared_weak_count *)operator new();
    v157 = (std::__shared_weak_count_vtbl *)v218;
    v156->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v156->__shared_owners_ = 0;
    v156->__shared_weak_owners_ = 0;
    v156[1].__vftable = v157;
  }
  else
  {
    v156 = 0;
  }
  v178 = v156;
  v218 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v237, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v240, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v241, "int32");
  std::string::basic_string[abi:ne180100]<0>(v242, "int8");
  std::string::basic_string[abi:ne180100]<0>(v243, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&v237, 5);
  (*(void (**)(void *, void **, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v155 + 24))(v155, &v177, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v243[i + 2]) < 0)
      operator delete((void *)v243[i]);
  }
  v159 = v178;
  if (v178)
  {
    v160 = (unint64_t *)&v178->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  v162 = v218;
  v218 = 0;
  if (v162)
    (*(void (**)(void *))(*(_QWORD *)v162 + 8))(v162);
  if (v176 < 0)
    operator delete(v175[0]);
  v163 = *a3;
  v173 = __p;
  if (__p)
  {
    v164 = (std::__shared_weak_count *)operator new();
    v165 = (std::__shared_weak_count_vtbl *)__p;
    v164->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v164->__shared_owners_ = 0;
    v164->__shared_weak_owners_ = 0;
    v164[1].__vftable = v165;
  }
  else
  {
    v164 = 0;
  }
  v174 = v164;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v163 + 56))(v163, &v173);
  v166 = v174;
  if (v174)
  {
    v167 = (unint64_t *)&v174->__shared_owners_;
    do
      v168 = __ldaxr(v167);
    while (__stlxr(v168 - 1, v167));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
  }
  v169 = __p;
  __p = 0;
  if (v169)
    (*(void (**)(void *))(*(_QWORD *)v169 + 8))(v169);
  if (v232)
  {
    v170 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v232);
    MEMORY[0x1E0C023A0](v170, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v225, 0);
  result = (uint64_t)v236;
  if (v236)
  {
    v172 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v236);
    return MEMORY[0x1E0C023A0](v172, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0854430(_Unwind_Exception *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;

  v3 = STACK[0x250];
  STACK[0x250] = 0;
  if (v3)
    (*(void (**)(unint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x268], 0);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x218], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValidators::ValidateCall(MIL::Operators::Common::ios16::CustomValidators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  const void *v7;
  void *v8;
  void *v9;
  const void *Attribute;
  uint64_t Function;
  const void ***v12;
  uint64_t v13;
  uint64_t v14;
  const void ***v15;
  const void **v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  MIL::IRArgument **v20;
  MIL::IRArgument *v21;
  uint64_t Value;
  const MIL::IRValueType *v23;
  const MIL::IRValueType *v24;
  uint64_t Name;
  const MIL::IRValueType *v26;
  const void **v27;
  const void ***v28;
  BOOL v29;
  const void *v30;
  void *v31;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::string::size_type *v51;
  std::string::size_type v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *size;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  std::string *v64;
  std::string::size_type v65;
  _QWORD *v66;
  std::string::size_type *v67;
  std::string::size_type v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  std::string *v80;
  std::string::size_type v81;
  _QWORD *v82;
  std::string::size_type *v83;
  std::string::size_type v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  std::string *v94;
  std::string::size_type v95;
  _QWORD *v96;
  _QWORD *v97;
  std::string *v98;
  std::string::size_type v99;
  _QWORD *v100;
  _QWORD *v101;
  std::string *v102;
  std::string::size_type v103;
  _QWORD *v104;
  std::string::size_type *v105;
  std::string::size_type v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  std::string::size_type v112;
  uint64_t v113;
  unint64_t v114;
  MIL *v115;
  const MIL::IRValueType *Type;
  const MIL::IRValueType *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  std::string *v127;
  std::string::size_type v128;
  _QWORD *v129;
  _QWORD *v130;
  std::string *v131;
  std::string::size_type v132;
  _QWORD *v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD v145[6];
  int v146;
  void *v147[2];
  char v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  std::string v151;
  void *v152[2];
  char v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  void *v160;
  std::__shared_weak_count *v161;
  unsigned __int8 v162;
  std::string __p[3];
  void *v164;
  char v165;
  _BYTE v166[160];
  std::string v167;
  std::string v168;
  char v169[9];

  v5 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *, const MIL::IROperation *))(*(_QWORD *)this + 96))(this, a2);
  v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 64) + 72))(v5 + 64);
  if (!v6)
  {
LABEL_29:
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v33 = (std::__shared_weak_count *)LocationPtr[1];
    v158 = *LocationPtr;
    v159 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v156, "The operation is not nested within a program.");
    MIL::ValidationResult::ValidationResult(a3, &v158, 400, v156);
    if (v157 < 0)
      operator delete(v156[0]);
    v36 = v159;
    if (!v159)
      return;
    v37 = (unint64_t *)&v159->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
LABEL_46:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    return;
  }
  v7 = v6;
  if (!v8)
  {
    while (1)
    {
      v30 = (const void *)(*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 72))(v7);
      if (!v30)
        goto LABEL_29;
      v7 = v30;
      v8 = v31;
      if (v9)
      {
        if (v31)
          break;
      }
      else
      {
        if (v8)
          break;
      }
    }
  }
  if (!v9)
  {
    v39 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v40 = (std::__shared_weak_count *)v39[1];
    v154 = *v39;
    v155 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    std::string::basic_string[abi:ne180100]<0>(v152, "The operation is not nested within a function.");
    MIL::ValidationResult::ValidationResult(a3, &v154, 400, v152);
    if (v153 < 0)
      operator delete(v152[0]);
    v36 = v155;
    if (!v155)
      return;
    v43 = (unint64_t *)&v155->__shared_owners_;
    do
      v38 = __ldaxr(v43);
    while (__stlxr(v38 - 1, v43));
    goto LABEL_46;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  Attribute = (const void *)MIL::IRObject::GetAttribute((uint64_t)this, (unsigned __int8 *)__p);
  MIL::IRValue::GetScalar<std::string>(Attribute, &v151);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!(*(uint64_t (**)(void *, std::string *))(*(_QWORD *)v8 + 56))(v8, &v151))
  {
    v44 = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
    v45 = (std::__shared_weak_count *)v44[1];
    v149 = *v44;
    v150 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    std::string::basic_string[abi:ne180100]<0>(v147, "The called function does not exist.");
    MIL::ValidationResult::ValidationResult(a3, &v149, 209, v147);
    if (v148 < 0)
      operator delete(v147[0]);
    v48 = v150;
    if (v150)
    {
      v49 = (unint64_t *)&v150->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    goto LABEL_213;
  }
  Function = MIL::IRProgram::GetFunction((uint64_t)v8);
  v12 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
  v13 = (*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(_QWORD *)this + 160))(this);
  v14 = v13;
  if (v12[2] != *(const void ***)(v13 + 16))
  {
    v51 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
    v52 = v51[1];
    v167.__r_.__value_.__r.__words[0] = *v51;
    v167.__r_.__value_.__l.__size_ = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    std::operator+<char>();
    std::string::push_back(&v168, 46);
    __p[0] = v168;
    memset(&v168, 0, sizeof(v168));
    MIL::ValidationResult::ValidationResult(v145, &v167, 300, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
    size = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
    if (v167.__r_.__value_.__l.__size_)
    {
      v56 = (unint64_t *)(v167.__r_.__value_.__l.__size_ + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    goto LABEL_153;
  }
  v17 = *v12;
  v15 = v12 + 1;
  v16 = v17;
  if (v17 == (const void **)v15)
  {
LABEL_22:
    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v145);
    goto LABEL_153;
  }
  v18 = v13 + 8;
  while (1)
  {
    v19 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v14, v16 + 4);
    if (v18 == v19)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v168.__r_.__value_.__s.__data_[0] = 34;
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)&v168, 1);
      v59 = *((char *)v16 + 55);
      if (v59 >= 0)
        v60 = (uint64_t)(v16 + 4);
      else
        v60 = (uint64_t)v16[4];
      if (v59 >= 0)
        v61 = *((unsigned __int8 *)v16 + 55);
      else
        v61 = (uint64_t)v16[5];
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" is a required argument to function ", 37);
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v151;
      else
        v64 = (std::string *)v151.__r_.__value_.__r.__words[0];
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
      else
        v65 = v151.__r_.__value_.__l.__size_;
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
      v168.__r_.__value_.__s.__data_[0] = 46;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)&v168, 1);
      v67 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
      v68 = v67[1];
      v167.__r_.__value_.__r.__words[0] = *v67;
      v167.__r_.__value_.__l.__size_ = v68;
      if (v68)
      {
        v69 = (unint64_t *)(v68 + 8);
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v145, &v167, 300, &v168);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      v71 = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
      if (!v167.__r_.__value_.__l.__size_)
        goto LABEL_150;
      v72 = (unint64_t *)(v167.__r_.__value_.__l.__size_ + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
LABEL_148:
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      goto LABEL_150;
    }
    v20 = *(MIL::IRArgument ***)(v19 + 56);
    if (*(_QWORD *)(v19 + 64) - (_QWORD)v20 != 16)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter \"", 11);
      v75 = *((char *)v16 + 55);
      if (v75 >= 0)
        v76 = (uint64_t)(v16 + 4);
      else
        v76 = (uint64_t)v16[4];
      if (v75 >= 0)
        v77 = *((unsigned __int8 *)v16 + 55);
      else
        v77 = (uint64_t)v16[5];
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"\" to function ", 14);
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v151;
      else
        v80 = (std::string *)v151.__r_.__value_.__r.__words[0];
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
      else
        v81 = v151.__r_.__value_.__l.__size_;
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)" may not be variadic.", 21);
      v83 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
      v84 = v83[1];
      v167.__r_.__value_.__r.__words[0] = *v83;
      v167.__r_.__value_.__l.__size_ = v84;
      if (v84)
      {
        v85 = (unint64_t *)(v84 + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v145, &v167, 300, &v168);
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      v71 = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
      if (!v167.__r_.__value_.__l.__size_)
        goto LABEL_150;
      v87 = (unint64_t *)(v167.__r_.__value_.__l.__size_ + 8);
      do
        v73 = __ldaxr(v87);
      while (__stlxr(v73 - 1, v87));
      goto LABEL_148;
    }
    v21 = *v20;
    if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)*v20 + 24))(*v20))
    {
      Value = MIL::IRArgument::GetValue(v21);
      v23 = (const MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Value + 32))(Value);
    }
    else
    {
      Name = MIL::IRArgument::GetName(v21);
      v23 = (const MIL::IRValueType *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 8) + 24))((char *)this + 64, Name, 1);
    }
    v26 = v23;
    if ((MIL::IsEqualOrStrongerType((MIL *)v16[7], v23, v24) & 1) == 0)
      break;
    v27 = (const void **)v16[1];
    if (v27)
    {
      do
      {
        v28 = (const void ***)v27;
        v27 = (const void **)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (const void ***)v16[2];
        v29 = *v28 == v16;
        v16 = (const void **)v28;
      }
      while (!v29);
    }
    v16 = (const void **)v28;
    if (v28 == v15)
      goto LABEL_22;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameter '", 11);
  v89 = *((char *)v16 + 55);
  if (v89 >= 0)
    v90 = (uint64_t)(v16 + 4);
  else
    v90 = (uint64_t)v16[4];
  if (v89 >= 0)
    v91 = *((unsigned __int8 *)v16 + 55);
  else
    v91 = (uint64_t)v16[5];
  v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
  v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"' has incompatible type for function '", 38);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v94 = &v151;
  else
    v94 = (std::string *)v151.__r_.__value_.__r.__words[0];
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v95 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  else
    v95 = v151.__r_.__value_.__l.__size_;
  v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
  v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"'. Expected ", 12);
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v16[7] + 56))(&v168);
  if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = &v168;
  else
    v98 = (std::string *)v168.__r_.__value_.__r.__words[0];
  if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v99 = HIBYTE(v168.__r_.__value_.__r.__words[2]);
  else
    v99 = v168.__r_.__value_.__l.__size_;
  v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v98, v99);
  v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"; got ", 6);
  (*(void (**)(std::string *__return_ptr, const MIL::IRValueType *))(*(_QWORD *)v26 + 56))(&v167, v26);
  if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &v167;
  else
    v102 = (std::string *)v167.__r_.__value_.__r.__words[0];
  if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v103 = HIBYTE(v167.__r_.__value_.__r.__words[2]);
  else
    v103 = v167.__r_.__value_.__l.__size_;
  v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)v102, v103);
  LOBYTE(v160) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)&v160, 1);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  v105 = (std::string::size_type *)MIL::IRObject::GetLocationPtr(this);
  v106 = v105[1];
  v167.__r_.__value_.__r.__words[0] = *v105;
  v167.__r_.__value_.__l.__size_ = v106;
  if (v106)
  {
    v107 = (unint64_t *)(v106 + 8);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(v145, &v167, 304, &v168);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  v71 = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
  if (v167.__r_.__value_.__l.__size_)
  {
    v109 = (unint64_t *)(v167.__r_.__value_.__l.__size_ + 8);
    do
      v73 = __ldaxr(v109);
    while (__stlxr(v73 - 1, v109));
    goto LABEL_148;
  }
LABEL_150:
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                 + 24);
  __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (v165 < 0)
    operator delete(v164);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1E0C022F8](v166);
  if (((*(uint64_t (**)(_QWORD *))(v145[0] + 16))(v145) & 1) == 0)
    goto LABEL_212;
LABEL_153:
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v145);
  v110 = MIL::IRProgram::GetFunction((uint64_t)v8);
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v110 + 160))(&v168);
  v111 = (_QWORD *)(*(uint64_t (**)(MIL::Operators::Common::ios16::CustomValidators *))(*(_QWORD *)this + 176))(this);
  v112 = v168.__r_.__value_.__r.__words[0];
  if ((uint64_t)(v168.__r_.__value_.__l.__size_ - v168.__r_.__value_.__r.__words[0]) >> 3 == (uint64_t)(v111[1] - *v111) >> 4)
  {
    if (v168.__r_.__value_.__l.__size_ == v168.__r_.__value_.__r.__words[0])
    {
LABEL_159:
      MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v145);
    }
    else
    {
      v113 = 0;
      v114 = 0;
      while (1)
      {
        v115 = *(MIL **)(v112 + 8 * v114);
        Type = (const MIL::IRValueType *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(*v111 + v113));
        if ((MIL::IsEqualOrStrongerType(v115, Type, v117) & 1) == 0)
          break;
        ++v114;
        v112 = v168.__r_.__value_.__r.__words[0];
        v113 += 16;
        if (v114 >= (uint64_t)(v168.__r_.__value_.__l.__size_ - v168.__r_.__value_.__r.__words[0]) >> 3)
          goto LABEL_159;
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output at index ", 16);
      v125 = (_QWORD *)std::ostream::operator<<();
      v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)" has incompatible type for function '", 37);
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v127 = &v151;
      else
        v127 = (std::string *)v151.__r_.__value_.__r.__words[0];
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v128 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
      else
        v128 = v151.__r_.__value_.__l.__size_;
      v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
      v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"'. Expected ", 12);
      (*(void (**)(std::string *__return_ptr, MIL *))(*(_QWORD *)v115 + 56))(&v167, v115);
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = &v167;
      else
        v131 = (std::string *)v167.__r_.__value_.__r.__words[0];
      if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = HIBYTE(v167.__r_.__value_.__r.__words[2]);
      else
        v132 = v167.__r_.__value_.__l.__size_;
      v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)v131, v132);
      v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"; got ", 6);
      (*(void (**)(void **__return_ptr, const MIL::IRValueType *))(*(_QWORD *)Type + 56))(&v160, Type);
      if ((v162 & 0x80u) == 0)
        v135 = &v160;
      else
        v135 = v160;
      if ((v162 & 0x80u) == 0)
        v136 = v162;
      else
        v136 = (uint64_t)v161;
      v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)v135, v136);
      v169[0] = 46;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v169, 1);
      if ((char)v162 < 0)
        operator delete(v160);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      v138 = MIL::IRObject::GetLocationPtr(this);
      v139 = *(std::__shared_weak_count **)(v138 + 8);
      v160 = *(void **)v138;
      v161 = v139;
      if (v139)
      {
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldxr(v140);
        while (__stxr(v141 + 1, v140));
      }
      std::stringbuf::str();
      MIL::ValidationResult::ValidationResult(v145, &v160, 313, &v167);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      v142 = v161;
      if (v161)
      {
        v143 = (unint64_t *)&v161->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
      if (v165 < 0)
        operator delete(v164);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1E0C022F8](v166);
    }
  }
  else
  {
    v118 = MIL::IRObject::GetLocationPtr(this);
    v119 = *(std::__shared_weak_count **)(v118 + 8);
    v160 = *(void **)v118;
    v161 = v119;
    if (v119)
    {
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
    }
    std::operator+<char>();
    std::string::push_back(&v167, 46);
    __p[0] = v167;
    memset(&v167, 0, sizeof(v167));
    MIL::ValidationResult::ValidationResult(v145, &v160, 310, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v167.__r_.__value_.__l.__data_);
    v122 = v161;
    if (v161)
    {
      v123 = (unint64_t *)&v161->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
  }
  if (v168.__r_.__value_.__r.__words[0])
  {
    v168.__r_.__value_.__l.__size_ = v168.__r_.__value_.__r.__words[0];
    operator delete(v168.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(_QWORD *))(v145[0] + 16))(v145) & 1) != 0)
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v145);
    MIL::ValidationResult::ValidationResult(a3);
  }
  else
  {
LABEL_212:
    MIL::MILResult::MILResult((std::string *)a3, (uint64_t)v145);
    *(_QWORD *)a3 = &off_1EA99F170;
    *((_DWORD *)a3 + 12) = v146;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v145);
  }
LABEL_213:
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
}

void sub_1E08557A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;
  void *v59;

  if (*(char *)(v57 - 121) < 0)
    operator delete(*(void **)(v57 - 144));
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a46);
  std::ostringstream::~ostringstream((uint64_t)&a52);
  v59 = *(void **)(v57 - 120);
  if (v59)
  {
    *(_QWORD *)(v57 - 112) = v59;
    operator delete(v59);
  }
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *MIL::Operators::Common::ios16::Call::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  uint64_t v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t Scalar;
  _BYTE v45[24];
  _BYTE *v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v41 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v38 = 0;
  v39 = 0;
  v36 = 0;
  v37 = 0;
  v47[0] = &unk_1EA99FAC8;
  v47[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateCall;
  v48 = v47;
  v46 = 0;
  MIL::IROperator::Make((__int128 *)__p, 0, -1, 1, -1, (uint64_t)&v38, (uint64_t)&v36, (uint64_t)v47, a3, (uint64_t)v45);
  v5 = v46;
  if (v46 == v45)
  {
    v6 = 4;
    v5 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v48;
  if (v48 == v47)
  {
    v8 = 4;
    v7 = v47;
    goto LABEL_10;
  }
  if (v48)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v39;
  if (v39)
  {
    v13 = (unint64_t *)&v39->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  v15 = operator new();
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_DWORD *)(v15 + 32) = 1065353216;
  v35 = v15;
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v33);
  MIL::IRParameter::Make(&v33, &v34);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v15, "function", &v34);
  v17 = v34;
  v34 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v33.n128_u64[1];
  if (v33.n128_u64[1])
  {
    v19 = (unint64_t *)(v33.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v21 = *a3;
  v22 = v35;
  v31 = v35;
  if (v35)
  {
    v23 = (std::__shared_weak_count *)operator new();
    v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v23->__shared_owners_ = 0;
    v23->__shared_weak_owners_ = 0;
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)v22;
  }
  else
  {
    v23 = 0;
  }
  v32 = v23;
  v35 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 184))(v21, &v31);
  v24 = v32;
  if (v32)
  {
    v25 = (unint64_t *)&v32->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v35)
  {
    v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v35);
    MEMORY[0x1E0C023A0](v27, 0x10A0C408EF24B1CLL);
  }
  v28 = *a3;
  v42[0] = &off_1EA9A1318;
  v43 = v42;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 136))(v28, v42);
  result = v43;
  if (v43 == v42)
  {
    v30 = 4;
    result = v42;
  }
  else
  {
    if (!v43)
      return result;
    v30 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v30))();
}

void sub_1E0855D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  uint64_t *v34;
  char *v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a34;
  if (a34 == v35)
  {
    v38 = 4;
    v37 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_6:
  v39 = *v34;
  *v34 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x1E0C023A0);
}

_QWORD *std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1EA9A1318;
  return result;
}

void std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1EA9A1318;
}

void std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  const void *Attribute;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  Attribute = (const void *)MIL::IRObject::GetAttribute(a1, (unsigned __int8 *)__p);
  MIL::IRValue::GetScalar<std::string>(Attribute, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1E0855F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<MIL::Operators::Common::ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,std::string ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t MIL::Operators::Common::ios16::BatchNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  char **v66;
  uint64_t v67;
  std::__shared_weak_count_vtbl *v68;
  uint64_t v69;
  std::__shared_weak_count_vtbl *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  char *v86;
  __int128 v87;
  char *v88;
  char *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  char **v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _OWORD *v108;
  unsigned __int8 *v109;
  void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count_vtbl *v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count_vtbl *v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count_vtbl *v143;
  void *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count_vtbl *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count_vtbl *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  void *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  void *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  void *v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count_vtbl *v206;
  void *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count_vtbl *v213;
  void *v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count_vtbl *v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  uint64_t v237;
  uint64_t i;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  uint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t result;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  void *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  void *v267[2];
  char v268;
  void *v269[2];
  char v270;
  std::__shared_weak_count_vtbl *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275[2];
  char v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281[2];
  char v282;
  std::__shared_weak_count_vtbl *v283;
  std::__shared_weak_count *v284;
  void *v285[2];
  char v286;
  void *v287[2];
  char v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  void *v291;
  std::__shared_weak_count *v292;
  void *v293[2];
  char v294;
  std::__shared_weak_count_vtbl *v295;
  std::__shared_weak_count *v296;
  void *v297;
  std::__shared_weak_count *v298;
  void *v299[2];
  char v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  void *v303[2];
  char v304;
  void *v305[2];
  char v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  void *v309[2];
  char v310;
  void *v311[2];
  char v312;
  std::__shared_weak_count_vtbl *v313;
  std::__shared_weak_count *v314;
  void *v315[2];
  char v316;
  void *v317[2];
  char v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  void *v321[2];
  char v322;
  void *v323[2];
  char v324;
  std::__shared_weak_count_vtbl *v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  void *v329[2];
  char v330;
  std::__shared_weak_count_vtbl *v331;
  std::__shared_weak_count *v332;
  void *v333[2];
  char v334;
  void *v335[2];
  char v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  std::__shared_weak_count_vtbl *v339;
  std::__shared_weak_count *v340;
  __n128 v341;
  __int128 v342;
  __int128 v343;
  void *v344[2];
  uint64_t v345;
  __n128 v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  char **v350;
  __n128 v351;
  __n128 v352;
  __n128 v353;
  __n128 v354;
  __n128 v355;
  __n128 v356;
  _QWORD *v357;
  void *__p;
  uint64_t Scalar;
  char *v360;
  _QWORD v361[3];
  uint64_t v362[3];
  uint64_t v363[3];
  _QWORD v364[3];
  std::__shared_weak_count_vtbl *v365;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v367;
  _BYTE v368[24];
  _BYTE *v369;
  _BYTE v370[24];
  _BYTE *v371;
  _QWORD v372[3];
  _QWORD *v373;
  std::__shared_weak_count_vtbl *v374;
  uint64_t v375;
  void (__cdecl **v376)(std::__shared_weak_count *__hidden);
  uint64_t v377[3];

  v377[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v357 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v360 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  Scalar = (uint64_t)(v10 + 24);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v367 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v365 = v14;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v356);
  MIL::IRParameter::Make(&v356, &v348);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v348);
  v15 = v348;
  v348 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v356.n128_u64[1];
  if (v356.n128_u64[1])
  {
    v17 = (unint64_t *)(v356.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v357;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (char *)operator new(8uLL);
  __p = v21;
  *(_QWORD *)v21 = v20;
  v360 = v21 + 8;
  Scalar = (uint64_t)(v21 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v367 = &v23->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v355);
  MIL::IRParameter::Make(&v355, &v348);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "mean", &v348);
  v25 = v348;
  v348 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v355.n128_u64[1];
  if (v355.n128_u64[1])
  {
    v27 = (unint64_t *)(v355.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v357;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  __p = v31;
  *(_QWORD *)v31 = v30;
  v360 = v31 + 8;
  Scalar = (uint64_t)(v31 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v367 = &v33->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v354);
  MIL::IRParameter::Make(&v354, &v348);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v29, "variance", &v348);
  v35 = v348;
  v348 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v354.n128_u64[1];
  if (v354.n128_u64[1])
  {
    v37 = (unint64_t *)(v354.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  v39 = v357;
  v40 = MIL::IRUnknownDimension::Make(a1, 0);
  v41 = (char *)operator new(8uLL);
  __p = v41;
  *(_QWORD *)v41 = v40;
  v360 = v41 + 8;
  Scalar = (uint64_t)(v41 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v43;
  v43->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v42;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v43->~__shared_weak_count_0;
  v367 = &v43->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v353);
  MIL::IRParameter::Make(&v353, &v348);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v39, "beta", &v348);
  v45 = v348;
  v348 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = (std::__shared_weak_count *)v353.n128_u64[1];
  if (v353.n128_u64[1])
  {
    v47 = (unint64_t *)(v353.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v357;
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = (char *)operator new(8uLL);
  __p = v51;
  *(_QWORD *)v51 = v50;
  v360 = v51 + 8;
  Scalar = (uint64_t)(v51 + 8);
  v374 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v52 = MIL::IRUnknownDimension::Make(a1, 0);
  v53 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v53;
  v53->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v52;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v53->~__shared_weak_count_0;
  v367 = &v53->~__shared_weak_count_0;
  v375 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v365);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v374, 2, &v352);
  MIL::IRParameter::Make(&v352, &v348);
  v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v49, "gamma", &v348);
  v55 = v348;
  v348 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = (std::__shared_weak_count *)v352.n128_u64[1];
  if (v352.n128_u64[1])
  {
    v57 = (unint64_t *)(v352.n128_u64[1] + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 32))(*((_QWORD *)v54 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v54 + 5) + 48))(*((_QWORD *)v54 + 5), 1);
  v59 = v357;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v351);
  MIL::IRParameter::Make(&v351, (uint64_t *)&v365);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v59, "epsilon", (uint64_t *)&v365);
  v61 = v365;
  v365 = 0;
  if (v61)
    (*((void (**)(std::__shared_weak_count_vtbl *))v61->~__shared_weak_count + 1))(v61);
  v62 = (std::__shared_weak_count *)v351.n128_u64[1];
  if (v351.n128_u64[1])
  {
    v63 = (unint64_t *)(v351.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  v350 = 0;
  v65 = operator new();
  *(_QWORD *)v65 = 0;
  *(_QWORD *)(v65 + 8) = 0;
  *(_QWORD *)(v65 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v350, (void **)v65);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v350, 1uLL);
  v66 = v350;
  v67 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v68 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v365 = v68;
  v68->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v67;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v68->~__shared_weak_count_0;
  v367 = &v68->~__shared_weak_count_0;
  v377[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v365);
  v69 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v70 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v374 = v70;
  v70->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v69;
  v375 = (uint64_t)&v70->~__shared_weak_count_0;
  v376 = &v70->~__shared_weak_count_0;
  v377[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v374);
  MIL::IRParameter::MakeTypeSet((uint64_t)v377, 2, &v346);
  MIL::IRParameter::Make(&v346, &v347);
  v71 = v347;
  v348 = v347;
  if (v347)
  {
    v72 = (_QWORD *)operator new();
    v73 = v347;
    *v72 = &unk_1EA99F888;
    v72[1] = 0;
    v72[2] = 0;
    v72[3] = v73;
  }
  else
  {
    v72 = 0;
  }
  v349 = v72;
  v347 = 0;
  v74 = v66[2];
  v75 = v66[1];
  if (v75 >= v74)
  {
    v77 = (v75 - *v66) >> 4;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v79 = v74 - *v66;
    if (v79 >> 3 > v78)
      v78 = v79 >> 3;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
      v80 = 0xFFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    v361[1] = v66 + 2;
    v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v66 + 2), v80);
    v83 = (uint64_t *)&v81[16 * v77];
    *v83 = v71;
    v83[1] = (uint64_t)v72;
    v349 = 0;
    v348 = 0;
    v85 = *v66;
    v84 = v66[1];
    if (v84 == *v66)
    {
      v88 = v66[1];
      v86 = &v81[16 * v77];
    }
    else
    {
      v86 = &v81[16 * v77];
      do
      {
        v87 = *((_OWORD *)v84 - 1);
        v84 -= 16;
        *((_OWORD *)v86 - 1) = v87;
        v86 -= 16;
        *(_QWORD *)v84 = 0;
        *((_QWORD *)v84 + 1) = 0;
      }
      while (v84 != v85);
      v88 = *v66;
      v84 = v66[1];
    }
    v76 = (char *)(v83 + 2);
    *v66 = v86;
    Scalar = (uint64_t)v88;
    v66[1] = (char *)(v83 + 2);
    v360 = v84;
    v89 = v66[2];
    v66[2] = &v81[16 * v82];
    v361[0] = v89;
    __p = v88;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v75 = v71;
    *((_QWORD *)v75 + 1) = v72;
    v76 = v75 + 16;
    v349 = 0;
    v348 = 0;
  }
  v66[1] = v76;
  v90 = v347;
  v347 = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v346.n128_u64[1];
  if (v346.n128_u64[1])
  {
    v92 = (unint64_t *)(v346.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (v374)
  {
    v375 = (uint64_t)v374;
    operator delete(v374);
  }
  if (v365)
  {
    p_get_deleter = v365;
    operator delete(v365);
  }
  *(_OWORD *)v344 = *(_OWORD *)a2;
  v345 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v94 = (uint64_t)v357;
  *(_QWORD *)&v343 = v357;
  if (v357)
  {
    v95 = (_QWORD *)operator new();
    *v95 = &unk_1EA99F8E8;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v343 + 1) = v95;
  v357 = 0;
  *(_QWORD *)&v342 = v350;
  if (v350)
  {
    v96 = (_QWORD *)operator new();
    v97 = v350;
    *v96 = &unk_1EA99F948;
    v96[1] = 0;
    v96[2] = 0;
    v96[3] = v97;
  }
  else
  {
    v96 = 0;
  }
  *((_QWORD *)&v342 + 1) = v96;
  v350 = 0;
  v372[0] = &unk_1EA99FAC8;
  v372[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateBatchNorm;
  v373 = v372;
  v371 = 0;
  MIL::IROperator::Make((__int128 *)v344, &v343, &v342, (uint64_t)v372, (uint64_t)v370, a3);
  v98 = v371;
  if (v371 == v370)
  {
    v99 = 4;
    v98 = v370;
  }
  else
  {
    if (!v371)
      goto LABEL_102;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_102:
  v100 = v373;
  if (v373 == v372)
  {
    v101 = 4;
    v100 = v372;
    goto LABEL_106;
  }
  if (v373)
  {
    v101 = 5;
LABEL_106:
    (*(void (**)(void))(*v100 + 8 * v101))();
  }
  v102 = (std::__shared_weak_count *)*((_QWORD *)&v342 + 1);
  if (*((_QWORD *)&v342 + 1))
  {
    v103 = (unint64_t *)(*((_QWORD *)&v342 + 1) + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = (std::__shared_weak_count *)*((_QWORD *)&v343 + 1);
  if (*((_QWORD *)&v343 + 1))
  {
    v106 = (unint64_t *)(*((_QWORD *)&v343 + 1) + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  if (SHIBYTE(v345) < 0)
    operator delete(v344[0]);
  v374 = 0;
  v108 = (_OWORD *)operator new();
  *v108 = 0u;
  v108[1] = 0u;
  *((_DWORD *)v108 + 8) = 1065353216;
  v374 = (std::__shared_weak_count_vtbl *)v108;
  v365 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v365, 1, &v341);
  MIL::IRParameter::Make(&v341, (uint64_t *)&__p);
  v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v108, "minimum_compute_type", (uint64_t *)&__p);
  v110 = __p;
  __p = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  v111 = (std::__shared_weak_count *)v341.n128_u64[1];
  if (v341.n128_u64[1])
  {
    v112 = (unint64_t *)(v341.n128_u64[1] + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 32))(*((_QWORD *)v109 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v109 + 5) + 48))(*((_QWORD *)v109 + 5), 1);
  v114 = *a3;
  v115 = v374;
  v339 = v374;
  if (v374)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v115;
  }
  else
  {
    v116 = 0;
  }
  v340 = v116;
  v374 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v114 + 184))(v114, &v339);
  v117 = v340;
  if (v340)
  {
    p_shared_owners = (unint64_t *)&v340->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v368);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v120 + 200))(v120, v368);
  v121 = v369;
  if (v369 == v368)
  {
    v122 = 4;
    v121 = v368;
  }
  else
  {
    if (!v369)
      goto LABEL_139;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_139:
  if (SHIBYTE(v360) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v123 = __p;
  std::string::basic_string[abi:ne180100]<0>(v335, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v335, 0, (uint64_t *)&v365);
  v337 = v365;
  if (v365)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = v365;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v338 = v124;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v333, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v123 + 24))(v123, &v337, v333);
  if (v334 < 0)
    operator delete(v333[0]);
  v126 = v338;
  if (v338)
  {
    v127 = (unint64_t *)&v338->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = v365;
  v365 = 0;
  if (v129)
    (*((void (**)(std::__shared_weak_count_vtbl *))v129->~__shared_weak_count + 1))(v129);
  if (v336 < 0)
    operator delete(v335[0]);
  v130 = __p;
  std::string::basic_string[abi:ne180100]<0>(v329, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v329, 0, (uint64_t *)&v365);
  v331 = v365;
  if (v365)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = v365;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v332 = v131;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v327, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v130 + 24))(v130, &v331, v327);
  if (v328 < 0)
    operator delete(v327[0]);
  v133 = v332;
  if (v332)
  {
    v134 = (unint64_t *)&v332->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v365;
  v365 = 0;
  if (v136)
    (*((void (**)(std::__shared_weak_count_vtbl *))v136->~__shared_weak_count + 1))(v136);
  if (v330 < 0)
    operator delete(v329[0]);
  v137 = __p;
  std::string::basic_string[abi:ne180100]<0>(v323, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v323, 0, (uint64_t *)&v365);
  v325 = v365;
  if (v365)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = v365;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v326 = v138;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v321, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v137 + 24))(v137, &v325, v321);
  if (v322 < 0)
    operator delete(v321[0]);
  v140 = v326;
  if (v326)
  {
    v141 = (unint64_t *)&v326->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = v365;
  v365 = 0;
  if (v143)
    (*((void (**)(std::__shared_weak_count_vtbl *))v143->~__shared_weak_count + 1))(v143);
  if (v324 < 0)
    operator delete(v323[0]);
  v144 = __p;
  std::string::basic_string[abi:ne180100]<0>(v317, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v317, 1, (uint64_t *)&v365);
  v319 = v365;
  if (v365)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = v365;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v320 = v145;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v315, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v144 + 24))(v144, &v319, v315);
  if (v316 < 0)
    operator delete(v315[0]);
  v147 = v320;
  if (v320)
  {
    v148 = (unint64_t *)&v320->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v365;
  v365 = 0;
  if (v150)
    (*((void (**)(std::__shared_weak_count_vtbl *))v150->~__shared_weak_count + 1))(v150);
  if (v318 < 0)
    operator delete(v317[0]);
  v151 = __p;
  std::string::basic_string[abi:ne180100]<0>(v311, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v311, 1, (uint64_t *)&v365);
  v313 = v365;
  if (v365)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = v365;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v314 = v152;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v309, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v151 + 24))(v151, &v313, v309);
  if (v310 < 0)
    operator delete(v309[0]);
  v154 = v314;
  if (v314)
  {
    v155 = (unint64_t *)&v314->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = v365;
  v365 = 0;
  if (v157)
    (*((void (**)(std::__shared_weak_count_vtbl *))v157->~__shared_weak_count + 1))(v157);
  if (v312 < 0)
    operator delete(v311[0]);
  v158 = __p;
  std::string::basic_string[abi:ne180100]<0>(v305, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v305, 0, (uint64_t *)&v365);
  v307 = v365;
  if (v365)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = v365;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v308 = v159;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v303, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v158 + 24))(v158, &v307, v303);
  if (v304 < 0)
    operator delete(v303[0]);
  v161 = v308;
  if (v308)
  {
    v162 = (unint64_t *)&v308->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v365;
  v365 = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v306 < 0)
    operator delete(v305[0]);
  v165 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v365);
  v301 = v365;
  if (v365)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = v365;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v302 = v166;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v299, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v165 + 24))(v165, &v301, v299);
  if (v300 < 0)
    operator delete(v299[0]);
  v168 = v302;
  if (v302)
  {
    v169 = (unint64_t *)&v302->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = v365;
  v365 = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  v172 = *a3;
  v297 = __p;
  if (__p)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = (std::__shared_weak_count_vtbl *)__p;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v298 = v173;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v172 + 56))(v172, &v297);
  v175 = v298;
  if (v298)
  {
    v176 = (unint64_t *)&v298->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = __p;
  __p = 0;
  if (v178)
    (*(void (**)(void *))(*(_QWORD *)v178 + 8))(v178);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v179 = __p;
  std::string::basic_string[abi:ne180100]<0>(v293, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v293, 0, (uint64_t *)&v365);
  v295 = v365;
  if (v365)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = v365;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v296 = v180;
  v365 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v179 + 32))(v179, &v295, 3, 5);
  v182 = v296;
  if (v296)
  {
    v183 = (unint64_t *)&v296->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v365;
  v365 = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  if (v294 < 0)
    operator delete(v293[0]);
  v186 = *a3;
  v291 = __p;
  if (__p)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)__p;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v292 = v187;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v186 + 56))(v186, &v291);
  v189 = v292;
  if (v292)
  {
    v190 = (unint64_t *)&v292->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = __p;
  __p = 0;
  if (v192)
    (*(void (**)(void *))(*(_QWORD *)v192 + 8))(v192);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v193 = __p;
  std::string::basic_string[abi:ne180100]<0>(v287, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v287, 0, (uint64_t *)&v365);
  v289 = v365;
  if (v365)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = v365;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v290 = v194;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v285, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v193 + 24))(v193, &v289, 1, v285);
  if (v286 < 0)
    operator delete(v285[0]);
  v196 = v290;
  if (v290)
  {
    v197 = (unint64_t *)&v290->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = v365;
  v365 = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  if (v288 < 0)
    operator delete(v287[0]);
  v200 = __p;
  std::string::basic_string[abi:ne180100]<0>(v281, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v281, 0, (uint64_t *)&v365);
  v283 = v365;
  if (v365)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = v365;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v284 = v201;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v200 + 24))(v200, &v283, 0, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v203 = v284;
  if (v284)
  {
    v204 = (unint64_t *)&v284->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v365;
  v365 = 0;
  if (v206)
    (*((void (**)(std::__shared_weak_count_vtbl *))v206->~__shared_weak_count + 1))(v206);
  if (v282 < 0)
    operator delete(v281[0]);
  v207 = __p;
  std::string::basic_string[abi:ne180100]<0>(v275, "variance");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v275, 0, (uint64_t *)&v365);
  v277 = v365;
  if (v365)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = v365;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v278 = v208;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v207 + 24))(v207, &v277, 0, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v210 = v278;
  if (v278)
  {
    v211 = (unint64_t *)&v278->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v365;
  v365 = 0;
  if (v213)
    (*((void (**)(std::__shared_weak_count_vtbl *))v213->~__shared_weak_count + 1))(v213);
  if (v276 < 0)
    operator delete(v275[0]);
  v214 = __p;
  std::string::basic_string[abi:ne180100]<0>(v269, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 1, (uint64_t *)&v365);
  v271 = v365;
  if (v365)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = v365;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v272 = v215;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v267, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v214 + 24))(v214, &v271, 0, v267);
  if (v268 < 0)
    operator delete(v267[0]);
  v217 = v272;
  if (v272)
  {
    v218 = (unint64_t *)&v272->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = v365;
  v365 = 0;
  if (v220)
    (*((void (**)(std::__shared_weak_count_vtbl *))v220->~__shared_weak_count + 1))(v220);
  if (v270 < 0)
    operator delete(v269[0]);
  v221 = __p;
  std::string::basic_string[abi:ne180100]<0>(v263, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 1, (uint64_t *)&v365);
  v265 = v365;
  if (v365)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = v365;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v266 = v222;
  v365 = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v221 + 24))(v221, &v265, 0, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v224 = v266;
  if (v266)
  {
    v225 = (unint64_t *)&v266->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = v365;
  v365 = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v264 < 0)
    operator delete(v263[0]);
  v228 = *a3;
  v259 = __p;
  if (__p)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = (std::__shared_weak_count_vtbl *)__p;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v260 = v229;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v228 + 56))(v228, &v259);
  v231 = v260;
  if (v260)
  {
    v232 = (unint64_t *)&v260->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = __p;
  __p = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v348);
  v235 = v348;
  std::string::basic_string[abi:ne180100]<0>(v255, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v255, 1, v377);
  v257 = v377[0];
  if (v377[0])
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = v377[0];
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = (std::__shared_weak_count_vtbl *)v237;
  }
  else
  {
    v236 = 0;
  }
  v258 = v236;
  v377[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v361, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v362, "int32");
  std::string::basic_string[abi:ne180100]<0>(v363, "int8");
  std::string::basic_string[abi:ne180100]<0>(v364, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v365, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v235 + 24))(v235, &v257, &v365, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v365);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v364[i + 2]) < 0)
      operator delete((void *)v364[i]);
  }
  v239 = v258;
  if (v258)
  {
    v240 = (unint64_t *)&v258->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = v377[0];
  v377[0] = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  if (v256 < 0)
    operator delete(v255[0]);
  v243 = *a3;
  v253 = v348;
  if (v348)
  {
    v244 = (std::__shared_weak_count *)operator new();
    v245 = v348;
    v244->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = (std::__shared_weak_count_vtbl *)v245;
  }
  else
  {
    v244 = 0;
  }
  v254 = v244;
  v348 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v243 + 56))(v243, &v253);
  v246 = v254;
  if (v254)
  {
    v247 = (unint64_t *)&v254->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = v348;
  v348 = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  if (v374)
  {
    v250 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v374);
    MEMORY[0x1E0C023A0](v250, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v350, 0);
  result = (uint64_t)v357;
  if (v357)
  {
    v252 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v357);
    return MEMORY[0x1E0C023A0](v252, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0857F90(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x3F0];
  STACK[0x3F0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x400], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x468], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::InstanceNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count_vtbl *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  std::__shared_weak_count_vtbl *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  char **v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _OWORD *v88;
  unsigned __int8 *v89;
  void *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  unint64_t *p_shared_owners;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  void *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  void *v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count_vtbl *v130;
  void *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count_vtbl *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count_vtbl *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  void *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count_vtbl *v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count_vtbl *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count_vtbl *v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  uint64_t i;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t result;
  uint64_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  void *v207[2];
  char v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  void *v211;
  std::__shared_weak_count *v212;
  void *v213[2];
  char v214;
  void *v215[2];
  char v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  void *v219[2];
  char v220;
  void *v221[2];
  char v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  void *v227[2];
  char v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  void *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  std::__shared_weak_count_vtbl *v235;
  std::__shared_weak_count *v236;
  void *v237;
  std::__shared_weak_count *v238;
  void *v239[2];
  char v240;
  std::__shared_weak_count_vtbl *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  std::__shared_weak_count_vtbl *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  __n128 v269;
  __int128 v270;
  __int128 v271;
  void *v272[2];
  uint64_t v273;
  __n128 v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  char **v278;
  __n128 v279;
  __n128 v280;
  __n128 v281;
  __n128 v282;
  _QWORD *v283;
  void *__p;
  uint64_t Scalar;
  char *v286;
  _QWORD v287[3];
  uint64_t v288[3];
  uint64_t v289[3];
  _QWORD v290[3];
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v293;
  _BYTE v294[24];
  _BYTE *v295;
  _BYTE v296[24];
  _BYTE *v297;
  _BYTE v298[24];
  _BYTE *v299;
  std::__shared_weak_count_vtbl *v300;
  uint64_t v301;
  void (__cdecl **v302)(std::__shared_weak_count *__hidden);
  uint64_t v303[3];

  v303[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v283 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v286 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  Scalar = (uint64_t)(v10 + 24);
  v300 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v293 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v291 = v14;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v291);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v300, 2, &v282);
  MIL::IRParameter::Make(&v282, &v276);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v276);
  v15 = v276;
  v276 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v282.n128_u64[1];
  if (v282.n128_u64[1])
  {
    v17 = (unint64_t *)(v282.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v283;
  v20 = MIL::IRUnknownDimension::Make(a1, 0);
  v21 = (char *)operator new(8uLL);
  __p = v21;
  *(_QWORD *)v21 = v20;
  v286 = v21 + 8;
  Scalar = (uint64_t)(v21 + 8);
  v300 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v291 = v23;
  v23->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v22;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v23->~__shared_weak_count_0;
  v293 = &v23->~__shared_weak_count_0;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v291);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v300, 2, &v281);
  MIL::IRParameter::Make(&v281, &v276);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "beta", &v276);
  v25 = v276;
  v276 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v281.n128_u64[1];
  if (v281.n128_u64[1])
  {
    v27 = (unint64_t *)(v281.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 48))(*((_QWORD *)v24 + 5), 1);
  v29 = v283;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  __p = v31;
  *(_QWORD *)v31 = v30;
  v286 = v31 + 8;
  Scalar = (uint64_t)(v31 + 8);
  v300 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v291 = v33;
  v33->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v32;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v33->~__shared_weak_count_0;
  v293 = &v33->~__shared_weak_count_0;
  v301 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v291);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v300, 2, &v280);
  MIL::IRParameter::Make(&v280, &v276);
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v29, "gamma", &v276);
  v35 = v276;
  v276 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (std::__shared_weak_count *)v280.n128_u64[1];
  if (v280.n128_u64[1])
  {
    v37 = (unint64_t *)(v280.n128_u64[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 32))(*((_QWORD *)v34 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v34 + 5) + 48))(*((_QWORD *)v34 + 5), 1);
  v39 = v283;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v279);
  MIL::IRParameter::Make(&v279, (uint64_t *)&v291);
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v39, "epsilon", (uint64_t *)&v291);
  v41 = v291;
  v291 = 0;
  if (v41)
    (*((void (**)(std::__shared_weak_count_vtbl *))v41->~__shared_weak_count + 1))(v41);
  v42 = (std::__shared_weak_count *)v279.n128_u64[1];
  if (v279.n128_u64[1])
  {
    v43 = (unint64_t *)(v279.n128_u64[1] + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v40 + 5) + 32))(*((_QWORD *)v40 + 5), 1);
  v278 = 0;
  v45 = operator new();
  *(_QWORD *)v45 = 0;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v278, (void **)v45);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v278, 1uLL);
  v46 = v278;
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v291 = v48;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v48->~__shared_weak_count_0;
  v293 = &v48->~__shared_weak_count_0;
  v303[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v291);
  v49 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v50 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v300 = v50;
  v50->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v49;
  v301 = (uint64_t)&v50->~__shared_weak_count_0;
  v302 = &v50->~__shared_weak_count_0;
  v303[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v300);
  MIL::IRParameter::MakeTypeSet((uint64_t)v303, 2, &v274);
  MIL::IRParameter::Make(&v274, &v275);
  v51 = v275;
  v276 = v275;
  if (v275)
  {
    v52 = (_QWORD *)operator new();
    v53 = v275;
    *v52 = &unk_1EA99F888;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = v53;
  }
  else
  {
    v52 = 0;
  }
  v277 = v52;
  v275 = 0;
  v54 = v46[2];
  v55 = v46[1];
  if (v55 >= v54)
  {
    v57 = (v55 - *v46) >> 4;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v59 = v54 - *v46;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    v287[1] = v46 + 2;
    v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v46 + 2), v60);
    v63 = (uint64_t *)&v61[16 * v57];
    *v63 = v51;
    v63[1] = (uint64_t)v52;
    v277 = 0;
    v276 = 0;
    v65 = *v46;
    v64 = v46[1];
    if (v64 == *v46)
    {
      v68 = v46[1];
      v66 = &v61[16 * v57];
    }
    else
    {
      v66 = &v61[16 * v57];
      do
      {
        v67 = *((_OWORD *)v64 - 1);
        v64 -= 16;
        *((_OWORD *)v66 - 1) = v67;
        v66 -= 16;
        *(_QWORD *)v64 = 0;
        *((_QWORD *)v64 + 1) = 0;
      }
      while (v64 != v65);
      v68 = *v46;
      v64 = v46[1];
    }
    v56 = (char *)(v63 + 2);
    *v46 = v66;
    Scalar = (uint64_t)v68;
    v46[1] = (char *)(v63 + 2);
    v286 = v64;
    v69 = v46[2];
    v46[2] = &v61[16 * v62];
    v287[0] = v69;
    __p = v68;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v55 = v51;
    *((_QWORD *)v55 + 1) = v52;
    v56 = v55 + 16;
    v277 = 0;
    v276 = 0;
  }
  v46[1] = v56;
  v70 = v275;
  v275 = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v274.n128_u64[1];
  if (v274.n128_u64[1])
  {
    v72 = (unint64_t *)(v274.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (v300)
  {
    v301 = (uint64_t)v300;
    operator delete(v300);
  }
  if (v291)
  {
    p_get_deleter = v291;
    operator delete(v291);
  }
  *(_OWORD *)v272 = *(_OWORD *)a2;
  v273 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v74 = (uint64_t)v283;
  *(_QWORD *)&v271 = v283;
  if (v283)
  {
    v75 = (_QWORD *)operator new();
    *v75 = &unk_1EA99F8E8;
    v75[1] = 0;
    v75[2] = 0;
    v75[3] = v74;
  }
  else
  {
    v75 = 0;
  }
  *((_QWORD *)&v271 + 1) = v75;
  v283 = 0;
  *(_QWORD *)&v270 = v278;
  if (v278)
  {
    v76 = (_QWORD *)operator new();
    v77 = v278;
    *v76 = &unk_1EA99F948;
    v76[1] = 0;
    v76[2] = 0;
    v76[3] = v77;
  }
  else
  {
    v76 = 0;
  }
  *((_QWORD *)&v270 + 1) = v76;
  v278 = 0;
  v299 = 0;
  v297 = 0;
  MIL::IROperator::Make((__int128 *)v272, &v271, &v270, (uint64_t)v298, (uint64_t)v296, a3);
  v78 = v297;
  if (v297 == v296)
  {
    v79 = 4;
    v78 = v296;
  }
  else
  {
    if (!v297)
      goto LABEL_80;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_80:
  v80 = v299;
  if (v299 == v298)
  {
    v81 = 4;
    v80 = v298;
    goto LABEL_84;
  }
  if (v299)
  {
    v81 = 5;
LABEL_84:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v270 + 1);
  if (*((_QWORD *)&v270 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v270 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
  if (*((_QWORD *)&v271 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SHIBYTE(v273) < 0)
    operator delete(v272[0]);
  v300 = 0;
  v88 = (_OWORD *)operator new();
  *v88 = 0u;
  v88[1] = 0u;
  *((_DWORD *)v88 + 8) = 1065353216;
  v300 = (std::__shared_weak_count_vtbl *)v88;
  v291 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v291, 1, &v269);
  MIL::IRParameter::Make(&v269, (uint64_t *)&__p);
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v88, "minimum_compute_type", (uint64_t *)&__p);
  v90 = __p;
  __p = 0;
  if (v90)
    (*(void (**)(void *))(*(_QWORD *)v90 + 8))(v90);
  v91 = (std::__shared_weak_count *)v269.n128_u64[1];
  if (v269.n128_u64[1])
  {
    v92 = (unint64_t *)(v269.n128_u64[1] + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 32))(*((_QWORD *)v89 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v89 + 5) + 48))(*((_QWORD *)v89 + 5), 1);
  v94 = *a3;
  v95 = v300;
  v267 = v300;
  if (v300)
  {
    v96 = (std::__shared_weak_count *)operator new();
    v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v96->__shared_owners_ = 0;
    v96->__shared_weak_owners_ = 0;
    v96[1].__vftable = v95;
  }
  else
  {
    v96 = 0;
  }
  v268 = v96;
  v300 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v94 + 184))(v94, &v267);
  v97 = v268;
  if (v268)
  {
    p_shared_owners = (unint64_t *)&v268->__shared_owners_;
    do
      v99 = __ldaxr(p_shared_owners);
    while (__stlxr(v99 - 1, p_shared_owners));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v294);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v100 + 200))(v100, v294);
  v101 = v295;
  if (v295 == v294)
  {
    v102 = 4;
    v101 = v294;
  }
  else
  {
    if (!v295)
      goto LABEL_117;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_117:
  if (SHIBYTE(v286) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v103 = __p;
  std::string::basic_string[abi:ne180100]<0>(v263, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&v291);
  v265 = v291;
  if (v291)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v291;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v266 = v104;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v265, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v106 = v266;
  if (v266)
  {
    v107 = (unint64_t *)&v266->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v291;
  v291 = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  if (v264 < 0)
    operator delete(v263[0]);
  v110 = __p;
  std::string::basic_string[abi:ne180100]<0>(v257, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v257, 1, (uint64_t *)&v291);
  v259 = v291;
  if (v291)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = v291;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v260 = v111;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v110 + 24))(v110, &v259, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v113 = v260;
  if (v260)
  {
    v114 = (unint64_t *)&v260->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v291;
  v291 = 0;
  if (v116)
    (*((void (**)(std::__shared_weak_count_vtbl *))v116->~__shared_weak_count + 1))(v116);
  if (v258 < 0)
    operator delete(v257[0]);
  v117 = __p;
  std::string::basic_string[abi:ne180100]<0>(v251, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v251, 1, (uint64_t *)&v291);
  v253 = v291;
  if (v291)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v291;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v254 = v118;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v117 + 24))(v117, &v253, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v120 = v254;
  if (v254)
  {
    v121 = (unint64_t *)&v254->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v291;
  v291 = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v252 < 0)
    operator delete(v251[0]);
  v124 = __p;
  std::string::basic_string[abi:ne180100]<0>(v245, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v245, 0, (uint64_t *)&v291);
  v247 = v291;
  if (v291)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = v291;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v248 = v125;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v243, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v124 + 24))(v124, &v247, v243);
  if (v244 < 0)
    operator delete(v243[0]);
  v127 = v248;
  if (v248)
  {
    v128 = (unint64_t *)&v248->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = v291;
  v291 = 0;
  if (v130)
    (*((void (**)(std::__shared_weak_count_vtbl *))v130->~__shared_weak_count + 1))(v130);
  if (v246 < 0)
    operator delete(v245[0]);
  v131 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v291);
  v241 = v291;
  if (v291)
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v291;
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = v133;
  }
  else
  {
    v132 = 0;
  }
  v242 = v132;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v239, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v131 + 24))(v131, &v241, v239);
  if (v240 < 0)
    operator delete(v239[0]);
  v134 = v242;
  if (v242)
  {
    v135 = (unint64_t *)&v242->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = v291;
  v291 = 0;
  if (v137)
    (*((void (**)(std::__shared_weak_count_vtbl *))v137->~__shared_weak_count + 1))(v137);
  v138 = *a3;
  v237 = __p;
  if (__p)
  {
    v139 = (std::__shared_weak_count *)operator new();
    v140 = (std::__shared_weak_count_vtbl *)__p;
    v139->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v139->__shared_owners_ = 0;
    v139->__shared_weak_owners_ = 0;
    v139[1].__vftable = v140;
  }
  else
  {
    v139 = 0;
  }
  v238 = v139;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v138 + 56))(v138, &v237);
  v141 = v238;
  if (v238)
  {
    v142 = (unint64_t *)&v238->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
    }
  }
  v144 = __p;
  __p = 0;
  if (v144)
    (*(void (**)(void *))(*(_QWORD *)v144 + 8))(v144);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v145 = __p;
  std::string::basic_string[abi:ne180100]<0>(v233, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v233, 0, (uint64_t *)&v291);
  v235 = v291;
  if (v291)
  {
    v146 = (std::__shared_weak_count *)operator new();
    v147 = v291;
    v146->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v146->__shared_owners_ = 0;
    v146->__shared_weak_owners_ = 0;
    v146[1].__vftable = v147;
  }
  else
  {
    v146 = 0;
  }
  v236 = v146;
  v291 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v145 + 32))(v145, &v235, 3, 4);
  v148 = v236;
  if (v236)
  {
    v149 = (unint64_t *)&v236->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  v151 = v291;
  v291 = 0;
  if (v151)
    (*((void (**)(std::__shared_weak_count_vtbl *))v151->~__shared_weak_count + 1))(v151);
  if (v234 < 0)
    operator delete(v233[0]);
  v152 = *a3;
  v231 = __p;
  if (__p)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = (std::__shared_weak_count_vtbl *)__p;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v232 = v153;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v152 + 56))(v152, &v231);
  v155 = v232;
  if (v232)
  {
    v156 = (unint64_t *)&v232->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = __p;
  __p = 0;
  if (v158)
    (*(void (**)(void *))(*(_QWORD *)v158 + 8))(v158);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v159 = __p;
  std::string::basic_string[abi:ne180100]<0>(v227, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v227, 0, (uint64_t *)&v291);
  v229 = v291;
  if (v291)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = v291;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v230 = v160;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v225, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v159 + 24))(v159, &v229, 1, v225);
  if (v226 < 0)
    operator delete(v225[0]);
  v162 = v230;
  if (v230)
  {
    v163 = (unint64_t *)&v230->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = v291;
  v291 = 0;
  if (v165)
    (*((void (**)(std::__shared_weak_count_vtbl *))v165->~__shared_weak_count + 1))(v165);
  if (v228 < 0)
    operator delete(v227[0]);
  v166 = __p;
  std::string::basic_string[abi:ne180100]<0>(v221, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v221, 1, (uint64_t *)&v291);
  v223 = v291;
  if (v291)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = v291;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v224 = v167;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v219, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v166 + 24))(v166, &v223, 0, v219);
  if (v220 < 0)
    operator delete(v219[0]);
  v169 = v224;
  if (v224)
  {
    v170 = (unint64_t *)&v224->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = v291;
  v291 = 0;
  if (v172)
    (*((void (**)(std::__shared_weak_count_vtbl *))v172->~__shared_weak_count + 1))(v172);
  if (v222 < 0)
    operator delete(v221[0]);
  v173 = __p;
  std::string::basic_string[abi:ne180100]<0>(v215, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v215, 1, (uint64_t *)&v291);
  v217 = v291;
  if (v291)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = v291;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v218 = v174;
  v291 = 0;
  std::string::basic_string[abi:ne180100]<0>(v213, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v173 + 24))(v173, &v217, 0, v213);
  if (v214 < 0)
    operator delete(v213[0]);
  v176 = v218;
  if (v218)
  {
    v177 = (unint64_t *)&v218->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = v291;
  v291 = 0;
  if (v179)
    (*((void (**)(std::__shared_weak_count_vtbl *))v179->~__shared_weak_count + 1))(v179);
  if (v216 < 0)
    operator delete(v215[0]);
  v180 = *a3;
  v211 = __p;
  if (__p)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = (std::__shared_weak_count_vtbl *)__p;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v212 = v181;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v180 + 56))(v180, &v211);
  v183 = v212;
  if (v212)
  {
    v184 = (unint64_t *)&v212->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = __p;
  __p = 0;
  if (v186)
    (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v276);
  v187 = v276;
  std::string::basic_string[abi:ne180100]<0>(v207, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v207, 1, v303);
  v209 = v303[0];
  if (v303[0])
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = v303[0];
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = (std::__shared_weak_count_vtbl *)v189;
  }
  else
  {
    v188 = 0;
  }
  v210 = v188;
  v303[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v287, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v288, "int32");
  std::string::basic_string[abi:ne180100]<0>(v289, "int8");
  std::string::basic_string[abi:ne180100]<0>(v290, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v291, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v187 + 24))(v187, &v209, &v291, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v291);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v290[i + 2]) < 0)
      operator delete((void *)v290[i]);
  }
  v191 = v210;
  if (v210)
  {
    v192 = (unint64_t *)&v210->__shared_owners_;
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = v303[0];
  v303[0] = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  if (v208 < 0)
    operator delete(v207[0]);
  v195 = *a3;
  v205 = v276;
  if (v276)
  {
    v196 = (std::__shared_weak_count *)operator new();
    v197 = v276;
    v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v196->__shared_owners_ = 0;
    v196->__shared_weak_owners_ = 0;
    v196[1].__vftable = (std::__shared_weak_count_vtbl *)v197;
  }
  else
  {
    v196 = 0;
  }
  v206 = v196;
  v276 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v195 + 56))(v195, &v205);
  v198 = v206;
  if (v206)
  {
    v199 = (unint64_t *)&v206->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  v201 = v276;
  v276 = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  if (v300)
  {
    v202 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v300);
    MEMORY[0x1E0C023A0](v202, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v278, 0);
  result = (uint64_t)v283;
  if (v283)
  {
    v204 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v283);
    return MEMORY[0x1E0C023A0](v204, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E085A264(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2F0];
  STACK[0x2F0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x300], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x348], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::L2Norm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  void *v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  uint64_t i;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t result;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  void *v159[2];
  char v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  void *v167[2];
  char v168;
  std::__shared_weak_count_vtbl *v169;
  std::__shared_weak_count *v170;
  void *v171;
  std::__shared_weak_count *v172;
  void *v173[2];
  char v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  void *v177;
  std::__shared_weak_count *v178;
  void *v179[2];
  char v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  void *v183[2];
  char v184;
  void *v185[2];
  char v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  char v190;
  void *v191[2];
  char v192;
  std::__shared_weak_count_vtbl *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  __n128 v197;
  __int128 v198;
  __int128 v199;
  void *v200[2];
  uint64_t v201;
  __n128 v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char **v206;
  __n128 v207;
  __n128 v208;
  _QWORD *v209;
  void *__p;
  uint64_t Scalar;
  char *v212;
  _QWORD v213[3];
  uint64_t v214[3];
  uint64_t v215[3];
  _QWORD v216[3];
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v219;
  _BYTE v220[24];
  _BYTE *v221;
  _BYTE v222[24];
  _BYTE *v223;
  _BYTE v224[24];
  _BYTE *v225;
  std::__shared_weak_count_vtbl *v226;
  uint64_t v227;
  void (__cdecl **v228)(std::__shared_weak_count *__hidden);
  uint64_t v229[3];

  v229[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v209 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v212 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  Scalar = (uint64_t)(v10 + 24);
  v226 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v219 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  v217 = v14;
  v227 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v217);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v226, 2, &v208);
  MIL::IRParameter::Make(&v208, &v204);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v204);
  v15 = v204;
  v204 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v208.n128_u64[1];
  if (v208.n128_u64[1])
  {
    v17 = (unint64_t *)(v208.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v217)
  {
    p_get_deleter = v217;
    operator delete(v217);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v209;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v207);
  MIL::IRParameter::Make(&v207, (uint64_t *)&v217);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v19, "epsilon", (uint64_t *)&v217);
  v21 = v217;
  v217 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v207.n128_u64[1];
  if (v207.n128_u64[1])
  {
    v23 = (unint64_t *)(v207.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v206 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v206, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v206, 1uLL);
  v26 = v206;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v217 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v28->~__shared_weak_count_0;
  v219 = &v28->~__shared_weak_count_0;
  v229[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v217);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v226 = v30;
  v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v227 = (uint64_t)&v30->~__shared_weak_count_0;
  v228 = &v30->~__shared_weak_count_0;
  v229[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v226);
  MIL::IRParameter::MakeTypeSet((uint64_t)v229, 2, &v202);
  MIL::IRParameter::Make(&v202, &v203);
  v31 = v203;
  v204 = v203;
  if (v203)
  {
    v32 = (_QWORD *)operator new();
    v33 = v203;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v205 = v32;
  v203 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v213[1] = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v204 = 0;
    v205 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = *v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    Scalar = (uint64_t)v48;
    v26[1] = (char *)(v43 + 2);
    v212 = v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v213[0] = v49;
    __p = v48;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v204 = 0;
    v205 = 0;
  }
  v26[1] = v36;
  v50 = v203;
  v203 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v202.n128_u64[1];
  if (v202.n128_u64[1])
  {
    v52 = (unint64_t *)(v202.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v226)
  {
    v227 = (uint64_t)v226;
    operator delete(v226);
  }
  if (v217)
  {
    p_get_deleter = v217;
    operator delete(v217);
  }
  *(_OWORD *)v200 = *(_OWORD *)a2;
  v201 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v209;
  *(_QWORD *)&v199 = v209;
  if (v209)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v199 + 1) = v55;
  v209 = 0;
  *(_QWORD *)&v198 = v206;
  if (v206)
  {
    v56 = (_QWORD *)operator new();
    v57 = v206;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v198 + 1) = v56;
  v206 = 0;
  v225 = 0;
  v223 = 0;
  MIL::IROperator::Make((__int128 *)v200, &v199, &v198, (uint64_t)v224, (uint64_t)v222, a3);
  v58 = v223;
  if (v223 == v222)
  {
    v59 = 4;
    v58 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_58;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_58:
  v60 = v225;
  if (v225 == v224)
  {
    v61 = 4;
    v60 = v224;
    goto LABEL_62;
  }
  if (v225)
  {
    v61 = 5;
LABEL_62:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
  if (*((_QWORD *)&v198 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
  if (*((_QWORD *)&v199 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v201) < 0)
    operator delete(v200[0]);
  v226 = 0;
  v68 = (_OWORD *)operator new();
  *v68 = 0u;
  v68[1] = 0u;
  *((_DWORD *)v68 + 8) = 1065353216;
  v226 = (std::__shared_weak_count_vtbl *)v68;
  v217 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v217, 1, &v197);
  MIL::IRParameter::Make(&v197, (uint64_t *)&__p);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v68, "minimum_compute_type", (uint64_t *)&__p);
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v197.n128_u64[1];
  if (v197.n128_u64[1])
  {
    v72 = (unint64_t *)(v197.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = *a3;
  v75 = v226;
  v195 = v226;
  if (v226)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v75;
  }
  else
  {
    v76 = 0;
  }
  v196 = v76;
  v226 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v74 + 184))(v74, &v195);
  v77 = v196;
  if (v196)
  {
    p_shared_owners = (unint64_t *)&v196->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v220);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v80 + 200))(v80, v220);
  v81 = v221;
  if (v221 == v220)
  {
    v82 = 4;
    v81 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_95;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_95:
  if (SHIBYTE(v212) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v83 = __p;
  std::string::basic_string[abi:ne180100]<0>(v191, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v191, 0, (uint64_t *)&v217);
  v193 = v217;
  if (v217)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v217;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v194 = v84;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v189, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v83 + 24))(v83, &v193, v189);
  if (v190 < 0)
    operator delete(v189[0]);
  v86 = v194;
  if (v194)
  {
    v87 = (unint64_t *)&v194->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v217;
  v217 = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v192 < 0)
    operator delete(v191[0]);
  v90 = __p;
  std::string::basic_string[abi:ne180100]<0>(v185, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v185, 0, (uint64_t *)&v217);
  v187 = v217;
  if (v217)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v217;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v188 = v91;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v183, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v187, v183);
  if (v184 < 0)
    operator delete(v183[0]);
  v93 = v188;
  if (v188)
  {
    v94 = (unint64_t *)&v188->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v217;
  v217 = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  if (v186 < 0)
    operator delete(v185[0]);
  v97 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v217);
  v181 = v217;
  if (v217)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = v217;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v182 = v98;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v179, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v97 + 24))(v97, &v181, v179);
  if (v180 < 0)
    operator delete(v179[0]);
  v100 = v182;
  if (v182)
  {
    v101 = (unint64_t *)&v182->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v217;
  v217 = 0;
  if (v103)
    (*((void (**)(std::__shared_weak_count_vtbl *))v103->~__shared_weak_count + 1))(v103);
  v104 = *a3;
  v177 = __p;
  if (__p)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = (std::__shared_weak_count_vtbl *)__p;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v178 = v105;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v104 + 56))(v104, &v177);
  v107 = v178;
  if (v178)
  {
    v108 = (unint64_t *)&v178->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = __p;
  __p = 0;
  if (v110)
    (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v111 = __p;
  std::string::basic_string[abi:ne180100]<0>(v173, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v173, 0, (uint64_t *)&v217);
  v175 = v217;
  if (v217)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v217;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v176 = v112;
  v217 = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v111 + 32))(v111, &v175, 3, 5);
  v114 = v176;
  if (v176)
  {
    v115 = (unint64_t *)&v176->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v217;
  v217 = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v174 < 0)
    operator delete(v173[0]);
  v118 = *a3;
  v171 = __p;
  if (__p)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = (std::__shared_weak_count_vtbl *)__p;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v172 = v119;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v118 + 56))(v118, &v171);
  v121 = v172;
  if (v172)
  {
    v122 = (unint64_t *)&v172->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = __p;
  __p = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v125 = __p;
  std::string::basic_string[abi:ne180100]<0>(v167, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v167, 0, (uint64_t *)&v217);
  v169 = v217;
  if (v217)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v217;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v170 = v126;
  v217 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v125 + 24))(v125, &v169, 1, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v128 = v170;
  if (v170)
  {
    v129 = (unint64_t *)&v170->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v217;
  v217 = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v168 < 0)
    operator delete(v167[0]);
  v132 = *a3;
  v163 = __p;
  if (__p)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = (std::__shared_weak_count_vtbl *)__p;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v164 = v133;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v132 + 56))(v132, &v163);
  v135 = v164;
  if (v164)
  {
    v136 = (unint64_t *)&v164->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = __p;
  __p = 0;
  if (v138)
    (*(void (**)(void *))(*(_QWORD *)v138 + 8))(v138);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v204);
  v139 = v204;
  std::string::basic_string[abi:ne180100]<0>(v159, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v159, 1, v229);
  v161 = v229[0];
  if (v229[0])
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v229[0];
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v162 = v140;
  v229[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v213, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v214, "int32");
  std::string::basic_string[abi:ne180100]<0>(v215, "int8");
  std::string::basic_string[abi:ne180100]<0>(v216, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v217, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v139 + 24))(v139, &v161, &v217, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v217);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v216[i + 2]) < 0)
      operator delete((void *)v216[i]);
  }
  v143 = v162;
  if (v162)
  {
    v144 = (unint64_t *)&v162->__shared_owners_;
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  v146 = v229[0];
  v229[0] = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  if (v160 < 0)
    operator delete(v159[0]);
  v147 = *a3;
  v157 = v204;
  if (v204)
  {
    v148 = (std::__shared_weak_count *)operator new();
    v149 = v204;
    v148->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v148->__shared_owners_ = 0;
    v148->__shared_weak_owners_ = 0;
    v148[1].__vftable = (std::__shared_weak_count_vtbl *)v149;
  }
  else
  {
    v148 = 0;
  }
  v158 = v148;
  v204 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v147 + 56))(v147, &v157);
  v150 = v158;
  if (v158)
  {
    v151 = (unint64_t *)&v158->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = v204;
  v204 = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  if (v226)
  {
    v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v226);
    MEMORY[0x1E0C023A0](v154, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v206, 0);
  result = (uint64_t)v209;
  if (v209)
  {
    v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v209);
    return MEMORY[0x1E0C023A0](v156, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E085BC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v74;

  if (a71)
    (*(void (**)(uint64_t))(*(_QWORD *)a71 + 8))(a71);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v72 - 112), 0);
  v74 = *v71;
  *v71 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x228], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LayerNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count_vtbl *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count_vtbl *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char **v54;
  uint64_t v55;
  std::__shared_weak_count_vtbl *v56;
  uint64_t v57;
  std::__shared_weak_count_vtbl *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char **v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  unsigned __int8 *v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  void *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count_vtbl *v124;
  void *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count_vtbl *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count_vtbl *v131;
  void *v132;
  std::__shared_weak_count *v133;
  std::__shared_weak_count_vtbl *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count_vtbl *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *v152;
  void *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count_vtbl *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  uint64_t i;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t result;
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  void *v187[2];
  char v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191;
  std::__shared_weak_count *v192;
  void *v193[2];
  char v194;
  void *v195[2];
  char v196;
  std::__shared_weak_count_vtbl *v197;
  std::__shared_weak_count *v198;
  void *v199;
  std::__shared_weak_count *v200;
  void *v201[2];
  char v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  void *v207[2];
  char v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  void *v213[2];
  char v214;
  std::__shared_weak_count_vtbl *v215;
  std::__shared_weak_count *v216;
  void *v217[2];
  char v218;
  void *v219[2];
  char v220;
  std::__shared_weak_count_vtbl *v221;
  std::__shared_weak_count *v222;
  void *v223[2];
  char v224;
  void *v225[2];
  char v226;
  std::__shared_weak_count_vtbl *v227;
  std::__shared_weak_count *v228;
  std::__shared_weak_count_vtbl *v229;
  std::__shared_weak_count *v230;
  __n128 v231;
  __int128 v232;
  __int128 v233;
  void *v234[2];
  uint64_t v235;
  __n128 v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  char **v240;
  __n128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  _QWORD *v246;
  void *__p;
  uint64_t Scalar;
  char *v249;
  _QWORD v250[3];
  uint64_t v251[3];
  uint64_t v252[3];
  _QWORD v253[3];
  std::__shared_weak_count_vtbl *v254;
  std::__shared_weak_count_vtbl *p_on_zero_shared;
  _QWORD *v256;
  _BYTE v257[24];
  _BYTE *v258;
  _BYTE v259[24];
  _BYTE *v260;
  _BYTE v261[24];
  _BYTE *v262;
  std::__shared_weak_count_vtbl *v263;
  uint64_t v264;
  void (__cdecl **v265)(std::__shared_weak_count *__hidden);
  uint64_t v266[3];

  v266[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v246 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = (char *)operator new(8uLL);
  __p = v8;
  *(_QWORD *)v8 = v7;
  v249 = v8 + 8;
  Scalar = (uint64_t)(v8 + 8);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v254 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v256 = &v10->~__shared_weak_count_0;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v254);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 2, &v245);
  MIL::IRParameter::Make(&v245, &v238);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v238);
  v11 = v238;
  v238 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v245.n128_u64[1];
  if (v245.n128_u64[1])
  {
    v13 = (unint64_t *)(v245.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v15 = v246;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = (char *)operator new(8uLL);
  __p = v17;
  *(_QWORD *)v17 = v16;
  v249 = v17 + 8;
  Scalar = (uint64_t)(v17 + 8);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 1, &v244);
  MIL::IRParameter::Make(&v244, (uint64_t *)&v254);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "axes", (uint64_t *)&v254);
  v19 = v254;
  v254 = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v244.n128_u64[1];
  if (v244.n128_u64[1])
  {
    v21 = (unint64_t *)(v244.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v18 + 5) + 32))(*((_QWORD *)v18 + 5), 1);
  v23 = v246;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (char *)operator new(0x10uLL);
  v249 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  Scalar = (uint64_t)(v26 + 16);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v27 = MIL::IRUnknownDimension::Make(a1, 0);
  v28 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v29 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v29->__on_zero_shared;
  v256 = &v29->__on_zero_shared;
  v29->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v29->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v28;
  v254 = v29;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v254);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 2, &v243);
  MIL::IRParameter::Make(&v243, &v238);
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v23, "gamma", &v238);
  v31 = v238;
  v238 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = (std::__shared_weak_count *)v243.n128_u64[1];
  if (v243.n128_u64[1])
  {
    v33 = (unint64_t *)(v243.n128_u64[1] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 32))(*((_QWORD *)v30 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v30 + 5) + 48))(*((_QWORD *)v30 + 5), 1);
  v35 = v246;
  v36 = MIL::IRUnknownDimension::Make(a1, 0);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (char *)operator new(0x10uLL);
  v249 = v38 + 16;
  *(_QWORD *)v38 = v36;
  *((_QWORD *)v38 + 1) = v37;
  __p = v38;
  Scalar = (uint64_t)(v38 + 16);
  v263 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v39 = MIL::IRUnknownDimension::Make(a1, 0);
  v40 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v41 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v41->__on_zero_shared;
  v256 = &v41->__on_zero_shared;
  v41->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v39;
  v41->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v40;
  v254 = v41;
  v264 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v254);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v263, 2, &v242);
  MIL::IRParameter::Make(&v242, &v238);
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v35, "beta", &v238);
  v43 = v238;
  v238 = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = (std::__shared_weak_count *)v242.n128_u64[1];
  if (v242.n128_u64[1])
  {
    v45 = (unint64_t *)(v242.n128_u64[1] + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 32))(*((_QWORD *)v42 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v42 + 5) + 48))(*((_QWORD *)v42 + 5), 1);
  v47 = v246;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v241);
  MIL::IRParameter::Make(&v241, (uint64_t *)&v254);
  v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v47, "epsilon", (uint64_t *)&v254);
  v49 = v254;
  v254 = 0;
  if (v49)
    (*((void (**)(std::__shared_weak_count_vtbl *))v49->~__shared_weak_count + 1))(v49);
  v50 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v51 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v48 + 5) + 32))(*((_QWORD *)v48 + 5), 1);
  v240 = 0;
  v53 = operator new();
  *(_QWORD *)v53 = 0;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v240, (void **)v53);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v240, 1uLL);
  v54 = v240;
  v55 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v56 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v254 = v56;
  v56->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v55;
  p_on_zero_shared = (std::__shared_weak_count_vtbl *)&v56->~__shared_weak_count_0;
  v256 = &v56->~__shared_weak_count_0;
  v266[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v254);
  v57 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v58 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v263 = v58;
  v58->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v57;
  v264 = (uint64_t)&v58->~__shared_weak_count_0;
  v265 = &v58->~__shared_weak_count_0;
  v266[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v263);
  MIL::IRParameter::MakeTypeSet((uint64_t)v266, 2, &v236);
  MIL::IRParameter::Make(&v236, &v237);
  v59 = v237;
  v238 = v237;
  if (v237)
  {
    v60 = (_QWORD *)operator new();
    v61 = v237;
    *v60 = &unk_1EA99F888;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v61;
  }
  else
  {
    v60 = 0;
  }
  v239 = v60;
  v237 = 0;
  v62 = v54[2];
  v63 = v54[1];
  if (v63 >= v62)
  {
    v65 = (v63 - *v54) >> 4;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v67 = v62 - *v54;
    if (v67 >> 3 > v66)
      v66 = v67 >> 3;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
      v68 = 0xFFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    v250[1] = v54 + 2;
    v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v54 + 2), v68);
    v71 = (uint64_t *)&v69[16 * v65];
    *v71 = v59;
    v71[1] = (uint64_t)v60;
    v239 = 0;
    v238 = 0;
    v73 = *v54;
    v72 = v54[1];
    if (v72 == *v54)
    {
      v76 = v54[1];
      v74 = &v69[16 * v65];
    }
    else
    {
      v74 = &v69[16 * v65];
      do
      {
        v75 = *((_OWORD *)v72 - 1);
        v72 -= 16;
        *((_OWORD *)v74 - 1) = v75;
        v74 -= 16;
        *(_QWORD *)v72 = 0;
        *((_QWORD *)v72 + 1) = 0;
      }
      while (v72 != v73);
      v76 = *v54;
      v72 = v54[1];
    }
    v64 = (char *)(v71 + 2);
    *v54 = v74;
    Scalar = (uint64_t)v76;
    v54[1] = (char *)(v71 + 2);
    v249 = v72;
    v77 = v54[2];
    v54[2] = &v69[16 * v70];
    v250[0] = v77;
    __p = v76;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v63 = v59;
    *((_QWORD *)v63 + 1) = v60;
    v64 = v63 + 16;
    v239 = 0;
    v238 = 0;
  }
  v54[1] = v64;
  v78 = v237;
  v237 = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v236.n128_u64[1];
  if (v236.n128_u64[1])
  {
    v80 = (unint64_t *)(v236.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v263)
  {
    v264 = (uint64_t)v263;
    operator delete(v263);
  }
  if (v254)
  {
    p_on_zero_shared = v254;
    operator delete(v254);
  }
  *(_OWORD *)v234 = *(_OWORD *)a2;
  v235 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v82 = (uint64_t)v246;
  *(_QWORD *)&v233 = v246;
  if (v246)
  {
    v83 = (_QWORD *)operator new();
    *v83 = &unk_1EA99F8E8;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v82;
  }
  else
  {
    v83 = 0;
  }
  *((_QWORD *)&v233 + 1) = v83;
  v246 = 0;
  *(_QWORD *)&v232 = v240;
  if (v240)
  {
    v84 = (_QWORD *)operator new();
    v85 = v240;
    *v84 = &unk_1EA99F948;
    v84[1] = 0;
    v84[2] = 0;
    v84[3] = v85;
  }
  else
  {
    v84 = 0;
  }
  *((_QWORD *)&v232 + 1) = v84;
  v240 = 0;
  v262 = 0;
  v260 = 0;
  MIL::IROperator::Make((__int128 *)v234, &v233, &v232, (uint64_t)v261, (uint64_t)v259, a3);
  v86 = v260;
  if (v260 == v259)
  {
    v87 = 4;
    v86 = v259;
  }
  else
  {
    if (!v260)
      goto LABEL_89;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_89:
  v88 = v262;
  if (v262 == v261)
  {
    v89 = 4;
    v88 = v261;
    goto LABEL_93;
  }
  if (v262)
  {
    v89 = 5;
LABEL_93:
    (*(void (**)(void))(*v88 + 8 * v89))();
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v232 + 1);
  if (*((_QWORD *)&v232 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
  if (*((_QWORD *)&v233 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (SHIBYTE(v235) < 0)
    operator delete(v234[0]);
  v263 = 0;
  v96 = (_OWORD *)operator new();
  *v96 = 0u;
  v96[1] = 0u;
  *((_DWORD *)v96 + 8) = 1065353216;
  v263 = (std::__shared_weak_count_vtbl *)v96;
  v254 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v254, 1, &v231);
  MIL::IRParameter::Make(&v231, (uint64_t *)&__p);
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v96, "minimum_compute_type", (uint64_t *)&__p);
  v98 = __p;
  __p = 0;
  if (v98)
    (*(void (**)(void *))(*(_QWORD *)v98 + 8))(v98);
  v99 = (std::__shared_weak_count *)v231.n128_u64[1];
  if (v231.n128_u64[1])
  {
    v100 = (unint64_t *)(v231.n128_u64[1] + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v97 + 5) + 32))(*((_QWORD *)v97 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v97 + 5) + 48))(*((_QWORD *)v97 + 5), 1);
  v102 = *a3;
  v103 = v263;
  v229 = v263;
  if (v263)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v103;
  }
  else
  {
    v104 = 0;
  }
  v230 = v104;
  v263 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v102 + 184))(v102, &v229);
  v105 = v230;
  if (v230)
  {
    p_shared_owners = (unint64_t *)&v230->__shared_owners_;
    do
      v107 = __ldaxr(p_shared_owners);
    while (__stlxr(v107 - 1, p_shared_owners));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v257);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v108 + 200))(v108, v257);
  v109 = v258;
  if (v258 == v257)
  {
    v110 = 4;
    v109 = v257;
  }
  else
  {
    if (!v258)
      goto LABEL_126;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_126:
  if (SHIBYTE(v249) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v111 = __p;
  std::string::basic_string[abi:ne180100]<0>(v225, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v225, 0, (uint64_t *)&v254);
  v227 = v254;
  if (v254)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = v254;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v228 = v112;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v223, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v111 + 24))(v111, &v227, v223);
  if (v224 < 0)
    operator delete(v223[0]);
  v114 = v228;
  if (v228)
  {
    v115 = (unint64_t *)&v228->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v254;
  v254 = 0;
  if (v117)
    (*((void (**)(std::__shared_weak_count_vtbl *))v117->~__shared_weak_count + 1))(v117);
  if (v226 < 0)
    operator delete(v225[0]);
  v118 = __p;
  std::string::basic_string[abi:ne180100]<0>(v219, "gamma");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v219, 1, (uint64_t *)&v254);
  v221 = v254;
  if (v254)
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v254;
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = v120;
  }
  else
  {
    v119 = 0;
  }
  v222 = v119;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v217, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v118 + 24))(v118, &v221, v217);
  if (v218 < 0)
    operator delete(v217[0]);
  v121 = v222;
  if (v222)
  {
    v122 = (unint64_t *)&v222->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v254;
  v254 = 0;
  if (v124)
    (*((void (**)(std::__shared_weak_count_vtbl *))v124->~__shared_weak_count + 1))(v124);
  if (v220 < 0)
    operator delete(v219[0]);
  v125 = __p;
  std::string::basic_string[abi:ne180100]<0>(v213, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v213, 1, (uint64_t *)&v254);
  v215 = v254;
  if (v254)
  {
    v126 = (std::__shared_weak_count *)operator new();
    v127 = v254;
    v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v126->__shared_owners_ = 0;
    v126->__shared_weak_owners_ = 0;
    v126[1].__vftable = v127;
  }
  else
  {
    v126 = 0;
  }
  v216 = v126;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v125 + 24))(v125, &v215, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v128 = v216;
  if (v216)
  {
    v129 = (unint64_t *)&v216->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = v254;
  v254 = 0;
  if (v131)
    (*((void (**)(std::__shared_weak_count_vtbl *))v131->~__shared_weak_count + 1))(v131);
  if (v214 < 0)
    operator delete(v213[0]);
  v132 = __p;
  std::string::basic_string[abi:ne180100]<0>(v207, "epsilon");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v207, 0, (uint64_t *)&v254);
  v209 = v254;
  if (v254)
  {
    v133 = (std::__shared_weak_count *)operator new();
    v134 = v254;
    v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v133->__shared_owners_ = 0;
    v133->__shared_weak_owners_ = 0;
    v133[1].__vftable = v134;
  }
  else
  {
    v133 = 0;
  }
  v210 = v133;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v205, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v132 + 24))(v132, &v209, v205);
  if (v206 < 0)
    operator delete(v205[0]);
  v135 = v210;
  if (v210)
  {
    v136 = (unint64_t *)&v210->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v254;
  v254 = 0;
  if (v138)
    (*((void (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 1))(v138);
  if (v208 < 0)
    operator delete(v207[0]);
  v139 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v254);
  v203 = v254;
  if (v254)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v254;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = v141;
  }
  else
  {
    v140 = 0;
  }
  v204 = v140;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v201, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v139 + 24))(v139, &v203, v201);
  if (v202 < 0)
    operator delete(v201[0]);
  v142 = v204;
  if (v204)
  {
    v143 = (unint64_t *)&v204->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v254;
  v254 = 0;
  if (v145)
    (*((void (**)(std::__shared_weak_count_vtbl *))v145->~__shared_weak_count + 1))(v145);
  v146 = *a3;
  v199 = __p;
  if (__p)
  {
    v147 = (std::__shared_weak_count *)operator new();
    v148 = (std::__shared_weak_count_vtbl *)__p;
    v147->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v147->__shared_owners_ = 0;
    v147->__shared_weak_owners_ = 0;
    v147[1].__vftable = v148;
  }
  else
  {
    v147 = 0;
  }
  v200 = v147;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v146 + 56))(v146, &v199);
  v149 = v200;
  if (v200)
  {
    v150 = (unint64_t *)&v200->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = __p;
  __p = 0;
  if (v152)
    (*(void (**)(void *))(*(_QWORD *)v152 + 8))(v152);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v153 = __p;
  std::string::basic_string[abi:ne180100]<0>(v195, "axes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v195, 0, (uint64_t *)&v254);
  v197 = v254;
  if (v254)
  {
    v154 = (std::__shared_weak_count *)operator new();
    v155 = v254;
    v154->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v154->__shared_owners_ = 0;
    v154->__shared_weak_owners_ = 0;
    v154[1].__vftable = v155;
  }
  else
  {
    v154 = 0;
  }
  v198 = v154;
  v254 = 0;
  std::string::basic_string[abi:ne180100]<0>(v193, "K");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v153 + 24))(v153, &v197, 0, v193);
  if (v194 < 0)
    operator delete(v193[0]);
  v156 = v198;
  if (v198)
  {
    v157 = (unint64_t *)&v198->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v254;
  v254 = 0;
  if (v159)
    (*((void (**)(std::__shared_weak_count_vtbl *))v159->~__shared_weak_count + 1))(v159);
  if (v196 < 0)
    operator delete(v195[0]);
  v160 = *a3;
  v191 = __p;
  if (__p)
  {
    v161 = (std::__shared_weak_count *)operator new();
    v162 = (std::__shared_weak_count_vtbl *)__p;
    v161->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v161->__shared_owners_ = 0;
    v161->__shared_weak_owners_ = 0;
    v161[1].__vftable = v162;
  }
  else
  {
    v161 = 0;
  }
  v192 = v161;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v160 + 56))(v160, &v191);
  v163 = v192;
  if (v192)
  {
    v164 = (unint64_t *)&v192->__shared_owners_;
    do
      v165 = __ldaxr(v164);
    while (__stlxr(v165 - 1, v164));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  v166 = __p;
  __p = 0;
  if (v166)
    (*(void (**)(void *))(*(_QWORD *)v166 + 8))(v166);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v238);
  v167 = v238;
  std::string::basic_string[abi:ne180100]<0>(v187, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v187, 1, v266);
  v189 = v266[0];
  if (v266[0])
  {
    v168 = (std::__shared_weak_count *)operator new();
    v169 = v266[0];
    v168->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v168->__shared_owners_ = 0;
    v168->__shared_weak_owners_ = 0;
    v168[1].__vftable = (std::__shared_weak_count_vtbl *)v169;
  }
  else
  {
    v168 = 0;
  }
  v190 = v168;
  v266[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v250, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v251, "int32");
  std::string::basic_string[abi:ne180100]<0>(v252, "int8");
  std::string::basic_string[abi:ne180100]<0>(v253, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v254, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v167 + 24))(v167, &v189, &v254, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v254);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v253[i + 2]) < 0)
      operator delete((void *)v253[i]);
  }
  v171 = v190;
  if (v190)
  {
    v172 = (unint64_t *)&v190->__shared_owners_;
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v266[0];
  v266[0] = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  if (v188 < 0)
    operator delete(v187[0]);
  v175 = *a3;
  v185 = v238;
  if (v238)
  {
    v176 = (std::__shared_weak_count *)operator new();
    v177 = v238;
    v176->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v176->__shared_owners_ = 0;
    v176->__shared_weak_owners_ = 0;
    v176[1].__vftable = (std::__shared_weak_count_vtbl *)v177;
  }
  else
  {
    v176 = 0;
  }
  v186 = v176;
  v238 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v175 + 56))(v175, &v185);
  v178 = v186;
  if (v186)
  {
    v179 = (unint64_t *)&v186->__shared_owners_;
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 - 1, v179));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  v181 = v238;
  v238 = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  if (v263)
  {
    v182 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v263);
    MEMORY[0x1E0C023A0](v182, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v240, 0);
  result = (uint64_t)v246;
  if (v246)
  {
    v184 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v246);
    return MEMORY[0x1E0C023A0](v184, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E085D884(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x230];
  STACK[0x230] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x240], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x298], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LocalResponseNorm::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  std::__shared_weak_count_vtbl *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  std::__shared_weak_count_vtbl *v46;
  uint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char **v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _OWORD *v86;
  unsigned __int8 *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  void *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count_vtbl *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  void *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  void *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count_vtbl *v128;
  void *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count_vtbl *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  void *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  void *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count_vtbl *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  uint64_t i;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t result;
  uint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  void *v191[2];
  char v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197[2];
  char v198;
  void *v199[2];
  char v200;
  std::__shared_weak_count_vtbl *v201;
  std::__shared_weak_count *v202;
  void *v203;
  std::__shared_weak_count *v204;
  void *v205[2];
  char v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  void *v209;
  std::__shared_weak_count *v210;
  void *v211[2];
  char v212;
  std::__shared_weak_count_vtbl *v213;
  std::__shared_weak_count *v214;
  void *v215[2];
  char v216;
  void *v217[2];
  char v218;
  std::__shared_weak_count_vtbl *v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  void *v223[2];
  char v224;
  std::__shared_weak_count_vtbl *v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  void *v229[2];
  char v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  void *v233[2];
  char v234;
  void *v235[2];
  char v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count_vtbl *v239;
  std::__shared_weak_count *v240;
  __n128 v241;
  __int128 v242;
  __int128 v243;
  void *v244[2];
  uint64_t v245;
  __n128 v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  char **v250;
  __n128 v251;
  __n128 v252;
  __n128 v253;
  __n128 v254;
  __n128 v255;
  _QWORD *v256;
  void *__p;
  uint64_t v258;
  char *v259;
  _QWORD v260[3];
  uint64_t v261[3];
  uint64_t v262[3];
  _QWORD v263[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *v266;
  _BYTE v267[24];
  _BYTE *v268;
  _BYTE v269[24];
  _BYTE *v270;
  _BYTE v271[24];
  _BYTE *v272;
  std::__shared_weak_count_vtbl *v273;
  uint64_t v274;
  void (__cdecl **v275)(std::__shared_weak_count *__hidden);
  uint64_t v276[3];

  v276[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v256 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (char *)operator new(0x18uLL);
  v259 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v258 = (uint64_t)(v10 + 24);
  v273 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v11 = MIL::IRUnknownDimension::Make(a1, 0);
  v12 = MIL::IRUnknownDimension::Make(a1, 0);
  v13 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v14 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v14->__get_deleter;
  v266 = &v14->__get_deleter;
  v14->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v14->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
  v14->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v13;
  Scalar = v14;
  v274 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v273, 2, &v255);
  MIL::IRParameter::Make(&v255, &v248);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v248);
  v15 = v248;
  v248 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (std::__shared_weak_count *)v255.n128_u64[1];
  if (v255.n128_u64[1])
  {
    v17 = (unint64_t *)(v255.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v258 = (uint64_t)__p;
    operator delete(__p);
  }
  v19 = v256;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v254);
  MIL::IRParameter::Make(&v254, (uint64_t *)&__p);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "size", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v254.n128_u64[1];
  if (v254.n128_u64[1])
  {
    v23 = (unint64_t *)(v254.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v256;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v258 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v253);
  MIL::IRParameter::Make(&v253, (uint64_t *)&Scalar);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(v25, "alpha", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v253.n128_u64[1];
  if (v253.n128_u64[1])
  {
    v29 = (unint64_t *)(v253.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v31 = v256;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v258 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v252);
  MIL::IRParameter::Make(&v252, (uint64_t *)&Scalar);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v31, "beta", (uint64_t *)&Scalar);
  v33 = Scalar;
  Scalar = 0;
  if (v33)
    (*((void (**)(std::__shared_weak_count_vtbl *))v33->~__shared_weak_count + 1))(v33);
  v34 = (std::__shared_weak_count *)v252.n128_u64[1];
  if (v252.n128_u64[1])
  {
    v35 = (unint64_t *)(v252.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v256;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  v258 = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v251);
  MIL::IRParameter::Make(&v251, (uint64_t *)&Scalar);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(v37, "k", (uint64_t *)&Scalar);
  v39 = Scalar;
  Scalar = 0;
  if (v39)
    (*((void (**)(std::__shared_weak_count_vtbl *))v39->~__shared_weak_count + 1))(v39);
  v40 = (std::__shared_weak_count *)v251.n128_u64[1];
  if (v251.n128_u64[1])
  {
    v41 = (unint64_t *)(v251.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v250 = 0;
  v43 = operator new();
  *(_QWORD *)v43 = 0;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v250, (void **)v43);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v250, 1uLL);
  v44 = v250;
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v46;
  v46->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v45;
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v46->~__shared_weak_count_0;
  v266 = &v46->~__shared_weak_count_0;
  v276[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v47 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v48 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v273 = v48;
  v48->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v47;
  v274 = (uint64_t)&v48->~__shared_weak_count_0;
  v275 = &v48->~__shared_weak_count_0;
  v276[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v273);
  MIL::IRParameter::MakeTypeSet((uint64_t)v276, 2, &v246);
  MIL::IRParameter::Make(&v246, &v247);
  v49 = v247;
  v248 = v247;
  if (v247)
  {
    v50 = (_QWORD *)operator new();
    v51 = v247;
    *v50 = &unk_1EA99F888;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = v51;
  }
  else
  {
    v50 = 0;
  }
  v249 = v50;
  v247 = 0;
  v52 = v44[2];
  v53 = v44[1];
  if (v53 >= v52)
  {
    v55 = (v53 - *v44) >> 4;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v57 = v52 - *v44;
    if (v57 >> 3 > v56)
      v56 = v57 >> 3;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0)
      v58 = 0xFFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    v260[1] = v44 + 2;
    v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v44 + 2), v58);
    v61 = (uint64_t *)&v59[16 * v55];
    *v61 = v49;
    v61[1] = (uint64_t)v50;
    v249 = 0;
    v248 = 0;
    v63 = *v44;
    v62 = v44[1];
    if (v62 == *v44)
    {
      v66 = v44[1];
      v64 = &v59[16 * v55];
    }
    else
    {
      v64 = &v59[16 * v55];
      do
      {
        v65 = *((_OWORD *)v62 - 1);
        v62 -= 16;
        *((_OWORD *)v64 - 1) = v65;
        v64 -= 16;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
      }
      while (v62 != v63);
      v66 = *v44;
      v62 = v44[1];
    }
    v54 = (char *)(v61 + 2);
    *v44 = v64;
    v258 = (uint64_t)v66;
    v44[1] = (char *)(v61 + 2);
    v259 = v62;
    v67 = v44[2];
    v44[2] = &v59[16 * v60];
    v260[0] = v67;
    __p = v66;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v53 = v49;
    *((_QWORD *)v53 + 1) = v50;
    v54 = v53 + 16;
    v249 = 0;
    v248 = 0;
  }
  v44[1] = v54;
  v68 = v247;
  v247 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = (std::__shared_weak_count *)v246.n128_u64[1];
  if (v246.n128_u64[1])
  {
    v70 = (unint64_t *)(v246.n128_u64[1] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  if (v273)
  {
    v274 = (uint64_t)v273;
    operator delete(v273);
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v244 = *(_OWORD *)a2;
  v245 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v72 = (uint64_t)v256;
  *(_QWORD *)&v243 = v256;
  if (v256)
  {
    v73 = (_QWORD *)operator new();
    *v73 = &unk_1EA99F8E8;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
  }
  else
  {
    v73 = 0;
  }
  *((_QWORD *)&v243 + 1) = v73;
  v256 = 0;
  *(_QWORD *)&v242 = v250;
  if (v250)
  {
    v74 = (_QWORD *)operator new();
    v75 = v250;
    *v74 = &unk_1EA99F948;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  *((_QWORD *)&v242 + 1) = v74;
  v250 = 0;
  v272 = 0;
  v270 = 0;
  MIL::IROperator::Make((__int128 *)v244, &v243, &v242, (uint64_t)v271, (uint64_t)v269, a3);
  v76 = v270;
  if (v270 == v269)
  {
    v77 = 4;
    v76 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_79;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_79:
  v78 = v272;
  if (v272 == v271)
  {
    v79 = 4;
    v78 = v271;
    goto LABEL_83;
  }
  if (v272)
  {
    v79 = 5;
LABEL_83:
    (*(void (**)(void))(*v78 + 8 * v79))();
  }
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
  if (*((_QWORD *)&v242 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v243 + 1);
  if (*((_QWORD *)&v243 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v243 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (SHIBYTE(v245) < 0)
    operator delete(v244[0]);
  v273 = 0;
  v86 = (_OWORD *)operator new();
  *v86 = 0u;
  v86[1] = 0u;
  *((_DWORD *)v86 + 8) = 1065353216;
  v273 = (std::__shared_weak_count_vtbl *)v86;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v241);
  MIL::IRParameter::Make(&v241, (uint64_t *)&__p);
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v86, "minimum_compute_type", (uint64_t *)&__p);
  v88 = __p;
  __p = 0;
  if (v88)
    (*(void (**)(void *))(*(_QWORD *)v88 + 8))(v88);
  v89 = (std::__shared_weak_count *)v241.n128_u64[1];
  if (v241.n128_u64[1])
  {
    v90 = (unint64_t *)(v241.n128_u64[1] + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 32))(*((_QWORD *)v87 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v87 + 5) + 48))(*((_QWORD *)v87 + 5), 1);
  v92 = *a3;
  v93 = v273;
  v239 = v273;
  if (v273)
  {
    v94 = (std::__shared_weak_count *)operator new();
    v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v94->__shared_owners_ = 0;
    v94->__shared_weak_owners_ = 0;
    v94[1].__vftable = v93;
  }
  else
  {
    v94 = 0;
  }
  v240 = v94;
  v273 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v92 + 184))(v92, &v239);
  v95 = v240;
  if (v240)
  {
    p_shared_owners = (unint64_t *)&v240->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::ValueTypeInference::CopyFromInput((uint64_t)&__p, (uint64_t)v267);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v98 + 200))(v98, v267);
  v99 = v268;
  if (v268 == v267)
  {
    v100 = 4;
    v99 = v267;
  }
  else
  {
    if (!v268)
      goto LABEL_116;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_116:
  if (SHIBYTE(v259) < 0)
    operator delete(__p);
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v101 = __p;
  std::string::basic_string[abi:ne180100]<0>(v235, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v235, 0, (uint64_t *)&Scalar);
  v237 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v238 = v102;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v233, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v101 + 24))(v101, &v237, v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v104 = v238;
  if (v238)
  {
    v105 = (unint64_t *)&v238->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  if (v236 < 0)
    operator delete(v235[0]);
  v108 = __p;
  std::string::basic_string[abi:ne180100]<0>(v229, "alpha");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v229, 0, (uint64_t *)&Scalar);
  v231 = Scalar;
  if (Scalar)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = Scalar;
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v110;
  }
  else
  {
    v109 = 0;
  }
  v232 = v109;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v227, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v108 + 24))(v108, &v231, v227);
  if (v228 < 0)
    operator delete(v227[0]);
  v111 = v232;
  if (v232)
  {
    v112 = (unint64_t *)&v232->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = Scalar;
  Scalar = 0;
  if (v114)
    (*((void (**)(std::__shared_weak_count_vtbl *))v114->~__shared_weak_count + 1))(v114);
  if (v230 < 0)
    operator delete(v229[0]);
  v115 = __p;
  std::string::basic_string[abi:ne180100]<0>(v223, "beta");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v223, 0, (uint64_t *)&Scalar);
  v225 = Scalar;
  if (Scalar)
  {
    v116 = (std::__shared_weak_count *)operator new();
    v117 = Scalar;
    v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v116->__shared_owners_ = 0;
    v116->__shared_weak_owners_ = 0;
    v116[1].__vftable = v117;
  }
  else
  {
    v116 = 0;
  }
  v226 = v116;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v221, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v115 + 24))(v115, &v225, v221);
  if (v222 < 0)
    operator delete(v221[0]);
  v118 = v226;
  if (v226)
  {
    v119 = (unint64_t *)&v226->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = Scalar;
  Scalar = 0;
  if (v121)
    (*((void (**)(std::__shared_weak_count_vtbl *))v121->~__shared_weak_count + 1))(v121);
  if (v224 < 0)
    operator delete(v223[0]);
  v122 = __p;
  std::string::basic_string[abi:ne180100]<0>(v217, "k");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v217, 0, (uint64_t *)&Scalar);
  v219 = Scalar;
  if (Scalar)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = Scalar;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v220 = v123;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v215, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v122 + 24))(v122, &v219, v215);
  if (v216 < 0)
    operator delete(v215[0]);
  v125 = v220;
  if (v220)
  {
    v126 = (unint64_t *)&v220->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = Scalar;
  Scalar = 0;
  if (v128)
    (*((void (**)(std::__shared_weak_count_vtbl *))v128->~__shared_weak_count + 1))(v128);
  if (v218 < 0)
    operator delete(v217[0]);
  v129 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v213 = Scalar;
  if (Scalar)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = Scalar;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v214 = v130;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v211, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v129 + 24))(v129, &v213, v211);
  if (v212 < 0)
    operator delete(v211[0]);
  v132 = v214;
  if (v214)
  {
    v133 = (unint64_t *)&v214->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = Scalar;
  Scalar = 0;
  if (v135)
    (*((void (**)(std::__shared_weak_count_vtbl *))v135->~__shared_weak_count + 1))(v135);
  v136 = *a3;
  v209 = __p;
  if (__p)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)__p;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v210 = v137;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v136 + 56))(v136, &v209);
  v139 = v210;
  if (v210)
  {
    v140 = (unint64_t *)&v210->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = __p;
  __p = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  MIL::Validation::TensorRankValueConstraints::Make(&__p);
  v143 = __p;
  std::string::basic_string[abi:ne180100]<0>(v205, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v205, 0, (uint64_t *)&Scalar);
  v207 = Scalar;
  if (Scalar)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = Scalar;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v208 = v144;
  Scalar = 0;
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, uint64_t))(*(_QWORD *)v143 + 32))(v143, &v207, 3, 5);
  v146 = v208;
  if (v208)
  {
    v147 = (unint64_t *)&v208->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = Scalar;
  Scalar = 0;
  if (v149)
    (*((void (**)(std::__shared_weak_count_vtbl *))v149->~__shared_weak_count + 1))(v149);
  if (v206 < 0)
    operator delete(v205[0]);
  v150 = *a3;
  v203 = __p;
  if (__p)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = (std::__shared_weak_count_vtbl *)__p;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v204 = v151;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v150 + 56))(v150, &v203);
  v153 = v204;
  if (v204)
  {
    v154 = (unint64_t *)&v204->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = __p;
  __p = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v157 = __p;
  std::string::basic_string[abi:ne180100]<0>(v199, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v199, 0, (uint64_t *)&Scalar);
  v201 = Scalar;
  if (Scalar)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = Scalar;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v202 = v158;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v197, "C");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v157 + 24))(v157, &v201, 1, v197);
  if (v198 < 0)
    operator delete(v197[0]);
  v160 = v202;
  if (v202)
  {
    v161 = (unint64_t *)&v202->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = Scalar;
  Scalar = 0;
  if (v163)
    (*((void (**)(std::__shared_weak_count_vtbl *))v163->~__shared_weak_count + 1))(v163);
  if (v200 < 0)
    operator delete(v199[0]);
  v164 = *a3;
  v195 = __p;
  if (__p)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = (std::__shared_weak_count_vtbl *)__p;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v196 = v165;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v164 + 56))(v164, &v195);
  v167 = v196;
  if (v196)
  {
    v168 = (unint64_t *)&v196->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = __p;
  __p = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v248);
  v171 = v248;
  std::string::basic_string[abi:ne180100]<0>(v191, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v191, 1, v276);
  v193 = v276[0];
  if (v276[0])
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = v276[0];
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = (std::__shared_weak_count_vtbl *)v173;
  }
  else
  {
    v172 = 0;
  }
  v194 = v172;
  v276[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v260, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v261, "int32");
  std::string::basic_string[abi:ne180100]<0>(v262, "int8");
  std::string::basic_string[abi:ne180100]<0>(v263, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v171 + 24))(v171, &v193, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v263[i + 2]) < 0)
      operator delete((void *)v263[i]);
  }
  v175 = v194;
  if (v194)
  {
    v176 = (unint64_t *)&v194->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = v276[0];
  v276[0] = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  if (v192 < 0)
    operator delete(v191[0]);
  v179 = *a3;
  v189 = v248;
  if (v248)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = v248;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = (std::__shared_weak_count_vtbl *)v181;
  }
  else
  {
    v180 = 0;
  }
  v190 = v180;
  v248 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v179 + 56))(v179, &v189);
  v182 = v190;
  if (v190)
  {
    v183 = (unint64_t *)&v190->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = v248;
  v248 = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  if (v273)
  {
    v186 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v273);
    MEMORY[0x1E0C023A0](v186, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v250, 0);
  result = (uint64_t)v256;
  if (v256)
  {
    v188 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v256);
    return MEMORY[0x1E0C023A0](v188, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E085F600(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x270];
  STACK[0x270] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 112), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x280], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x2D8], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBasePool(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceBasePool(a1, a3, a4);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

void sub_1E085FD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BasePool::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count_vtbl *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  char *v79;
  __int128 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  char **v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  _OWORD *v101;
  unsigned __int8 *v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count_vtbl *v108;
  std::__shared_weak_count *v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count_vtbl *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  void *v123;
  std::__shared_weak_count *v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count_vtbl *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  void *v136;
  void *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count_vtbl *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  void *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count_vtbl *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  void *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  void *v178;
  void *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  uint64_t i;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  uint64_t j;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t result;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  void *v221[2];
  char v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  void *v225[2];
  char v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  void *v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  void *v233[2];
  char v234;
  void *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239[2];
  char v240;
  void *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  void *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  void *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  void *v259;
  std::__shared_weak_count *v260;
  void *v261;
  std::__shared_weak_count *v262;
  void *v263[2];
  char v264;
  void *v265;
  std::__shared_weak_count *v266;
  void *v267;
  std::__shared_weak_count *v268;
  void *v269[2];
  char v270;
  void *v271;
  std::__shared_weak_count *v272;
  void *v273[2];
  char v274;
  void *v275[2];
  char v276;
  void *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  __n128 v281;
  __int128 v282;
  __int128 v283;
  void *v284[2];
  uint64_t v285;
  __n128 v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  char **v290;
  __n128 v291;
  __n128 v292;
  __n128 v293;
  __n128 v294;
  __n128 v295;
  __n128 v296;
  _QWORD *v297;
  void *v298;
  void *v299;
  char *v300;
  _QWORD v301[3];
  _QWORD v302[3];
  _QWORD v303[3];
  void *v304[3];
  void *__p;
  void *v306;
  _QWORD *v307;
  _QWORD v308[3];
  _QWORD *v309;
  _BYTE v310[24];
  _BYTE *v311;
  _QWORD v312[3];
  _QWORD *v313;
  std::__shared_weak_count_vtbl *v314;
  uint64_t v315;
  void (__cdecl **v316)(std::__shared_weak_count *__hidden);
  uint64_t v317[3];

  v317[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v297 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (char *)operator new(0x18uLL);
  v300 = v12 + 24;
  *(_QWORD *)v12 = v9;
  *((_QWORD *)v12 + 1) = v10;
  *((_QWORD *)v12 + 2) = v11;
  v298 = v12;
  v299 = v12 + 24;
  v314 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v298);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(0x18uLL);
  v307 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  __p = v16;
  v306 = v16 + 3;
  v315 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v314, 2, &v296);
  MIL::IRParameter::Make(&v296, &v288);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v288);
  v17 = v288;
  v288 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v296.n128_u64[1];
  if (v296.n128_u64[1])
  {
    v19 = (unint64_t *)(v296.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v306 = __p;
    operator delete(__p);
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  v21 = v297;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (char *)operator new(8uLL);
  v298 = v23;
  *(_QWORD *)v23 = v22;
  v300 = v23 + 8;
  v299 = v23 + 8;
  v314 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v298);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v314, 1, &v295);
  MIL::IRParameter::Make(&v295, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v21, "kernel_sizes", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v295.n128_u64[1];
  if (v295.n128_u64[1])
  {
    v27 = (unint64_t *)(v295.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v297;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  v298 = v31;
  *(_QWORD *)v31 = v30;
  v300 = v31 + 8;
  v299 = v31 + 8;
  v314 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v298);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v314, 1, &v294);
  MIL::IRParameter::Make(&v294, (uint64_t *)&__p);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v29, "strides", (uint64_t *)&__p);
  v33 = __p;
  __p = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v294.n128_u64[1];
  if (v294.n128_u64[1])
  {
    v35 = (unint64_t *)(v294.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v297;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v293);
  MIL::IRParameter::Make(&v293, (uint64_t *)&v298);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v37, "pad_type", (uint64_t *)&v298);
  v39 = v298;
  v298 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v293.n128_u64[1];
  if (v293.n128_u64[1])
  {
    v41 = (unint64_t *)(v293.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v43 = v297;
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (char *)operator new(0x10uLL);
  v300 = v46 + 16;
  *(_QWORD *)v46 = v44;
  *((_QWORD *)v46 + 1) = v45;
  v298 = v46;
  v299 = v46 + 16;
  v314 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v298);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v314, 1, &v292);
  MIL::IRParameter::Make(&v292, (uint64_t *)&__p);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v43, "pad", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v292.n128_u64[1];
  if (v292.n128_u64[1])
  {
    v50 = (unint64_t *)(v292.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v298)
  {
    v299 = v298;
    operator delete(v298);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v297;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v291);
  MIL::IRParameter::Make(&v291, (uint64_t *)&v298);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v52, "ceil_mode", (uint64_t *)&v298);
  v54 = v298;
  v298 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v291.n128_u64[1];
  if (v291.n128_u64[1])
  {
    v56 = (unint64_t *)(v291.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v290 = 0;
  v58 = operator new();
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  v298 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v290, (void **)v58);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v298, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v290, 1uLL);
  v59 = v290;
  v60 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v61 = operator new(8uLL);
  __p = v61;
  *v61 = v60;
  v307 = v61 + 1;
  v306 = v61 + 1;
  v317[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v62 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v63 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v314 = v63;
  v63->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v62;
  v315 = (uint64_t)&v63->~__shared_weak_count_0;
  v316 = &v63->~__shared_weak_count_0;
  v317[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v314);
  MIL::IRParameter::MakeTypeSet((uint64_t)v317, 2, &v286);
  MIL::IRParameter::Make(&v286, &v287);
  v64 = v287;
  v288 = v287;
  if (v287)
  {
    v65 = (_QWORD *)operator new();
    v66 = v287;
    *v65 = &unk_1EA99F888;
    v65[1] = 0;
    v65[2] = 0;
    v65[3] = v66;
  }
  else
  {
    v65 = 0;
  }
  v289 = v65;
  v287 = 0;
  v67 = v59[2];
  v68 = v59[1];
  if (v68 >= v67)
  {
    v70 = (v68 - *v59) >> 4;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v72 = v67 - *v59;
    if (v72 >> 3 > v71)
      v71 = v72 >> 3;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
      v73 = 0xFFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    v301[1] = v59 + 2;
    v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v59 + 2), v73);
    v76 = (uint64_t *)&v74[16 * v70];
    *v76 = v64;
    v76[1] = (uint64_t)v65;
    v289 = 0;
    v288 = 0;
    v78 = *v59;
    v77 = v59[1];
    if (v77 == *v59)
    {
      v81 = v59[1];
      v79 = &v74[16 * v70];
    }
    else
    {
      v79 = &v74[16 * v70];
      do
      {
        v80 = *((_OWORD *)v77 - 1);
        v77 -= 16;
        *((_OWORD *)v79 - 1) = v80;
        v79 -= 16;
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
      }
      while (v77 != v78);
      v81 = *v59;
      v77 = v59[1];
    }
    v69 = (char *)(v76 + 2);
    *v59 = v79;
    v299 = v81;
    v59[1] = (char *)(v76 + 2);
    v300 = v77;
    v82 = v59[2];
    v59[2] = &v74[16 * v75];
    v301[0] = v82;
    v298 = v81;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v298);
  }
  else
  {
    *(_QWORD *)v68 = v64;
    *((_QWORD *)v68 + 1) = v65;
    v69 = v68 + 16;
    v289 = 0;
    v288 = 0;
  }
  v59[1] = v69;
  v83 = v287;
  v287 = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = (std::__shared_weak_count *)v286.n128_u64[1];
  if (v286.n128_u64[1])
  {
    v85 = (unint64_t *)(v286.n128_u64[1] + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  if (v314)
  {
    v315 = (uint64_t)v314;
    operator delete(v314);
  }
  if (__p)
  {
    v306 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v284 = *(_OWORD *)a2;
  v285 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v87 = (uint64_t)v297;
  *(_QWORD *)&v283 = v297;
  if (v297)
  {
    v88 = (_QWORD *)operator new();
    *v88 = &unk_1EA99F8E8;
    v88[1] = 0;
    v88[2] = 0;
    v88[3] = v87;
  }
  else
  {
    v88 = 0;
  }
  *((_QWORD *)&v283 + 1) = v88;
  v297 = 0;
  *(_QWORD *)&v282 = v290;
  if (v290)
  {
    v89 = (_QWORD *)operator new();
    v90 = v290;
    *v89 = &unk_1EA99F948;
    v89[1] = 0;
    v89[2] = 0;
    v89[3] = v90;
  }
  else
  {
    v89 = 0;
  }
  *((_QWORD *)&v282 + 1) = v89;
  v290 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v312, a3);
  }
  else
  {
    v312[0] = &unk_1EA99FAC8;
    v312[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateBasePool;
    v313 = v312;
  }
  v311 = 0;
  MIL::IROperator::Make((__int128 *)v284, &v283, &v282, (uint64_t)v312, (uint64_t)v310, a4);
  v91 = v311;
  if (v311 == v310)
  {
    v92 = 4;
    v91 = v310;
  }
  else
  {
    if (!v311)
      goto LABEL_95;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_95:
  v93 = v313;
  if (v313 == v312)
  {
    v94 = 4;
    v93 = v312;
    goto LABEL_99;
  }
  if (v313)
  {
    v94 = 5;
LABEL_99:
    (*(void (**)(void))(*v93 + 8 * v94))();
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
  if (*((_QWORD *)&v282 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
  if (*((_QWORD *)&v283 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (SHIBYTE(v285) < 0)
    operator delete(v284[0]);
  v314 = 0;
  v101 = (_OWORD *)operator new();
  *v101 = 0u;
  v101[1] = 0u;
  *((_DWORD *)v101 + 8) = 1065353216;
  v314 = (std::__shared_weak_count_vtbl *)v101;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v281);
  MIL::IRParameter::Make(&v281, (uint64_t *)&v298);
  v102 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v101, "minimum_compute_type", (uint64_t *)&v298);
  v103 = v298;
  v298 = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  v104 = (std::__shared_weak_count *)v281.n128_u64[1];
  if (v281.n128_u64[1])
  {
    v105 = (unint64_t *)(v281.n128_u64[1] + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v102 + 5) + 32))(*((_QWORD *)v102 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v102 + 5) + 48))(*((_QWORD *)v102 + 5), 1);
  v107 = *a4;
  v108 = v314;
  v279 = v314;
  if (v314)
  {
    v109 = (std::__shared_weak_count *)operator new();
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = v108;
  }
  else
  {
    v109 = 0;
  }
  v280 = v109;
  v314 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v107 + 184))(v107, &v279);
  v110 = v280;
  if (v280)
  {
    p_shared_owners = (unint64_t *)&v280->__shared_owners_;
    do
      v112 = __ldaxr(p_shared_owners);
    while (__stlxr(v112 - 1, p_shared_owners));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = *a4;
  v308[0] = &off_1EA99FBD8;
  v308[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBasePool;
  v309 = v308;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v113 + 200))(v113, v308);
  v114 = v309;
  if (v309 == v308)
  {
    v115 = 4;
    v114 = v308;
  }
  else
  {
    if (!v309)
      goto LABEL_132;
    v115 = 5;
  }
  (*(void (**)(void))(*v114 + 8 * v115))();
LABEL_132:
  MIL::Validation::TensorDTypeConstraints::Make(&v298);
  v116 = v298;
  std::string::basic_string[abi:ne180100]<0>(v275, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v275, 0, (uint64_t *)&__p);
  v277 = __p;
  if (__p)
  {
    v117 = (std::__shared_weak_count *)operator new();
    v118 = (std::__shared_weak_count_vtbl *)__p;
    v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v117->__shared_owners_ = 0;
    v117->__shared_weak_owners_ = 0;
    v117[1].__vftable = v118;
  }
  else
  {
    v117 = 0;
  }
  v278 = v117;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v273, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v116 + 24))(v116, &v277, v273);
  if (v274 < 0)
    operator delete(v273[0]);
  v119 = v278;
  if (v278)
  {
    v120 = (unint64_t *)&v278->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v122 = __p;
  __p = 0;
  if (v122)
    (*(void (**)(void *))(*(_QWORD *)v122 + 8))(v122);
  if (v276 < 0)
    operator delete(v275[0]);
  v123 = v298;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v271 = __p;
  if (__p)
  {
    v124 = (std::__shared_weak_count *)operator new();
    v125 = (std::__shared_weak_count_vtbl *)__p;
    v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v124->__shared_owners_ = 0;
    v124->__shared_weak_owners_ = 0;
    v124[1].__vftable = v125;
  }
  else
  {
    v124 = 0;
  }
  v272 = v124;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v269, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v123 + 24))(v123, &v271, v269);
  if (v270 < 0)
    operator delete(v269[0]);
  v126 = v272;
  if (v272)
  {
    v127 = (unint64_t *)&v272->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = __p;
  __p = 0;
  if (v129)
    (*(void (**)(void *))(*(_QWORD *)v129 + 8))(v129);
  v130 = *a4;
  v267 = v298;
  if (v298)
  {
    v131 = (std::__shared_weak_count *)operator new();
    v132 = (std::__shared_weak_count_vtbl *)v298;
    v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v131->__shared_owners_ = 0;
    v131->__shared_weak_owners_ = 0;
    v131[1].__vftable = v132;
  }
  else
  {
    v131 = 0;
  }
  v268 = v131;
  v298 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v130 + 56))(v130, &v267);
  v133 = v268;
  if (v268)
  {
    v134 = (unint64_t *)&v268->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = v298;
  v298 = 0;
  if (v136)
    (*(void (**)(void *))(*(_QWORD *)v136 + 8))(v136);
  MIL::Validation::TensorRankValueConstraints::Make(&v298);
  v137 = v298;
  std::string::basic_string[abi:ne180100]<0>(v263, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&__p);
  v265 = __p;
  if (__p)
  {
    v138 = (std::__shared_weak_count *)operator new();
    v139 = (std::__shared_weak_count_vtbl *)__p;
    v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v138->__shared_owners_ = 0;
    v138->__shared_weak_owners_ = 0;
    v138[1].__vftable = v139;
  }
  else
  {
    v138 = 0;
  }
  v266 = v138;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v137 + 32))(v137, &v265, 3, 5);
  v140 = v266;
  if (v266)
  {
    v141 = (unint64_t *)&v266->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = __p;
  __p = 0;
  if (v143)
    (*(void (**)(void *))(*(_QWORD *)v143 + 8))(v143);
  if (v264 < 0)
    operator delete(v263[0]);
  v144 = *a4;
  v261 = v298;
  if (v298)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v146 = (std::__shared_weak_count_vtbl *)v298;
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = v146;
  }
  else
  {
    v145 = 0;
  }
  v262 = v145;
  v298 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v144 + 56))(v144, &v261);
  v147 = v262;
  if (v262)
  {
    v148 = (unint64_t *)&v262->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
  v150 = v298;
  v298 = 0;
  if (v150)
    (*(void (**)(void *))(*(_QWORD *)v150 + 8))(v150);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v298);
  v151 = v298;
  std::string::basic_string[abi:ne180100]<0>(v257, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v257, 0, (uint64_t *)&__p);
  v259 = __p;
  if (__p)
  {
    v152 = (std::__shared_weak_count *)operator new();
    v153 = (std::__shared_weak_count_vtbl *)__p;
    v152->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v152->__shared_owners_ = 0;
    v152->__shared_weak_owners_ = 0;
    v152[1].__vftable = v153;
  }
  else
  {
    v152 = 0;
  }
  v260 = v152;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v151 + 24))(v151, &v259, 1, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v154 = v260;
  if (v260)
  {
    v155 = (unint64_t *)&v260->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = __p;
  __p = 0;
  if (v157)
    (*(void (**)(void *))(*(_QWORD *)v157 + 8))(v157);
  if (v258 < 0)
    operator delete(v257[0]);
  v158 = v298;
  std::string::basic_string[abi:ne180100]<0>(v251, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v251, 0, (uint64_t *)&__p);
  v253 = __p;
  if (__p)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = (std::__shared_weak_count_vtbl *)__p;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v254 = v159;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v158 + 32))(v158, &v253, 2, -1, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v161 = v254;
  if (v254)
  {
    v162 = (unint64_t *)&v254->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = __p;
  __p = 0;
  if (v164)
    (*(void (**)(void *))(*(_QWORD *)v164 + 8))(v164);
  if (v252 < 0)
    operator delete(v251[0]);
  v165 = v298;
  std::string::basic_string[abi:ne180100]<0>(v245, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v245, 0, (uint64_t *)&__p);
  v247 = __p;
  if (__p)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = (std::__shared_weak_count_vtbl *)__p;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v248 = v166;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v243, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v165 + 24))(v165, &v247, 0, v243);
  if (v244 < 0)
    operator delete(v243[0]);
  v168 = v248;
  if (v248)
  {
    v169 = (unint64_t *)&v248->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = __p;
  __p = 0;
  if (v171)
    (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
  if (v246 < 0)
    operator delete(v245[0]);
  v172 = v298;
  std::string::basic_string[abi:ne180100]<0>(v239, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v239, 0, (uint64_t *)&__p);
  v241 = __p;
  if (__p)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = (std::__shared_weak_count_vtbl *)__p;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v242 = v173;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v172 + 24))(v172, &v241, 0, v237);
  if (v238 < 0)
    operator delete(v237[0]);
  v175 = v242;
  if (v242)
  {
    v176 = (unint64_t *)&v242->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = __p;
  __p = 0;
  if (v178)
    (*(void (**)(void *))(*(_QWORD *)v178 + 8))(v178);
  if (v240 < 0)
    operator delete(v239[0]);
  v179 = v298;
  std::string::basic_string[abi:ne180100]<0>(v233, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v233, 0, (uint64_t *)&__p);
  v235 = __p;
  if (__p)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = (std::__shared_weak_count_vtbl *)__p;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v236 = v180;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v231, "D");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v179 + 24))(v179, &v235, 0, v231);
  if (v232 < 0)
    operator delete(v231[0]);
  v182 = v236;
  if (v236)
  {
    v183 = (unint64_t *)&v236->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = __p;
  __p = 0;
  if (v185)
    (*(void (**)(void *))(*(_QWORD *)v185 + 8))(v185);
  if (v234 < 0)
    operator delete(v233[0]);
  v186 = *a4;
  v229 = v298;
  if (v298)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = (std::__shared_weak_count_vtbl *)v298;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v230 = v187;
  v298 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v186 + 56))(v186, &v229);
  v189 = v230;
  if (v230)
  {
    v190 = (unint64_t *)&v230->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = v298;
  v298 = 0;
  if (v192)
    (*(void (**)(void *))(*(_QWORD *)v192 + 8))(v192);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v288);
  v193 = v288;
  std::string::basic_string[abi:ne180100]<0>(v225, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v225, 0, v317);
  v227 = v317[0];
  if (v317[0])
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = v317[0];
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = (std::__shared_weak_count_vtbl *)v195;
  }
  else
  {
    v194 = 0;
  }
  v228 = v194;
  v317[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v298, "custom");
  std::string::basic_string[abi:ne180100]<0>(v301, "same");
  std::string::basic_string[abi:ne180100]<0>(v302, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v303, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v298, 4);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v193 + 24))(v193, &v227, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v303[i + 2]) < 0)
      operator delete((void *)v303[i]);
  }
  v197 = v228;
  if (v228)
  {
    v198 = (unint64_t *)&v228->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = v317[0];
  v317[0] = 0;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  if (v226 < 0)
    operator delete(v225[0]);
  v201 = v288;
  std::string::basic_string[abi:ne180100]<0>(v221, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v221, 1, v317);
  v223 = v317[0];
  if (v317[0])
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = v317[0];
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = (std::__shared_weak_count_vtbl *)v203;
  }
  else
  {
    v202 = 0;
  }
  v224 = v202;
  v317[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v298, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v301, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v302, "int32");
  std::string::basic_string[abi:ne180100]<0>(v303, "int8");
  std::string::basic_string[abi:ne180100]<0>(v304, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v298, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v201 + 24))(v201, &v223, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v304[j + 2]) < 0)
      operator delete(v304[j]);
  }
  v205 = v224;
  if (v224)
  {
    v206 = (unint64_t *)&v224->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = v317[0];
  v317[0] = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  if (v222 < 0)
    operator delete(v221[0]);
  v209 = *a4;
  v219 = v288;
  if (v288)
  {
    v210 = (std::__shared_weak_count *)operator new();
    v211 = v288;
    v210->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v210->__shared_owners_ = 0;
    v210->__shared_weak_owners_ = 0;
    v210[1].__vftable = (std::__shared_weak_count_vtbl *)v211;
  }
  else
  {
    v210 = 0;
  }
  v220 = v210;
  v288 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v209 + 56))(v209, &v219);
  v212 = v220;
  if (v220)
  {
    v213 = (unint64_t *)&v220->__shared_owners_;
    do
      v214 = __ldaxr(v213);
    while (__stlxr(v214 - 1, v213));
    if (!v214)
    {
      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
      std::__shared_weak_count::__release_weak(v212);
    }
  }
  v215 = v288;
  v288 = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  if (v314)
  {
    v216 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v314);
    MEMORY[0x1E0C023A0](v216, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v290, 0);
  result = (uint64_t)v297;
  if (v297)
  {
    v218 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v297);
    return MEMORY[0x1E0C023A0](v218, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0861824(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2D0];
  STACK[0x2D0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2E0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x348], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::BaseAvgPool::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned __int8 *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned __int8 *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  char **v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  std::__shared_weak_count_vtbl *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  char *v83;
  char *v84;
  char *v85;
  __int128 v86;
  char *v87;
  char *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  char **v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  _OWORD *v107;
  unsigned __int8 *v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count_vtbl *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  unint64_t *p_shared_owners;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  void *v122;
  std::__shared_weak_count *v123;
  std::__shared_weak_count_vtbl *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  void *v129;
  std::__shared_weak_count *v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count_vtbl *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  void *v143;
  std::__shared_weak_count *v144;
  std::__shared_weak_count_vtbl *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  void *v157;
  std::__shared_weak_count *v158;
  std::__shared_weak_count_vtbl *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void *v163;
  void *v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count_vtbl *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  void *v171;
  std::__shared_weak_count *v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  void *v177;
  void *v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count_vtbl *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  void *v184;
  void *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count_vtbl *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  uint64_t v201;
  uint64_t i;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  uint64_t j;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t result;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  void *v227[2];
  char v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  void *v231[2];
  char v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  void *v235;
  std::__shared_weak_count *v236;
  void *v237[2];
  char v238;
  void *v239[2];
  char v240;
  void *v241;
  std::__shared_weak_count *v242;
  void *v243[2];
  char v244;
  void *v245[2];
  char v246;
  void *v247;
  std::__shared_weak_count *v248;
  void *v249[2];
  char v250;
  void *v251[2];
  char v252;
  void *v253;
  std::__shared_weak_count *v254;
  void *v255[2];
  char v256;
  void *v257[2];
  char v258;
  void *v259;
  std::__shared_weak_count *v260;
  void *v261[2];
  char v262;
  void *v263[2];
  char v264;
  void *v265;
  std::__shared_weak_count *v266;
  void *v267;
  std::__shared_weak_count *v268;
  void *v269[2];
  char v270;
  void *v271;
  std::__shared_weak_count *v272;
  void *v273;
  std::__shared_weak_count *v274;
  void *v275[2];
  char v276;
  void *v277;
  std::__shared_weak_count *v278;
  void *v279[2];
  char v280;
  void *v281[2];
  char v282;
  void *v283;
  std::__shared_weak_count *v284;
  std::__shared_weak_count_vtbl *v285;
  std::__shared_weak_count *v286;
  __n128 v287;
  __int128 v288;
  __int128 v289;
  void *v290[2];
  uint64_t v291;
  __n128 v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  char **v296;
  __n128 v297;
  __n128 v298;
  __n128 v299;
  __n128 v300;
  __n128 v301;
  __n128 v302;
  __n128 v303;
  _QWORD *v304;
  void *v305;
  void *v306;
  char *v307;
  _QWORD v308[3];
  _QWORD v309[3];
  _QWORD v310[3];
  void *v311[3];
  void *__p;
  void *v313;
  _QWORD *v314;
  _QWORD v315[3];
  _QWORD *v316;
  _BYTE v317[24];
  _BYTE *v318;
  _QWORD v319[3];
  _QWORD *v320;
  std::__shared_weak_count_vtbl *v321;
  uint64_t v322;
  void (__cdecl **v323)(std::__shared_weak_count *__hidden);
  uint64_t v324[3];

  v324[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v304 = (_QWORD *)v8;
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = MIL::IRUnknownDimension::Make(a1, 0);
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (char *)operator new(0x18uLL);
  v307 = v12 + 24;
  *(_QWORD *)v12 = v9;
  *((_QWORD *)v12 + 1) = v10;
  *((_QWORD *)v12 + 2) = v11;
  v305 = v12;
  v306 = v12 + 24;
  v321 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v305);
  v13 = MIL::IRUnknownDimension::Make(a1, 0);
  v14 = MIL::IRUnknownDimension::Make(a1, 0);
  v15 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v16 = operator new(0x18uLL);
  v314 = v16 + 3;
  *v16 = v13;
  v16[1] = v14;
  v16[2] = v15;
  __p = v16;
  v313 = v16 + 3;
  v322 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v321, 2, &v303);
  MIL::IRParameter::Make(&v303, &v294);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v8, "x", &v294);
  v17 = v294;
  v294 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v303.n128_u64[1];
  if (v303.n128_u64[1])
  {
    v19 = (unint64_t *)(v303.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v313 = __p;
    operator delete(__p);
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  v21 = v304;
  v22 = MIL::IRUnknownDimension::Make(a1, 0);
  v23 = (char *)operator new(8uLL);
  v305 = v23;
  *(_QWORD *)v23 = v22;
  v307 = v23 + 8;
  v306 = v23 + 8;
  v321 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v305);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v321, 1, &v302);
  MIL::IRParameter::Make(&v302, (uint64_t *)&__p);
  v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(v21, "kernel_sizes", (uint64_t *)&__p);
  v25 = __p;
  __p = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  v26 = (std::__shared_weak_count *)v302.n128_u64[1];
  if (v302.n128_u64[1])
  {
    v27 = (unint64_t *)(v302.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v24 + 5) + 32))(*((_QWORD *)v24 + 5), 1);
  v29 = v304;
  v30 = MIL::IRUnknownDimension::Make(a1, 0);
  v31 = (char *)operator new(8uLL);
  v305 = v31;
  *(_QWORD *)v31 = v30;
  v307 = v31 + 8;
  v306 = v31 + 8;
  v321 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v305);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v321, 1, &v301);
  MIL::IRParameter::Make(&v301, (uint64_t *)&__p);
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(v29, "strides", (uint64_t *)&__p);
  v33 = __p;
  __p = 0;
  if (v33)
    (*(void (**)(void *))(*(_QWORD *)v33 + 8))(v33);
  v34 = (std::__shared_weak_count *)v301.n128_u64[1];
  if (v301.n128_u64[1])
  {
    v35 = (unint64_t *)(v301.n128_u64[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v32 + 5) + 32))(*((_QWORD *)v32 + 5), 1);
  v37 = v304;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v300);
  MIL::IRParameter::Make(&v300, (uint64_t *)&v305);
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v37, "pad_type", (uint64_t *)&v305);
  v39 = v305;
  v305 = 0;
  if (v39)
    (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
  v40 = (std::__shared_weak_count *)v300.n128_u64[1];
  if (v300.n128_u64[1])
  {
    v41 = (unint64_t *)(v300.n128_u64[1] + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v38 + 5) + 32))(*((_QWORD *)v38 + 5), 1);
  v43 = v304;
  v44 = MIL::IRUnknownDimension::Make(a1, 0);
  v45 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v46 = (char *)operator new(0x10uLL);
  v307 = v46 + 16;
  *(_QWORD *)v46 = v44;
  *((_QWORD *)v46 + 1) = v45;
  v305 = v46;
  v306 = v46 + 16;
  v321 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&v305);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v321, 1, &v299);
  MIL::IRParameter::Make(&v299, (uint64_t *)&__p);
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v43, "pad", (uint64_t *)&__p);
  v48 = __p;
  __p = 0;
  if (v48)
    (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  v49 = (std::__shared_weak_count *)v299.n128_u64[1];
  if (v299.n128_u64[1])
  {
    v50 = (unint64_t *)(v299.n128_u64[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v47 + 5) + 32))(*((_QWORD *)v47 + 5), 1);
  v52 = v304;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v298);
  MIL::IRParameter::Make(&v298, (uint64_t *)&v305);
  v53 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v52, "ceil_mode", (uint64_t *)&v305);
  v54 = v305;
  v305 = 0;
  if (v54)
    (*(void (**)(void *))(*(_QWORD *)v54 + 8))(v54);
  v55 = (std::__shared_weak_count *)v298.n128_u64[1];
  if (v298.n128_u64[1])
  {
    v56 = (unint64_t *)(v298.n128_u64[1] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v53 + 5) + 32))(*((_QWORD *)v53 + 5), 1);
  v58 = v304;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v297);
  MIL::IRParameter::Make(&v297, (uint64_t *)&v305);
  v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[29],std::unique_ptr<MIL::IRParameter>>(v58, "exclude_padding_from_average", (uint64_t *)&v305);
  v60 = v305;
  v305 = 0;
  if (v60)
    (*(void (**)(void *))(*(_QWORD *)v60 + 8))(v60);
  v61 = (std::__shared_weak_count *)v297.n128_u64[1];
  if (v297.n128_u64[1])
  {
    v62 = (unint64_t *)(v297.n128_u64[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v59 + 5) + 32))(*((_QWORD *)v59 + 5), 1);
  v296 = 0;
  v64 = operator new();
  *(_QWORD *)v64 = 0;
  *(_QWORD *)(v64 + 8) = 0;
  *(_QWORD *)(v64 + 16) = 0;
  v305 = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v296, (void **)v64);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v305, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v296, 1uLL);
  v65 = v296;
  v66 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v67 = operator new(8uLL);
  __p = v67;
  *v67 = v66;
  v314 = v67 + 1;
  v313 = v67 + 1;
  v324[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v68 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v69 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v321 = v69;
  v69->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v68;
  v322 = (uint64_t)&v69->~__shared_weak_count_0;
  v323 = &v69->~__shared_weak_count_0;
  v324[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v321);
  MIL::IRParameter::MakeTypeSet((uint64_t)v324, 2, &v292);
  MIL::IRParameter::Make(&v292, &v293);
  v70 = v293;
  v294 = v293;
  if (v293)
  {
    v71 = (_QWORD *)operator new();
    v72 = v293;
    *v71 = &unk_1EA99F888;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v72;
  }
  else
  {
    v71 = 0;
  }
  v295 = v71;
  v293 = 0;
  v73 = v65[2];
  v74 = v65[1];
  if (v74 >= v73)
  {
    v76 = (v74 - *v65) >> 4;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v78 = v73 - *v65;
    if (v78 >> 3 > v77)
      v77 = v78 >> 3;
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
      v79 = 0xFFFFFFFFFFFFFFFLL;
    else
      v79 = v77;
    v308[1] = v65 + 2;
    v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v65 + 2), v79);
    v82 = (uint64_t *)&v80[16 * v76];
    *v82 = v70;
    v82[1] = (uint64_t)v71;
    v295 = 0;
    v294 = 0;
    v84 = *v65;
    v83 = v65[1];
    if (v83 == *v65)
    {
      v87 = v65[1];
      v85 = &v80[16 * v76];
    }
    else
    {
      v85 = &v80[16 * v76];
      do
      {
        v86 = *((_OWORD *)v83 - 1);
        v83 -= 16;
        *((_OWORD *)v85 - 1) = v86;
        v85 -= 16;
        *(_QWORD *)v83 = 0;
        *((_QWORD *)v83 + 1) = 0;
      }
      while (v83 != v84);
      v87 = *v65;
      v83 = v65[1];
    }
    v75 = (char *)(v82 + 2);
    *v65 = v85;
    v306 = v87;
    v65[1] = (char *)(v82 + 2);
    v307 = v83;
    v88 = v65[2];
    v65[2] = &v80[16 * v81];
    v308[0] = v88;
    v305 = v87;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&v305);
  }
  else
  {
    *(_QWORD *)v74 = v70;
    *((_QWORD *)v74 + 1) = v71;
    v75 = v74 + 16;
    v295 = 0;
    v294 = 0;
  }
  v65[1] = v75;
  v89 = v293;
  v293 = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = (std::__shared_weak_count *)v292.n128_u64[1];
  if (v292.n128_u64[1])
  {
    v91 = (unint64_t *)(v292.n128_u64[1] + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v321)
  {
    v322 = (uint64_t)v321;
    operator delete(v321);
  }
  if (__p)
  {
    v313 = __p;
    operator delete(__p);
  }
  *(_OWORD *)v290 = *(_OWORD *)a2;
  v291 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v93 = (uint64_t)v304;
  *(_QWORD *)&v289 = v304;
  if (v304)
  {
    v94 = (_QWORD *)operator new();
    *v94 = &unk_1EA99F8E8;
    v94[1] = 0;
    v94[2] = 0;
    v94[3] = v93;
  }
  else
  {
    v94 = 0;
  }
  *((_QWORD *)&v289 + 1) = v94;
  v304 = 0;
  *(_QWORD *)&v288 = v296;
  if (v296)
  {
    v95 = (_QWORD *)operator new();
    v96 = v296;
    *v95 = &unk_1EA99F948;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v96;
  }
  else
  {
    v95 = 0;
  }
  *((_QWORD *)&v288 + 1) = v95;
  v296 = 0;
  if (*(_QWORD *)(a3 + 24))
  {
    std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v319, a3);
  }
  else
  {
    v319[0] = &unk_1EA99FAC8;
    v319[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateBasePool;
    v320 = v319;
  }
  v318 = 0;
  MIL::IROperator::Make((__int128 *)v290, &v289, &v288, (uint64_t)v319, (uint64_t)v317, a4);
  v97 = v318;
  if (v318 == v317)
  {
    v98 = 4;
    v97 = v317;
  }
  else
  {
    if (!v318)
      goto LABEL_102;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_102:
  v99 = v320;
  if (v320 == v319)
  {
    v100 = 4;
    v99 = v319;
    goto LABEL_106;
  }
  if (v320)
  {
    v100 = 5;
LABEL_106:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v288 + 1) + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
  if (*((_QWORD *)&v289 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (SHIBYTE(v291) < 0)
    operator delete(v290[0]);
  v321 = 0;
  v107 = (_OWORD *)operator new();
  *v107 = 0u;
  v107[1] = 0u;
  *((_DWORD *)v107 + 8) = 1065353216;
  v321 = (std::__shared_weak_count_vtbl *)v107;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 1, &v287);
  MIL::IRParameter::Make(&v287, (uint64_t *)&v305);
  v108 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v107, "minimum_compute_type", (uint64_t *)&v305);
  v109 = v305;
  v305 = 0;
  if (v109)
    (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
  v110 = (std::__shared_weak_count *)v287.n128_u64[1];
  if (v287.n128_u64[1])
  {
    v111 = (unint64_t *)(v287.n128_u64[1] + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v108 + 5) + 32))(*((_QWORD *)v108 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v108 + 5) + 48))(*((_QWORD *)v108 + 5), 1);
  v113 = *a4;
  v114 = v321;
  v285 = v321;
  if (v321)
  {
    v115 = (std::__shared_weak_count *)operator new();
    v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v115->__shared_owners_ = 0;
    v115->__shared_weak_owners_ = 0;
    v115[1].__vftable = v114;
  }
  else
  {
    v115 = 0;
  }
  v286 = v115;
  v321 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v113 + 184))(v113, &v285);
  v116 = v286;
  if (v286)
  {
    p_shared_owners = (unint64_t *)&v286->__shared_owners_;
    do
      v118 = __ldaxr(p_shared_owners);
    while (__stlxr(v118 - 1, p_shared_owners));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = *a4;
  v315[0] = &off_1EA99FBD8;
  v315[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceBasePool;
  v316 = v315;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v119 + 200))(v119, v315);
  v120 = v316;
  if (v316 == v315)
  {
    v121 = 4;
    v120 = v315;
  }
  else
  {
    if (!v316)
      goto LABEL_139;
    v121 = 5;
  }
  (*(void (**)(void))(*v120 + 8 * v121))();
LABEL_139:
  MIL::Validation::TensorDTypeConstraints::Make(&v305);
  v122 = v305;
  std::string::basic_string[abi:ne180100]<0>(v281, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v281, 0, (uint64_t *)&__p);
  v283 = __p;
  if (__p)
  {
    v123 = (std::__shared_weak_count *)operator new();
    v124 = (std::__shared_weak_count_vtbl *)__p;
    v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v123->__shared_owners_ = 0;
    v123->__shared_weak_owners_ = 0;
    v123[1].__vftable = v124;
  }
  else
  {
    v123 = 0;
  }
  v284 = v123;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v279, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v122 + 24))(v122, &v283, v279);
  if (v280 < 0)
    operator delete(v279[0]);
  v125 = v284;
  if (v284)
  {
    v126 = (unint64_t *)&v284->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = __p;
  __p = 0;
  if (v128)
    (*(void (**)(void *))(*(_QWORD *)v128 + 8))(v128);
  if (v282 < 0)
    operator delete(v281[0]);
  v129 = v305;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &__p);
  v277 = __p;
  if (__p)
  {
    v130 = (std::__shared_weak_count *)operator new();
    v131 = (std::__shared_weak_count_vtbl *)__p;
    v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v130->__shared_owners_ = 0;
    v130->__shared_weak_owners_ = 0;
    v130[1].__vftable = v131;
  }
  else
  {
    v130 = 0;
  }
  v278 = v130;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v275, "T");
  (*(void (**)(void *, void **, void **))(*(_QWORD *)v129 + 24))(v129, &v277, v275);
  if (v276 < 0)
    operator delete(v275[0]);
  v132 = v278;
  if (v278)
  {
    v133 = (unint64_t *)&v278->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = __p;
  __p = 0;
  if (v135)
    (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
  v136 = *a4;
  v273 = v305;
  if (v305)
  {
    v137 = (std::__shared_weak_count *)operator new();
    v138 = (std::__shared_weak_count_vtbl *)v305;
    v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v137->__shared_owners_ = 0;
    v137->__shared_weak_owners_ = 0;
    v137[1].__vftable = v138;
  }
  else
  {
    v137 = 0;
  }
  v274 = v137;
  v305 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v136 + 56))(v136, &v273);
  v139 = v274;
  if (v274)
  {
    v140 = (unint64_t *)&v274->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = v305;
  v305 = 0;
  if (v142)
    (*(void (**)(void *))(*(_QWORD *)v142 + 8))(v142);
  MIL::Validation::TensorRankValueConstraints::Make(&v305);
  v143 = v305;
  std::string::basic_string[abi:ne180100]<0>(v269, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v269, 0, (uint64_t *)&__p);
  v271 = __p;
  if (__p)
  {
    v144 = (std::__shared_weak_count *)operator new();
    v145 = (std::__shared_weak_count_vtbl *)__p;
    v144->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v144->__shared_owners_ = 0;
    v144->__shared_weak_owners_ = 0;
    v144[1].__vftable = v145;
  }
  else
  {
    v144 = 0;
  }
  v272 = v144;
  __p = 0;
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(_QWORD *)v143 + 32))(v143, &v271, 3, 5);
  v146 = v272;
  if (v272)
  {
    v147 = (unint64_t *)&v272->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = __p;
  __p = 0;
  if (v149)
    (*(void (**)(void *))(*(_QWORD *)v149 + 8))(v149);
  if (v270 < 0)
    operator delete(v269[0]);
  v150 = *a4;
  v267 = v305;
  if (v305)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v152 = (std::__shared_weak_count_vtbl *)v305;
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FC78;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = v152;
  }
  else
  {
    v151 = 0;
  }
  v268 = v151;
  v305 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v150 + 56))(v150, &v267);
  v153 = v268;
  if (v268)
  {
    v154 = (unint64_t *)&v268->__shared_owners_;
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = v305;
  v305 = 0;
  if (v156)
    (*(void (**)(void *))(*(_QWORD *)v156 + 8))(v156);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&v305);
  v157 = v305;
  std::string::basic_string[abi:ne180100]<0>(v263, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v263, 0, (uint64_t *)&__p);
  v265 = __p;
  if (__p)
  {
    v158 = (std::__shared_weak_count *)operator new();
    v159 = (std::__shared_weak_count_vtbl *)__p;
    v158->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v158->__shared_owners_ = 0;
    v158->__shared_weak_owners_ = 0;
    v158[1].__vftable = v159;
  }
  else
  {
    v158 = 0;
  }
  v266 = v158;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v261, "C_in");
  (*(void (**)(void *, void **, uint64_t, void **))(*(_QWORD *)v157 + 24))(v157, &v265, 1, v261);
  if (v262 < 0)
    operator delete(v261[0]);
  v160 = v266;
  if (v266)
  {
    v161 = (unint64_t *)&v266->__shared_owners_;
    do
      v162 = __ldaxr(v161);
    while (__stlxr(v162 - 1, v161));
    if (!v162)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  v163 = __p;
  __p = 0;
  if (v163)
    (*(void (**)(void *))(*(_QWORD *)v163 + 8))(v163);
  if (v264 < 0)
    operator delete(v263[0]);
  v164 = v305;
  std::string::basic_string[abi:ne180100]<0>(v257, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v257, 0, (uint64_t *)&__p);
  v259 = __p;
  if (__p)
  {
    v165 = (std::__shared_weak_count *)operator new();
    v166 = (std::__shared_weak_count_vtbl *)__p;
    v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v165->__shared_owners_ = 0;
    v165->__shared_weak_owners_ = 0;
    v165[1].__vftable = v166;
  }
  else
  {
    v165 = 0;
  }
  v260 = v165;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v255, "S");
  (*(void (**)(void *, void **, uint64_t, uint64_t, void **))(*(_QWORD *)v164 + 32))(v164, &v259, 2, -1, v255);
  if (v256 < 0)
    operator delete(v255[0]);
  v167 = v260;
  if (v260)
  {
    v168 = (unint64_t *)&v260->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = __p;
  __p = 0;
  if (v170)
    (*(void (**)(void *))(*(_QWORD *)v170 + 8))(v170);
  if (v258 < 0)
    operator delete(v257[0]);
  v171 = v305;
  std::string::basic_string[abi:ne180100]<0>(v251, "kernel_sizes");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v251, 0, (uint64_t *)&__p);
  v253 = __p;
  if (__p)
  {
    v172 = (std::__shared_weak_count *)operator new();
    v173 = (std::__shared_weak_count_vtbl *)__p;
    v172->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v172->__shared_owners_ = 0;
    v172->__shared_weak_owners_ = 0;
    v172[1].__vftable = v173;
  }
  else
  {
    v172 = 0;
  }
  v254 = v172;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v249, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v171 + 24))(v171, &v253, 0, v249);
  if (v250 < 0)
    operator delete(v249[0]);
  v174 = v254;
  if (v254)
  {
    v175 = (unint64_t *)&v254->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = __p;
  __p = 0;
  if (v177)
    (*(void (**)(void *))(*(_QWORD *)v177 + 8))(v177);
  if (v252 < 0)
    operator delete(v251[0]);
  v178 = v305;
  std::string::basic_string[abi:ne180100]<0>(v245, "strides");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v245, 0, (uint64_t *)&__p);
  v247 = __p;
  if (__p)
  {
    v179 = (std::__shared_weak_count *)operator new();
    v180 = (std::__shared_weak_count_vtbl *)__p;
    v179->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v179->__shared_owners_ = 0;
    v179->__shared_weak_owners_ = 0;
    v179[1].__vftable = v180;
  }
  else
  {
    v179 = 0;
  }
  v248 = v179;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v243, "S");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v178 + 24))(v178, &v247, 0, v243);
  if (v244 < 0)
    operator delete(v243[0]);
  v181 = v248;
  if (v248)
  {
    v182 = (unint64_t *)&v248->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  v184 = __p;
  __p = 0;
  if (v184)
    (*(void (**)(void *))(*(_QWORD *)v184 + 8))(v184);
  if (v246 < 0)
    operator delete(v245[0]);
  v185 = v305;
  std::string::basic_string[abi:ne180100]<0>(v239, "pad");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v239, 0, (uint64_t *)&__p);
  v241 = __p;
  if (__p)
  {
    v186 = (std::__shared_weak_count *)operator new();
    v187 = (std::__shared_weak_count_vtbl *)__p;
    v186->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v186->__shared_owners_ = 0;
    v186->__shared_weak_owners_ = 0;
    v186[1].__vftable = v187;
  }
  else
  {
    v186 = 0;
  }
  v242 = v186;
  __p = 0;
  std::string::basic_string[abi:ne180100]<0>(v237, "D");
  (*(void (**)(void *, void **, _QWORD, void **))(*(_QWORD *)v185 + 24))(v185, &v241, 0, v237);
  if (v238 < 0)
    operator delete(v237[0]);
  v188 = v242;
  if (v242)
  {
    v189 = (unint64_t *)&v242->__shared_owners_;
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  v191 = __p;
  __p = 0;
  if (v191)
    (*(void (**)(void *))(*(_QWORD *)v191 + 8))(v191);
  if (v240 < 0)
    operator delete(v239[0]);
  v192 = *a4;
  v235 = v305;
  if (v305)
  {
    v193 = (std::__shared_weak_count *)operator new();
    v194 = (std::__shared_weak_count_vtbl *)v305;
    v193->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v193->__shared_owners_ = 0;
    v193->__shared_weak_owners_ = 0;
    v193[1].__vftable = v194;
  }
  else
  {
    v193 = 0;
  }
  v236 = v193;
  v305 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v192 + 56))(v192, &v235);
  v195 = v236;
  if (v236)
  {
    v196 = (unint64_t *)&v236->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = v305;
  v305 = 0;
  if (v198)
    (*(void (**)(void *))(*(_QWORD *)v198 + 8))(v198);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v294);
  v199 = v294;
  std::string::basic_string[abi:ne180100]<0>(v231, "pad_type");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v231, 0, v324);
  v233 = v324[0];
  if (v324[0])
  {
    v200 = (std::__shared_weak_count *)operator new();
    v201 = v324[0];
    v200->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v200->__shared_owners_ = 0;
    v200->__shared_weak_owners_ = 0;
    v200[1].__vftable = (std::__shared_weak_count_vtbl *)v201;
  }
  else
  {
    v200 = 0;
  }
  v234 = v200;
  v324[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v305, "custom");
  std::string::basic_string[abi:ne180100]<0>(v308, "same");
  std::string::basic_string[abi:ne180100]<0>(v309, "same_lower");
  std::string::basic_string[abi:ne180100]<0>(v310, "valid");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v305, 4);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v199 + 24))(v199, &v233, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v310[i + 2]) < 0)
      operator delete((void *)v310[i]);
  }
  v203 = v234;
  if (v234)
  {
    v204 = (unint64_t *)&v234->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = v324[0];
  v324[0] = 0;
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  if (v232 < 0)
    operator delete(v231[0]);
  v207 = v294;
  std::string::basic_string[abi:ne180100]<0>(v227, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v227, 1, v324);
  v229 = v324[0];
  if (v324[0])
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = v324[0];
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = (std::__shared_weak_count_vtbl *)v209;
  }
  else
  {
    v208 = 0;
  }
  v230 = v208;
  v324[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v305, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v308, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v309, "int32");
  std::string::basic_string[abi:ne180100]<0>(v310, "int8");
  std::string::basic_string[abi:ne180100]<0>(v311, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, (unsigned __int8 *)&v305, 5);
  (*(void (**)(uint64_t, uint64_t *, void **, uint64_t))(*(_QWORD *)v207 + 24))(v207, &v229, &__p, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  for (j = 0; j != -15; j -= 3)
  {
    if (SHIBYTE(v311[j + 2]) < 0)
      operator delete(v311[j]);
  }
  v211 = v230;
  if (v230)
  {
    v212 = (unint64_t *)&v230->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = v324[0];
  v324[0] = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  if (v228 < 0)
    operator delete(v227[0]);
  v215 = *a4;
  v225 = v294;
  if (v294)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = v294;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = (std::__shared_weak_count_vtbl *)v217;
  }
  else
  {
    v216 = 0;
  }
  v226 = v216;
  v294 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v215 + 56))(v215, &v225);
  v218 = v226;
  if (v226)
  {
    v219 = (unint64_t *)&v226->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = v294;
  v294 = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  if (v321)
  {
    v222 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v321);
    MEMORY[0x1E0C023A0](v222, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v296, 0);
  result = (uint64_t)v304;
  if (v304)
  {
    v224 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v304);
    return MEMORY[0x1E0C023A0](v224, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0863BB0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x2D0];
  STACK[0x2D0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 128), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2E0], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x358], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::AvgPool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BaseAvgPool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E08644B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::L2Pool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v7[0] = &unk_1EA99FAC8;
  v7[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateL2Pool;
  v8 = v7;
  MIL::Operators::Common::ios16::BasePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E08645D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::MaxPool::Make(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = 0;
  MIL::Operators::Common::ios16::BasePool::Make(a1, (uint64_t)__p, (uint64_t)v7, a3);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1E08646D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MIL::IRFunction::Make((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomBernoulli(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "prob");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E08647DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::`anonymous namespace'::ValueTypeInferenceRandomOpHelper(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v10;
  int v11;
  MIL::IRValueType *v12;
  uint64_t v13;
  uint64_t v14;
  MIL::IRValue *SingleValue;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *v39[2];
  char *v40;
  void *__p[2];
  char *v42;
  void *v43;
  void *v44;
  uint64_t v45;

  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, a4);
  v10 = MIL::IRValueType::AsTensorType(SingleValueType);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  v12 = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)__p);
  v13 = MIL::IRValueType::AsTensorType(v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v43, *(const void **)v14, *(_QWORD *)(v14 + 8), (uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 3);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)v43 + 16))(*(_QWORD *)v43))
  {
    std::string::basic_string[abi:ne180100]<0>(v39, "shape");
    SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::TryGetSingleValue(a3, (uint64_t)v39);
    if (SHIBYTE(v40) < 0)
      operator delete(v39[0]);
    v16 = (std::__shared_weak_count *)a2[1];
    v37 = *a2;
    v38 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    MIL::ValueTypeInferenceUtils::GetRandomOpOutShape(SingleValue, a1, (MIL::IRDimension ***)&v43, &v37, v39);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v39;
    v42 = v40;
    v39[1] = 0;
    v40 = 0;
    v39[0] = 0;
    v19 = v38;
    if (v38)
    {
      v20 = (unint64_t *)&v38->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    v22 = MIL::IRUnknownDimension::Make(*a1, (MIL::MILContext *)1);
    v23 = v22;
    v24 = (char *)__p[1];
    if (__p[1] >= v42)
    {
      v26 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v27 = (v42 - (char *)__p[0]) >> 2;
      if (v27 <= v26 + 1)
        v27 = v26 + 1;
      if ((unint64_t)(v42 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v42, v28);
      else
        v29 = 0;
      v30 = (uint64_t *)&v29[8 * v26];
      v31 = &v29[8 * v28];
      *v30 = v23;
      v25 = v30 + 1;
      v33 = (char *)__p[0];
      v32 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *--v30 = v34;
        }
        while (v32 != v33);
        v32 = (char *)__p[0];
      }
      __p[0] = v30;
      __p[1] = v25;
      v42 = v31;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_QWORD *)__p[1] = v22;
      v25 = v24 + 8;
    }
    __p[1] = v25;
  }
  v35 = MIL::IRTensorValueType::MakeWithShape(*a1, v11, (uint64_t)__p);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v36 = (uint64_t *)operator new(8uLL);
  *a5 = v36;
  *v36++ = v35;
  a5[1] = v36;
  a5[2] = v36;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
}

void sub_1E0864AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomCategorical(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  MIL::IRValueType *SingleValueType;
  uint64_t v9;
  int v10;
  uint64_t v11;
  MIL::IRValue *SingleValue;
  const void *v13;
  MIL::MILContext *v14;
  void (***v15)(MIL::MILContextImpl *__hidden);
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26[2];
  char v27;
  void *__p;
  void *v29;
  uint64_t v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SingleValueType = (MIL::IRValueType *)MIL::ValueTypeInferenceUtils::GetSingleValueType(a3, (uint64_t)&__p);
  v9 = MIL::IRValueType::AsTensorType(SingleValueType);
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 96))(v9);
  v29 = 0;
  v30 = 0;
  __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3);
  std::string::basic_string[abi:ne180100]<0>(v26, "size");
  SingleValue = (MIL::IRValue *)MIL::ValueTypeInferenceUtils::GetSingleValue(a3, (uint64_t)v26);
  v13 = (const void *)MIL::IRValue::AsTensor(SingleValue);
  v14 = (MIL::MILContext *)MIL::IRValue::GetScalar<int>(v13);
  if (v27 < 0)
    operator delete(v26[0]);
  v15 = *a1;
  v16 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  MIL::ValueTypeInferenceUtils::GetRandomCategoricalOutShape(v14, a1, &v24, (uint64_t *)&__p, v26);
  v19 = MIL::IRTensorValueType::MakeWithShape(v15, v10, (uint64_t)v26);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v20 = (uint64_t *)operator new(8uLL);
  *a4 = v20;
  *v20++ = v19;
  a4[1] = v20;
  a4[2] = v20;
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  v21 = v25;
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_1E0864CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomNormal(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0864E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomUniform(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14[2];

  v7 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "low");
  if (v13 < 0)
    operator delete(__p[0]);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E0864F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::RandomBernoulli::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char **v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _OWORD *v68;
  unsigned __int8 *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count_vtbl *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count_vtbl *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count_vtbl *v89;
  void *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count_vtbl *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count_vtbl *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  void *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count_vtbl *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count_vtbl *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  uint64_t i;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t result;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  void *v150;
  std::__shared_weak_count *v151;
  void *v152[2];
  char v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  void *v156[2];
  char v157;
  void *v158[2];
  char v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  std::__shared_weak_count_vtbl *v162;
  std::__shared_weak_count *v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  void *v167[2];
  uint64_t v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char **v173;
  __n128 v174;
  __n128 v175;
  __n128 v176;
  _QWORD *v177;
  void *__p;
  uint64_t Scalar;
  char *v180;
  _QWORD v181[3];
  uint64_t v182[3];
  uint64_t v183[3];
  _QWORD v184[3];
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count_vtbl *v186;
  void (__cdecl **v187)(std::__shared_weak_count *__hidden);
  _QWORD v188[3];
  _QWORD *v189;
  _BYTE v190[24];
  _BYTE *v191;
  _BYTE v192[24];
  _BYTE *v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count_vtbl *v195;
  void (__cdecl **v196)(std::__shared_weak_count *__hidden);
  uint64_t v197[3];

  v197[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v177 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = (char *)operator new(8uLL);
  __p = v8;
  *(_QWORD *)v8 = v7;
  Scalar = (uint64_t)(v8 + 8);
  v180 = v8 + 8;
  v194 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v194, 1, &v176);
  MIL::IRParameter::Make(&v176, (uint64_t *)&v185);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", (uint64_t *)&v185);
  v9 = v185;
  v185 = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  v10 = (std::__shared_weak_count *)v176.n128_u64[1];
  if (v176.n128_u64[1])
  {
    v11 = (unint64_t *)(v176.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v13 = v177;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v175);
  MIL::IRParameter::Make(&v175, (uint64_t *)&v185);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "prob", (uint64_t *)&v185);
  v15 = v185;
  v185 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v175.n128_u64[1];
  if (v175.n128_u64[1])
  {
    v17 = (unint64_t *)(v175.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v177;
  v185 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 1, &v174);
  MIL::IRParameter::Make(&v174, (uint64_t *)&__p);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "seed", (uint64_t *)&__p);
  v21 = __p;
  __p = 0;
  if (v21)
    (*(void (**)(void *))(*(_QWORD *)v21 + 8))(v21);
  v22 = (std::__shared_weak_count *)v174.n128_u64[1];
  if (v174.n128_u64[1])
  {
    v23 = (unint64_t *)(v174.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v173 = 0;
  v25 = operator new();
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v173, (void **)v25);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v173, 1uLL);
  v26 = v173;
  v27 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v28 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v185 = v28;
  v28->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v27;
  v186 = (std::__shared_weak_count_vtbl *)&v28->~__shared_weak_count_0;
  v187 = &v28->~__shared_weak_count_0;
  v197[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v185);
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v194 = v30;
  v30->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v29;
  v195 = (std::__shared_weak_count_vtbl *)&v30->~__shared_weak_count_0;
  v196 = &v30->~__shared_weak_count_0;
  v197[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v194);
  MIL::IRParameter::MakeTypeSet((uint64_t)v197, 2, &v169);
  MIL::IRParameter::Make(&v169, &v170);
  v31 = v170;
  v171 = v170;
  if (v170)
  {
    v32 = (_QWORD *)operator new();
    v33 = v170;
    *v32 = &unk_1EA99F888;
    v32[1] = 0;
    v32[2] = 0;
    v32[3] = v33;
  }
  else
  {
    v32 = 0;
  }
  v172 = v32;
  v170 = 0;
  v34 = v26[2];
  v35 = v26[1];
  if (v35 >= v34)
  {
    v37 = (v35 - *v26) >> 4;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v39 = v34 - *v26;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    v181[1] = v26 + 2;
    v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v26 + 2), v40);
    v43 = (uint64_t *)&v41[16 * v37];
    *v43 = v31;
    v43[1] = (uint64_t)v32;
    v171 = 0;
    v172 = 0;
    v45 = *v26;
    v44 = v26[1];
    if (v44 == *v26)
    {
      v48 = v26[1];
      v46 = &v41[16 * v37];
    }
    else
    {
      v46 = &v41[16 * v37];
      do
      {
        v47 = *((_OWORD *)v44 - 1);
        v44 -= 16;
        *((_OWORD *)v46 - 1) = v47;
        v46 -= 16;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
      }
      while (v44 != v45);
      v48 = *v26;
      v44 = v26[1];
    }
    v36 = (char *)(v43 + 2);
    *v26 = v46;
    __p = v48;
    Scalar = (uint64_t)v48;
    v26[1] = (char *)(v43 + 2);
    v180 = v44;
    v49 = v26[2];
    v26[2] = &v41[16 * v42];
    v181[0] = v49;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = v32;
    v36 = v35 + 16;
    v171 = 0;
    v172 = 0;
  }
  v26[1] = v36;
  v50 = v170;
  v170 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = (std::__shared_weak_count *)v169.n128_u64[1];
  if (v169.n128_u64[1])
  {
    v52 = (unint64_t *)(v169.n128_u64[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (v194)
  {
    v195 = v194;
    operator delete(v194);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  *(_OWORD *)v167 = *(_OWORD *)a2;
  v168 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v54 = (uint64_t)v177;
  *(_QWORD *)&v166 = v177;
  if (v177)
  {
    v55 = (_QWORD *)operator new();
    *v55 = &unk_1EA99F8E8;
    v55[1] = 0;
    v55[2] = 0;
    v55[3] = v54;
  }
  else
  {
    v55 = 0;
  }
  *((_QWORD *)&v166 + 1) = v55;
  v177 = 0;
  *(_QWORD *)&v165 = v173;
  if (v173)
  {
    v56 = (_QWORD *)operator new();
    v57 = v173;
    *v56 = &unk_1EA99F948;
    v56[1] = 0;
    v56[2] = 0;
    v56[3] = v57;
  }
  else
  {
    v56 = 0;
  }
  *((_QWORD *)&v165 + 1) = v56;
  v173 = 0;
  v193 = 0;
  v191 = 0;
  MIL::IROperator::Make((__int128 *)v167, &v166, &v165, (uint64_t)v192, (uint64_t)v190, a3);
  v58 = v191;
  if (v191 == v190)
  {
    v59 = 4;
    v58 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_63;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_63:
  v60 = v193;
  if (v193 == v192)
  {
    v61 = 4;
    v60 = v192;
    goto LABEL_67;
  }
  if (v193)
  {
    v61 = 5;
LABEL_67:
    (*(void (**)(void))(*v60 + 8 * v61))();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
  if (*((_QWORD *)&v165 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
  if (*((_QWORD *)&v166 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (SHIBYTE(v168) < 0)
    operator delete(v167[0]);
  v194 = 0;
  v68 = (_OWORD *)operator new();
  *v68 = 0u;
  v68[1] = 0u;
  *((_DWORD *)v68 + 8) = 1065353216;
  v194 = (std::__shared_weak_count_vtbl *)v68;
  v185 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v185, 1, &v164);
  MIL::IRParameter::Make(&v164, (uint64_t *)&__p);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v68, "minimum_compute_type", (uint64_t *)&__p);
  v70 = __p;
  __p = 0;
  if (v70)
    (*(void (**)(void *))(*(_QWORD *)v70 + 8))(v70);
  v71 = (std::__shared_weak_count *)v164.n128_u64[1];
  if (v164.n128_u64[1])
  {
    v72 = (unint64_t *)(v164.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = *a3;
  v75 = v194;
  v162 = v194;
  if (v194)
  {
    v76 = (std::__shared_weak_count *)operator new();
    v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v76->__shared_owners_ = 0;
    v76->__shared_weak_owners_ = 0;
    v76[1].__vftable = v75;
  }
  else
  {
    v76 = 0;
  }
  v163 = v76;
  v194 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v74 + 184))(v74, &v162);
  v77 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v79 = __ldaxr(p_shared_owners);
    while (__stlxr(v79 - 1, p_shared_owners));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = *a3;
  v188[0] = &off_1EA99FBD8;
  v188[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomBernoulli;
  v189 = v188;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v80 + 200))(v80, v188);
  v81 = v189;
  if (v189 == v188)
  {
    v82 = 4;
    v81 = v188;
  }
  else
  {
    if (!v189)
      goto LABEL_100;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_100:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v83 = __p;
  std::string::basic_string[abi:ne180100]<0>(v158, "prob");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v158, 0, (uint64_t *)&v185);
  v160 = v185;
  if (v185)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v85 = v185;
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v85;
  }
  else
  {
    v84 = 0;
  }
  v161 = v84;
  v185 = 0;
  std::string::basic_string[abi:ne180100]<0>(v156, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v83 + 24))(v83, &v160, v156);
  if (v157 < 0)
    operator delete(v156[0]);
  v86 = v161;
  if (v161)
  {
    v87 = (unint64_t *)&v161->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  v89 = v185;
  v185 = 0;
  if (v89)
    (*((void (**)(std::__shared_weak_count_vtbl *))v89->~__shared_weak_count + 1))(v89);
  if (v159 < 0)
    operator delete(v158[0]);
  v90 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v185);
  v154 = v185;
  if (v185)
  {
    v91 = (std::__shared_weak_count *)operator new();
    v92 = v185;
    v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v91->__shared_owners_ = 0;
    v91->__shared_weak_owners_ = 0;
    v91[1].__vftable = v92;
  }
  else
  {
    v91 = 0;
  }
  v155 = v91;
  v185 = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v90 + 24))(v90, &v154, v152);
  if (v153 < 0)
    operator delete(v152[0]);
  v93 = v155;
  if (v155)
  {
    v94 = (unint64_t *)&v155->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v185;
  v185 = 0;
  if (v96)
    (*((void (**)(std::__shared_weak_count_vtbl *))v96->~__shared_weak_count + 1))(v96);
  v97 = *a3;
  v150 = __p;
  if (__p)
  {
    v98 = (std::__shared_weak_count *)operator new();
    v99 = (std::__shared_weak_count_vtbl *)__p;
    v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v98->__shared_owners_ = 0;
    v98->__shared_weak_owners_ = 0;
    v98[1].__vftable = v99;
  }
  else
  {
    v98 = 0;
  }
  v151 = v98;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v97 + 56))(v97, &v150);
  v100 = v151;
  if (v151)
  {
    v101 = (unint64_t *)&v151->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = __p;
  __p = 0;
  if (v103)
    (*(void (**)(void *))(*(_QWORD *)v103 + 8))(v103);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v104 = __p;
  std::string::basic_string[abi:ne180100]<0>(v146, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v146, 0, (uint64_t *)&v185);
  v148 = v185;
  if (v185)
  {
    v105 = (std::__shared_weak_count *)operator new();
    v106 = v185;
    v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v105->__shared_owners_ = 0;
    v105->__shared_weak_owners_ = 0;
    v105[1].__vftable = v106;
  }
  else
  {
    v105 = 0;
  }
  v149 = v105;
  v185 = 0;
  std::string::basic_string[abi:ne180100]<0>(v144, "K");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v104 + 24))(v104, &v148, 0, v144);
  if (v145 < 0)
    operator delete(v144[0]);
  v107 = v149;
  if (v149)
  {
    v108 = (unint64_t *)&v149->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v185;
  v185 = 0;
  if (v110)
    (*((void (**)(std::__shared_weak_count_vtbl *))v110->~__shared_weak_count + 1))(v110);
  if (v147 < 0)
    operator delete(v146[0]);
  v111 = *a3;
  v142 = __p;
  if (__p)
  {
    v112 = (std::__shared_weak_count *)operator new();
    v113 = (std::__shared_weak_count_vtbl *)__p;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v112->__shared_owners_ = 0;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v113;
  }
  else
  {
    v112 = 0;
  }
  v143 = v112;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v111 + 56))(v111, &v142);
  v114 = v143;
  if (v143)
  {
    v115 = (unint64_t *)&v143->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = __p;
  __p = 0;
  if (v117)
    (*(void (**)(void *))(*(_QWORD *)v117 + 8))(v117);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v171);
  v118 = v171;
  std::string::basic_string[abi:ne180100]<0>(v138, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v138, 1, v197);
  v140 = v197[0];
  if (v197[0])
  {
    v119 = (std::__shared_weak_count *)operator new();
    v120 = v197[0];
    v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v119->__shared_owners_ = 0;
    v119->__shared_weak_owners_ = 0;
    v119[1].__vftable = (std::__shared_weak_count_vtbl *)v120;
  }
  else
  {
    v119 = 0;
  }
  v141 = v119;
  v197[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v181, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v182, "int32");
  std::string::basic_string[abi:ne180100]<0>(v183, "int8");
  std::string::basic_string[abi:ne180100]<0>(v184, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v185, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v118 + 24))(v118, &v140, &v185, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v185);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v184[i + 2]) < 0)
      operator delete((void *)v184[i]);
  }
  v122 = v141;
  if (v141)
  {
    v123 = (unint64_t *)&v141->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v197[0];
  v197[0] = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  if (v139 < 0)
    operator delete(v138[0]);
  v126 = *a3;
  v136 = v171;
  if (v171)
  {
    v127 = (std::__shared_weak_count *)operator new();
    v128 = v171;
    v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v127->__shared_owners_ = 0;
    v127->__shared_weak_owners_ = 0;
    v127[1].__vftable = (std::__shared_weak_count_vtbl *)v128;
  }
  else
  {
    v127 = 0;
  }
  v137 = v127;
  v171 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v126 + 56))(v126, &v136);
  v129 = v137;
  if (v137)
  {
    v130 = (unint64_t *)&v137->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = v171;
  v171 = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  if (v194)
  {
    v133 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v194);
    MEMORY[0x1E0C023A0](v133, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v173, 0);
  result = (uint64_t)v177;
  if (v177)
  {
    v135 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v177);
    return MEMORY[0x1E0C023A0](v135, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0865F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v67;

  if (a55)
    (*(void (**)(uint64_t))(*(_QWORD *)a55 + 8))(a55);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v65 - 112), 0);
  v67 = *v64;
  *v64 = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a57, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a64, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::RandomCategorical::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unsigned __int8 *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  char *v56;
  char *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char **v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  unsigned __int8 *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count_vtbl *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count_vtbl *v97;
  void *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count_vtbl *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count_vtbl *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  uint64_t i;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  void *v132[2];
  char v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  void *v136;
  std::__shared_weak_count *v137;
  void *v138[2];
  char v139;
  std::__shared_weak_count_vtbl *v140;
  std::__shared_weak_count *v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count_vtbl *v148;
  std::__shared_weak_count *v149;
  __n128 v150;
  __int128 v151;
  __int128 v152;
  void *v153[2];
  uint64_t v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char **v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  _QWORD *v164;
  void *__p;
  void *v166;
  char *v167;
  _QWORD v168[3];
  uint64_t v169[3];
  uint64_t v170[3];
  _QWORD v171[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v173;
  void (__cdecl **v174)(std::__shared_weak_count *__hidden);
  _QWORD v175[3];
  _QWORD *v176;
  _BYTE v177[24];
  _BYTE *v178;
  _BYTE v179[24];
  _BYTE *v180;
  std::__shared_weak_count_vtbl *v181;
  uint64_t v182;
  void (__cdecl **v183)(std::__shared_weak_count *__hidden);
  uint64_t v184[3];

  v184[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v164 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v8 = operator new(8uLL);
  __p = v8;
  *v8 = v7;
  v166 = v8 + 1;
  v167 = (char *)(v8 + 1);
  v181 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&__p);
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v173 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v174 = &v10->~__shared_weak_count_0;
  v182 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v181, 2, &v163);
  MIL::IRParameter::Make(&v163, &v157);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", &v157);
  v11 = v157;
  v157 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (std::__shared_weak_count *)v163.n128_u64[1];
  if (v163.n128_u64[1])
  {
    v13 = (unint64_t *)(v163.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (Scalar)
  {
    v173 = Scalar;
    operator delete(Scalar);
  }
  if (__p)
  {
    v166 = __p;
    operator delete(__p);
  }
  v15 = v164;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v162);
  MIL::IRParameter::Make(&v162, (uint64_t *)&__p);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v15, "mode", (uint64_t *)&__p);
  v17 = __p;
  __p = 0;
  if (v17)
    (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
  v18 = (std::__shared_weak_count *)v162.n128_u64[1];
  if (v162.n128_u64[1])
  {
    v19 = (unint64_t *)(v162.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5), 1);
  v21 = v164;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v161);
  MIL::IRParameter::Make(&v161, (uint64_t *)&__p);
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v21, "size", (uint64_t *)&__p);
  v23 = __p;
  __p = 0;
  if (v23)
    (*(void (**)(void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = (std::__shared_weak_count *)v161.n128_u64[1];
  if (v161.n128_u64[1])
  {
    v25 = (unint64_t *)(v161.n128_u64[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v22 + 5) + 32))(*((_QWORD *)v22 + 5), 1);
  v27 = v164;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v160);
  MIL::IRParameter::Make(&v160, (uint64_t *)&__p);
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v27, "seed", (uint64_t *)&__p);
  v29 = __p;
  __p = 0;
  if (v29)
    (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
  v30 = (std::__shared_weak_count *)v160.n128_u64[1];
  if (v160.n128_u64[1])
  {
    v31 = (unint64_t *)(v160.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v28 + 5) + 32))(*((_QWORD *)v28 + 5), 1);
  v159 = 0;
  v33 = operator new();
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, (void **)v33);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v159, 1uLL);
  v34 = v159;
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v36;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v173 = (std::__shared_weak_count_vtbl *)&v36->~__shared_weak_count_0;
  v174 = &v36->~__shared_weak_count_0;
  v184[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&Scalar);
  v37 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v38 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v181 = v38;
  v38->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v37;
  v182 = (uint64_t)&v38->~__shared_weak_count_0;
  v183 = &v38->~__shared_weak_count_0;
  v184[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v181);
  MIL::IRParameter::MakeTypeSet((uint64_t)v184, 2, &v155);
  MIL::IRParameter::Make(&v155, &v156);
  v39 = v156;
  v157 = v156;
  if (v156)
  {
    v40 = (_QWORD *)operator new();
    v41 = v156;
    *v40 = &unk_1EA99F888;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = v41;
  }
  else
  {
    v40 = 0;
  }
  v158 = v40;
  v156 = 0;
  v42 = v34[2];
  v43 = v34[1];
  if (v43 >= v42)
  {
    v45 = (v43 - *v34) >> 4;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v47 = v42 - *v34;
    if (v47 >> 3 > v46)
      v46 = v47 >> 3;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    v168[1] = v34 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v34 + 2), v48);
    v51 = (uint64_t *)&v49[16 * v45];
    *v51 = v39;
    v51[1] = (uint64_t)v40;
    v157 = 0;
    v158 = 0;
    v53 = *v34;
    v52 = v34[1];
    if (v52 == *v34)
    {
      v56 = v34[1];
      v54 = &v49[16 * v45];
    }
    else
    {
      v54 = &v49[16 * v45];
      do
      {
        v55 = *((_OWORD *)v52 - 1);
        v52 -= 16;
        *((_OWORD *)v54 - 1) = v55;
        v54 -= 16;
        *(_QWORD *)v52 = 0;
        *((_QWORD *)v52 + 1) = 0;
      }
      while (v52 != v53);
      v56 = *v34;
      v52 = v34[1];
    }
    v44 = (char *)(v51 + 2);
    *v34 = v54;
    __p = v56;
    v166 = v56;
    v34[1] = (char *)(v51 + 2);
    v167 = v52;
    v57 = v34[2];
    v34[2] = &v49[16 * v50];
    v168[0] = v57;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v43 = v39;
    *((_QWORD *)v43 + 1) = v40;
    v44 = v43 + 16;
    v157 = 0;
    v158 = 0;
  }
  v34[1] = v44;
  v58 = v156;
  v156 = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = (std::__shared_weak_count *)v155.n128_u64[1];
  if (v155.n128_u64[1])
  {
    v60 = (unint64_t *)(v155.n128_u64[1] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v181)
  {
    v182 = (uint64_t)v181;
    operator delete(v181);
  }
  if (Scalar)
  {
    v173 = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v153 = *(_OWORD *)a2;
  v154 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v62 = (uint64_t)v164;
  *(_QWORD *)&v152 = v164;
  if (v164)
  {
    v63 = (_QWORD *)operator new();
    *v63 = &unk_1EA99F8E8;
    v63[1] = 0;
    v63[2] = 0;
    v63[3] = v62;
  }
  else
  {
    v63 = 0;
  }
  *((_QWORD *)&v152 + 1) = v63;
  v164 = 0;
  *(_QWORD *)&v151 = v159;
  if (v159)
  {
    v64 = (_QWORD *)operator new();
    v65 = v159;
    *v64 = &unk_1EA99F948;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = v65;
  }
  else
  {
    v64 = 0;
  }
  *((_QWORD *)&v151 + 1) = v64;
  v159 = 0;
  v180 = 0;
  v178 = 0;
  MIL::IROperator::Make((__int128 *)v153, &v152, &v151, (uint64_t)v179, (uint64_t)v177, a3);
  v66 = v178;
  if (v178 == v177)
  {
    v67 = 4;
    v66 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_72;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_72:
  v68 = v180;
  if (v180 == v179)
  {
    v69 = 4;
    v68 = v179;
    goto LABEL_76;
  }
  if (v180)
  {
    v69 = 5;
LABEL_76:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
  if (*((_QWORD *)&v152 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (SHIBYTE(v154) < 0)
    operator delete(v153[0]);
  v181 = 0;
  v76 = (_OWORD *)operator new();
  *v76 = 0u;
  v76[1] = 0u;
  *((_DWORD *)v76 + 8) = 1065353216;
  v181 = (std::__shared_weak_count_vtbl *)v76;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v150);
  MIL::IRParameter::Make(&v150, (uint64_t *)&__p);
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v76, "minimum_compute_type", (uint64_t *)&__p);
  v78 = __p;
  __p = 0;
  if (v78)
    (*(void (**)(void *))(*(_QWORD *)v78 + 8))(v78);
  v79 = (std::__shared_weak_count *)v150.n128_u64[1];
  if (v150.n128_u64[1])
  {
    v80 = (unint64_t *)(v150.n128_u64[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 32))(*((_QWORD *)v77 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v77 + 5) + 48))(*((_QWORD *)v77 + 5), 1);
  v82 = *a3;
  v83 = v181;
  v148 = v181;
  if (v181)
  {
    v84 = (std::__shared_weak_count *)operator new();
    v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v84->__shared_owners_ = 0;
    v84->__shared_weak_owners_ = 0;
    v84[1].__vftable = v83;
  }
  else
  {
    v84 = 0;
  }
  v149 = v84;
  v181 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v82 + 184))(v82, &v148);
  v85 = v149;
  if (v149)
  {
    p_shared_owners = (unint64_t *)&v149->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = *a3;
  v175[0] = &off_1EA99FBD8;
  v175[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomCategorical;
  v176 = v175;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v88 + 200))(v88, v175);
  v89 = v176;
  if (v176 == v175)
  {
    v90 = 4;
    v89 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_109;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_109:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v91 = __p;
  std::string::basic_string[abi:ne180100]<0>(v144, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v144, 0, (uint64_t *)&Scalar);
  v146 = Scalar;
  if (Scalar)
  {
    v92 = (std::__shared_weak_count *)operator new();
    v93 = Scalar;
    v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v92->__shared_owners_ = 0;
    v92->__shared_weak_owners_ = 0;
    v92[1].__vftable = v93;
  }
  else
  {
    v92 = 0;
  }
  v147 = v92;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v142, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v91 + 24))(v91, &v146, v142);
  if (v143 < 0)
    operator delete(v142[0]);
  v94 = v147;
  if (v147)
  {
    v95 = (unint64_t *)&v147->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = Scalar;
  Scalar = 0;
  if (v97)
    (*((void (**)(std::__shared_weak_count_vtbl *))v97->~__shared_weak_count + 1))(v97);
  if (v145 < 0)
    operator delete(v144[0]);
  v98 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v140 = Scalar;
  if (Scalar)
  {
    v99 = (std::__shared_weak_count *)operator new();
    v100 = Scalar;
    v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v99->__shared_owners_ = 0;
    v99->__shared_weak_owners_ = 0;
    v99[1].__vftable = v100;
  }
  else
  {
    v99 = 0;
  }
  v141 = v99;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v138, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v98 + 24))(v98, &v140, v138);
  if (v139 < 0)
    operator delete(v138[0]);
  v101 = v141;
  if (v141)
  {
    v102 = (unint64_t *)&v141->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = Scalar;
  Scalar = 0;
  if (v104)
    (*((void (**)(std::__shared_weak_count_vtbl *))v104->~__shared_weak_count + 1))(v104);
  v105 = *a3;
  v136 = __p;
  if (__p)
  {
    v106 = (std::__shared_weak_count *)operator new();
    v107 = (std::__shared_weak_count_vtbl *)__p;
    v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v106->__shared_owners_ = 0;
    v106->__shared_weak_owners_ = 0;
    v106[1].__vftable = v107;
  }
  else
  {
    v106 = 0;
  }
  v137 = v106;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v105 + 56))(v105, &v136);
  v108 = v137;
  if (v137)
  {
    v109 = (unint64_t *)&v137->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = __p;
  __p = 0;
  if (v111)
    (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v157);
  v112 = v157;
  std::string::basic_string[abi:ne180100]<0>(v132, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v132, 1, v184);
  v134 = v184[0];
  if (v184[0])
  {
    v113 = (std::__shared_weak_count *)operator new();
    v114 = v184[0];
    v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v113->__shared_owners_ = 0;
    v113->__shared_weak_owners_ = 0;
    v113[1].__vftable = (std::__shared_weak_count_vtbl *)v114;
  }
  else
  {
    v113 = 0;
  }
  v135 = v113;
  v184[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v168, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v169, "int32");
  std::string::basic_string[abi:ne180100]<0>(v170, "int8");
  std::string::basic_string[abi:ne180100]<0>(v171, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v112 + 24))(v112, &v134, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v171[i + 2]) < 0)
      operator delete((void *)v171[i]);
  }
  v116 = v135;
  if (v135)
  {
    v117 = (unint64_t *)&v135->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v119 = v184[0];
  v184[0] = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  if (v133 < 0)
    operator delete(v132[0]);
  v120 = *a3;
  v130 = v157;
  if (v157)
  {
    v121 = (std::__shared_weak_count *)operator new();
    v122 = v157;
    v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v121->__shared_owners_ = 0;
    v121->__shared_weak_owners_ = 0;
    v121[1].__vftable = (std::__shared_weak_count_vtbl *)v122;
  }
  else
  {
    v121 = 0;
  }
  v131 = v121;
  v157 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v120 + 56))(v120, &v130);
  v123 = v131;
  if (v131)
  {
    v124 = (unint64_t *)&v131->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v126 = v157;
  v157 = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  if (v181)
  {
    v127 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v181);
    MEMORY[0x1E0C023A0](v127, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v159, 0);
  result = (uint64_t)v164;
  if (v164)
  {
    v129 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v164);
    return MEMORY[0x1E0C023A0](v129, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E08672F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t *v56;
  uint64_t v57;
  uint64_t v59;

  if (a45)
    (*(void (**)(uint64_t))(*(_QWORD *)a45 + 8))(a45);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v57 - 112), 0);
  v59 = *v56;
  *v56 = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a47, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::RandomNormal::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _OWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  uint64_t i;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t result;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  __n128 v183;
  __int128 v184;
  __int128 v185;
  void *v186[2];
  uint64_t v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char **v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  _QWORD *v197;
  void *__p;
  uint64_t Scalar;
  char *v200;
  _QWORD v201[3];
  uint64_t v202[3];
  uint64_t v203[3];
  _QWORD v204[3];
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count_vtbl *v206;
  void (__cdecl **v207)(std::__shared_weak_count *__hidden);
  _QWORD v208[3];
  _QWORD *v209;
  _BYTE v210[24];
  _BYTE *v211;
  _BYTE v212[24];
  _BYTE *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count_vtbl *v215;
  void (__cdecl **v216)(std::__shared_weak_count *__hidden);
  uint64_t v217[3];

  v217[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v197 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = (char *)operator new(8uLL);
  __p = v8;
  *(_QWORD *)v8 = v7;
  v200 = v8 + 8;
  Scalar = (uint64_t)(v8 + 8);
  v214 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v214, 1, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&v205);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", (uint64_t *)&v205);
  v9 = v205;
  v205 = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  v10 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v11 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v13 = v197;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v195);
  MIL::IRParameter::Make(&v195, (uint64_t *)&v205);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "mean", (uint64_t *)&v205);
  v15 = v205;
  v205 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v195.n128_u64[1];
  if (v195.n128_u64[1])
  {
    v17 = (unint64_t *)(v195.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v197;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v194);
  MIL::IRParameter::Make(&v194, (uint64_t *)&v205);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(v19, "stddev", (uint64_t *)&v205);
  v21 = v205;
  v205 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v23 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v197;
  v205 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 1, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&__p);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "seed", (uint64_t *)&__p);
  v27 = __p;
  __p = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v29 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v192 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v192, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v192, 1uLL);
  v32 = v192;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v205 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v206 = (std::__shared_weak_count_vtbl *)&v34->~__shared_weak_count_0;
  v207 = &v34->~__shared_weak_count_0;
  v217[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v205);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v214 = v36;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v215 = (std::__shared_weak_count_vtbl *)&v36->~__shared_weak_count_0;
  v216 = &v36->~__shared_weak_count_0;
  v217[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v214);
  MIL::IRParameter::MakeTypeSet((uint64_t)v217, 2, &v188);
  MIL::IRParameter::Make(&v188, &v189);
  v37 = v189;
  v190 = v189;
  if (v189)
  {
    v38 = (_QWORD *)operator new();
    v39 = v189;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v191 = v38;
  v189 = 0;
  v40 = v32[2];
  v41 = v32[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v32) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v32;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v201[1] = v32 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v190 = 0;
    v191 = 0;
    v51 = *v32;
    v50 = v32[1];
    if (v50 == *v32)
    {
      v54 = v32[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = *v32;
      v50 = v32[1];
    }
    v42 = (char *)(v49 + 2);
    *v32 = v52;
    Scalar = (uint64_t)v54;
    v32[1] = (char *)(v49 + 2);
    v200 = v50;
    v55 = v32[2];
    v32[2] = &v47[16 * v48];
    v201[0] = v55;
    __p = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v190 = 0;
    v191 = 0;
  }
  v32[1] = v42;
  v56 = v189;
  v189 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v58 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  *(_OWORD *)v186 = *(_OWORD *)a2;
  v187 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v197;
  *(_QWORD *)&v185 = v197;
  if (v197)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v185 + 1) = v61;
  v197 = 0;
  *(_QWORD *)&v184 = v192;
  if (v192)
  {
    v62 = (_QWORD *)operator new();
    v63 = v192;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v184 + 1) = v62;
  v192 = 0;
  v213 = 0;
  v211 = 0;
  MIL::IROperator::Make((__int128 *)v186, &v185, &v184, (uint64_t)v212, (uint64_t)v210, a3);
  v64 = v211;
  if (v211 == v210)
  {
    v65 = 4;
    v64 = v210;
  }
  else
  {
    if (!v211)
      goto LABEL_70;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_70:
  v66 = v213;
  if (v213 == v212)
  {
    v67 = 4;
    v66 = v212;
    goto LABEL_74;
  }
  if (v213)
  {
    v67 = 5;
LABEL_74:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v187) < 0)
    operator delete(v186[0]);
  v214 = 0;
  v74 = (_OWORD *)operator new();
  *v74 = 0u;
  v74[1] = 0u;
  *((_DWORD *)v74 + 8) = 1065353216;
  v214 = (std::__shared_weak_count_vtbl *)v74;
  v205 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 1, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&__p);
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v74, "minimum_compute_type", (uint64_t *)&__p);
  v76 = __p;
  __p = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v78 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v80 = *a3;
  v81 = v214;
  v181 = v214;
  if (v214)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v81;
  }
  else
  {
    v82 = 0;
  }
  v182 = v82;
  v214 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v80 + 184))(v80, &v181);
  v83 = v182;
  if (v182)
  {
    p_shared_owners = (unint64_t *)&v182->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = *a3;
  v208[0] = &off_1EA99FBD8;
  v208[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomNormal;
  v209 = v208;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v86 + 200))(v86, v208);
  v87 = v209;
  if (v209 == v208)
  {
    v88 = 4;
    v87 = v208;
  }
  else
  {
    if (!v209)
      goto LABEL_107;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_107:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v89 = __p;
  std::string::basic_string[abi:ne180100]<0>(v177, "mean");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 0, (uint64_t *)&v205);
  v179 = v205;
  if (v205)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v205;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v180 = v90;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v89 + 24))(v89, &v179, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v92 = v180;
  if (v180)
  {
    v93 = (unint64_t *)&v180->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v205;
  v205 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v178 < 0)
    operator delete(v177[0]);
  v96 = __p;
  std::string::basic_string[abi:ne180100]<0>(v171, "stddev");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 0, (uint64_t *)&v205);
  v173 = v205;
  if (v205)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v205;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v174 = v97;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v96 + 24))(v96, &v173, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v99 = v174;
  if (v174)
  {
    v100 = (unint64_t *)&v174->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v205;
  v205 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v172 < 0)
    operator delete(v171[0]);
  v103 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v205);
  v167 = v205;
  if (v205)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v205;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v168 = v104;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v167, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v106 = v168;
  if (v168)
  {
    v107 = (unint64_t *)&v168->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v205;
  v205 = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  v110 = *a3;
  v163 = __p;
  if (__p)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)__p;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v164 = v111;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v110 + 56))(v110, &v163);
  v113 = v164;
  if (v164)
  {
    v114 = (unint64_t *)&v164->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = __p;
  __p = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v117 = __p;
  std::string::basic_string[abi:ne180100]<0>(v159, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&v205);
  v161 = v205;
  if (v205)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v205;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v162 = v118;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "K");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v117 + 24))(v117, &v161, 0, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v120 = v162;
  if (v162)
  {
    v121 = (unint64_t *)&v162->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v205;
  v205 = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v160 < 0)
    operator delete(v159[0]);
  v124 = *a3;
  v155 = __p;
  if (__p)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)__p;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v156 = v125;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v124 + 56))(v124, &v155);
  v127 = v156;
  if (v156)
  {
    v128 = (unint64_t *)&v156->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = __p;
  __p = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v190);
  v131 = v190;
  std::string::basic_string[abi:ne180100]<0>(v151, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v151, 1, v217);
  v153 = v217[0];
  if (v217[0])
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v217[0];
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v154 = v132;
  v217[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v201, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v202, "int32");
  std::string::basic_string[abi:ne180100]<0>(v203, "int8");
  std::string::basic_string[abi:ne180100]<0>(v204, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v205, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v131 + 24))(v131, &v153, &v205, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v205);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v204[i + 2]) < 0)
      operator delete((void *)v204[i]);
  }
  v135 = v154;
  if (v154)
  {
    v136 = (unint64_t *)&v154->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v217[0];
  v217[0] = 0;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  if (v152 < 0)
    operator delete(v151[0]);
  v139 = *a3;
  v149 = v190;
  if (v190)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v190;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v150 = v140;
  v190 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v139 + 56))(v139, &v149);
  v142 = v150;
  if (v150)
  {
    v143 = (unint64_t *)&v150->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v190;
  v190 = 0;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  if (v214)
  {
    v146 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v214);
    MEMORY[0x1E0C023A0](v146, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v192, 0);
  result = (uint64_t)v197;
  if (v197)
  {
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v197);
    return MEMORY[0x1E0C023A0](v148, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E086893C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a65;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v68;

  if (a63)
    (*(void (**)(uint64_t))(*(_QWORD *)a63 + 8))(a63);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v66 - 112), 0);
  v68 = *v65;
  *v65 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x208], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::RandomUniform::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  std::__shared_weak_count_vtbl *v34;
  uint64_t v35;
  std::__shared_weak_count_vtbl *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  char *v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  char **v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _OWORD *v74;
  unsigned __int8 *v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count_vtbl *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  unint64_t *p_shared_owners;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count_vtbl *v95;
  void *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count_vtbl *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count_vtbl *v102;
  void *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count_vtbl *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  void *v116;
  void *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count_vtbl *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count_vtbl *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  std::__shared_weak_count_vtbl *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  uint64_t i;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t result;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void *v151[2];
  char v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  std::__shared_weak_count *v156;
  void *v157[2];
  char v158;
  void *v159[2];
  char v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  void *v163;
  std::__shared_weak_count *v164;
  void *v165[2];
  char v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  void *v169[2];
  char v170;
  void *v171[2];
  char v172;
  std::__shared_weak_count_vtbl *v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  char v176;
  void *v177[2];
  char v178;
  std::__shared_weak_count_vtbl *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  __n128 v183;
  __int128 v184;
  __int128 v185;
  void *v186[2];
  uint64_t v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char **v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  _QWORD *v197;
  void *__p;
  uint64_t Scalar;
  char *v200;
  _QWORD v201[3];
  uint64_t v202[3];
  uint64_t v203[3];
  _QWORD v204[3];
  std::__shared_weak_count_vtbl *v205;
  std::__shared_weak_count_vtbl *v206;
  void (__cdecl **v207)(std::__shared_weak_count *__hidden);
  _QWORD v208[3];
  _QWORD *v209;
  _BYTE v210[24];
  _BYTE *v211;
  _BYTE v212[24];
  _BYTE *v213;
  std::__shared_weak_count_vtbl *v214;
  std::__shared_weak_count_vtbl *v215;
  void (__cdecl **v216)(std::__shared_weak_count *__hidden);
  uint64_t v217[3];

  v217[2] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v197 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = (char *)operator new(8uLL);
  __p = v8;
  *(_QWORD *)v8 = v7;
  v200 = v8 + 8;
  Scalar = (uint64_t)(v8 + 8);
  v214 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeWithShape(a1, 11, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v214, 1, &v196);
  MIL::IRParameter::Make(&v196, (uint64_t *)&v205);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "shape", (uint64_t *)&v205);
  v9 = v205;
  v205 = 0;
  if (v9)
    (*((void (**)(std::__shared_weak_count_vtbl *))v9->~__shared_weak_count + 1))(v9);
  v10 = (std::__shared_weak_count *)v196.n128_u64[1];
  if (v196.n128_u64[1])
  {
    v11 = (unint64_t *)(v196.n128_u64[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    Scalar = (uint64_t)__p;
    operator delete(__p);
  }
  v13 = v197;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v195);
  MIL::IRParameter::Make(&v195, (uint64_t *)&v205);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(v13, "low", (uint64_t *)&v205);
  v15 = v205;
  v205 = 0;
  if (v15)
    (*((void (**)(std::__shared_weak_count_vtbl *))v15->~__shared_weak_count + 1))(v15);
  v16 = (std::__shared_weak_count *)v195.n128_u64[1];
  if (v195.n128_u64[1])
  {
    v17 = (unint64_t *)(v195.n128_u64[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v14 + 5) + 32))(*((_QWORD *)v14 + 5), 1);
  v19 = v197;
  __p = (void *)MIL::IRTensorValueType::MakeScalar(a1, 4);
  Scalar = MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&__p, 2, &v194);
  MIL::IRParameter::Make(&v194, (uint64_t *)&v205);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v19, "high", (uint64_t *)&v205);
  v21 = v205;
  v205 = 0;
  if (v21)
    (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
  v22 = (std::__shared_weak_count *)v194.n128_u64[1];
  if (v194.n128_u64[1])
  {
    v23 = (unint64_t *)(v194.n128_u64[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v20 + 5) + 32))(*((_QWORD *)v20 + 5), 1);
  v25 = v197;
  v205 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 11);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 1, &v193);
  MIL::IRParameter::Make(&v193, (uint64_t *)&__p);
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v25, "seed", (uint64_t *)&__p);
  v27 = __p;
  __p = 0;
  if (v27)
    (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)v193.n128_u64[1];
  if (v193.n128_u64[1])
  {
    v29 = (unint64_t *)(v193.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v26 + 5) + 32))(*((_QWORD *)v26 + 5), 1);
  v192 = 0;
  v31 = operator new();
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v192, (void **)v31);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v192, 1uLL);
  v32 = v192;
  v33 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v34 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v205 = v34;
  v34->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v33;
  v206 = (std::__shared_weak_count_vtbl *)&v34->~__shared_weak_count_0;
  v207 = &v34->~__shared_weak_count_0;
  v217[0] = MIL::IRTensorValueType::MakeWithShape(a1, 4, (uint64_t)&v205);
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v214 = v36;
  v36->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v35;
  v215 = (std::__shared_weak_count_vtbl *)&v36->~__shared_weak_count_0;
  v216 = &v36->~__shared_weak_count_0;
  v217[1] = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&v214);
  MIL::IRParameter::MakeTypeSet((uint64_t)v217, 2, &v188);
  MIL::IRParameter::Make(&v188, &v189);
  v37 = v189;
  v190 = v189;
  if (v189)
  {
    v38 = (_QWORD *)operator new();
    v39 = v189;
    *v38 = &unk_1EA99F888;
    v38[1] = 0;
    v38[2] = 0;
    v38[3] = v39;
  }
  else
  {
    v38 = 0;
  }
  v191 = v38;
  v189 = 0;
  v40 = v32[2];
  v41 = v32[1];
  if (v41 >= v40)
  {
    v43 = (v41 - *v32) >> 4;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v40 - *v32;
    if (v45 >> 3 > v44)
      v44 = v45 >> 3;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
      v46 = 0xFFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    v201[1] = v32 + 2;
    v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v32 + 2), v46);
    v49 = (uint64_t *)&v47[16 * v43];
    *v49 = v37;
    v49[1] = (uint64_t)v38;
    v190 = 0;
    v191 = 0;
    v51 = *v32;
    v50 = v32[1];
    if (v50 == *v32)
    {
      v54 = v32[1];
      v52 = &v47[16 * v43];
    }
    else
    {
      v52 = &v47[16 * v43];
      do
      {
        v53 = *((_OWORD *)v50 - 1);
        v50 -= 16;
        *((_OWORD *)v52 - 1) = v53;
        v52 -= 16;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 1) = 0;
      }
      while (v50 != v51);
      v54 = *v32;
      v50 = v32[1];
    }
    v42 = (char *)(v49 + 2);
    *v32 = v52;
    Scalar = (uint64_t)v54;
    v32[1] = (char *)(v49 + 2);
    v200 = v50;
    v55 = v32[2];
    v32[2] = &v47[16 * v48];
    v201[0] = v55;
    __p = v54;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v41 = v37;
    *((_QWORD *)v41 + 1) = v38;
    v42 = v41 + 16;
    v190 = 0;
    v191 = 0;
  }
  v32[1] = v42;
  v56 = v189;
  v189 = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = (std::__shared_weak_count *)v188.n128_u64[1];
  if (v188.n128_u64[1])
  {
    v58 = (unint64_t *)(v188.n128_u64[1] + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v214)
  {
    v215 = v214;
    operator delete(v214);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  *(_OWORD *)v186 = *(_OWORD *)a2;
  v187 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v60 = (uint64_t)v197;
  *(_QWORD *)&v185 = v197;
  if (v197)
  {
    v61 = (_QWORD *)operator new();
    *v61 = &unk_1EA99F8E8;
    v61[1] = 0;
    v61[2] = 0;
    v61[3] = v60;
  }
  else
  {
    v61 = 0;
  }
  *((_QWORD *)&v185 + 1) = v61;
  v197 = 0;
  *(_QWORD *)&v184 = v192;
  if (v192)
  {
    v62 = (_QWORD *)operator new();
    v63 = v192;
    *v62 = &unk_1EA99F948;
    v62[1] = 0;
    v62[2] = 0;
    v62[3] = v63;
  }
  else
  {
    v62 = 0;
  }
  *((_QWORD *)&v184 + 1) = v62;
  v192 = 0;
  v213 = 0;
  v211 = 0;
  MIL::IROperator::Make((__int128 *)v186, &v185, &v184, (uint64_t)v212, (uint64_t)v210, a3);
  v64 = v211;
  if (v211 == v210)
  {
    v65 = 4;
    v64 = v210;
  }
  else
  {
    if (!v211)
      goto LABEL_70;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_70:
  v66 = v213;
  if (v213 == v212)
  {
    v67 = 4;
    v66 = v212;
    goto LABEL_74;
  }
  if (v213)
  {
    v67 = 5;
LABEL_74:
    (*(void (**)(void))(*v66 + 8 * v67))();
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
  if (*((_QWORD *)&v184 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v185 + 1);
  if (*((_QWORD *)&v185 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v185 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (SHIBYTE(v187) < 0)
    operator delete(v186[0]);
  v214 = 0;
  v74 = (_OWORD *)operator new();
  *v74 = 0u;
  v74[1] = 0u;
  *((_DWORD *)v74 + 8) = 1065353216;
  v214 = (std::__shared_weak_count_vtbl *)v74;
  v205 = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v205, 1, &v183);
  MIL::IRParameter::Make(&v183, (uint64_t *)&__p);
  v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v74, "minimum_compute_type", (uint64_t *)&__p);
  v76 = __p;
  __p = 0;
  if (v76)
    (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
  v77 = (std::__shared_weak_count *)v183.n128_u64[1];
  if (v183.n128_u64[1])
  {
    v78 = (unint64_t *)(v183.n128_u64[1] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 32))(*((_QWORD *)v75 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v75 + 5) + 48))(*((_QWORD *)v75 + 5), 1);
  v80 = *a3;
  v81 = v214;
  v181 = v214;
  if (v214)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = v81;
  }
  else
  {
    v82 = 0;
  }
  v182 = v82;
  v214 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v80 + 184))(v80, &v181);
  v83 = v182;
  if (v182)
  {
    p_shared_owners = (unint64_t *)&v182->__shared_owners_;
    do
      v85 = __ldaxr(p_shared_owners);
    while (__stlxr(v85 - 1, p_shared_owners));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = *a3;
  v208[0] = &off_1EA99FBD8;
  v208[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRandomUniform;
  v209 = v208;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v86 + 200))(v86, v208);
  v87 = v209;
  if (v209 == v208)
  {
    v88 = 4;
    v87 = v208;
  }
  else
  {
    if (!v209)
      goto LABEL_107;
    v88 = 5;
  }
  (*(void (**)(void))(*v87 + 8 * v88))();
LABEL_107:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v89 = __p;
  std::string::basic_string[abi:ne180100]<0>(v177, "low");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v177, 0, (uint64_t *)&v205);
  v179 = v205;
  if (v205)
  {
    v90 = (std::__shared_weak_count *)operator new();
    v91 = v205;
    v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v90->__shared_owners_ = 0;
    v90->__shared_weak_owners_ = 0;
    v90[1].__vftable = v91;
  }
  else
  {
    v90 = 0;
  }
  v180 = v90;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v175, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v89 + 24))(v89, &v179, v175);
  if (v176 < 0)
    operator delete(v175[0]);
  v92 = v180;
  if (v180)
  {
    v93 = (unint64_t *)&v180->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = v205;
  v205 = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  if (v178 < 0)
    operator delete(v177[0]);
  v96 = __p;
  std::string::basic_string[abi:ne180100]<0>(v171, "high");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v171, 0, (uint64_t *)&v205);
  v173 = v205;
  if (v205)
  {
    v97 = (std::__shared_weak_count *)operator new();
    v98 = v205;
    v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v97->__shared_owners_ = 0;
    v97->__shared_weak_owners_ = 0;
    v97[1].__vftable = v98;
  }
  else
  {
    v97 = 0;
  }
  v174 = v97;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v169, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v96 + 24))(v96, &v173, v169);
  if (v170 < 0)
    operator delete(v169[0]);
  v99 = v174;
  if (v174)
  {
    v100 = (unint64_t *)&v174->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v205;
  v205 = 0;
  if (v102)
    (*((void (**)(std::__shared_weak_count_vtbl *))v102->~__shared_weak_count + 1))(v102);
  if (v172 < 0)
    operator delete(v171[0]);
  v103 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &v205);
  v167 = v205;
  if (v205)
  {
    v104 = (std::__shared_weak_count *)operator new();
    v105 = v205;
    v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v104->__shared_owners_ = 0;
    v104->__shared_weak_owners_ = 0;
    v104[1].__vftable = v105;
  }
  else
  {
    v104 = 0;
  }
  v168 = v104;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v165, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v103 + 24))(v103, &v167, v165);
  if (v166 < 0)
    operator delete(v165[0]);
  v106 = v168;
  if (v168)
  {
    v107 = (unint64_t *)&v168->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  v109 = v205;
  v205 = 0;
  if (v109)
    (*((void (**)(std::__shared_weak_count_vtbl *))v109->~__shared_weak_count + 1))(v109);
  v110 = *a3;
  v163 = __p;
  if (__p)
  {
    v111 = (std::__shared_weak_count *)operator new();
    v112 = (std::__shared_weak_count_vtbl *)__p;
    v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v111->__shared_owners_ = 0;
    v111->__shared_weak_owners_ = 0;
    v111[1].__vftable = v112;
  }
  else
  {
    v111 = 0;
  }
  v164 = v111;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v110 + 56))(v110, &v163);
  v113 = v164;
  if (v164)
  {
    v114 = (unint64_t *)&v164->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = __p;
  __p = 0;
  if (v116)
    (*(void (**)(void *))(*(_QWORD *)v116 + 8))(v116);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v117 = __p;
  std::string::basic_string[abi:ne180100]<0>(v159, "shape");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v159, 0, (uint64_t *)&v205);
  v161 = v205;
  if (v205)
  {
    v118 = (std::__shared_weak_count *)operator new();
    v119 = v205;
    v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v118->__shared_owners_ = 0;
    v118->__shared_weak_owners_ = 0;
    v118[1].__vftable = v119;
  }
  else
  {
    v118 = 0;
  }
  v162 = v118;
  v205 = 0;
  std::string::basic_string[abi:ne180100]<0>(v157, "K");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v117 + 24))(v117, &v161, 0, v157);
  if (v158 < 0)
    operator delete(v157[0]);
  v120 = v162;
  if (v162)
  {
    v121 = (unint64_t *)&v162->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v205;
  v205 = 0;
  if (v123)
    (*((void (**)(std::__shared_weak_count_vtbl *))v123->~__shared_weak_count + 1))(v123);
  if (v160 < 0)
    operator delete(v159[0]);
  v124 = *a3;
  v155 = __p;
  if (__p)
  {
    v125 = (std::__shared_weak_count *)operator new();
    v126 = (std::__shared_weak_count_vtbl *)__p;
    v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v125->__shared_owners_ = 0;
    v125->__shared_weak_owners_ = 0;
    v125[1].__vftable = v126;
  }
  else
  {
    v125 = 0;
  }
  v156 = v125;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v124 + 56))(v124, &v155);
  v127 = v156;
  if (v156)
  {
    v128 = (unint64_t *)&v156->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v130 = __p;
  __p = 0;
  if (v130)
    (*(void (**)(void *))(*(_QWORD *)v130 + 8))(v130);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v190);
  v131 = v190;
  std::string::basic_string[abi:ne180100]<0>(v151, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v151, 1, v217);
  v153 = v217[0];
  if (v217[0])
  {
    v132 = (std::__shared_weak_count *)operator new();
    v133 = v217[0];
    v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v132->__shared_owners_ = 0;
    v132->__shared_weak_owners_ = 0;
    v132[1].__vftable = (std::__shared_weak_count_vtbl *)v133;
  }
  else
  {
    v132 = 0;
  }
  v154 = v132;
  v217[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(v201, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v202, "int32");
  std::string::basic_string[abi:ne180100]<0>(v203, "int8");
  std::string::basic_string[abi:ne180100]<0>(v204, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&v205, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v131 + 24))(v131, &v153, &v205, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v205);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v204[i + 2]) < 0)
      operator delete((void *)v204[i]);
  }
  v135 = v154;
  if (v154)
  {
    v136 = (unint64_t *)&v154->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = v217[0];
  v217[0] = 0;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  if (v152 < 0)
    operator delete(v151[0]);
  v139 = *a3;
  v149 = v190;
  if (v190)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v141 = v190;
    v140->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v141;
  }
  else
  {
    v140 = 0;
  }
  v150 = v140;
  v190 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v139 + 56))(v139, &v149);
  v142 = v150;
  if (v150)
  {
    v143 = (unint64_t *)&v150->__shared_owners_;
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = v190;
  v190 = 0;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  if (v214)
  {
    v146 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v214);
    MEMORY[0x1E0C023A0](v146, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v192, 0);
  result = (uint64_t)v197;
  if (v197)
  {
    v148 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v197);
    return MEMORY[0x1E0C023A0](v148, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E086A03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void **a65;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v68;

  if (a63)
    (*(void (**)(uint64_t))(*(_QWORD *)a63 + 8))(a63);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v66 - 112), 0);
  v68 = *v65;
  *v65 = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a65, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x208], 0);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRNN(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceRnn(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E086A614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLSTM(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceLstm(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E086A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceGRU(void (****a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  MIL::Operators::Common::ios15::CustomValueTypeInference::ValueTypeInferenceGru(a1, &v10, a3, a4);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1E086A73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MIL::IRValue const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::GRU::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  void *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  char **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count_vtbl *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  char *v96;
  char *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count_vtbl *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122;
  char *v123;
  char *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  char **v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unsigned __int8 *v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void *v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count_vtbl *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count_vtbl *v164;
  void *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count_vtbl *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count_vtbl *v171;
  void *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count_vtbl *v178;
  void *v179;
  std::__shared_weak_count *v180;
  std::__shared_weak_count_vtbl *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count_vtbl *v185;
  void *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count_vtbl *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count_vtbl *v192;
  void *v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count_vtbl *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count_vtbl *v199;
  void *v200;
  std::__shared_weak_count *v201;
  std::__shared_weak_count_vtbl *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count_vtbl *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  void *v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count_vtbl *v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count_vtbl *v220;
  void *v221;
  std::__shared_weak_count *v222;
  std::__shared_weak_count_vtbl *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count_vtbl *v227;
  void *v228;
  std::__shared_weak_count *v229;
  std::__shared_weak_count_vtbl *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count_vtbl *v234;
  void *v235;
  std::__shared_weak_count *v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count_vtbl *v241;
  void *v242;
  std::__shared_weak_count *v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count_vtbl *v248;
  void *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count_vtbl *v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count_vtbl *v255;
  void *v256;
  std::__shared_weak_count *v257;
  std::__shared_weak_count_vtbl *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count_vtbl *v262;
  void *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count_vtbl *v269;
  void *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count_vtbl *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count_vtbl *v276;
  void *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count_vtbl *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count_vtbl *v283;
  void *v284;
  std::__shared_weak_count *v285;
  std::__shared_weak_count_vtbl *v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count_vtbl *v290;
  void *v291;
  std::__shared_weak_count *v292;
  std::__shared_weak_count_vtbl *v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count_vtbl *v297;
  void *v298;
  std::__shared_weak_count *v299;
  std::__shared_weak_count_vtbl *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count_vtbl *v304;
  void *v305;
  std::__shared_weak_count *v306;
  std::__shared_weak_count_vtbl *v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count_vtbl *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  std::__shared_weak_count_vtbl *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  void *v318;
  uint64_t v319;
  std::__shared_weak_count *v320;
  uint64_t v321;
  uint64_t i;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  uint64_t v329;
  uint64_t j;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  uint64_t k;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  uint64_t v345;
  uint64_t m;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t result;
  uint64_t v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  char v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  void *v367[2];
  char v368;
  uint64_t v369;
  std::__shared_weak_count *v370;
  void *v371[2];
  char v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  void *v375[2];
  char v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  void *v379;
  std::__shared_weak_count *v380;
  void *v381[2];
  char v382;
  std::__shared_weak_count_vtbl *v383;
  std::__shared_weak_count *v384;
  void *v385[2];
  char v386;
  std::__shared_weak_count_vtbl *v387;
  std::__shared_weak_count *v388;
  void *v389[2];
  char v390;
  std::__shared_weak_count_vtbl *v391;
  std::__shared_weak_count *v392;
  void *v393[2];
  char v394;
  std::__shared_weak_count_vtbl *v395;
  std::__shared_weak_count *v396;
  void *v397[2];
  char v398;
  void *v399[2];
  char v400;
  std::__shared_weak_count_vtbl *v401;
  std::__shared_weak_count *v402;
  void *v403[2];
  char v404;
  void *v405[2];
  char v406;
  std::__shared_weak_count_vtbl *v407;
  std::__shared_weak_count *v408;
  void *v409[2];
  char v410;
  void *v411[2];
  char v412;
  std::__shared_weak_count_vtbl *v413;
  std::__shared_weak_count *v414;
  void *v415[2];
  char v416;
  void *v417[2];
  char v418;
  std::__shared_weak_count_vtbl *v419;
  std::__shared_weak_count *v420;
  void *v421[2];
  char v422;
  void *v423[2];
  char v424;
  std::__shared_weak_count_vtbl *v425;
  std::__shared_weak_count *v426;
  void *v427[2];
  char v428;
  void *v429[2];
  char v430;
  std::__shared_weak_count_vtbl *v431;
  std::__shared_weak_count *v432;
  void *v433[2];
  char v434;
  void *v435[2];
  char v436;
  std::__shared_weak_count_vtbl *v437;
  std::__shared_weak_count *v438;
  void *v439[2];
  char v440;
  void *v441[2];
  char v442;
  std::__shared_weak_count_vtbl *v443;
  std::__shared_weak_count *v444;
  void *v445[2];
  char v446;
  void *v447[2];
  char v448;
  std::__shared_weak_count_vtbl *v449;
  std::__shared_weak_count *v450;
  void *v451[2];
  char v452;
  void *v453[2];
  char v454;
  std::__shared_weak_count_vtbl *v455;
  std::__shared_weak_count *v456;
  void *v457;
  std::__shared_weak_count *v458;
  void *v459[2];
  char v460;
  std::__shared_weak_count_vtbl *v461;
  std::__shared_weak_count *v462;
  void *v463[2];
  char v464;
  std::__shared_weak_count_vtbl *v465;
  std::__shared_weak_count *v466;
  void *v467[2];
  char v468;
  void *v469[2];
  char v470;
  std::__shared_weak_count_vtbl *v471;
  std::__shared_weak_count *v472;
  void *v473[2];
  char v474;
  void *v475[2];
  char v476;
  std::__shared_weak_count_vtbl *v477;
  std::__shared_weak_count *v478;
  void *v479[2];
  char v480;
  void *v481[2];
  char v482;
  std::__shared_weak_count_vtbl *v483;
  std::__shared_weak_count *v484;
  void *v485[2];
  char v486;
  void *v487[2];
  char v488;
  std::__shared_weak_count_vtbl *v489;
  std::__shared_weak_count *v490;
  void *v491[2];
  char v492;
  void *v493[2];
  char v494;
  std::__shared_weak_count_vtbl *v495;
  std::__shared_weak_count *v496;
  uint64_t v497;
  std::__shared_weak_count *v498;
  __n128 v499;
  __int128 v500;
  __int128 v501;
  void *v502[2];
  uint64_t v503;
  __n128 v504;
  __n128 v505;
  uint64_t v506;
  char **v507;
  __n128 v508;
  __n128 v509;
  __n128 v510;
  __n128 v511;
  __n128 v512;
  __n128 v513;
  __n128 v514;
  __n128 v515;
  __n128 v516;
  _QWORD *v517;
  void *__p;
  void *v519;
  char *v520;
  char *v521;
  char **v522;
  char v523;
  _QWORD v524[3];
  _QWORD v525[3];
  _QWORD v526[3];
  _QWORD v527[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *p_on_zero_shared;
  _QWORD v531[3];
  _QWORD *v532;
  _BYTE v533[24];
  _BYTE *v534;
  _QWORD v535[3];
  _QWORD *v536;
  uint64_t v537;
  uint64_t v538;
  _QWORD *v539;
  uint64_t v540;

  v540 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v517 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v520 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v519 = v10 + 24;
  v538 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v538, 1, &v516);
  MIL::IRParameter::Make(&v516, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v516.n128_u64[1];
  if (v516.n128_u64[1])
  {
    v13 = (unint64_t *)(v516.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  v15 = v517;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = (char *)operator new(0x10uLL);
  v520 = v18 + 16;
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  __p = v18;
  v519 = v18 + 16;
  v538 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v538, 1, &v515);
  MIL::IRParameter::Make(&v515, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v15, "initial_h", (uint64_t *)&Scalar);
  v19 = Scalar;
  Scalar = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v515.n128_u64[1];
  if (v515.n128_u64[1])
  {
    v21 = (unint64_t *)(v515.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  v23 = v517;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (char *)operator new(0x10uLL);
  v520 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  v519 = v26 + 16;
  v538 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v538, 1, &v514);
  MIL::IRParameter::Make(&v514, (uint64_t *)&Scalar);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "weight_ih", (uint64_t *)&Scalar);
  v28 = Scalar;
  Scalar = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v514.n128_u64[1];
  if (v514.n128_u64[1])
  {
    v30 = (unint64_t *)(v514.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v517;
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (char *)operator new(0x10uLL);
  v520 = v35 + 16;
  *(_QWORD *)v35 = v33;
  *((_QWORD *)v35 + 1) = v34;
  __p = v35;
  v519 = v35 + 16;
  v538 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v538, 1, &v513);
  MIL::IRParameter::Make(&v513, (uint64_t *)&Scalar);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v32, "weight_hh", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = (std::__shared_weak_count *)v513.n128_u64[1];
  if (v513.n128_u64[1])
  {
    v39 = (unint64_t *)(v513.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v517;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(8uLL);
  __p = v43;
  *(_QWORD *)v43 = v42;
  v520 = v43 + 8;
  v519 = v43 + 8;
  v538 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v538, 1, &v512);
  MIL::IRParameter::Make(&v512, (uint64_t *)&Scalar);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "bias", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = (std::__shared_weak_count *)v512.n128_u64[1];
  if (v512.n128_u64[1])
  {
    v47 = (unint64_t *)(v512.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v519 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v517;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v511);
  MIL::IRParameter::Make(&v511, (uint64_t *)&__p);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v49, "direction", (uint64_t *)&__p);
  v51 = __p;
  __p = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v511.n128_u64[1];
  if (v511.n128_u64[1])
  {
    v53 = (unint64_t *)(v511.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  v55 = v517;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v510);
  MIL::IRParameter::Make(&v510, (uint64_t *)&__p);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v55, "output_sequence", (uint64_t *)&__p);
  v57 = __p;
  __p = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v510.n128_u64[1];
  if (v510.n128_u64[1])
  {
    v59 = (unint64_t *)(v510.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = v517;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v509);
  MIL::IRParameter::Make(&v509, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v61, "recurrent_activation", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v509.n128_u64[1];
  if (v509.n128_u64[1])
  {
    v65 = (unint64_t *)(v509.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v67 = v517;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v508);
  MIL::IRParameter::Make(&v508, (uint64_t *)&__p);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v67, "activation", (uint64_t *)&__p);
  v69 = __p;
  __p = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v508.n128_u64[1];
  if (v508.n128_u64[1])
  {
    v71 = (unint64_t *)(v508.n128_u64[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v68 + 5) + 32))(*((_QWORD *)v68 + 5), 1);
  v507 = 0;
  v73 = operator new();
  *(_QWORD *)v73 = 0;
  *(_QWORD *)(v73 + 8) = 0;
  *(_QWORD *)(v73 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v507, (void **)v73);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v507, 2uLL);
  v74 = v507;
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = MIL::IRUnknownDimension::Make(a1, 0);
  v78 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v78->__get_deleter;
  p_on_zero_shared = &v78->__get_deleter;
  v78->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v75;
  v78->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v76;
  v78->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v77;
  Scalar = v78;
  v537 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v537, 1, &v505);
  MIL::IRParameter::Make(&v505, &v506);
  v79 = v506;
  v538 = v506;
  if (v506)
  {
    v80 = (_QWORD *)operator new();
    v81 = v506;
    *v80 = &unk_1EA99F888;
    v80[1] = 0;
    v80[2] = 0;
    v80[3] = v81;
  }
  else
  {
    v80 = 0;
  }
  v539 = v80;
  v506 = 0;
  v82 = v74[2];
  v83 = v74[1];
  if (v83 >= v82)
  {
    v85 = (v83 - *v74) >> 4;
    v86 = v85 + 1;
    if ((unint64_t)(v85 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v87 = v82 - *v74;
    if (v87 >> 3 > v86)
      v86 = v87 >> 3;
    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0)
      v88 = 0xFFFFFFFFFFFFFFFLL;
    else
      v88 = v86;
    v522 = v74 + 2;
    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v74 + 2), v88);
    v91 = (uint64_t *)&v89[16 * v85];
    *v91 = v79;
    v91[1] = (uint64_t)v80;
    v538 = 0;
    v539 = 0;
    v93 = *v74;
    v92 = v74[1];
    if (v92 == *v74)
    {
      v96 = v74[1];
      v94 = &v89[16 * v85];
    }
    else
    {
      v94 = &v89[16 * v85];
      do
      {
        v95 = *((_OWORD *)v92 - 1);
        v92 -= 16;
        *((_OWORD *)v94 - 1) = v95;
        v94 -= 16;
        *(_QWORD *)v92 = 0;
        *((_QWORD *)v92 + 1) = 0;
      }
      while (v92 != v93);
      v96 = *v74;
      v92 = v74[1];
    }
    v84 = (char *)(v91 + 2);
    *v74 = v94;
    v519 = v96;
    v74[1] = (char *)(v91 + 2);
    v520 = v92;
    v97 = v74[2];
    v74[2] = &v89[16 * v90];
    v521 = v97;
    __p = v96;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v83 = v79;
    *((_QWORD *)v83 + 1) = v80;
    v84 = v83 + 16;
    v538 = 0;
    v539 = 0;
  }
  v74[1] = v84;
  v98 = v506;
  v506 = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = (std::__shared_weak_count *)v505.n128_u64[1];
  if (v505.n128_u64[1])
  {
    v100 = (unint64_t *)(v505.n128_u64[1] + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v102 = v507;
  v103 = MIL::IRUnknownDimension::Make(a1, 0);
  v104 = MIL::IRUnknownDimension::Make(a1, 0);
  v105 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v105->__on_zero_shared;
  p_on_zero_shared = &v105->__on_zero_shared;
  v105->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v103;
  v105->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v104;
  Scalar = v105;
  v537 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v537, 1, &v504);
  MIL::IRParameter::Make(&v504, &v506);
  v106 = v506;
  v538 = v506;
  if (v506)
  {
    v107 = (_QWORD *)operator new();
    v108 = v506;
    *v107 = &unk_1EA99F888;
    v107[1] = 0;
    v107[2] = 0;
    v107[3] = v108;
  }
  else
  {
    v107 = 0;
  }
  v539 = v107;
  v506 = 0;
  v109 = v102[2];
  v110 = v102[1];
  if (v110 >= v109)
  {
    v112 = (v110 - *v102) >> 4;
    v113 = v112 + 1;
    if ((unint64_t)(v112 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v114 = v109 - *v102;
    if (v114 >> 3 > v113)
      v113 = v114 >> 3;
    if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
      v115 = 0xFFFFFFFFFFFFFFFLL;
    else
      v115 = v113;
    v522 = v102 + 2;
    v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v102 + 2), v115);
    v118 = (uint64_t *)&v116[16 * v112];
    *v118 = v106;
    v118[1] = (uint64_t)v107;
    v538 = 0;
    v539 = 0;
    v120 = *v102;
    v119 = v102[1];
    if (v119 == *v102)
    {
      v123 = v102[1];
      v121 = &v116[16 * v112];
    }
    else
    {
      v121 = &v116[16 * v112];
      do
      {
        v122 = *((_OWORD *)v119 - 1);
        v119 -= 16;
        *((_OWORD *)v121 - 1) = v122;
        v121 -= 16;
        *(_QWORD *)v119 = 0;
        *((_QWORD *)v119 + 1) = 0;
      }
      while (v119 != v120);
      v123 = *v102;
      v119 = v102[1];
    }
    v111 = (char *)(v118 + 2);
    *v102 = v121;
    v519 = v123;
    v102[1] = (char *)(v118 + 2);
    v520 = v119;
    v124 = v102[2];
    v102[2] = &v116[16 * v117];
    v521 = v124;
    __p = v123;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v110 = v106;
    *((_QWORD *)v110 + 1) = v107;
    v111 = v110 + 16;
    v538 = 0;
    v539 = 0;
  }
  v102[1] = v111;
  v125 = v506;
  v506 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v504.n128_u64[1];
  if (v504.n128_u64[1])
  {
    v127 = (unint64_t *)(v504.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v502 = *(_OWORD *)a2;
  v503 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v129 = (uint64_t)v517;
  *(_QWORD *)&v501 = v517;
  if (v517)
  {
    v130 = (_QWORD *)operator new();
    *v130 = &unk_1EA99F8E8;
    v130[1] = 0;
    v130[2] = 0;
    v130[3] = v129;
  }
  else
  {
    v130 = 0;
  }
  *((_QWORD *)&v501 + 1) = v130;
  v517 = 0;
  *(_QWORD *)&v500 = v507;
  if (v507)
  {
    v131 = (_QWORD *)operator new();
    v132 = v507;
    *v131 = &unk_1EA99F948;
    v131[1] = 0;
    v131[2] = 0;
    v131[3] = v132;
  }
  else
  {
    v131 = 0;
  }
  *((_QWORD *)&v500 + 1) = v131;
  v507 = 0;
  v535[0] = &unk_1EA99FAC8;
  v535[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateGRU;
  v536 = v535;
  v534 = 0;
  MIL::IROperator::Make((__int128 *)v502, &v501, &v500, (uint64_t)v535, (uint64_t)v533, a3);
  v133 = v534;
  if (v534 == v533)
  {
    v134 = 4;
    v133 = v533;
  }
  else
  {
    if (!v534)
      goto LABEL_137;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_137:
  v135 = v536;
  if (v536 == v535)
  {
    v136 = 4;
    v135 = v535;
    goto LABEL_141;
  }
  if (v536)
  {
    v136 = 5;
LABEL_141:
    (*(void (**)(void))(*v135 + 8 * v136))();
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v500 + 1);
  if (*((_QWORD *)&v500 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v500 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v501 + 1);
  if (*((_QWORD *)&v501 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v501 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  if (SHIBYTE(v503) < 0)
    operator delete(v502[0]);
  v538 = 0;
  v143 = operator new();
  *(_OWORD *)v143 = 0u;
  *(_OWORD *)(v143 + 16) = 0u;
  *(_DWORD *)(v143 + 32) = 1065353216;
  v538 = v143;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v499);
  MIL::IRParameter::Make(&v499, (uint64_t *)&__p);
  v144 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v143, "minimum_compute_type", (uint64_t *)&__p);
  v145 = __p;
  __p = 0;
  if (v145)
    (*(void (**)(void *))(*(_QWORD *)v145 + 8))(v145);
  v146 = (std::__shared_weak_count *)v499.n128_u64[1];
  if (v499.n128_u64[1])
  {
    v147 = (unint64_t *)(v499.n128_u64[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v144 + 5) + 32))(*((_QWORD *)v144 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v144 + 5) + 48))(*((_QWORD *)v144 + 5), 1);
  v149 = *a3;
  v150 = v538;
  v497 = v538;
  if (v538)
  {
    v151 = (std::__shared_weak_count *)operator new();
    v151->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v151->__shared_owners_ = 0;
    v151->__shared_weak_owners_ = 0;
    v151[1].__vftable = (std::__shared_weak_count_vtbl *)v150;
  }
  else
  {
    v151 = 0;
  }
  v498 = v151;
  v538 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v149 + 184))(v149, &v497);
  v152 = v498;
  if (v498)
  {
    p_shared_owners = (unint64_t *)&v498->__shared_owners_;
    do
      v154 = __ldaxr(p_shared_owners);
    while (__stlxr(v154 - 1, p_shared_owners));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = *a3;
  v531[0] = &off_1EA99FBD8;
  v531[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceGRU;
  v532 = v531;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v155 + 200))(v155, v531);
  v156 = v532;
  if (v532 == v531)
  {
    v157 = 4;
    v156 = v531;
  }
  else
  {
    if (!v532)
      goto LABEL_174;
    v157 = 5;
  }
  (*(void (**)(void))(*v156 + 8 * v157))();
LABEL_174:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v158 = __p;
  std::string::basic_string[abi:ne180100]<0>(v493, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v493, 0, (uint64_t *)&Scalar);
  v495 = Scalar;
  if (Scalar)
  {
    v159 = (std::__shared_weak_count *)operator new();
    v160 = Scalar;
    v159->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v159->__shared_owners_ = 0;
    v159->__shared_weak_owners_ = 0;
    v159[1].__vftable = v160;
  }
  else
  {
    v159 = 0;
  }
  v496 = v159;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v491, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v158 + 24))(v158, &v495, v491);
  if (v492 < 0)
    operator delete(v491[0]);
  v161 = v496;
  if (v496)
  {
    v162 = (unint64_t *)&v496->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = Scalar;
  Scalar = 0;
  if (v164)
    (*((void (**)(std::__shared_weak_count_vtbl *))v164->~__shared_weak_count + 1))(v164);
  if (v494 < 0)
    operator delete(v493[0]);
  v165 = __p;
  std::string::basic_string[abi:ne180100]<0>(v487, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v487, 0, (uint64_t *)&Scalar);
  v489 = Scalar;
  if (Scalar)
  {
    v166 = (std::__shared_weak_count *)operator new();
    v167 = Scalar;
    v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v166->__shared_owners_ = 0;
    v166->__shared_weak_owners_ = 0;
    v166[1].__vftable = v167;
  }
  else
  {
    v166 = 0;
  }
  v490 = v166;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v485, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v165 + 24))(v165, &v489, v485);
  if (v486 < 0)
    operator delete(v485[0]);
  v168 = v490;
  if (v490)
  {
    v169 = (unint64_t *)&v490->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = Scalar;
  Scalar = 0;
  if (v171)
    (*((void (**)(std::__shared_weak_count_vtbl *))v171->~__shared_weak_count + 1))(v171);
  if (v488 < 0)
    operator delete(v487[0]);
  v172 = __p;
  std::string::basic_string[abi:ne180100]<0>(v481, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v481, 0, (uint64_t *)&Scalar);
  v483 = Scalar;
  if (Scalar)
  {
    v173 = (std::__shared_weak_count *)operator new();
    v174 = Scalar;
    v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v173->__shared_owners_ = 0;
    v173->__shared_weak_owners_ = 0;
    v173[1].__vftable = v174;
  }
  else
  {
    v173 = 0;
  }
  v484 = v173;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v479, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v172 + 24))(v172, &v483, v479);
  if (v480 < 0)
    operator delete(v479[0]);
  v175 = v484;
  if (v484)
  {
    v176 = (unint64_t *)&v484->__shared_owners_;
    do
      v177 = __ldaxr(v176);
    while (__stlxr(v177 - 1, v176));
    if (!v177)
    {
      ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  v178 = Scalar;
  Scalar = 0;
  if (v178)
    (*((void (**)(std::__shared_weak_count_vtbl *))v178->~__shared_weak_count + 1))(v178);
  if (v482 < 0)
    operator delete(v481[0]);
  v179 = __p;
  std::string::basic_string[abi:ne180100]<0>(v475, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v475, 0, (uint64_t *)&Scalar);
  v477 = Scalar;
  if (Scalar)
  {
    v180 = (std::__shared_weak_count *)operator new();
    v181 = Scalar;
    v180->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v180->__shared_owners_ = 0;
    v180->__shared_weak_owners_ = 0;
    v180[1].__vftable = v181;
  }
  else
  {
    v180 = 0;
  }
  v478 = v180;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v473, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v179 + 24))(v179, &v477, v473);
  if (v474 < 0)
    operator delete(v473[0]);
  v182 = v478;
  if (v478)
  {
    v183 = (unint64_t *)&v478->__shared_owners_;
    do
      v184 = __ldaxr(v183);
    while (__stlxr(v184 - 1, v183));
    if (!v184)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
  v185 = Scalar;
  Scalar = 0;
  if (v185)
    (*((void (**)(std::__shared_weak_count_vtbl *))v185->~__shared_weak_count + 1))(v185);
  if (v476 < 0)
    operator delete(v475[0]);
  v186 = __p;
  std::string::basic_string[abi:ne180100]<0>(v469, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v469, 1, (uint64_t *)&Scalar);
  v471 = Scalar;
  if (Scalar)
  {
    v187 = (std::__shared_weak_count *)operator new();
    v188 = Scalar;
    v187->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v187->__shared_owners_ = 0;
    v187->__shared_weak_owners_ = 0;
    v187[1].__vftable = v188;
  }
  else
  {
    v187 = 0;
  }
  v472 = v187;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v467, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v186 + 24))(v186, &v471, v467);
  if (v468 < 0)
    operator delete(v467[0]);
  v189 = v472;
  if (v472)
  {
    v190 = (unint64_t *)&v472->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  v192 = Scalar;
  Scalar = 0;
  if (v192)
    (*((void (**)(std::__shared_weak_count_vtbl *))v192->~__shared_weak_count + 1))(v192);
  if (v470 < 0)
    operator delete(v469[0]);
  v193 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v465 = Scalar;
  if (Scalar)
  {
    v194 = (std::__shared_weak_count *)operator new();
    v195 = Scalar;
    v194->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v194->__shared_owners_ = 0;
    v194->__shared_weak_owners_ = 0;
    v194[1].__vftable = v195;
  }
  else
  {
    v194 = 0;
  }
  v466 = v194;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v463, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v193 + 24))(v193, &v465, v463);
  if (v464 < 0)
    operator delete(v463[0]);
  v196 = v466;
  if (v466)
  {
    v197 = (unint64_t *)&v466->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = Scalar;
  Scalar = 0;
  if (v199)
    (*((void (**)(std::__shared_weak_count_vtbl *))v199->~__shared_weak_count + 1))(v199);
  v200 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v461 = Scalar;
  if (Scalar)
  {
    v201 = (std::__shared_weak_count *)operator new();
    v202 = Scalar;
    v201->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v201->__shared_owners_ = 0;
    v201->__shared_weak_owners_ = 0;
    v201[1].__vftable = v202;
  }
  else
  {
    v201 = 0;
  }
  v462 = v201;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v459, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v200 + 24))(v200, &v461, v459);
  if (v460 < 0)
    operator delete(v459[0]);
  v203 = v462;
  if (v462)
  {
    v204 = (unint64_t *)&v462->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = Scalar;
  Scalar = 0;
  if (v206)
    (*((void (**)(std::__shared_weak_count_vtbl *))v206->~__shared_weak_count + 1))(v206);
  v207 = *a3;
  v457 = __p;
  if (__p)
  {
    v208 = (std::__shared_weak_count *)operator new();
    v209 = (std::__shared_weak_count_vtbl *)__p;
    v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v208->__shared_owners_ = 0;
    v208->__shared_weak_owners_ = 0;
    v208[1].__vftable = v209;
  }
  else
  {
    v208 = 0;
  }
  v458 = v208;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v207 + 56))(v207, &v457);
  v210 = v458;
  if (v458)
  {
    v211 = (unint64_t *)&v458->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = __p;
  __p = 0;
  if (v213)
    (*(void (**)(void *))(*(_QWORD *)v213 + 8))(v213);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v214 = __p;
  std::string::basic_string[abi:ne180100]<0>(v453, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v453, 0, (uint64_t *)&Scalar);
  v455 = Scalar;
  if (Scalar)
  {
    v215 = (std::__shared_weak_count *)operator new();
    v216 = Scalar;
    v215->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v215->__shared_owners_ = 0;
    v215->__shared_weak_owners_ = 0;
    v215[1].__vftable = v216;
  }
  else
  {
    v215 = 0;
  }
  v456 = v215;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v451, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v214 + 24))(v214, &v455, 0, v451);
  if (v452 < 0)
    operator delete(v451[0]);
  v217 = v456;
  if (v456)
  {
    v218 = (unint64_t *)&v456->__shared_owners_;
    do
      v219 = __ldaxr(v218);
    while (__stlxr(v219 - 1, v218));
    if (!v219)
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
  }
  v220 = Scalar;
  Scalar = 0;
  if (v220)
    (*((void (**)(std::__shared_weak_count_vtbl *))v220->~__shared_weak_count + 1))(v220);
  if (v454 < 0)
    operator delete(v453[0]);
  v221 = __p;
  std::string::basic_string[abi:ne180100]<0>(v447, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v447, 0, (uint64_t *)&Scalar);
  v449 = Scalar;
  if (Scalar)
  {
    v222 = (std::__shared_weak_count *)operator new();
    v223 = Scalar;
    v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v222->__shared_owners_ = 0;
    v222->__shared_weak_owners_ = 0;
    v222[1].__vftable = v223;
  }
  else
  {
    v222 = 0;
  }
  v450 = v222;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v445, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, &v449, 1, v445);
  if (v446 < 0)
    operator delete(v445[0]);
  v224 = v450;
  if (v450)
  {
    v225 = (unint64_t *)&v450->__shared_owners_;
    do
      v226 = __ldaxr(v225);
    while (__stlxr(v226 - 1, v225));
    if (!v226)
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
  }
  v227 = Scalar;
  Scalar = 0;
  if (v227)
    (*((void (**)(std::__shared_weak_count_vtbl *))v227->~__shared_weak_count + 1))(v227);
  if (v448 < 0)
    operator delete(v447[0]);
  v228 = __p;
  std::string::basic_string[abi:ne180100]<0>(v441, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v441, 0, (uint64_t *)&Scalar);
  v443 = Scalar;
  if (Scalar)
  {
    v229 = (std::__shared_weak_count *)operator new();
    v230 = Scalar;
    v229->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v229->__shared_owners_ = 0;
    v229->__shared_weak_owners_ = 0;
    v229[1].__vftable = v230;
  }
  else
  {
    v229 = 0;
  }
  v444 = v229;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v439, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v228 + 24))(v228, &v443, 2, v439);
  if (v440 < 0)
    operator delete(v439[0]);
  v231 = v444;
  if (v444)
  {
    v232 = (unint64_t *)&v444->__shared_owners_;
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = Scalar;
  Scalar = 0;
  if (v234)
    (*((void (**)(std::__shared_weak_count_vtbl *))v234->~__shared_weak_count + 1))(v234);
  if (v442 < 0)
    operator delete(v441[0]);
  v235 = __p;
  std::string::basic_string[abi:ne180100]<0>(v435, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v435, 0, (uint64_t *)&Scalar);
  v437 = Scalar;
  if (Scalar)
  {
    v236 = (std::__shared_weak_count *)operator new();
    v237 = Scalar;
    v236->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v236->__shared_owners_ = 0;
    v236->__shared_weak_owners_ = 0;
    v236[1].__vftable = v237;
  }
  else
  {
    v236 = 0;
  }
  v438 = v236;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v433, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v235 + 24))(v235, &v437, 0, v433);
  if (v434 < 0)
    operator delete(v433[0]);
  v238 = v438;
  if (v438)
  {
    v239 = (unint64_t *)&v438->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = Scalar;
  Scalar = 0;
  if (v241)
    (*((void (**)(std::__shared_weak_count_vtbl *))v241->~__shared_weak_count + 1))(v241);
  if (v436 < 0)
    operator delete(v435[0]);
  v242 = __p;
  std::string::basic_string[abi:ne180100]<0>(v429, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v429, 0, (uint64_t *)&Scalar);
  v431 = Scalar;
  if (Scalar)
  {
    v243 = (std::__shared_weak_count *)operator new();
    v244 = Scalar;
    v243->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v243->__shared_owners_ = 0;
    v243->__shared_weak_owners_ = 0;
    v243[1].__vftable = v244;
  }
  else
  {
    v243 = 0;
  }
  v432 = v243;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v427, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v242 + 24))(v242, &v431, 1, v427);
  if (v428 < 0)
    operator delete(v427[0]);
  v245 = v432;
  if (v432)
  {
    v246 = (unint64_t *)&v432->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = Scalar;
  Scalar = 0;
  if (v248)
    (*((void (**)(std::__shared_weak_count_vtbl *))v248->~__shared_weak_count + 1))(v248);
  if (v430 < 0)
    operator delete(v429[0]);
  v249 = __p;
  std::string::basic_string[abi:ne180100]<0>(v423, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v423, 0, (uint64_t *)&Scalar);
  v425 = Scalar;
  if (Scalar)
  {
    v250 = (std::__shared_weak_count *)operator new();
    v251 = Scalar;
    v250->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v250->__shared_owners_ = 0;
    v250->__shared_weak_owners_ = 0;
    v250[1].__vftable = v251;
  }
  else
  {
    v250 = 0;
  }
  v426 = v250;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v421, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v249 + 24))(v249, &v425, 0, v421);
  if (v422 < 0)
    operator delete(v421[0]);
  v252 = v426;
  if (v426)
  {
    v253 = (unint64_t *)&v426->__shared_owners_;
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = Scalar;
  Scalar = 0;
  if (v255)
    (*((void (**)(std::__shared_weak_count_vtbl *))v255->~__shared_weak_count + 1))(v255);
  if (v424 < 0)
    operator delete(v423[0]);
  v256 = __p;
  std::string::basic_string[abi:ne180100]<0>(v417, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v417, 0, (uint64_t *)&Scalar);
  v419 = Scalar;
  if (Scalar)
  {
    v257 = (std::__shared_weak_count *)operator new();
    v258 = Scalar;
    v257->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v257->__shared_owners_ = 0;
    v257->__shared_weak_owners_ = 0;
    v257[1].__vftable = v258;
  }
  else
  {
    v257 = 0;
  }
  v420 = v257;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v415, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v256 + 24))(v256, &v419, 1, v415);
  if (v416 < 0)
    operator delete(v415[0]);
  v259 = v420;
  if (v420)
  {
    v260 = (unint64_t *)&v420->__shared_owners_;
    do
      v261 = __ldaxr(v260);
    while (__stlxr(v261 - 1, v260));
    if (!v261)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
  v262 = Scalar;
  Scalar = 0;
  if (v262)
    (*((void (**)(std::__shared_weak_count_vtbl *))v262->~__shared_weak_count + 1))(v262);
  if (v418 < 0)
    operator delete(v417[0]);
  v263 = __p;
  std::string::basic_string[abi:ne180100]<0>(v411, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v411, 0, (uint64_t *)&Scalar);
  v413 = Scalar;
  if (Scalar)
  {
    v264 = (std::__shared_weak_count *)operator new();
    v265 = Scalar;
    v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v264->__shared_owners_ = 0;
    v264->__shared_weak_owners_ = 0;
    v264[1].__vftable = v265;
  }
  else
  {
    v264 = 0;
  }
  v414 = v264;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v409, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v263 + 24))(v263, &v413, 0, v409);
  if (v410 < 0)
    operator delete(v409[0]);
  v266 = v414;
  if (v414)
  {
    v267 = (unint64_t *)&v414->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v269 = Scalar;
  Scalar = 0;
  if (v269)
    (*((void (**)(std::__shared_weak_count_vtbl *))v269->~__shared_weak_count + 1))(v269);
  if (v412 < 0)
    operator delete(v411[0]);
  v270 = __p;
  std::string::basic_string[abi:ne180100]<0>(v405, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v405, 0, (uint64_t *)&Scalar);
  v407 = Scalar;
  if (Scalar)
  {
    v271 = (std::__shared_weak_count *)operator new();
    v272 = Scalar;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v271->__shared_owners_ = 0;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v272;
  }
  else
  {
    v271 = 0;
  }
  v408 = v271;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v403, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v270 + 24))(v270, &v407, 1, v403);
  if (v404 < 0)
    operator delete(v403[0]);
  v273 = v408;
  if (v408)
  {
    v274 = (unint64_t *)&v408->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  v276 = Scalar;
  Scalar = 0;
  if (v276)
    (*((void (**)(std::__shared_weak_count_vtbl *))v276->~__shared_weak_count + 1))(v276);
  if (v406 < 0)
    operator delete(v405[0]);
  v277 = __p;
  std::string::basic_string[abi:ne180100]<0>(v399, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v399, 1, (uint64_t *)&Scalar);
  v401 = Scalar;
  if (Scalar)
  {
    v278 = (std::__shared_weak_count *)operator new();
    v279 = Scalar;
    v278->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v278->__shared_owners_ = 0;
    v278->__shared_weak_owners_ = 0;
    v278[1].__vftable = v279;
  }
  else
  {
    v278 = 0;
  }
  v402 = v278;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v397, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v277 + 24))(v277, &v401, 0, v397);
  if (v398 < 0)
    operator delete(v397[0]);
  v280 = v402;
  if (v402)
  {
    v281 = (unint64_t *)&v402->__shared_owners_;
    do
      v282 = __ldaxr(v281);
    while (__stlxr(v282 - 1, v281));
    if (!v282)
    {
      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
      std::__shared_weak_count::__release_weak(v280);
    }
  }
  v283 = Scalar;
  Scalar = 0;
  if (v283)
    (*((void (**)(std::__shared_weak_count_vtbl *))v283->~__shared_weak_count + 1))(v283);
  if (v400 < 0)
    operator delete(v399[0]);
  v284 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v395 = Scalar;
  if (Scalar)
  {
    v285 = (std::__shared_weak_count *)operator new();
    v286 = Scalar;
    v285->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v285->__shared_owners_ = 0;
    v285->__shared_weak_owners_ = 0;
    v285[1].__vftable = v286;
  }
  else
  {
    v285 = 0;
  }
  v396 = v285;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v393, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v284 + 24))(v284, &v395, 1, v393);
  if (v394 < 0)
    operator delete(v393[0]);
  v287 = v396;
  if (v396)
  {
    v288 = (unint64_t *)&v396->__shared_owners_;
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 - 1, v288));
    if (!v289)
    {
      ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
      std::__shared_weak_count::__release_weak(v287);
    }
  }
  v290 = Scalar;
  Scalar = 0;
  if (v290)
    (*((void (**)(std::__shared_weak_count_vtbl *))v290->~__shared_weak_count + 1))(v290);
  v291 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v391 = Scalar;
  if (Scalar)
  {
    v292 = (std::__shared_weak_count *)operator new();
    v293 = Scalar;
    v292->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v292->__shared_owners_ = 0;
    v292->__shared_weak_owners_ = 0;
    v292[1].__vftable = v293;
  }
  else
  {
    v292 = 0;
  }
  v392 = v292;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v389, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v291 + 24))(v291, &v391, 2, v389);
  if (v390 < 0)
    operator delete(v389[0]);
  v294 = v392;
  if (v392)
  {
    v295 = (unint64_t *)&v392->__shared_owners_;
    do
      v296 = __ldaxr(v295);
    while (__stlxr(v296 - 1, v295));
    if (!v296)
    {
      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
      std::__shared_weak_count::__release_weak(v294);
    }
  }
  v297 = Scalar;
  Scalar = 0;
  if (v297)
    (*((void (**)(std::__shared_weak_count_vtbl *))v297->~__shared_weak_count + 1))(v297);
  v298 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v387 = Scalar;
  if (Scalar)
  {
    v299 = (std::__shared_weak_count *)operator new();
    v300 = Scalar;
    v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v299->__shared_owners_ = 0;
    v299->__shared_weak_owners_ = 0;
    v299[1].__vftable = v300;
  }
  else
  {
    v299 = 0;
  }
  v388 = v299;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v385, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v298 + 24))(v298, &v387, 0, v385);
  if (v386 < 0)
    operator delete(v385[0]);
  v301 = v388;
  if (v388)
  {
    v302 = (unint64_t *)&v388->__shared_owners_;
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v304 = Scalar;
  Scalar = 0;
  if (v304)
    (*((void (**)(std::__shared_weak_count_vtbl *))v304->~__shared_weak_count + 1))(v304);
  v305 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v383 = Scalar;
  if (Scalar)
  {
    v306 = (std::__shared_weak_count *)operator new();
    v307 = Scalar;
    v306->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v306->__shared_owners_ = 0;
    v306->__shared_weak_owners_ = 0;
    v306[1].__vftable = v307;
  }
  else
  {
    v306 = 0;
  }
  v384 = v306;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v381, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v305 + 24))(v305, &v383, 1, v381);
  if (v382 < 0)
    operator delete(v381[0]);
  v308 = v384;
  if (v384)
  {
    v309 = (unint64_t *)&v384->__shared_owners_;
    do
      v310 = __ldaxr(v309);
    while (__stlxr(v310 - 1, v309));
    if (!v310)
    {
      ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
      std::__shared_weak_count::__release_weak(v308);
    }
  }
  v311 = Scalar;
  Scalar = 0;
  if (v311)
    (*((void (**)(std::__shared_weak_count_vtbl *))v311->~__shared_weak_count + 1))(v311);
  v312 = *a3;
  v379 = __p;
  if (__p)
  {
    v313 = (std::__shared_weak_count *)operator new();
    v314 = (std::__shared_weak_count_vtbl *)__p;
    v313->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v313->__shared_owners_ = 0;
    v313->__shared_weak_owners_ = 0;
    v313[1].__vftable = v314;
  }
  else
  {
    v313 = 0;
  }
  v380 = v313;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v312 + 56))(v312, &v379);
  v315 = v380;
  if (v380)
  {
    v316 = (unint64_t *)&v380->__shared_owners_;
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = __p;
  __p = 0;
  if (v318)
    (*(void (**)(void *))(*(_QWORD *)v318 + 8))(v318);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v506);
  v319 = v506;
  std::string::basic_string[abi:ne180100]<0>(v375, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v375, 0, &v537);
  v377 = v537;
  if (v537)
  {
    v320 = (std::__shared_weak_count *)operator new();
    v321 = v537;
    v320->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v320->__shared_owners_ = 0;
    v320->__shared_weak_owners_ = 0;
    v320[1].__vftable = (std::__shared_weak_count_vtbl *)v321;
  }
  else
  {
    v320 = 0;
  }
  v378 = v320;
  v537 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v521, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 2);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v319 + 24))(v319, &v377, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v523 + i * 8) < 0)
      operator delete((&v521)[i]);
  }
  v323 = v378;
  if (v378)
  {
    v324 = (unint64_t *)&v378->__shared_owners_;
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  v326 = v537;
  v537 = 0;
  if (v326)
    (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  if (v376 < 0)
    operator delete(v375[0]);
  v327 = v506;
  std::string::basic_string[abi:ne180100]<0>(v371, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v371, 0, &v537);
  v373 = v537;
  if (v537)
  {
    v328 = (std::__shared_weak_count *)operator new();
    v329 = v537;
    v328->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v328->__shared_owners_ = 0;
    v328->__shared_weak_owners_ = 0;
    v328[1].__vftable = (std::__shared_weak_count_vtbl *)v329;
  }
  else
  {
    v328 = 0;
  }
  v374 = v328;
  v537 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v521, "linear");
  std::string::basic_string[abi:ne180100]<0>(v524, "relu");
  std::string::basic_string[abi:ne180100]<0>(v525, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v526, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v527, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v327 + 24))(v327, &v373, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v527[j + 2]) < 0)
      operator delete((void *)v527[j]);
  }
  v331 = v374;
  if (v374)
  {
    v332 = (unint64_t *)&v374->__shared_owners_;
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (!v333)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
    }
  }
  v334 = v537;
  v537 = 0;
  if (v334)
    (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  if (v372 < 0)
    operator delete(v371[0]);
  v335 = v506;
  std::string::basic_string[abi:ne180100]<0>(v367, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v367, 0, &v537);
  v369 = v537;
  if (v537)
  {
    v336 = (std::__shared_weak_count *)operator new();
    v337 = v537;
    v336->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v336->__shared_owners_ = 0;
    v336->__shared_weak_owners_ = 0;
    v336[1].__vftable = (std::__shared_weak_count_vtbl *)v337;
  }
  else
  {
    v336 = 0;
  }
  v370 = v336;
  v537 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v521, "linear");
  std::string::basic_string[abi:ne180100]<0>(v524, "relu");
  std::string::basic_string[abi:ne180100]<0>(v525, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v526, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v527, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v335 + 24))(v335, &v369, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v527[k + 2]) < 0)
      operator delete((void *)v527[k]);
  }
  v339 = v370;
  if (v370)
  {
    v340 = (unint64_t *)&v370->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
      std::__shared_weak_count::__release_weak(v339);
    }
  }
  v342 = v537;
  v537 = 0;
  if (v342)
    (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
  if (v368 < 0)
    operator delete(v367[0]);
  v343 = v506;
  std::string::basic_string[abi:ne180100]<0>(v363, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v363, 1, &v537);
  v365 = v537;
  if (v537)
  {
    v344 = (std::__shared_weak_count *)operator new();
    v345 = v537;
    v344->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v344->__shared_owners_ = 0;
    v344->__shared_weak_owners_ = 0;
    v344[1].__vftable = (std::__shared_weak_count_vtbl *)v345;
  }
  else
  {
    v344 = 0;
  }
  v366 = v344;
  v537 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v521, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v524, "int32");
  std::string::basic_string[abi:ne180100]<0>(v525, "int8");
  std::string::basic_string[abi:ne180100]<0>(v526, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v343 + 24))(v343, &v365, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (m = 0; m != -15; m -= 3)
  {
    if (SHIBYTE(v526[m + 2]) < 0)
      operator delete((void *)v526[m]);
  }
  v347 = v366;
  if (v366)
  {
    v348 = (unint64_t *)&v366->__shared_owners_;
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }
  v350 = v537;
  v537 = 0;
  if (v350)
    (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
  if (v364 < 0)
    operator delete(v363[0]);
  v351 = *a3;
  v361 = v506;
  if (v506)
  {
    v352 = (std::__shared_weak_count *)operator new();
    v353 = v506;
    v352->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v352->__shared_owners_ = 0;
    v352->__shared_weak_owners_ = 0;
    v352[1].__vftable = (std::__shared_weak_count_vtbl *)v353;
  }
  else
  {
    v352 = 0;
  }
  v362 = v352;
  v506 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v351 + 56))(v351, &v361);
  v354 = v362;
  if (v362)
  {
    v355 = (unint64_t *)&v362->__shared_owners_;
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  v357 = v506;
  v506 = 0;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  if (v538)
  {
    v358 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v538);
    MEMORY[0x1E0C023A0](v358, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v507, 0);
  result = (uint64_t)v517;
  if (v517)
  {
    v360 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v517);
    return MEMORY[0x1E0C023A0](v360, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E086D4AC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0x600];
  STACK[0x600] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 104), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x608], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6A0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::LSTM::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  std::__shared_weak_count_vtbl *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unsigned __int8 *v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned __int8 *v69;
  std::__shared_weak_count_vtbl *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unsigned __int8 *v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  unsigned __int8 *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  unsigned __int8 *v94;
  std::__shared_weak_count_vtbl *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  unsigned __int8 *v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  unsigned __int8 *v106;
  void *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  unsigned __int8 *v112;
  void *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  unsigned __int8 *v118;
  void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  unsigned __int8 *v124;
  void *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  unsigned __int8 *v130;
  void *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  char **v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  std::__shared_weak_count_vtbl *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t *v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  char *v158;
  char *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char **v164;
  uint64_t v165;
  uint64_t v166;
  std::__shared_weak_count_vtbl *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t *v180;
  char *v181;
  char *v182;
  char *v183;
  __int128 v184;
  char *v185;
  char *v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  char **v191;
  uint64_t v192;
  uint64_t v193;
  std::__shared_weak_count_vtbl *v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t *v207;
  char *v208;
  char *v209;
  char *v210;
  __int128 v211;
  char *v212;
  char *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  char **v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  uint64_t v232;
  unsigned __int8 *v233;
  void *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  std::__shared_weak_count *v241;
  unint64_t *p_shared_owners;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  void *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count_vtbl *v253;
  void *v254;
  std::__shared_weak_count *v255;
  std::__shared_weak_count_vtbl *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count_vtbl *v260;
  void *v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count_vtbl *v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count_vtbl *v267;
  void *v268;
  std::__shared_weak_count *v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count_vtbl *v274;
  void *v275;
  std::__shared_weak_count *v276;
  std::__shared_weak_count_vtbl *v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count_vtbl *v281;
  void *v282;
  std::__shared_weak_count *v283;
  std::__shared_weak_count_vtbl *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count_vtbl *v288;
  void *v289;
  std::__shared_weak_count *v290;
  std::__shared_weak_count_vtbl *v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count_vtbl *v295;
  void *v296;
  std::__shared_weak_count *v297;
  std::__shared_weak_count_vtbl *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count_vtbl *v302;
  void *v303;
  std::__shared_weak_count *v304;
  std::__shared_weak_count_vtbl *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count_vtbl *v309;
  void *v310;
  std::__shared_weak_count *v311;
  std::__shared_weak_count_vtbl *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count_vtbl *v316;
  void *v317;
  std::__shared_weak_count *v318;
  std::__shared_weak_count_vtbl *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count_vtbl *v323;
  void *v324;
  std::__shared_weak_count *v325;
  std::__shared_weak_count_vtbl *v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count_vtbl *v330;
  void *v331;
  std::__shared_weak_count *v332;
  std::__shared_weak_count_vtbl *v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count_vtbl *v337;
  void *v338;
  std::__shared_weak_count *v339;
  std::__shared_weak_count_vtbl *v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count_vtbl *v344;
  void *v345;
  std::__shared_weak_count *v346;
  std::__shared_weak_count_vtbl *v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count_vtbl *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  std::__shared_weak_count_vtbl *v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  void *v358;
  void *v359;
  std::__shared_weak_count *v360;
  std::__shared_weak_count_vtbl *v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count_vtbl *v365;
  void *v366;
  std::__shared_weak_count *v367;
  std::__shared_weak_count_vtbl *v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count_vtbl *v372;
  void *v373;
  std::__shared_weak_count *v374;
  std::__shared_weak_count_vtbl *v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count_vtbl *v379;
  void *v380;
  std::__shared_weak_count *v381;
  std::__shared_weak_count_vtbl *v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count_vtbl *v386;
  void *v387;
  std::__shared_weak_count *v388;
  std::__shared_weak_count_vtbl *v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count_vtbl *v393;
  void *v394;
  std::__shared_weak_count *v395;
  std::__shared_weak_count_vtbl *v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count_vtbl *v400;
  void *v401;
  std::__shared_weak_count *v402;
  std::__shared_weak_count_vtbl *v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count_vtbl *v407;
  void *v408;
  std::__shared_weak_count *v409;
  std::__shared_weak_count_vtbl *v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count_vtbl *v414;
  void *v415;
  std::__shared_weak_count *v416;
  std::__shared_weak_count_vtbl *v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  std::__shared_weak_count_vtbl *v421;
  void *v422;
  std::__shared_weak_count *v423;
  std::__shared_weak_count_vtbl *v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  std::__shared_weak_count_vtbl *v428;
  void *v429;
  std::__shared_weak_count *v430;
  std::__shared_weak_count_vtbl *v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count_vtbl *v435;
  void *v436;
  std::__shared_weak_count *v437;
  std::__shared_weak_count_vtbl *v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  std::__shared_weak_count_vtbl *v442;
  void *v443;
  std::__shared_weak_count *v444;
  std::__shared_weak_count_vtbl *v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count_vtbl *v449;
  void *v450;
  std::__shared_weak_count *v451;
  std::__shared_weak_count_vtbl *v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::__shared_weak_count_vtbl *v456;
  void *v457;
  std::__shared_weak_count *v458;
  std::__shared_weak_count_vtbl *v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count_vtbl *v463;
  void *v464;
  std::__shared_weak_count *v465;
  std::__shared_weak_count_vtbl *v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  std::__shared_weak_count_vtbl *v470;
  void *v471;
  std::__shared_weak_count *v472;
  std::__shared_weak_count_vtbl *v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count_vtbl *v477;
  void *v478;
  std::__shared_weak_count *v479;
  std::__shared_weak_count_vtbl *v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count_vtbl *v484;
  void *v485;
  std::__shared_weak_count *v486;
  std::__shared_weak_count_vtbl *v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count_vtbl *v491;
  void *v492;
  std::__shared_weak_count *v493;
  std::__shared_weak_count_vtbl *v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  std::__shared_weak_count_vtbl *v498;
  void *v499;
  std::__shared_weak_count *v500;
  std::__shared_weak_count_vtbl *v501;
  std::__shared_weak_count *v502;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count_vtbl *v505;
  void *v506;
  std::__shared_weak_count *v507;
  std::__shared_weak_count_vtbl *v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count_vtbl *v512;
  void *v513;
  std::__shared_weak_count *v514;
  std::__shared_weak_count_vtbl *v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count_vtbl *v519;
  void *v520;
  std::__shared_weak_count *v521;
  std::__shared_weak_count_vtbl *v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  std::__shared_weak_count_vtbl *v526;
  void *v527;
  std::__shared_weak_count *v528;
  std::__shared_weak_count_vtbl *v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count_vtbl *v533;
  uint64_t v534;
  std::__shared_weak_count *v535;
  std::__shared_weak_count_vtbl *v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  void *v540;
  uint64_t v541;
  std::__shared_weak_count *v542;
  uint64_t v543;
  uint64_t i;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  uint64_t v548;
  uint64_t v549;
  std::__shared_weak_count *v550;
  uint64_t v551;
  uint64_t j;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  std::__shared_weak_count *v558;
  uint64_t v559;
  uint64_t k;
  std::__shared_weak_count *v561;
  unint64_t *v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  std::__shared_weak_count *v566;
  uint64_t v567;
  uint64_t m;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  uint64_t v572;
  uint64_t v573;
  std::__shared_weak_count *v574;
  uint64_t v575;
  uint64_t n;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  std::__shared_weak_count *v582;
  uint64_t v583;
  std::__shared_weak_count *v584;
  unint64_t *v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t result;
  uint64_t v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  void *v593[2];
  char v594;
  uint64_t v595;
  std::__shared_weak_count *v596;
  void *v597[2];
  char v598;
  uint64_t v599;
  std::__shared_weak_count *v600;
  void *v601[2];
  char v602;
  uint64_t v603;
  std::__shared_weak_count *v604;
  void *v605[2];
  char v606;
  uint64_t v607;
  std::__shared_weak_count *v608;
  void *v609[2];
  char v610;
  uint64_t v611;
  std::__shared_weak_count *v612;
  void *v613;
  std::__shared_weak_count *v614;
  void *v615[2];
  char v616;
  std::__shared_weak_count_vtbl *v617;
  std::__shared_weak_count *v618;
  void *v619[2];
  char v620;
  std::__shared_weak_count_vtbl *v621;
  std::__shared_weak_count *v622;
  void *v623[2];
  char v624;
  std::__shared_weak_count_vtbl *v625;
  std::__shared_weak_count *v626;
  void *v627[2];
  char v628;
  std::__shared_weak_count_vtbl *v629;
  std::__shared_weak_count *v630;
  void *v631[2];
  char v632;
  std::__shared_weak_count_vtbl *v633;
  std::__shared_weak_count *v634;
  void *v635[2];
  char v636;
  std::__shared_weak_count_vtbl *v637;
  std::__shared_weak_count *v638;
  void *v639[2];
  char v640;
  void *v641[2];
  char v642;
  std::__shared_weak_count_vtbl *v643;
  std::__shared_weak_count *v644;
  void *v645[2];
  char v646;
  void *v647[2];
  char v648;
  std::__shared_weak_count_vtbl *v649;
  std::__shared_weak_count *v650;
  void *v651[2];
  char v652;
  void *v653[2];
  char v654;
  std::__shared_weak_count_vtbl *v655;
  std::__shared_weak_count *v656;
  void *v657[2];
  char v658;
  void *v659[2];
  char v660;
  std::__shared_weak_count_vtbl *v661;
  std::__shared_weak_count *v662;
  void *v663[2];
  char v664;
  void *v665[2];
  char v666;
  std::__shared_weak_count_vtbl *v667;
  std::__shared_weak_count *v668;
  void *v669[2];
  char v670;
  void *v671[2];
  char v672;
  std::__shared_weak_count_vtbl *v673;
  std::__shared_weak_count *v674;
  void *v675[2];
  char v676;
  void *v677[2];
  char v678;
  std::__shared_weak_count_vtbl *v679;
  std::__shared_weak_count *v680;
  void *v681[2];
  char v682;
  void *v683[2];
  char v684;
  std::__shared_weak_count_vtbl *v685;
  std::__shared_weak_count *v686;
  void *v687[2];
  char v688;
  void *v689[2];
  char v690;
  std::__shared_weak_count_vtbl *v691;
  std::__shared_weak_count *v692;
  void *v693[2];
  char v694;
  void *v695[2];
  char v696;
  std::__shared_weak_count_vtbl *v697;
  std::__shared_weak_count *v698;
  void *v699[2];
  char v700;
  void *v701[2];
  char v702;
  std::__shared_weak_count_vtbl *v703;
  std::__shared_weak_count *v704;
  void *v705[2];
  char v706;
  void *v707[2];
  char v708;
  std::__shared_weak_count_vtbl *v709;
  std::__shared_weak_count *v710;
  void *v711[2];
  char v712;
  void *v713[2];
  char v714;
  std::__shared_weak_count_vtbl *v715;
  std::__shared_weak_count *v716;
  void *v717[2];
  char v718;
  void *v719[2];
  char v720;
  std::__shared_weak_count_vtbl *v721;
  std::__shared_weak_count *v722;
  void *v723[2];
  char v724;
  void *v725[2];
  char v726;
  std::__shared_weak_count_vtbl *v727;
  std::__shared_weak_count *v728;
  void *v729[2];
  char v730;
  void *v731[2];
  char v732;
  std::__shared_weak_count_vtbl *v733;
  std::__shared_weak_count *v734;
  void *v735[2];
  char v736;
  void *v737[2];
  char v738;
  std::__shared_weak_count_vtbl *v739;
  std::__shared_weak_count *v740;
  void *v741[2];
  char v742;
  void *v743[2];
  char v744;
  std::__shared_weak_count_vtbl *v745;
  std::__shared_weak_count *v746;
  void *v747[2];
  char v748;
  void *v749[2];
  char v750;
  std::__shared_weak_count_vtbl *v751;
  std::__shared_weak_count *v752;
  void *v753;
  std::__shared_weak_count *v754;
  void *v755[2];
  char v756;
  std::__shared_weak_count_vtbl *v757;
  std::__shared_weak_count *v758;
  void *v759[2];
  char v760;
  std::__shared_weak_count_vtbl *v761;
  std::__shared_weak_count *v762;
  void *v763[2];
  char v764;
  std::__shared_weak_count_vtbl *v765;
  std::__shared_weak_count *v766;
  void *v767[2];
  char v768;
  void *v769[2];
  char v770;
  std::__shared_weak_count_vtbl *v771;
  std::__shared_weak_count *v772;
  void *v773[2];
  char v774;
  void *v775[2];
  char v776;
  std::__shared_weak_count_vtbl *v777;
  std::__shared_weak_count *v778;
  void *v779[2];
  char v780;
  void *v781[2];
  char v782;
  std::__shared_weak_count_vtbl *v783;
  std::__shared_weak_count *v784;
  void *v785[2];
  char v786;
  void *v787[2];
  char v788;
  std::__shared_weak_count_vtbl *v789;
  std::__shared_weak_count *v790;
  void *v791[2];
  char v792;
  void *v793[2];
  char v794;
  std::__shared_weak_count_vtbl *v795;
  std::__shared_weak_count *v796;
  void *v797[2];
  char v798;
  void *v799[2];
  char v800;
  std::__shared_weak_count_vtbl *v801;
  std::__shared_weak_count *v802;
  void *v803[2];
  char v804;
  void *v805[2];
  char v806;
  std::__shared_weak_count_vtbl *v807;
  std::__shared_weak_count *v808;
  void *v809[2];
  char v810;
  void *v811[2];
  char v812;
  std::__shared_weak_count_vtbl *v813;
  std::__shared_weak_count *v814;
  void *v815[2];
  char v816;
  void *v817[2];
  char v818;
  std::__shared_weak_count_vtbl *v819;
  std::__shared_weak_count *v820;
  void *v821[2];
  char v822;
  void *v823[2];
  char v824;
  std::__shared_weak_count_vtbl *v825;
  std::__shared_weak_count *v826;
  void *v827[2];
  char v828;
  void *v829[2];
  char v830;
  std::__shared_weak_count_vtbl *v831;
  std::__shared_weak_count *v832;
  void *v833[2];
  char v834;
  void *v835[2];
  char v836;
  std::__shared_weak_count_vtbl *v837;
  std::__shared_weak_count *v838;
  uint64_t v839;
  std::__shared_weak_count *v840;
  __n128 v841;
  __int128 v842;
  __int128 v843;
  void *v844[2];
  uint64_t v845;
  __n128 v846;
  __n128 v847;
  __n128 v848;
  uint64_t v849;
  char **v850;
  __n128 v851;
  __n128 v852;
  __n128 v853;
  __n128 v854;
  __n128 v855;
  __n128 v856;
  __n128 v857;
  __n128 v858;
  __n128 v859;
  __n128 v860;
  __n128 v861;
  __n128 v862;
  __n128 v863;
  __n128 v864;
  __n128 v865;
  __n128 v866;
  __n128 v867;
  _QWORD *v868;
  void *__p;
  void *v870;
  char *v871;
  char *v872;
  char **v873;
  _QWORD v874[3];
  _QWORD v875[3];
  _QWORD v876[3];
  _QWORD v877[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *p_on_zero_shared;
  _QWORD v881[3];
  _QWORD *v882;
  _BYTE v883[24];
  _BYTE *v884;
  _QWORD v885[3];
  _QWORD *v886;
  uint64_t v887;
  uint64_t v888;
  _QWORD *v889;
  uint64_t v890;

  v890 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v868 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v871 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v870 = v10 + 24;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v867);
  MIL::IRParameter::Make(&v867, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v867.n128_u64[1];
  if (v867.n128_u64[1])
  {
    v13 = (unint64_t *)(v867.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  v15 = v868;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = (char *)operator new(0x10uLL);
  v871 = v18 + 16;
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  __p = v18;
  v870 = v18 + 16;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v866);
  MIL::IRParameter::Make(&v866, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v15, "initial_h", (uint64_t *)&Scalar);
  v19 = Scalar;
  Scalar = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v866.n128_u64[1];
  if (v866.n128_u64[1])
  {
    v21 = (unint64_t *)(v866.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  v23 = v868;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (char *)operator new(0x10uLL);
  v871 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  v870 = v26 + 16;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v865);
  MIL::IRParameter::Make(&v865, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "initial_c", (uint64_t *)&Scalar);
  v27 = Scalar;
  Scalar = 0;
  if (v27)
    (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  v28 = (std::__shared_weak_count *)v865.n128_u64[1];
  if (v865.n128_u64[1])
  {
    v29 = (unint64_t *)(v865.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  v31 = v868;
  v32 = MIL::IRUnknownDimension::Make(a1, 0);
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = (char *)operator new(0x10uLL);
  v871 = v34 + 16;
  *(_QWORD *)v34 = v32;
  *((_QWORD *)v34 + 1) = v33;
  __p = v34;
  v870 = v34 + 16;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v864);
  MIL::IRParameter::Make(&v864, (uint64_t *)&Scalar);
  v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v31, "weight_ih", (uint64_t *)&Scalar);
  v36 = Scalar;
  Scalar = 0;
  if (v36)
    (*((void (**)(std::__shared_weak_count_vtbl *))v36->~__shared_weak_count + 1))(v36);
  v37 = (std::__shared_weak_count *)v864.n128_u64[1];
  if (v864.n128_u64[1])
  {
    v38 = (unint64_t *)(v864.n128_u64[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v35 + 5) + 32))(*((_QWORD *)v35 + 5), 1);
  v40 = v868;
  v41 = MIL::IRUnknownDimension::Make(a1, 0);
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(0x10uLL);
  v871 = v43 + 16;
  *(_QWORD *)v43 = v41;
  *((_QWORD *)v43 + 1) = v42;
  __p = v43;
  v870 = v43 + 16;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v863);
  MIL::IRParameter::Make(&v863, (uint64_t *)&Scalar);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v40, "weight_hh", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = (std::__shared_weak_count *)v863.n128_u64[1];
  if (v863.n128_u64[1])
  {
    v47 = (unint64_t *)(v863.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  v49 = v868;
  v50 = MIL::IRUnknownDimension::Make(a1, 0);
  v51 = (char *)operator new(8uLL);
  __p = v51;
  *(_QWORD *)v51 = v50;
  v871 = v51 + 8;
  v870 = v51 + 8;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v862);
  MIL::IRParameter::Make(&v862, (uint64_t *)&Scalar);
  v52 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v49, "bias", (uint64_t *)&Scalar);
  v53 = Scalar;
  Scalar = 0;
  if (v53)
    (*((void (**)(std::__shared_weak_count_vtbl *))v53->~__shared_weak_count + 1))(v53);
  v54 = (std::__shared_weak_count *)v862.n128_u64[1];
  if (v862.n128_u64[1])
  {
    v55 = (unint64_t *)(v862.n128_u64[1] + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 32))(*((_QWORD *)v52 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v52 + 5) + 48))(*((_QWORD *)v52 + 5), 1);
  v57 = v868;
  v58 = MIL::IRUnknownDimension::Make(a1, 0);
  v59 = (char *)operator new(8uLL);
  __p = v59;
  *(_QWORD *)v59 = v58;
  v871 = v59 + 8;
  v870 = v59 + 8;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v861);
  MIL::IRParameter::Make(&v861, (uint64_t *)&Scalar);
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(v57, "peephole", (uint64_t *)&Scalar);
  v61 = Scalar;
  Scalar = 0;
  if (v61)
    (*((void (**)(std::__shared_weak_count_vtbl *))v61->~__shared_weak_count + 1))(v61);
  v62 = (std::__shared_weak_count *)v861.n128_u64[1];
  if (v861.n128_u64[1])
  {
    v63 = (unint64_t *)(v861.n128_u64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 32))(*((_QWORD *)v60 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v60 + 5) + 48))(*((_QWORD *)v60 + 5), 1);
  v65 = v868;
  v66 = MIL::IRUnknownDimension::Make(a1, 0);
  v67 = MIL::IRUnknownDimension::Make(a1, 0);
  v68 = (char *)operator new(0x10uLL);
  v871 = v68 + 16;
  *(_QWORD *)v68 = v66;
  *((_QWORD *)v68 + 1) = v67;
  __p = v68;
  v870 = v68 + 16;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v860);
  MIL::IRParameter::Make(&v860, (uint64_t *)&Scalar);
  v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v65, "weight_ih_back", (uint64_t *)&Scalar);
  v70 = Scalar;
  Scalar = 0;
  if (v70)
    (*((void (**)(std::__shared_weak_count_vtbl *))v70->~__shared_weak_count + 1))(v70);
  v71 = (std::__shared_weak_count *)v860.n128_u64[1];
  if (v860.n128_u64[1])
  {
    v72 = (unint64_t *)(v860.n128_u64[1] + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 32))(*((_QWORD *)v69 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v69 + 5) + 48))(*((_QWORD *)v69 + 5), 1);
  v74 = v868;
  v75 = MIL::IRUnknownDimension::Make(a1, 0);
  v76 = MIL::IRUnknownDimension::Make(a1, 0);
  v77 = (char *)operator new(0x10uLL);
  v871 = v77 + 16;
  *(_QWORD *)v77 = v75;
  *((_QWORD *)v77 + 1) = v76;
  __p = v77;
  v870 = v77 + 16;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v859);
  MIL::IRParameter::Make(&v859, (uint64_t *)&Scalar);
  v78 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(v74, "weight_hh_back", (uint64_t *)&Scalar);
  v79 = Scalar;
  Scalar = 0;
  if (v79)
    (*((void (**)(std::__shared_weak_count_vtbl *))v79->~__shared_weak_count + 1))(v79);
  v80 = (std::__shared_weak_count *)v859.n128_u64[1];
  if (v859.n128_u64[1])
  {
    v81 = (unint64_t *)(v859.n128_u64[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 32))(*((_QWORD *)v78 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v78 + 5) + 48))(*((_QWORD *)v78 + 5), 1);
  v83 = v868;
  v84 = MIL::IRUnknownDimension::Make(a1, 0);
  v85 = (char *)operator new(8uLL);
  __p = v85;
  *(_QWORD *)v85 = v84;
  v871 = v85 + 8;
  v870 = v85 + 8;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v858);
  MIL::IRParameter::Make(&v858, (uint64_t *)&Scalar);
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v83, "bias_back", (uint64_t *)&Scalar);
  v87 = Scalar;
  Scalar = 0;
  if (v87)
    (*((void (**)(std::__shared_weak_count_vtbl *))v87->~__shared_weak_count + 1))(v87);
  v88 = (std::__shared_weak_count *)v858.n128_u64[1];
  if (v858.n128_u64[1])
  {
    v89 = (unint64_t *)(v858.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 32))(*((_QWORD *)v86 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v86 + 5) + 48))(*((_QWORD *)v86 + 5), 1);
  v91 = v868;
  v92 = MIL::IRUnknownDimension::Make(a1, 0);
  v93 = (char *)operator new(8uLL);
  __p = v93;
  *(_QWORD *)v93 = v92;
  v871 = v93 + 8;
  v870 = v93 + 8;
  v888 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v888, 1, &v857);
  MIL::IRParameter::Make(&v857, (uint64_t *)&Scalar);
  v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(v91, "peephole_back", (uint64_t *)&Scalar);
  v95 = Scalar;
  Scalar = 0;
  if (v95)
    (*((void (**)(std::__shared_weak_count_vtbl *))v95->~__shared_weak_count + 1))(v95);
  v96 = (std::__shared_weak_count *)v857.n128_u64[1];
  if (v857.n128_u64[1])
  {
    v97 = (unint64_t *)(v857.n128_u64[1] + 8);
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (__p)
  {
    v870 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 32))(*((_QWORD *)v94 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v94 + 5) + 48))(*((_QWORD *)v94 + 5), 1);
  v99 = v868;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v856);
  MIL::IRParameter::Make(&v856, (uint64_t *)&__p);
  v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v99, "direction", (uint64_t *)&__p);
  v101 = __p;
  __p = 0;
  if (v101)
    (*(void (**)(void *))(*(_QWORD *)v101 + 8))(v101);
  v102 = (std::__shared_weak_count *)v856.n128_u64[1];
  if (v856.n128_u64[1])
  {
    v103 = (unint64_t *)(v856.n128_u64[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v100 + 5) + 32))(*((_QWORD *)v100 + 5), 1);
  v105 = v868;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v855);
  MIL::IRParameter::Make(&v855, (uint64_t *)&__p);
  v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v105, "output_sequence", (uint64_t *)&__p);
  v107 = __p;
  __p = 0;
  if (v107)
    (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  v108 = (std::__shared_weak_count *)v855.n128_u64[1];
  if (v855.n128_u64[1])
  {
    v109 = (unint64_t *)(v855.n128_u64[1] + 8);
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v106 + 5) + 32))(*((_QWORD *)v106 + 5), 1);
  v111 = v868;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v854);
  MIL::IRParameter::Make(&v854, (uint64_t *)&__p);
  v112 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>(v111, "recurrent_activation", (uint64_t *)&__p);
  v113 = __p;
  __p = 0;
  if (v113)
    (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
  v114 = (std::__shared_weak_count *)v854.n128_u64[1];
  if (v854.n128_u64[1])
  {
    v115 = (unint64_t *)(v854.n128_u64[1] + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v112 + 5) + 32))(*((_QWORD *)v112 + 5), 1);
  v117 = v868;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v853);
  MIL::IRParameter::Make(&v853, (uint64_t *)&__p);
  v118 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v117, "cell_activation", (uint64_t *)&__p);
  v119 = __p;
  __p = 0;
  if (v119)
    (*(void (**)(void *))(*(_QWORD *)v119 + 8))(v119);
  v120 = (std::__shared_weak_count *)v853.n128_u64[1];
  if (v853.n128_u64[1])
  {
    v121 = (unint64_t *)(v853.n128_u64[1] + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v118 + 5) + 32))(*((_QWORD *)v118 + 5), 1);
  v123 = v868;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v852);
  MIL::IRParameter::Make(&v852, (uint64_t *)&__p);
  v124 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v123, "activation", (uint64_t *)&__p);
  v125 = __p;
  __p = 0;
  if (v125)
    (*(void (**)(void *))(*(_QWORD *)v125 + 8))(v125);
  v126 = (std::__shared_weak_count *)v852.n128_u64[1];
  if (v852.n128_u64[1])
  {
    v127 = (unint64_t *)(v852.n128_u64[1] + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v124 + 5) + 32))(*((_QWORD *)v124 + 5), 1);
  v129 = v868;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 5);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v851);
  MIL::IRParameter::Make(&v851, (uint64_t *)&__p);
  v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v129, "clip", (uint64_t *)&__p);
  v131 = __p;
  __p = 0;
  if (v131)
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
  v132 = (std::__shared_weak_count *)v851.n128_u64[1];
  if (v851.n128_u64[1])
  {
    v133 = (unint64_t *)(v851.n128_u64[1] + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v130 + 5) + 32))(*((_QWORD *)v130 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v130 + 5) + 48))(*((_QWORD *)v130 + 5), 1);
  v850 = 0;
  v135 = operator new();
  *(_QWORD *)v135 = 0;
  *(_QWORD *)(v135 + 8) = 0;
  *(_QWORD *)(v135 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v850, (void **)v135);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v850, 3uLL);
  v136 = v850;
  v137 = MIL::IRUnknownDimension::Make(a1, 0);
  v138 = MIL::IRUnknownDimension::Make(a1, 0);
  v139 = MIL::IRUnknownDimension::Make(a1, 0);
  v140 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v140->__get_deleter;
  p_on_zero_shared = &v140->__get_deleter;
  v140->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v137;
  v140->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v138;
  v140->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v139;
  Scalar = v140;
  v887 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v887, 1, &v848);
  MIL::IRParameter::Make(&v848, &v849);
  v141 = v849;
  v888 = v849;
  if (v849)
  {
    v142 = (_QWORD *)operator new();
    v143 = v849;
    *v142 = &unk_1EA99F888;
    v142[1] = 0;
    v142[2] = 0;
    v142[3] = v143;
  }
  else
  {
    v142 = 0;
  }
  v889 = v142;
  v849 = 0;
  v144 = v136[2];
  v145 = v136[1];
  if (v145 >= v144)
  {
    v147 = (v145 - *v136) >> 4;
    v148 = v147 + 1;
    if ((unint64_t)(v147 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v149 = v144 - *v136;
    if (v149 >> 3 > v148)
      v148 = v149 >> 3;
    if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0)
      v150 = 0xFFFFFFFFFFFFFFFLL;
    else
      v150 = v148;
    v873 = v136 + 2;
    v151 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v136 + 2), v150);
    v153 = (uint64_t *)&v151[16 * v147];
    *v153 = v141;
    v153[1] = (uint64_t)v142;
    v888 = 0;
    v889 = 0;
    v155 = *v136;
    v154 = v136[1];
    if (v154 == *v136)
    {
      v158 = v136[1];
      v156 = &v151[16 * v147];
    }
    else
    {
      v156 = &v151[16 * v147];
      do
      {
        v157 = *((_OWORD *)v154 - 1);
        v154 -= 16;
        *((_OWORD *)v156 - 1) = v157;
        v156 -= 16;
        *(_QWORD *)v154 = 0;
        *((_QWORD *)v154 + 1) = 0;
      }
      while (v154 != v155);
      v158 = *v136;
      v154 = v136[1];
    }
    v146 = (char *)(v153 + 2);
    *v136 = v156;
    v870 = v158;
    v136[1] = (char *)(v153 + 2);
    v871 = v154;
    v159 = v136[2];
    v136[2] = &v151[16 * v152];
    v872 = v159;
    __p = v158;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v145 = v141;
    *((_QWORD *)v145 + 1) = v142;
    v146 = v145 + 16;
    v888 = 0;
    v889 = 0;
  }
  v136[1] = v146;
  v160 = v849;
  v849 = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  v161 = (std::__shared_weak_count *)v848.n128_u64[1];
  if (v848.n128_u64[1])
  {
    v162 = (unint64_t *)(v848.n128_u64[1] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v164 = v850;
  v165 = MIL::IRUnknownDimension::Make(a1, 0);
  v166 = MIL::IRUnknownDimension::Make(a1, 0);
  v167 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v167->__on_zero_shared;
  p_on_zero_shared = &v167->__on_zero_shared;
  v167->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v165;
  v167->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v166;
  Scalar = v167;
  v887 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v887, 1, &v847);
  MIL::IRParameter::Make(&v847, &v849);
  v168 = v849;
  v888 = v849;
  if (v849)
  {
    v169 = (_QWORD *)operator new();
    v170 = v849;
    *v169 = &unk_1EA99F888;
    v169[1] = 0;
    v169[2] = 0;
    v169[3] = v170;
  }
  else
  {
    v169 = 0;
  }
  v889 = v169;
  v849 = 0;
  v171 = v164[2];
  v172 = v164[1];
  if (v172 >= v171)
  {
    v174 = (v172 - *v164) >> 4;
    v175 = v174 + 1;
    if ((unint64_t)(v174 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v176 = v171 - *v164;
    if (v176 >> 3 > v175)
      v175 = v176 >> 3;
    if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF0)
      v177 = 0xFFFFFFFFFFFFFFFLL;
    else
      v177 = v175;
    v873 = v164 + 2;
    v178 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v164 + 2), v177);
    v180 = (uint64_t *)&v178[16 * v174];
    *v180 = v168;
    v180[1] = (uint64_t)v169;
    v888 = 0;
    v889 = 0;
    v182 = *v164;
    v181 = v164[1];
    if (v181 == *v164)
    {
      v185 = v164[1];
      v183 = &v178[16 * v174];
    }
    else
    {
      v183 = &v178[16 * v174];
      do
      {
        v184 = *((_OWORD *)v181 - 1);
        v181 -= 16;
        *((_OWORD *)v183 - 1) = v184;
        v183 -= 16;
        *(_QWORD *)v181 = 0;
        *((_QWORD *)v181 + 1) = 0;
      }
      while (v181 != v182);
      v185 = *v164;
      v181 = v164[1];
    }
    v173 = (char *)(v180 + 2);
    *v164 = v183;
    v870 = v185;
    v164[1] = (char *)(v180 + 2);
    v871 = v181;
    v186 = v164[2];
    v164[2] = &v178[16 * v179];
    v872 = v186;
    __p = v185;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v172 = v168;
    *((_QWORD *)v172 + 1) = v169;
    v173 = v172 + 16;
    v888 = 0;
    v889 = 0;
  }
  v164[1] = v173;
  v187 = v849;
  v849 = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = (std::__shared_weak_count *)v847.n128_u64[1];
  if (v847.n128_u64[1])
  {
    v189 = (unint64_t *)(v847.n128_u64[1] + 8);
    do
      v190 = __ldaxr(v189);
    while (__stlxr(v190 - 1, v189));
    if (!v190)
    {
      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
      std::__shared_weak_count::__release_weak(v188);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v191 = v850;
  v192 = MIL::IRUnknownDimension::Make(a1, 0);
  v193 = MIL::IRUnknownDimension::Make(a1, 0);
  v194 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v194->__on_zero_shared;
  p_on_zero_shared = &v194->__on_zero_shared;
  v194->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v192;
  v194->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v193;
  Scalar = v194;
  v887 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v887, 1, &v846);
  MIL::IRParameter::Make(&v846, &v849);
  v195 = v849;
  v888 = v849;
  if (v849)
  {
    v196 = (_QWORD *)operator new();
    v197 = v849;
    *v196 = &unk_1EA99F888;
    v196[1] = 0;
    v196[2] = 0;
    v196[3] = v197;
  }
  else
  {
    v196 = 0;
  }
  v889 = v196;
  v849 = 0;
  v198 = v191[2];
  v199 = v191[1];
  if (v199 >= v198)
  {
    v201 = (v199 - *v191) >> 4;
    v202 = v201 + 1;
    if ((unint64_t)(v201 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v203 = v198 - *v191;
    if (v203 >> 3 > v202)
      v202 = v203 >> 3;
    if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFF0)
      v204 = 0xFFFFFFFFFFFFFFFLL;
    else
      v204 = v202;
    v873 = v191 + 2;
    v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v191 + 2), v204);
    v207 = (uint64_t *)&v205[16 * v201];
    *v207 = v195;
    v207[1] = (uint64_t)v196;
    v888 = 0;
    v889 = 0;
    v209 = *v191;
    v208 = v191[1];
    if (v208 == *v191)
    {
      v212 = v191[1];
      v210 = &v205[16 * v201];
    }
    else
    {
      v210 = &v205[16 * v201];
      do
      {
        v211 = *((_OWORD *)v208 - 1);
        v208 -= 16;
        *((_OWORD *)v210 - 1) = v211;
        v210 -= 16;
        *(_QWORD *)v208 = 0;
        *((_QWORD *)v208 + 1) = 0;
      }
      while (v208 != v209);
      v212 = *v191;
      v208 = v191[1];
    }
    v200 = (char *)(v207 + 2);
    *v191 = v210;
    v870 = v212;
    v191[1] = (char *)(v207 + 2);
    v871 = v208;
    v213 = v191[2];
    v191[2] = &v205[16 * v206];
    v872 = v213;
    __p = v212;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v199 = v195;
    *((_QWORD *)v199 + 1) = v196;
    v200 = v199 + 16;
    v888 = 0;
    v889 = 0;
  }
  v191[1] = v200;
  v214 = v849;
  v849 = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  v215 = (std::__shared_weak_count *)v846.n128_u64[1];
  if (v846.n128_u64[1])
  {
    v216 = (unint64_t *)(v846.n128_u64[1] + 8);
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v844 = *(_OWORD *)a2;
  v845 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v218 = (uint64_t)v868;
  *(_QWORD *)&v843 = v868;
  if (v868)
  {
    v219 = (_QWORD *)operator new();
    *v219 = &unk_1EA99F8E8;
    v219[1] = 0;
    v219[2] = 0;
    v219[3] = v218;
  }
  else
  {
    v219 = 0;
  }
  *((_QWORD *)&v843 + 1) = v219;
  v868 = 0;
  *(_QWORD *)&v842 = v850;
  if (v850)
  {
    v220 = (_QWORD *)operator new();
    v221 = v850;
    *v220 = &unk_1EA99F948;
    v220[1] = 0;
    v220[2] = 0;
    v220[3] = v221;
  }
  else
  {
    v220 = 0;
  }
  *((_QWORD *)&v842 + 1) = v220;
  v850 = 0;
  v885[0] = &unk_1EA99FAC8;
  v885[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateLSTM;
  v886 = v885;
  v884 = 0;
  MIL::IROperator::Make((__int128 *)v844, &v843, &v842, (uint64_t)v885, (uint64_t)v883, a3);
  v222 = v884;
  if (v884 == v883)
  {
    v223 = 4;
    v222 = v883;
  }
  else
  {
    if (!v884)
      goto LABEL_231;
    v223 = 5;
  }
  (*(void (**)(void))(*v222 + 8 * v223))();
LABEL_231:
  v224 = v886;
  if (v886 == v885)
  {
    v225 = 4;
    v224 = v885;
    goto LABEL_235;
  }
  if (v886)
  {
    v225 = 5;
LABEL_235:
    (*(void (**)(void))(*v224 + 8 * v225))();
  }
  v226 = (std::__shared_weak_count *)*((_QWORD *)&v842 + 1);
  if (*((_QWORD *)&v842 + 1))
  {
    v227 = (unint64_t *)(*((_QWORD *)&v842 + 1) + 8);
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
      std::__shared_weak_count::__release_weak(v226);
    }
  }
  v229 = (std::__shared_weak_count *)*((_QWORD *)&v843 + 1);
  if (*((_QWORD *)&v843 + 1))
  {
    v230 = (unint64_t *)(*((_QWORD *)&v843 + 1) + 8);
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  if (SHIBYTE(v845) < 0)
    operator delete(v844[0]);
  v888 = 0;
  v232 = operator new();
  *(_OWORD *)v232 = 0u;
  *(_OWORD *)(v232 + 16) = 0u;
  *(_DWORD *)(v232 + 32) = 1065353216;
  v888 = v232;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v841);
  MIL::IRParameter::Make(&v841, (uint64_t *)&__p);
  v233 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v232, "minimum_compute_type", (uint64_t *)&__p);
  v234 = __p;
  __p = 0;
  if (v234)
    (*(void (**)(void *))(*(_QWORD *)v234 + 8))(v234);
  v235 = (std::__shared_weak_count *)v841.n128_u64[1];
  if (v841.n128_u64[1])
  {
    v236 = (unint64_t *)(v841.n128_u64[1] + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v233 + 5) + 32))(*((_QWORD *)v233 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v233 + 5) + 48))(*((_QWORD *)v233 + 5), 1);
  v238 = *a3;
  v239 = v888;
  v839 = v888;
  if (v888)
  {
    v240 = (std::__shared_weak_count *)operator new();
    v240->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v240->__shared_owners_ = 0;
    v240->__shared_weak_owners_ = 0;
    v240[1].__vftable = (std::__shared_weak_count_vtbl *)v239;
  }
  else
  {
    v240 = 0;
  }
  v840 = v240;
  v888 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v238 + 184))(v238, &v839);
  v241 = v840;
  if (v840)
  {
    p_shared_owners = (unint64_t *)&v840->__shared_owners_;
    do
      v243 = __ldaxr(p_shared_owners);
    while (__stlxr(v243 - 1, p_shared_owners));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v244 = *a3;
  v881[0] = &off_1EA99FBD8;
  v881[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceLSTM;
  v882 = v881;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v244 + 200))(v244, v881);
  v245 = v882;
  if (v882 == v881)
  {
    v246 = 4;
    v245 = v881;
  }
  else
  {
    if (!v882)
      goto LABEL_268;
    v246 = 5;
  }
  (*(void (**)(void))(*v245 + 8 * v246))();
LABEL_268:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v247 = __p;
  std::string::basic_string[abi:ne180100]<0>(v835, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v835, 0, (uint64_t *)&Scalar);
  v837 = Scalar;
  if (Scalar)
  {
    v248 = (std::__shared_weak_count *)operator new();
    v249 = Scalar;
    v248->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v248->__shared_owners_ = 0;
    v248->__shared_weak_owners_ = 0;
    v248[1].__vftable = v249;
  }
  else
  {
    v248 = 0;
  }
  v838 = v248;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v833, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v247 + 24))(v247, &v837, v833);
  if (v834 < 0)
    operator delete(v833[0]);
  v250 = v838;
  if (v838)
  {
    v251 = (unint64_t *)&v838->__shared_owners_;
    do
      v252 = __ldaxr(v251);
    while (__stlxr(v252 - 1, v251));
    if (!v252)
    {
      ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
      std::__shared_weak_count::__release_weak(v250);
    }
  }
  v253 = Scalar;
  Scalar = 0;
  if (v253)
    (*((void (**)(std::__shared_weak_count_vtbl *))v253->~__shared_weak_count + 1))(v253);
  if (v836 < 0)
    operator delete(v835[0]);
  v254 = __p;
  std::string::basic_string[abi:ne180100]<0>(v829, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v829, 0, (uint64_t *)&Scalar);
  v831 = Scalar;
  if (Scalar)
  {
    v255 = (std::__shared_weak_count *)operator new();
    v256 = Scalar;
    v255->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v255->__shared_owners_ = 0;
    v255->__shared_weak_owners_ = 0;
    v255[1].__vftable = v256;
  }
  else
  {
    v255 = 0;
  }
  v832 = v255;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v827, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v254 + 24))(v254, &v831, v827);
  if (v828 < 0)
    operator delete(v827[0]);
  v257 = v832;
  if (v832)
  {
    v258 = (unint64_t *)&v832->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = Scalar;
  Scalar = 0;
  if (v260)
    (*((void (**)(std::__shared_weak_count_vtbl *))v260->~__shared_weak_count + 1))(v260);
  if (v830 < 0)
    operator delete(v829[0]);
  v261 = __p;
  std::string::basic_string[abi:ne180100]<0>(v823, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v823, 0, (uint64_t *)&Scalar);
  v825 = Scalar;
  if (Scalar)
  {
    v262 = (std::__shared_weak_count *)operator new();
    v263 = Scalar;
    v262->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v262->__shared_owners_ = 0;
    v262->__shared_weak_owners_ = 0;
    v262[1].__vftable = v263;
  }
  else
  {
    v262 = 0;
  }
  v826 = v262;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v821, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v261 + 24))(v261, &v825, v821);
  if (v822 < 0)
    operator delete(v821[0]);
  v264 = v826;
  if (v826)
  {
    v265 = (unint64_t *)&v826->__shared_owners_;
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  v267 = Scalar;
  Scalar = 0;
  if (v267)
    (*((void (**)(std::__shared_weak_count_vtbl *))v267->~__shared_weak_count + 1))(v267);
  if (v824 < 0)
    operator delete(v823[0]);
  v268 = __p;
  std::string::basic_string[abi:ne180100]<0>(v817, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v817, 0, (uint64_t *)&Scalar);
  v819 = Scalar;
  if (Scalar)
  {
    v269 = (std::__shared_weak_count *)operator new();
    v270 = Scalar;
    v269->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v269->__shared_owners_ = 0;
    v269->__shared_weak_owners_ = 0;
    v269[1].__vftable = v270;
  }
  else
  {
    v269 = 0;
  }
  v820 = v269;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v815, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v268 + 24))(v268, &v819, v815);
  if (v816 < 0)
    operator delete(v815[0]);
  v271 = v820;
  if (v820)
  {
    v272 = (unint64_t *)&v820->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = Scalar;
  Scalar = 0;
  if (v274)
    (*((void (**)(std::__shared_weak_count_vtbl *))v274->~__shared_weak_count + 1))(v274);
  if (v818 < 0)
    operator delete(v817[0]);
  v275 = __p;
  std::string::basic_string[abi:ne180100]<0>(v811, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v811, 0, (uint64_t *)&Scalar);
  v813 = Scalar;
  if (Scalar)
  {
    v276 = (std::__shared_weak_count *)operator new();
    v277 = Scalar;
    v276->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v276->__shared_owners_ = 0;
    v276->__shared_weak_owners_ = 0;
    v276[1].__vftable = v277;
  }
  else
  {
    v276 = 0;
  }
  v814 = v276;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v809, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v275 + 24))(v275, &v813, v809);
  if (v810 < 0)
    operator delete(v809[0]);
  v278 = v814;
  if (v814)
  {
    v279 = (unint64_t *)&v814->__shared_owners_;
    do
      v280 = __ldaxr(v279);
    while (__stlxr(v280 - 1, v279));
    if (!v280)
    {
      ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
      std::__shared_weak_count::__release_weak(v278);
    }
  }
  v281 = Scalar;
  Scalar = 0;
  if (v281)
    (*((void (**)(std::__shared_weak_count_vtbl *))v281->~__shared_weak_count + 1))(v281);
  if (v812 < 0)
    operator delete(v811[0]);
  v282 = __p;
  std::string::basic_string[abi:ne180100]<0>(v805, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v805, 1, (uint64_t *)&Scalar);
  v807 = Scalar;
  if (Scalar)
  {
    v283 = (std::__shared_weak_count *)operator new();
    v284 = Scalar;
    v283->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v283->__shared_owners_ = 0;
    v283->__shared_weak_owners_ = 0;
    v283[1].__vftable = v284;
  }
  else
  {
    v283 = 0;
  }
  v808 = v283;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v803, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v282 + 24))(v282, &v807, v803);
  if (v804 < 0)
    operator delete(v803[0]);
  v285 = v808;
  if (v808)
  {
    v286 = (unint64_t *)&v808->__shared_owners_;
    do
      v287 = __ldaxr(v286);
    while (__stlxr(v287 - 1, v286));
    if (!v287)
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
  v288 = Scalar;
  Scalar = 0;
  if (v288)
    (*((void (**)(std::__shared_weak_count_vtbl *))v288->~__shared_weak_count + 1))(v288);
  if (v806 < 0)
    operator delete(v805[0]);
  v289 = __p;
  std::string::basic_string[abi:ne180100]<0>(v799, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v799, 1, (uint64_t *)&Scalar);
  v801 = Scalar;
  if (Scalar)
  {
    v290 = (std::__shared_weak_count *)operator new();
    v291 = Scalar;
    v290->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v290->__shared_owners_ = 0;
    v290->__shared_weak_owners_ = 0;
    v290[1].__vftable = v291;
  }
  else
  {
    v290 = 0;
  }
  v802 = v290;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v797, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v289 + 24))(v289, &v801, v797);
  if (v798 < 0)
    operator delete(v797[0]);
  v292 = v802;
  if (v802)
  {
    v293 = (unint64_t *)&v802->__shared_owners_;
    do
      v294 = __ldaxr(v293);
    while (__stlxr(v294 - 1, v293));
    if (!v294)
    {
      ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
      std::__shared_weak_count::__release_weak(v292);
    }
  }
  v295 = Scalar;
  Scalar = 0;
  if (v295)
    (*((void (**)(std::__shared_weak_count_vtbl *))v295->~__shared_weak_count + 1))(v295);
  if (v800 < 0)
    operator delete(v799[0]);
  v296 = __p;
  std::string::basic_string[abi:ne180100]<0>(v793, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v793, 1, (uint64_t *)&Scalar);
  v795 = Scalar;
  if (Scalar)
  {
    v297 = (std::__shared_weak_count *)operator new();
    v298 = Scalar;
    v297->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v297->__shared_owners_ = 0;
    v297->__shared_weak_owners_ = 0;
    v297[1].__vftable = v298;
  }
  else
  {
    v297 = 0;
  }
  v796 = v297;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v791, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v296 + 24))(v296, &v795, v791);
  if (v792 < 0)
    operator delete(v791[0]);
  v299 = v796;
  if (v796)
  {
    v300 = (unint64_t *)&v796->__shared_owners_;
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  v302 = Scalar;
  Scalar = 0;
  if (v302)
    (*((void (**)(std::__shared_weak_count_vtbl *))v302->~__shared_weak_count + 1))(v302);
  if (v794 < 0)
    operator delete(v793[0]);
  v303 = __p;
  std::string::basic_string[abi:ne180100]<0>(v787, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v787, 1, (uint64_t *)&Scalar);
  v789 = Scalar;
  if (Scalar)
  {
    v304 = (std::__shared_weak_count *)operator new();
    v305 = Scalar;
    v304->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v304->__shared_owners_ = 0;
    v304->__shared_weak_owners_ = 0;
    v304[1].__vftable = v305;
  }
  else
  {
    v304 = 0;
  }
  v790 = v304;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v785, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v303 + 24))(v303, &v789, v785);
  if (v786 < 0)
    operator delete(v785[0]);
  v306 = v790;
  if (v790)
  {
    v307 = (unint64_t *)&v790->__shared_owners_;
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = Scalar;
  Scalar = 0;
  if (v309)
    (*((void (**)(std::__shared_weak_count_vtbl *))v309->~__shared_weak_count + 1))(v309);
  if (v788 < 0)
    operator delete(v787[0]);
  v310 = __p;
  std::string::basic_string[abi:ne180100]<0>(v781, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v781, 1, (uint64_t *)&Scalar);
  v783 = Scalar;
  if (Scalar)
  {
    v311 = (std::__shared_weak_count *)operator new();
    v312 = Scalar;
    v311->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v311->__shared_owners_ = 0;
    v311->__shared_weak_owners_ = 0;
    v311[1].__vftable = v312;
  }
  else
  {
    v311 = 0;
  }
  v784 = v311;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v779, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v310 + 24))(v310, &v783, v779);
  if (v780 < 0)
    operator delete(v779[0]);
  v313 = v784;
  if (v784)
  {
    v314 = (unint64_t *)&v784->__shared_owners_;
    do
      v315 = __ldaxr(v314);
    while (__stlxr(v315 - 1, v314));
    if (!v315)
    {
      ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
      std::__shared_weak_count::__release_weak(v313);
    }
  }
  v316 = Scalar;
  Scalar = 0;
  if (v316)
    (*((void (**)(std::__shared_weak_count_vtbl *))v316->~__shared_weak_count + 1))(v316);
  if (v782 < 0)
    operator delete(v781[0]);
  v317 = __p;
  std::string::basic_string[abi:ne180100]<0>(v775, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v775, 1, (uint64_t *)&Scalar);
  v777 = Scalar;
  if (Scalar)
  {
    v318 = (std::__shared_weak_count *)operator new();
    v319 = Scalar;
    v318->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v318->__shared_owners_ = 0;
    v318->__shared_weak_owners_ = 0;
    v318[1].__vftable = v319;
  }
  else
  {
    v318 = 0;
  }
  v778 = v318;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v773, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v317 + 24))(v317, &v777, v773);
  if (v774 < 0)
    operator delete(v773[0]);
  v320 = v778;
  if (v778)
  {
    v321 = (unint64_t *)&v778->__shared_owners_;
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  v323 = Scalar;
  Scalar = 0;
  if (v323)
    (*((void (**)(std::__shared_weak_count_vtbl *))v323->~__shared_weak_count + 1))(v323);
  if (v776 < 0)
    operator delete(v775[0]);
  v324 = __p;
  std::string::basic_string[abi:ne180100]<0>(v769, "clip");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v769, 1, (uint64_t *)&Scalar);
  v771 = Scalar;
  if (Scalar)
  {
    v325 = (std::__shared_weak_count *)operator new();
    v326 = Scalar;
    v325->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v325->__shared_owners_ = 0;
    v325->__shared_weak_owners_ = 0;
    v325[1].__vftable = v326;
  }
  else
  {
    v325 = 0;
  }
  v772 = v325;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v767, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v324 + 24))(v324, &v771, v767);
  if (v768 < 0)
    operator delete(v767[0]);
  v327 = v772;
  if (v772)
  {
    v328 = (unint64_t *)&v772->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  v330 = Scalar;
  Scalar = 0;
  if (v330)
    (*((void (**)(std::__shared_weak_count_vtbl *))v330->~__shared_weak_count + 1))(v330);
  if (v770 < 0)
    operator delete(v769[0]);
  v331 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v765 = Scalar;
  if (Scalar)
  {
    v332 = (std::__shared_weak_count *)operator new();
    v333 = Scalar;
    v332->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v332->__shared_owners_ = 0;
    v332->__shared_weak_owners_ = 0;
    v332[1].__vftable = v333;
  }
  else
  {
    v332 = 0;
  }
  v766 = v332;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v763, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v331 + 24))(v331, &v765, v763);
  if (v764 < 0)
    operator delete(v763[0]);
  v334 = v766;
  if (v766)
  {
    v335 = (unint64_t *)&v766->__shared_owners_;
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  v337 = Scalar;
  Scalar = 0;
  if (v337)
    (*((void (**)(std::__shared_weak_count_vtbl *))v337->~__shared_weak_count + 1))(v337);
  v338 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v761 = Scalar;
  if (Scalar)
  {
    v339 = (std::__shared_weak_count *)operator new();
    v340 = Scalar;
    v339->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v339->__shared_owners_ = 0;
    v339->__shared_weak_owners_ = 0;
    v339[1].__vftable = v340;
  }
  else
  {
    v339 = 0;
  }
  v762 = v339;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v759, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v338 + 24))(v338, &v761, v759);
  if (v760 < 0)
    operator delete(v759[0]);
  v341 = v762;
  if (v762)
  {
    v342 = (unint64_t *)&v762->__shared_owners_;
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v344 = Scalar;
  Scalar = 0;
  if (v344)
    (*((void (**)(std::__shared_weak_count_vtbl *))v344->~__shared_weak_count + 1))(v344);
  v345 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v757 = Scalar;
  if (Scalar)
  {
    v346 = (std::__shared_weak_count *)operator new();
    v347 = Scalar;
    v346->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v346->__shared_owners_ = 0;
    v346->__shared_weak_owners_ = 0;
    v346[1].__vftable = v347;
  }
  else
  {
    v346 = 0;
  }
  v758 = v346;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v755, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v345 + 24))(v345, &v757, v755);
  if (v756 < 0)
    operator delete(v755[0]);
  v348 = v758;
  if (v758)
  {
    v349 = (unint64_t *)&v758->__shared_owners_;
    do
      v350 = __ldaxr(v349);
    while (__stlxr(v350 - 1, v349));
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
  }
  v351 = Scalar;
  Scalar = 0;
  if (v351)
    (*((void (**)(std::__shared_weak_count_vtbl *))v351->~__shared_weak_count + 1))(v351);
  v352 = *a3;
  v753 = __p;
  if (__p)
  {
    v353 = (std::__shared_weak_count *)operator new();
    v354 = (std::__shared_weak_count_vtbl *)__p;
    v353->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v353->__shared_owners_ = 0;
    v353->__shared_weak_owners_ = 0;
    v353[1].__vftable = v354;
  }
  else
  {
    v353 = 0;
  }
  v754 = v353;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v352 + 56))(v352, &v753);
  v355 = v754;
  if (v754)
  {
    v356 = (unint64_t *)&v754->__shared_owners_;
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  v358 = __p;
  __p = 0;
  if (v358)
    (*(void (**)(void *))(*(_QWORD *)v358 + 8))(v358);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v359 = __p;
  std::string::basic_string[abi:ne180100]<0>(v749, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v749, 0, (uint64_t *)&Scalar);
  v751 = Scalar;
  if (Scalar)
  {
    v360 = (std::__shared_weak_count *)operator new();
    v361 = Scalar;
    v360->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v360->__shared_owners_ = 0;
    v360->__shared_weak_owners_ = 0;
    v360[1].__vftable = v361;
  }
  else
  {
    v360 = 0;
  }
  v752 = v360;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v747, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v359 + 24))(v359, &v751, 0, v747);
  if (v748 < 0)
    operator delete(v747[0]);
  v362 = v752;
  if (v752)
  {
    v363 = (unint64_t *)&v752->__shared_owners_;
    do
      v364 = __ldaxr(v363);
    while (__stlxr(v364 - 1, v363));
    if (!v364)
    {
      ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
      std::__shared_weak_count::__release_weak(v362);
    }
  }
  v365 = Scalar;
  Scalar = 0;
  if (v365)
    (*((void (**)(std::__shared_weak_count_vtbl *))v365->~__shared_weak_count + 1))(v365);
  if (v750 < 0)
    operator delete(v749[0]);
  v366 = __p;
  std::string::basic_string[abi:ne180100]<0>(v743, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v743, 0, (uint64_t *)&Scalar);
  v745 = Scalar;
  if (Scalar)
  {
    v367 = (std::__shared_weak_count *)operator new();
    v368 = Scalar;
    v367->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v367->__shared_owners_ = 0;
    v367->__shared_weak_owners_ = 0;
    v367[1].__vftable = v368;
  }
  else
  {
    v367 = 0;
  }
  v746 = v367;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v741, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v366 + 24))(v366, &v745, 1, v741);
  if (v742 < 0)
    operator delete(v741[0]);
  v369 = v746;
  if (v746)
  {
    v370 = (unint64_t *)&v746->__shared_owners_;
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  v372 = Scalar;
  Scalar = 0;
  if (v372)
    (*((void (**)(std::__shared_weak_count_vtbl *))v372->~__shared_weak_count + 1))(v372);
  if (v744 < 0)
    operator delete(v743[0]);
  v373 = __p;
  std::string::basic_string[abi:ne180100]<0>(v737, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v737, 0, (uint64_t *)&Scalar);
  v739 = Scalar;
  if (Scalar)
  {
    v374 = (std::__shared_weak_count *)operator new();
    v375 = Scalar;
    v374->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v374->__shared_owners_ = 0;
    v374->__shared_weak_owners_ = 0;
    v374[1].__vftable = v375;
  }
  else
  {
    v374 = 0;
  }
  v740 = v374;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v735, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v373 + 24))(v373, &v739, 2, v735);
  if (v736 < 0)
    operator delete(v735[0]);
  v376 = v740;
  if (v740)
  {
    v377 = (unint64_t *)&v740->__shared_owners_;
    do
      v378 = __ldaxr(v377);
    while (__stlxr(v378 - 1, v377));
    if (!v378)
    {
      ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
      std::__shared_weak_count::__release_weak(v376);
    }
  }
  v379 = Scalar;
  Scalar = 0;
  if (v379)
    (*((void (**)(std::__shared_weak_count_vtbl *))v379->~__shared_weak_count + 1))(v379);
  if (v738 < 0)
    operator delete(v737[0]);
  v380 = __p;
  std::string::basic_string[abi:ne180100]<0>(v731, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v731, 0, (uint64_t *)&Scalar);
  v733 = Scalar;
  if (Scalar)
  {
    v381 = (std::__shared_weak_count *)operator new();
    v382 = Scalar;
    v381->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v381->__shared_owners_ = 0;
    v381->__shared_weak_owners_ = 0;
    v381[1].__vftable = v382;
  }
  else
  {
    v381 = 0;
  }
  v734 = v381;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v729, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v380 + 24))(v380, &v733, 0, v729);
  if (v730 < 0)
    operator delete(v729[0]);
  v383 = v734;
  if (v734)
  {
    v384 = (unint64_t *)&v734->__shared_owners_;
    do
      v385 = __ldaxr(v384);
    while (__stlxr(v385 - 1, v384));
    if (!v385)
    {
      ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
      std::__shared_weak_count::__release_weak(v383);
    }
  }
  v386 = Scalar;
  Scalar = 0;
  if (v386)
    (*((void (**)(std::__shared_weak_count_vtbl *))v386->~__shared_weak_count + 1))(v386);
  if (v732 < 0)
    operator delete(v731[0]);
  v387 = __p;
  std::string::basic_string[abi:ne180100]<0>(v725, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v725, 0, (uint64_t *)&Scalar);
  v727 = Scalar;
  if (Scalar)
  {
    v388 = (std::__shared_weak_count *)operator new();
    v389 = Scalar;
    v388->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v388->__shared_owners_ = 0;
    v388->__shared_weak_owners_ = 0;
    v388[1].__vftable = v389;
  }
  else
  {
    v388 = 0;
  }
  v728 = v388;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v723, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v387 + 24))(v387, &v727, 1, v723);
  if (v724 < 0)
    operator delete(v723[0]);
  v390 = v728;
  if (v728)
  {
    v391 = (unint64_t *)&v728->__shared_owners_;
    do
      v392 = __ldaxr(v391);
    while (__stlxr(v392 - 1, v391));
    if (!v392)
    {
      ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
      std::__shared_weak_count::__release_weak(v390);
    }
  }
  v393 = Scalar;
  Scalar = 0;
  if (v393)
    (*((void (**)(std::__shared_weak_count_vtbl *))v393->~__shared_weak_count + 1))(v393);
  if (v726 < 0)
    operator delete(v725[0]);
  v394 = __p;
  std::string::basic_string[abi:ne180100]<0>(v719, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v719, 0, (uint64_t *)&Scalar);
  v721 = Scalar;
  if (Scalar)
  {
    v395 = (std::__shared_weak_count *)operator new();
    v396 = Scalar;
    v395->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v395->__shared_owners_ = 0;
    v395->__shared_weak_owners_ = 0;
    v395[1].__vftable = v396;
  }
  else
  {
    v395 = 0;
  }
  v722 = v395;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v717, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v394 + 24))(v394, &v721, 0, v717);
  if (v718 < 0)
    operator delete(v717[0]);
  v397 = v722;
  if (v722)
  {
    v398 = (unint64_t *)&v722->__shared_owners_;
    do
      v399 = __ldaxr(v398);
    while (__stlxr(v399 - 1, v398));
    if (!v399)
    {
      ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
      std::__shared_weak_count::__release_weak(v397);
    }
  }
  v400 = Scalar;
  Scalar = 0;
  if (v400)
    (*((void (**)(std::__shared_weak_count_vtbl *))v400->~__shared_weak_count + 1))(v400);
  if (v720 < 0)
    operator delete(v719[0]);
  v401 = __p;
  std::string::basic_string[abi:ne180100]<0>(v713, "initial_c");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v713, 0, (uint64_t *)&Scalar);
  v715 = Scalar;
  if (Scalar)
  {
    v402 = (std::__shared_weak_count *)operator new();
    v403 = Scalar;
    v402->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v402->__shared_owners_ = 0;
    v402->__shared_weak_owners_ = 0;
    v402[1].__vftable = v403;
  }
  else
  {
    v402 = 0;
  }
  v716 = v402;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v711, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v401 + 24))(v401, &v715, 1, v711);
  if (v712 < 0)
    operator delete(v711[0]);
  v404 = v716;
  if (v716)
  {
    v405 = (unint64_t *)&v716->__shared_owners_;
    do
      v406 = __ldaxr(v405);
    while (__stlxr(v406 - 1, v405));
    if (!v406)
    {
      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
      std::__shared_weak_count::__release_weak(v404);
    }
  }
  v407 = Scalar;
  Scalar = 0;
  if (v407)
    (*((void (**)(std::__shared_weak_count_vtbl *))v407->~__shared_weak_count + 1))(v407);
  if (v714 < 0)
    operator delete(v713[0]);
  v408 = __p;
  std::string::basic_string[abi:ne180100]<0>(v707, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v707, 0, (uint64_t *)&Scalar);
  v709 = Scalar;
  if (Scalar)
  {
    v409 = (std::__shared_weak_count *)operator new();
    v410 = Scalar;
    v409->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v409->__shared_owners_ = 0;
    v409->__shared_weak_owners_ = 0;
    v409[1].__vftable = v410;
  }
  else
  {
    v409 = 0;
  }
  v710 = v409;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v705, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v408 + 24))(v408, &v709, 0, v705);
  if (v706 < 0)
    operator delete(v705[0]);
  v411 = v710;
  if (v710)
  {
    v412 = (unint64_t *)&v710->__shared_owners_;
    do
      v413 = __ldaxr(v412);
    while (__stlxr(v413 - 1, v412));
    if (!v413)
    {
      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
      std::__shared_weak_count::__release_weak(v411);
    }
  }
  v414 = Scalar;
  Scalar = 0;
  if (v414)
    (*((void (**)(std::__shared_weak_count_vtbl *))v414->~__shared_weak_count + 1))(v414);
  if (v708 < 0)
    operator delete(v707[0]);
  v415 = __p;
  std::string::basic_string[abi:ne180100]<0>(v701, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v701, 0, (uint64_t *)&Scalar);
  v703 = Scalar;
  if (Scalar)
  {
    v416 = (std::__shared_weak_count *)operator new();
    v417 = Scalar;
    v416->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v416->__shared_owners_ = 0;
    v416->__shared_weak_owners_ = 0;
    v416[1].__vftable = v417;
  }
  else
  {
    v416 = 0;
  }
  v704 = v416;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v699, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v415 + 24))(v415, &v703, 1, v699);
  if (v700 < 0)
    operator delete(v699[0]);
  v418 = v704;
  if (v704)
  {
    v419 = (unint64_t *)&v704->__shared_owners_;
    do
      v420 = __ldaxr(v419);
    while (__stlxr(v420 - 1, v419));
    if (!v420)
    {
      ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
      std::__shared_weak_count::__release_weak(v418);
    }
  }
  v421 = Scalar;
  Scalar = 0;
  if (v421)
    (*((void (**)(std::__shared_weak_count_vtbl *))v421->~__shared_weak_count + 1))(v421);
  if (v702 < 0)
    operator delete(v701[0]);
  v422 = __p;
  std::string::basic_string[abi:ne180100]<0>(v695, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v695, 0, (uint64_t *)&Scalar);
  v697 = Scalar;
  if (Scalar)
  {
    v423 = (std::__shared_weak_count *)operator new();
    v424 = Scalar;
    v423->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v423->__shared_owners_ = 0;
    v423->__shared_weak_owners_ = 0;
    v423[1].__vftable = v424;
  }
  else
  {
    v423 = 0;
  }
  v698 = v423;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v693, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v422 + 24))(v422, &v697, 0, v693);
  if (v694 < 0)
    operator delete(v693[0]);
  v425 = v698;
  if (v698)
  {
    v426 = (unint64_t *)&v698->__shared_owners_;
    do
      v427 = __ldaxr(v426);
    while (__stlxr(v427 - 1, v426));
    if (!v427)
    {
      ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
      std::__shared_weak_count::__release_weak(v425);
    }
  }
  v428 = Scalar;
  Scalar = 0;
  if (v428)
    (*((void (**)(std::__shared_weak_count_vtbl *))v428->~__shared_weak_count + 1))(v428);
  if (v696 < 0)
    operator delete(v695[0]);
  v429 = __p;
  std::string::basic_string[abi:ne180100]<0>(v689, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v689, 0, (uint64_t *)&Scalar);
  v691 = Scalar;
  if (Scalar)
  {
    v430 = (std::__shared_weak_count *)operator new();
    v431 = Scalar;
    v430->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v430->__shared_owners_ = 0;
    v430->__shared_weak_owners_ = 0;
    v430[1].__vftable = v431;
  }
  else
  {
    v430 = 0;
  }
  v692 = v430;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v687, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v429 + 24))(v429, &v691, 1, v687);
  if (v688 < 0)
    operator delete(v687[0]);
  v432 = v692;
  if (v692)
  {
    v433 = (unint64_t *)&v692->__shared_owners_;
    do
      v434 = __ldaxr(v433);
    while (__stlxr(v434 - 1, v433));
    if (!v434)
    {
      ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
      std::__shared_weak_count::__release_weak(v432);
    }
  }
  v435 = Scalar;
  Scalar = 0;
  if (v435)
    (*((void (**)(std::__shared_weak_count_vtbl *))v435->~__shared_weak_count + 1))(v435);
  if (v690 < 0)
    operator delete(v689[0]);
  v436 = __p;
  std::string::basic_string[abi:ne180100]<0>(v683, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v683, 1, (uint64_t *)&Scalar);
  v685 = Scalar;
  if (Scalar)
  {
    v437 = (std::__shared_weak_count *)operator new();
    v438 = Scalar;
    v437->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v437->__shared_owners_ = 0;
    v437->__shared_weak_owners_ = 0;
    v437[1].__vftable = v438;
  }
  else
  {
    v437 = 0;
  }
  v686 = v437;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v681, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v436 + 24))(v436, &v685, 0, v681);
  if (v682 < 0)
    operator delete(v681[0]);
  v439 = v686;
  if (v686)
  {
    v440 = (unint64_t *)&v686->__shared_owners_;
    do
      v441 = __ldaxr(v440);
    while (__stlxr(v441 - 1, v440));
    if (!v441)
    {
      ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
      std::__shared_weak_count::__release_weak(v439);
    }
  }
  v442 = Scalar;
  Scalar = 0;
  if (v442)
    (*((void (**)(std::__shared_weak_count_vtbl *))v442->~__shared_weak_count + 1))(v442);
  if (v684 < 0)
    operator delete(v683[0]);
  v443 = __p;
  std::string::basic_string[abi:ne180100]<0>(v677, "peephole");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v677, 1, (uint64_t *)&Scalar);
  v679 = Scalar;
  if (Scalar)
  {
    v444 = (std::__shared_weak_count *)operator new();
    v445 = Scalar;
    v444->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v444->__shared_owners_ = 0;
    v444->__shared_weak_owners_ = 0;
    v444[1].__vftable = v445;
  }
  else
  {
    v444 = 0;
  }
  v680 = v444;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v675, "P_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v443 + 24))(v443, &v679, 0, v675);
  if (v676 < 0)
    operator delete(v675[0]);
  v446 = v680;
  if (v680)
  {
    v447 = (unint64_t *)&v680->__shared_owners_;
    do
      v448 = __ldaxr(v447);
    while (__stlxr(v448 - 1, v447));
    if (!v448)
    {
      ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
      std::__shared_weak_count::__release_weak(v446);
    }
  }
  v449 = Scalar;
  Scalar = 0;
  if (v449)
    (*((void (**)(std::__shared_weak_count_vtbl *))v449->~__shared_weak_count + 1))(v449);
  if (v678 < 0)
    operator delete(v677[0]);
  v450 = __p;
  std::string::basic_string[abi:ne180100]<0>(v671, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v671, 1, (uint64_t *)&Scalar);
  v673 = Scalar;
  if (Scalar)
  {
    v451 = (std::__shared_weak_count *)operator new();
    v452 = Scalar;
    v451->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v451->__shared_owners_ = 0;
    v451->__shared_weak_owners_ = 0;
    v451[1].__vftable = v452;
  }
  else
  {
    v451 = 0;
  }
  v674 = v451;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v669, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v450 + 24))(v450, &v673, 0, v669);
  if (v670 < 0)
    operator delete(v669[0]);
  v453 = v674;
  if (v674)
  {
    v454 = (unint64_t *)&v674->__shared_owners_;
    do
      v455 = __ldaxr(v454);
    while (__stlxr(v455 - 1, v454));
    if (!v455)
    {
      ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
      std::__shared_weak_count::__release_weak(v453);
    }
  }
  v456 = Scalar;
  Scalar = 0;
  if (v456)
    (*((void (**)(std::__shared_weak_count_vtbl *))v456->~__shared_weak_count + 1))(v456);
  if (v672 < 0)
    operator delete(v671[0]);
  v457 = __p;
  std::string::basic_string[abi:ne180100]<0>(v665, "weight_ih_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v665, 1, (uint64_t *)&Scalar);
  v667 = Scalar;
  if (Scalar)
  {
    v458 = (std::__shared_weak_count *)operator new();
    v459 = Scalar;
    v458->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v458->__shared_owners_ = 0;
    v458->__shared_weak_owners_ = 0;
    v458[1].__vftable = v459;
  }
  else
  {
    v458 = 0;
  }
  v668 = v458;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v663, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v457 + 24))(v457, &v667, 1, v663);
  if (v664 < 0)
    operator delete(v663[0]);
  v460 = v668;
  if (v668)
  {
    v461 = (unint64_t *)&v668->__shared_owners_;
    do
      v462 = __ldaxr(v461);
    while (__stlxr(v462 - 1, v461));
    if (!v462)
    {
      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
      std::__shared_weak_count::__release_weak(v460);
    }
  }
  v463 = Scalar;
  Scalar = 0;
  if (v463)
    (*((void (**)(std::__shared_weak_count_vtbl *))v463->~__shared_weak_count + 1))(v463);
  if (v666 < 0)
    operator delete(v665[0]);
  v464 = __p;
  std::string::basic_string[abi:ne180100]<0>(v659, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v659, 1, (uint64_t *)&Scalar);
  v661 = Scalar;
  if (Scalar)
  {
    v465 = (std::__shared_weak_count *)operator new();
    v466 = Scalar;
    v465->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v465->__shared_owners_ = 0;
    v465->__shared_weak_owners_ = 0;
    v465[1].__vftable = v466;
  }
  else
  {
    v465 = 0;
  }
  v662 = v465;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v657, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v464 + 24))(v464, &v661, 0, v657);
  if (v658 < 0)
    operator delete(v657[0]);
  v467 = v662;
  if (v662)
  {
    v468 = (unint64_t *)&v662->__shared_owners_;
    do
      v469 = __ldaxr(v468);
    while (__stlxr(v469 - 1, v468));
    if (!v469)
    {
      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
      std::__shared_weak_count::__release_weak(v467);
    }
  }
  v470 = Scalar;
  Scalar = 0;
  if (v470)
    (*((void (**)(std::__shared_weak_count_vtbl *))v470->~__shared_weak_count + 1))(v470);
  if (v660 < 0)
    operator delete(v659[0]);
  v471 = __p;
  std::string::basic_string[abi:ne180100]<0>(v653, "weight_hh_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v653, 1, (uint64_t *)&Scalar);
  v655 = Scalar;
  if (Scalar)
  {
    v472 = (std::__shared_weak_count *)operator new();
    v473 = Scalar;
    v472->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v472->__shared_owners_ = 0;
    v472->__shared_weak_owners_ = 0;
    v472[1].__vftable = v473;
  }
  else
  {
    v472 = 0;
  }
  v656 = v472;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v651, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v471 + 24))(v471, &v655, 1, v651);
  if (v652 < 0)
    operator delete(v651[0]);
  v474 = v656;
  if (v656)
  {
    v475 = (unint64_t *)&v656->__shared_owners_;
    do
      v476 = __ldaxr(v475);
    while (__stlxr(v476 - 1, v475));
    if (!v476)
    {
      ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
      std::__shared_weak_count::__release_weak(v474);
    }
  }
  v477 = Scalar;
  Scalar = 0;
  if (v477)
    (*((void (**)(std::__shared_weak_count_vtbl *))v477->~__shared_weak_count + 1))(v477);
  if (v654 < 0)
    operator delete(v653[0]);
  v478 = __p;
  std::string::basic_string[abi:ne180100]<0>(v647, "bias_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v647, 1, (uint64_t *)&Scalar);
  v649 = Scalar;
  if (Scalar)
  {
    v479 = (std::__shared_weak_count *)operator new();
    v480 = Scalar;
    v479->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v479->__shared_owners_ = 0;
    v479->__shared_weak_owners_ = 0;
    v479[1].__vftable = v480;
  }
  else
  {
    v479 = 0;
  }
  v650 = v479;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v645, "H_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v478 + 24))(v478, &v649, 0, v645);
  if (v646 < 0)
    operator delete(v645[0]);
  v481 = v650;
  if (v650)
  {
    v482 = (unint64_t *)&v650->__shared_owners_;
    do
      v483 = __ldaxr(v482);
    while (__stlxr(v483 - 1, v482));
    if (!v483)
    {
      ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
      std::__shared_weak_count::__release_weak(v481);
    }
  }
  v484 = Scalar;
  Scalar = 0;
  if (v484)
    (*((void (**)(std::__shared_weak_count_vtbl *))v484->~__shared_weak_count + 1))(v484);
  if (v648 < 0)
    operator delete(v647[0]);
  v485 = __p;
  std::string::basic_string[abi:ne180100]<0>(v641, "peephole_back");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v641, 1, (uint64_t *)&Scalar);
  v643 = Scalar;
  if (Scalar)
  {
    v486 = (std::__shared_weak_count *)operator new();
    v487 = Scalar;
    v486->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v486->__shared_owners_ = 0;
    v486->__shared_weak_owners_ = 0;
    v486[1].__vftable = v487;
  }
  else
  {
    v486 = 0;
  }
  v644 = v486;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v639, "P_dim");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v485 + 24))(v485, &v643, 0, v639);
  if (v640 < 0)
    operator delete(v639[0]);
  v488 = v644;
  if (v644)
  {
    v489 = (unint64_t *)&v644->__shared_owners_;
    do
      v490 = __ldaxr(v489);
    while (__stlxr(v490 - 1, v489));
    if (!v490)
    {
      ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
      std::__shared_weak_count::__release_weak(v488);
    }
  }
  v491 = Scalar;
  Scalar = 0;
  if (v491)
    (*((void (**)(std::__shared_weak_count_vtbl *))v491->~__shared_weak_count + 1))(v491);
  if (v642 < 0)
    operator delete(v641[0]);
  v492 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v637 = Scalar;
  if (Scalar)
  {
    v493 = (std::__shared_weak_count *)operator new();
    v494 = Scalar;
    v493->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v493->__shared_owners_ = 0;
    v493->__shared_weak_owners_ = 0;
    v493[1].__vftable = v494;
  }
  else
  {
    v493 = 0;
  }
  v638 = v493;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v635, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v492 + 24))(v492, &v637, 1, v635);
  if (v636 < 0)
    operator delete(v635[0]);
  v495 = v638;
  if (v638)
  {
    v496 = (unint64_t *)&v638->__shared_owners_;
    do
      v497 = __ldaxr(v496);
    while (__stlxr(v497 - 1, v496));
    if (!v497)
    {
      ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
      std::__shared_weak_count::__release_weak(v495);
    }
  }
  v498 = Scalar;
  Scalar = 0;
  if (v498)
    (*((void (**)(std::__shared_weak_count_vtbl *))v498->~__shared_weak_count + 1))(v498);
  v499 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v633 = Scalar;
  if (Scalar)
  {
    v500 = (std::__shared_weak_count *)operator new();
    v501 = Scalar;
    v500->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v500->__shared_owners_ = 0;
    v500->__shared_weak_owners_ = 0;
    v500[1].__vftable = v501;
  }
  else
  {
    v500 = 0;
  }
  v634 = v500;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v631, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v499 + 24))(v499, &v633, 2, v631);
  if (v632 < 0)
    operator delete(v631[0]);
  v502 = v634;
  if (v634)
  {
    v503 = (unint64_t *)&v634->__shared_owners_;
    do
      v504 = __ldaxr(v503);
    while (__stlxr(v504 - 1, v503));
    if (!v504)
    {
      ((void (*)(std::__shared_weak_count *))v502->__on_zero_shared)(v502);
      std::__shared_weak_count::__release_weak(v502);
    }
  }
  v505 = Scalar;
  Scalar = 0;
  if (v505)
    (*((void (**)(std::__shared_weak_count_vtbl *))v505->~__shared_weak_count + 1))(v505);
  v506 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v629 = Scalar;
  if (Scalar)
  {
    v507 = (std::__shared_weak_count *)operator new();
    v508 = Scalar;
    v507->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v507->__shared_owners_ = 0;
    v507->__shared_weak_owners_ = 0;
    v507[1].__vftable = v508;
  }
  else
  {
    v507 = 0;
  }
  v630 = v507;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v627, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v506 + 24))(v506, &v629, 0, v627);
  if (v628 < 0)
    operator delete(v627[0]);
  v509 = v630;
  if (v630)
  {
    v510 = (unint64_t *)&v630->__shared_owners_;
    do
      v511 = __ldaxr(v510);
    while (__stlxr(v511 - 1, v510));
    if (!v511)
    {
      ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
      std::__shared_weak_count::__release_weak(v509);
    }
  }
  v512 = Scalar;
  Scalar = 0;
  if (v512)
    (*((void (**)(std::__shared_weak_count_vtbl *))v512->~__shared_weak_count + 1))(v512);
  v513 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v625 = Scalar;
  if (Scalar)
  {
    v514 = (std::__shared_weak_count *)operator new();
    v515 = Scalar;
    v514->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v514->__shared_owners_ = 0;
    v514->__shared_weak_owners_ = 0;
    v514[1].__vftable = v515;
  }
  else
  {
    v514 = 0;
  }
  v626 = v514;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v623, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v513 + 24))(v513, &v625, 1, v623);
  if (v624 < 0)
    operator delete(v623[0]);
  v516 = v626;
  if (v626)
  {
    v517 = (unint64_t *)&v626->__shared_owners_;
    do
      v518 = __ldaxr(v517);
    while (__stlxr(v518 - 1, v517));
    if (!v518)
    {
      ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
      std::__shared_weak_count::__release_weak(v516);
    }
  }
  v519 = Scalar;
  Scalar = 0;
  if (v519)
    (*((void (**)(std::__shared_weak_count_vtbl *))v519->~__shared_weak_count + 1))(v519);
  v520 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v621 = Scalar;
  if (Scalar)
  {
    v521 = (std::__shared_weak_count *)operator new();
    v522 = Scalar;
    v521->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v521->__shared_owners_ = 0;
    v521->__shared_weak_owners_ = 0;
    v521[1].__vftable = v522;
  }
  else
  {
    v521 = 0;
  }
  v622 = v521;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v619, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v520 + 24))(v520, &v621, 0, v619);
  if (v620 < 0)
    operator delete(v619[0]);
  v523 = v622;
  if (v622)
  {
    v524 = (unint64_t *)&v622->__shared_owners_;
    do
      v525 = __ldaxr(v524);
    while (__stlxr(v525 - 1, v524));
    if (!v525)
    {
      ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
      std::__shared_weak_count::__release_weak(v523);
    }
  }
  v526 = Scalar;
  Scalar = 0;
  if (v526)
    (*((void (**)(std::__shared_weak_count_vtbl *))v526->~__shared_weak_count + 1))(v526);
  v527 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)2, 0, &Scalar);
  v617 = Scalar;
  if (Scalar)
  {
    v528 = (std::__shared_weak_count *)operator new();
    v529 = Scalar;
    v528->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v528->__shared_owners_ = 0;
    v528->__shared_weak_owners_ = 0;
    v528[1].__vftable = v529;
  }
  else
  {
    v528 = 0;
  }
  v618 = v528;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v615, "H_dir");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v527 + 24))(v527, &v617, 1, v615);
  if (v616 < 0)
    operator delete(v615[0]);
  v530 = v618;
  if (v618)
  {
    v531 = (unint64_t *)&v618->__shared_owners_;
    do
      v532 = __ldaxr(v531);
    while (__stlxr(v532 - 1, v531));
    if (!v532)
    {
      ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
      std::__shared_weak_count::__release_weak(v530);
    }
  }
  v533 = Scalar;
  Scalar = 0;
  if (v533)
    (*((void (**)(std::__shared_weak_count_vtbl *))v533->~__shared_weak_count + 1))(v533);
  v534 = *a3;
  v613 = __p;
  if (__p)
  {
    v535 = (std::__shared_weak_count *)operator new();
    v536 = (std::__shared_weak_count_vtbl *)__p;
    v535->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v535->__shared_owners_ = 0;
    v535->__shared_weak_owners_ = 0;
    v535[1].__vftable = v536;
  }
  else
  {
    v535 = 0;
  }
  v614 = v535;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v534 + 56))(v534, &v613);
  v537 = v614;
  if (v614)
  {
    v538 = (unint64_t *)&v614->__shared_owners_;
    do
      v539 = __ldaxr(v538);
    while (__stlxr(v539 - 1, v538));
    if (!v539)
    {
      ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
      std::__shared_weak_count::__release_weak(v537);
    }
  }
  v540 = __p;
  __p = 0;
  if (v540)
    (*(void (**)(void *))(*(_QWORD *)v540 + 8))(v540);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v849);
  v541 = v849;
  std::string::basic_string[abi:ne180100]<0>(v609, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v609, 0, &v887);
  v611 = v887;
  if (v887)
  {
    v542 = (std::__shared_weak_count *)operator new();
    v543 = v887;
    v542->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v542->__shared_owners_ = 0;
    v542->__shared_weak_owners_ = 0;
    v542[1].__vftable = (std::__shared_weak_count_vtbl *)v543;
  }
  else
  {
    v542 = 0;
  }
  v612 = v542;
  v887 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bidirectional");
  std::string::basic_string[abi:ne180100]<0>(&v872, "forward");
  std::string::basic_string[abi:ne180100]<0>(v874, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 3);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v541 + 24))(v541, &v611, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v874[i + 2]) < 0)
      operator delete((void *)v874[i]);
  }
  v545 = v612;
  if (v612)
  {
    v546 = (unint64_t *)&v612->__shared_owners_;
    do
      v547 = __ldaxr(v546);
    while (__stlxr(v547 - 1, v546));
    if (!v547)
    {
      ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
      std::__shared_weak_count::__release_weak(v545);
    }
  }
  v548 = v887;
  v887 = 0;
  if (v548)
    (*(void (**)(uint64_t))(*(_QWORD *)v548 + 8))(v548);
  if (v610 < 0)
    operator delete(v609[0]);
  v549 = v849;
  std::string::basic_string[abi:ne180100]<0>(v605, "recurrent_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v605, 0, &v887);
  v607 = v887;
  if (v887)
  {
    v550 = (std::__shared_weak_count *)operator new();
    v551 = v887;
    v550->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v550->__shared_owners_ = 0;
    v550->__shared_weak_owners_ = 0;
    v550[1].__vftable = (std::__shared_weak_count_vtbl *)v551;
  }
  else
  {
    v550 = 0;
  }
  v608 = v550;
  v887 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v872, "linear");
  std::string::basic_string[abi:ne180100]<0>(v874, "relu");
  std::string::basic_string[abi:ne180100]<0>(v875, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v876, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v877, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v549 + 24))(v549, &v607, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v877[j + 2]) < 0)
      operator delete((void *)v877[j]);
  }
  v553 = v608;
  if (v608)
  {
    v554 = (unint64_t *)&v608->__shared_owners_;
    do
      v555 = __ldaxr(v554);
    while (__stlxr(v555 - 1, v554));
    if (!v555)
    {
      ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
      std::__shared_weak_count::__release_weak(v553);
    }
  }
  v556 = v887;
  v887 = 0;
  if (v556)
    (*(void (**)(uint64_t))(*(_QWORD *)v556 + 8))(v556);
  if (v606 < 0)
    operator delete(v605[0]);
  v557 = v849;
  std::string::basic_string[abi:ne180100]<0>(v601, "cell_activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v601, 0, &v887);
  v603 = v887;
  if (v887)
  {
    v558 = (std::__shared_weak_count *)operator new();
    v559 = v887;
    v558->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v558->__shared_owners_ = 0;
    v558->__shared_weak_owners_ = 0;
    v558[1].__vftable = (std::__shared_weak_count_vtbl *)v559;
  }
  else
  {
    v558 = 0;
  }
  v604 = v558;
  v887 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v872, "linear");
  std::string::basic_string[abi:ne180100]<0>(v874, "relu");
  std::string::basic_string[abi:ne180100]<0>(v875, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v876, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v877, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v557 + 24))(v557, &v603, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -18; k -= 3)
  {
    if (SHIBYTE(v877[k + 2]) < 0)
      operator delete((void *)v877[k]);
  }
  v561 = v604;
  if (v604)
  {
    v562 = (unint64_t *)&v604->__shared_owners_;
    do
      v563 = __ldaxr(v562);
    while (__stlxr(v563 - 1, v562));
    if (!v563)
    {
      ((void (*)(std::__shared_weak_count *))v561->__on_zero_shared)(v561);
      std::__shared_weak_count::__release_weak(v561);
    }
  }
  v564 = v887;
  v887 = 0;
  if (v564)
    (*(void (**)(uint64_t))(*(_QWORD *)v564 + 8))(v564);
  if (v602 < 0)
    operator delete(v601[0]);
  v565 = v849;
  std::string::basic_string[abi:ne180100]<0>(v597, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v597, 0, &v887);
  v599 = v887;
  if (v887)
  {
    v566 = (std::__shared_weak_count *)operator new();
    v567 = v887;
    v566->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v566->__shared_owners_ = 0;
    v566->__shared_weak_owners_ = 0;
    v566[1].__vftable = (std::__shared_weak_count_vtbl *)v567;
  }
  else
  {
    v566 = 0;
  }
  v600 = v566;
  v887 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v872, "linear");
  std::string::basic_string[abi:ne180100]<0>(v874, "relu");
  std::string::basic_string[abi:ne180100]<0>(v875, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v876, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v877, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v565 + 24))(v565, &v599, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v877[m + 2]) < 0)
      operator delete((void *)v877[m]);
  }
  v569 = v600;
  if (v600)
  {
    v570 = (unint64_t *)&v600->__shared_owners_;
    do
      v571 = __ldaxr(v570);
    while (__stlxr(v571 - 1, v570));
    if (!v571)
    {
      ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
      std::__shared_weak_count::__release_weak(v569);
    }
  }
  v572 = v887;
  v887 = 0;
  if (v572)
    (*(void (**)(uint64_t))(*(_QWORD *)v572 + 8))(v572);
  if (v598 < 0)
    operator delete(v597[0]);
  v573 = v849;
  std::string::basic_string[abi:ne180100]<0>(v593, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v593, 1, &v887);
  v595 = v887;
  if (v887)
  {
    v574 = (std::__shared_weak_count *)operator new();
    v575 = v887;
    v574->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v574->__shared_owners_ = 0;
    v574->__shared_weak_owners_ = 0;
    v574[1].__vftable = (std::__shared_weak_count_vtbl *)v575;
  }
  else
  {
    v574 = 0;
  }
  v596 = v574;
  v887 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v872, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v874, "int32");
  std::string::basic_string[abi:ne180100]<0>(v875, "int8");
  std::string::basic_string[abi:ne180100]<0>(v876, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v573 + 24))(v573, &v595, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (n = 0; n != -15; n -= 3)
  {
    if (SHIBYTE(v876[n + 2]) < 0)
      operator delete((void *)v876[n]);
  }
  v577 = v596;
  if (v596)
  {
    v578 = (unint64_t *)&v596->__shared_owners_;
    do
      v579 = __ldaxr(v578);
    while (__stlxr(v579 - 1, v578));
    if (!v579)
    {
      ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
      std::__shared_weak_count::__release_weak(v577);
    }
  }
  v580 = v887;
  v887 = 0;
  if (v580)
    (*(void (**)(uint64_t))(*(_QWORD *)v580 + 8))(v580);
  if (v594 < 0)
    operator delete(v593[0]);
  v581 = *a3;
  v591 = v849;
  if (v849)
  {
    v582 = (std::__shared_weak_count *)operator new();
    v583 = v849;
    v582->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v582->__shared_owners_ = 0;
    v582->__shared_weak_owners_ = 0;
    v582[1].__vftable = (std::__shared_weak_count_vtbl *)v583;
  }
  else
  {
    v582 = 0;
  }
  v592 = v582;
  v849 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v581 + 56))(v581, &v591);
  v584 = v592;
  if (v592)
  {
    v585 = (unint64_t *)&v592->__shared_owners_;
    do
      v586 = __ldaxr(v585);
    while (__stlxr(v586 - 1, v585));
    if (!v586)
    {
      ((void (*)(std::__shared_weak_count *))v584->__on_zero_shared)(v584);
      std::__shared_weak_count::__release_weak(v584);
    }
  }
  v587 = v849;
  v849 = 0;
  if (v587)
    (*(void (**)(uint64_t))(*(_QWORD *)v587 + 8))(v587);
  if (v888)
  {
    v588 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v888);
    MEMORY[0x1E0C023A0](v588, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v850, 0);
  result = (uint64_t)v868;
  if (v868)
  {
    v590 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v868);
    return MEMORY[0x1E0C023A0](v590, 0x10A0C408EF24B1CLL);
  }
  return result;
}

void sub_1E0872DE0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v4 = STACK[0xAB0];
  STACK[0xAB0] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v2 - 104), 0);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0xAB8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0xBD0], 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Operators::Common::ios16::RNN::Make@<X0>(void (***a1)(MIL::MILContextImpl *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count_vtbl *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  char *v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  char **v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count_vtbl *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  char *v114;
  char *v115;
  __int128 v116;
  char *v117;
  char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  char **v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  void *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count *v146;
  unint64_t *p_shared_owners;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count_vtbl *v158;
  void *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count_vtbl *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count_vtbl *v165;
  void *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count_vtbl *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count_vtbl *v172;
  void *v173;
  std::__shared_weak_count *v174;
  std::__shared_weak_count_vtbl *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count_vtbl *v179;
  void *v180;
  std::__shared_weak_count *v181;
  std::__shared_weak_count_vtbl *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count_vtbl *v186;
  void *v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count_vtbl *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count_vtbl *v193;
  void *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count_vtbl *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count_vtbl *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  void *v207;
  void *v208;
  std::__shared_weak_count *v209;
  std::__shared_weak_count_vtbl *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count_vtbl *v214;
  void *v215;
  std::__shared_weak_count *v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count_vtbl *v221;
  void *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count_vtbl *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count_vtbl *v228;
  void *v229;
  std::__shared_weak_count *v230;
  std::__shared_weak_count_vtbl *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count_vtbl *v235;
  void *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count_vtbl *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count_vtbl *v242;
  void *v243;
  std::__shared_weak_count *v244;
  std::__shared_weak_count_vtbl *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count_vtbl *v249;
  void *v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count_vtbl *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count_vtbl *v256;
  void *v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count_vtbl *v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count_vtbl *v263;
  void *v264;
  std::__shared_weak_count *v265;
  std::__shared_weak_count_vtbl *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count_vtbl *v270;
  void *v271;
  std::__shared_weak_count *v272;
  std::__shared_weak_count_vtbl *v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  std::__shared_weak_count_vtbl *v277;
  void *v278;
  std::__shared_weak_count *v279;
  std::__shared_weak_count_vtbl *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count_vtbl *v284;
  void *v285;
  std::__shared_weak_count *v286;
  std::__shared_weak_count_vtbl *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count_vtbl *v291;
  void *v292;
  std::__shared_weak_count *v293;
  std::__shared_weak_count_vtbl *v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count_vtbl *v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  std::__shared_weak_count_vtbl *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  void *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  uint64_t v308;
  uint64_t i;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  uint64_t v316;
  uint64_t j;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  uint64_t v324;
  uint64_t k;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  std::__shared_weak_count *v331;
  uint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t result;
  uint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  void *v342[2];
  char v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  void *v346[2];
  char v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  void *v350[2];
  char v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  void *v354;
  std::__shared_weak_count *v355;
  void *v356[2];
  char v357;
  std::__shared_weak_count_vtbl *v358;
  std::__shared_weak_count *v359;
  void *v360[2];
  char v361;
  std::__shared_weak_count_vtbl *v362;
  std::__shared_weak_count *v363;
  void *v364[2];
  char v365;
  std::__shared_weak_count_vtbl *v366;
  std::__shared_weak_count *v367;
  void *v368[2];
  char v369;
  std::__shared_weak_count_vtbl *v370;
  std::__shared_weak_count *v371;
  void *v372[2];
  char v373;
  void *v374[2];
  char v375;
  std::__shared_weak_count_vtbl *v376;
  std::__shared_weak_count *v377;
  void *v378[2];
  char v379;
  void *v380[2];
  char v381;
  std::__shared_weak_count_vtbl *v382;
  std::__shared_weak_count *v383;
  void *v384[2];
  char v385;
  void *v386[2];
  char v387;
  std::__shared_weak_count_vtbl *v388;
  std::__shared_weak_count *v389;
  void *v390[2];
  char v391;
  void *v392[2];
  char v393;
  std::__shared_weak_count_vtbl *v394;
  std::__shared_weak_count *v395;
  void *v396[2];
  char v397;
  void *v398[2];
  char v399;
  std::__shared_weak_count_vtbl *v400;
  std::__shared_weak_count *v401;
  void *v402[2];
  char v403;
  void *v404[2];
  char v405;
  std::__shared_weak_count_vtbl *v406;
  std::__shared_weak_count *v407;
  void *v408[2];
  char v409;
  void *v410[2];
  char v411;
  std::__shared_weak_count_vtbl *v412;
  std::__shared_weak_count *v413;
  void *v414[2];
  char v415;
  void *v416[2];
  char v417;
  std::__shared_weak_count_vtbl *v418;
  std::__shared_weak_count *v419;
  void *v420[2];
  char v421;
  void *v422[2];
  char v423;
  std::__shared_weak_count_vtbl *v424;
  std::__shared_weak_count *v425;
  void *v426;
  std::__shared_weak_count *v427;
  void *v428[2];
  char v429;
  std::__shared_weak_count_vtbl *v430;
  std::__shared_weak_count *v431;
  void *v432[2];
  char v433;
  std::__shared_weak_count_vtbl *v434;
  std::__shared_weak_count *v435;
  void *v436[2];
  char v437;
  void *v438[2];
  char v439;
  std::__shared_weak_count_vtbl *v440;
  std::__shared_weak_count *v441;
  void *v442[2];
  char v443;
  void *v444[2];
  char v445;
  std::__shared_weak_count_vtbl *v446;
  std::__shared_weak_count *v447;
  void *v448[2];
  char v449;
  void *v450[2];
  char v451;
  std::__shared_weak_count_vtbl *v452;
  std::__shared_weak_count *v453;
  void *v454[2];
  char v455;
  void *v456[2];
  char v457;
  std::__shared_weak_count_vtbl *v458;
  std::__shared_weak_count *v459;
  void *v460[2];
  char v461;
  void *v462[2];
  char v463;
  std::__shared_weak_count_vtbl *v464;
  std::__shared_weak_count *v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  __n128 v468;
  __int128 v469;
  __int128 v470;
  void *v471[2];
  uint64_t v472;
  __n128 v473;
  __n128 v474;
  uint64_t v475;
  char **v476;
  __n128 v477;
  __n128 v478;
  __n128 v479;
  __n128 v480;
  __n128 v481;
  __n128 v482;
  __n128 v483;
  __n128 v484;
  _QWORD *v485;
  void *__p;
  void *v487;
  char *v488;
  char *v489;
  char **v490;
  char v491;
  _QWORD v492[3];
  _QWORD v493[3];
  _QWORD v494[3];
  _QWORD v495[3];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *p_get_deleter;
  _QWORD *p_on_zero_shared;
  _QWORD v499[3];
  _QWORD *v500;
  _BYTE v501[24];
  _BYTE *v502;
  _QWORD v503[3];
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t v508;

  v508 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v485 = (_QWORD *)v6;
  v7 = MIL::IRUnknownDimension::Make(a1, 0);
  v8 = MIL::IRUnknownDimension::Make(a1, 0);
  v9 = MIL::IRUnknownDimension::Make(a1, 0);
  v10 = (char *)operator new(0x18uLL);
  v488 = v10 + 24;
  *(_QWORD *)v10 = v7;
  *((_QWORD *)v10 + 1) = v8;
  *((_QWORD *)v10 + 2) = v9;
  __p = v10;
  v487 = v10 + 24;
  v506 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v506, 1, &v484);
  MIL::IRParameter::Make(&v484, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v6, "x", (uint64_t *)&Scalar);
  v11 = Scalar;
  Scalar = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = (std::__shared_weak_count *)v484.n128_u64[1];
  if (v484.n128_u64[1])
  {
    v13 = (unint64_t *)(v484.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v487 = __p;
    operator delete(__p);
  }
  v15 = v485;
  v16 = MIL::IRUnknownDimension::Make(a1, 0);
  v17 = MIL::IRUnknownDimension::Make(a1, 0);
  v18 = (char *)operator new(0x10uLL);
  v488 = v18 + 16;
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  __p = v18;
  v487 = v18 + 16;
  v506 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v506, 1, &v483);
  MIL::IRParameter::Make(&v483, (uint64_t *)&Scalar);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v15, "initial_h", (uint64_t *)&Scalar);
  v19 = Scalar;
  Scalar = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  v20 = (std::__shared_weak_count *)v483.n128_u64[1];
  if (v483.n128_u64[1])
  {
    v21 = (unint64_t *)(v483.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (__p)
  {
    v487 = __p;
    operator delete(__p);
  }
  v23 = v485;
  v24 = MIL::IRUnknownDimension::Make(a1, 0);
  v25 = MIL::IRUnknownDimension::Make(a1, 0);
  v26 = (char *)operator new(0x10uLL);
  v488 = v26 + 16;
  *(_QWORD *)v26 = v24;
  *((_QWORD *)v26 + 1) = v25;
  __p = v26;
  v487 = v26 + 16;
  v506 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v506, 1, &v482);
  MIL::IRParameter::Make(&v482, (uint64_t *)&Scalar);
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v23, "weight_ih", (uint64_t *)&Scalar);
  v28 = Scalar;
  Scalar = 0;
  if (v28)
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
  v29 = (std::__shared_weak_count *)v482.n128_u64[1];
  if (v482.n128_u64[1])
  {
    v30 = (unint64_t *)(v482.n128_u64[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (__p)
  {
    v487 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v27 + 5) + 32))(*((_QWORD *)v27 + 5), 1);
  v32 = v485;
  v33 = MIL::IRUnknownDimension::Make(a1, 0);
  v34 = MIL::IRUnknownDimension::Make(a1, 0);
  v35 = (char *)operator new(0x10uLL);
  v488 = v35 + 16;
  *(_QWORD *)v35 = v33;
  *((_QWORD *)v35 + 1) = v34;
  __p = v35;
  v487 = v35 + 16;
  v506 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v506, 1, &v481);
  MIL::IRParameter::Make(&v481, (uint64_t *)&Scalar);
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v32, "weight_hh", (uint64_t *)&Scalar);
  v37 = Scalar;
  Scalar = 0;
  if (v37)
    (*((void (**)(std::__shared_weak_count_vtbl *))v37->~__shared_weak_count + 1))(v37);
  v38 = (std::__shared_weak_count *)v481.n128_u64[1];
  if (v481.n128_u64[1])
  {
    v39 = (unint64_t *)(v481.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v487 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v36 + 5) + 32))(*((_QWORD *)v36 + 5), 1);
  v41 = v485;
  v42 = MIL::IRUnknownDimension::Make(a1, 0);
  v43 = (char *)operator new(8uLL);
  __p = v43;
  *(_QWORD *)v43 = v42;
  v488 = v43 + 8;
  v487 = v43 + 8;
  v506 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&__p);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v506, 1, &v480);
  MIL::IRParameter::Make(&v480, (uint64_t *)&Scalar);
  v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v41, "bias", (uint64_t *)&Scalar);
  v45 = Scalar;
  Scalar = 0;
  if (v45)
    (*((void (**)(std::__shared_weak_count_vtbl *))v45->~__shared_weak_count + 1))(v45);
  v46 = (std::__shared_weak_count *)v480.n128_u64[1];
  if (v480.n128_u64[1])
  {
    v47 = (unint64_t *)(v480.n128_u64[1] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (__p)
  {
    v487 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 32))(*((_QWORD *)v44 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v44 + 5) + 48))(*((_QWORD *)v44 + 5), 1);
  v49 = v485;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v479);
  MIL::IRParameter::Make(&v479, (uint64_t *)&__p);
  v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(v49, "direction", (uint64_t *)&__p);
  v51 = __p;
  __p = 0;
  if (v51)
    (*(void (**)(void *))(*(_QWORD *)v51 + 8))(v51);
  v52 = (std::__shared_weak_count *)v479.n128_u64[1];
  if (v479.n128_u64[1])
  {
    v53 = (unint64_t *)(v479.n128_u64[1] + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v50 + 5) + 32))(*((_QWORD *)v50 + 5), 1);
  v55 = v485;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 2);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v478);
  MIL::IRParameter::Make(&v478, (uint64_t *)&__p);
  v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(v55, "output_sequence", (uint64_t *)&__p);
  v57 = __p;
  __p = 0;
  if (v57)
    (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = (std::__shared_weak_count *)v478.n128_u64[1];
  if (v478.n128_u64[1])
  {
    v59 = (unint64_t *)(v478.n128_u64[1] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v56 + 5) + 32))(*((_QWORD *)v56 + 5), 1);
  v61 = v485;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v477);
  MIL::IRParameter::Make(&v477, (uint64_t *)&__p);
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(v61, "activation", (uint64_t *)&__p);
  v63 = __p;
  __p = 0;
  if (v63)
    (*(void (**)(void *))(*(_QWORD *)v63 + 8))(v63);
  v64 = (std::__shared_weak_count *)v477.n128_u64[1];
  if (v477.n128_u64[1])
  {
    v65 = (unint64_t *)(v477.n128_u64[1] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v62 + 5) + 32))(*((_QWORD *)v62 + 5), 1);
  v476 = 0;
  v67 = operator new();
  *(_QWORD *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  *(_QWORD *)(v67 + 16) = 0;
  __p = 0;
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v476, (void **)v67);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&__p, 0);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v476, 2uLL);
  v68 = v476;
  v69 = MIL::IRUnknownDimension::Make(a1, 0);
  v70 = MIL::IRUnknownDimension::Make(a1, 0);
  v71 = MIL::IRUnknownDimension::Make(a1, 0);
  v72 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v72->__get_deleter;
  p_on_zero_shared = &v72->__get_deleter;
  v72->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v69;
  v72->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v70;
  v72->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v71;
  Scalar = v72;
  v505 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v505, 1, &v474);
  MIL::IRParameter::Make(&v474, &v475);
  v73 = v475;
  v506 = v475;
  if (v475)
  {
    v74 = (_QWORD *)operator new();
    v75 = v475;
    *v74 = &unk_1EA99F888;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = v75;
  }
  else
  {
    v74 = 0;
  }
  v507 = v74;
  v475 = 0;
  v76 = v68[2];
  v77 = v68[1];
  if (v77 >= v76)
  {
    v79 = (v77 - *v68) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v81 = v76 - *v68;
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v490 = v68 + 2;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v68 + 2), v82);
    v85 = (uint64_t *)&v83[16 * v79];
    *v85 = v73;
    v85[1] = (uint64_t)v74;
    v506 = 0;
    v507 = 0;
    v87 = *v68;
    v86 = v68[1];
    if (v86 == *v68)
    {
      v90 = v68[1];
      v88 = &v83[16 * v79];
    }
    else
    {
      v88 = &v83[16 * v79];
      do
      {
        v89 = *((_OWORD *)v86 - 1);
        v86 -= 16;
        *((_OWORD *)v88 - 1) = v89;
        v88 -= 16;
        *(_QWORD *)v86 = 0;
        *((_QWORD *)v86 + 1) = 0;
      }
      while (v86 != v87);
      v90 = *v68;
      v86 = v68[1];
    }
    v78 = (char *)(v85 + 2);
    *v68 = v88;
    v487 = v90;
    v68[1] = (char *)(v85 + 2);
    v488 = v86;
    v91 = v68[2];
    v68[2] = &v83[16 * v84];
    v489 = v91;
    __p = v90;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v77 = v73;
    *((_QWORD *)v77 + 1) = v74;
    v78 = v77 + 16;
    v506 = 0;
    v507 = 0;
  }
  v68[1] = v78;
  v92 = v475;
  v475 = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = (std::__shared_weak_count *)v474.n128_u64[1];
  if (v474.n128_u64[1])
  {
    v94 = (unint64_t *)(v474.n128_u64[1] + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  v96 = v476;
  v97 = MIL::IRUnknownDimension::Make(a1, 0);
  v98 = MIL::IRUnknownDimension::Make(a1, 0);
  v99 = (std::__shared_weak_count_vtbl *)operator new(0x10uLL);
  p_get_deleter = (std::__shared_weak_count_vtbl *)&v99->__on_zero_shared;
  p_on_zero_shared = &v99->__on_zero_shared;
  v99->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v97;
  v99->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v98;
  Scalar = v99;
  v505 = MIL::IRTensorValueType::MakeWithShape(a1, 5, (uint64_t)&Scalar);
  MIL::IRParameter::MakeTypeSet((uint64_t)&v505, 1, &v473);
  MIL::IRParameter::Make(&v473, &v475);
  v100 = v475;
  v506 = v475;
  if (v475)
  {
    v101 = (_QWORD *)operator new();
    v102 = v475;
    *v101 = &unk_1EA99F888;
    v101[1] = 0;
    v101[2] = 0;
    v101[3] = v102;
  }
  else
  {
    v101 = 0;
  }
  v507 = v101;
  v475 = 0;
  v103 = v96[2];
  v104 = v96[1];
  if (v104 >= v103)
  {
    v106 = (v104 - *v96) >> 4;
    v107 = v106 + 1;
    if ((unint64_t)(v106 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v108 = v103 - *v96;
    if (v108 >> 3 > v107)
      v107 = v108 >> 3;
    if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
      v109 = 0xFFFFFFFFFFFFFFFLL;
    else
      v109 = v107;
    v490 = v96 + 2;
    v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(v96 + 2), v109);
    v112 = (uint64_t *)&v110[16 * v106];
    *v112 = v100;
    v112[1] = (uint64_t)v101;
    v506 = 0;
    v507 = 0;
    v114 = *v96;
    v113 = v96[1];
    if (v113 == *v96)
    {
      v117 = v96[1];
      v115 = &v110[16 * v106];
    }
    else
    {
      v115 = &v110[16 * v106];
      do
      {
        v116 = *((_OWORD *)v113 - 1);
        v113 -= 16;
        *((_OWORD *)v115 - 1) = v116;
        v115 -= 16;
        *(_QWORD *)v113 = 0;
        *((_QWORD *)v113 + 1) = 0;
      }
      while (v113 != v114);
      v117 = *v96;
      v113 = v96[1];
    }
    v105 = (char *)(v112 + 2);
    *v96 = v115;
    v487 = v117;
    v96[1] = (char *)(v112 + 2);
    v488 = v113;
    v118 = v96[2];
    v96[2] = &v110[16 * v111];
    v489 = v118;
    __p = v117;
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((uint64_t)&__p);
  }
  else
  {
    *(_QWORD *)v104 = v100;
    *((_QWORD *)v104 + 1) = v101;
    v105 = v104 + 16;
    v506 = 0;
    v507 = 0;
  }
  v96[1] = v105;
  v119 = v475;
  v475 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = (std::__shared_weak_count *)v473.n128_u64[1];
  if (v473.n128_u64[1])
  {
    v121 = (unint64_t *)(v473.n128_u64[1] + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (Scalar)
  {
    p_get_deleter = Scalar;
    operator delete(Scalar);
  }
  *(_OWORD *)v471 = *(_OWORD *)a2;
  v472 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v123 = (uint64_t)v485;
  *(_QWORD *)&v470 = v485;
  if (v485)
  {
    v124 = (_QWORD *)operator new();
    *v124 = &unk_1EA99F8E8;
    v124[1] = 0;
    v124[2] = 0;
    v124[3] = v123;
  }
  else
  {
    v124 = 0;
  }
  *((_QWORD *)&v470 + 1) = v124;
  v485 = 0;
  *(_QWORD *)&v469 = v476;
  if (v476)
  {
    v125 = (_QWORD *)operator new();
    v126 = v476;
    *v125 = &unk_1EA99F948;
    v125[1] = 0;
    v125[2] = 0;
    v125[3] = v126;
  }
  else
  {
    v125 = 0;
  }
  *((_QWORD *)&v469 + 1) = v125;
  v476 = 0;
  v503[0] = &unk_1EA99FAC8;
  v503[1] = MIL::Operators::Common::ios16::CustomValidators::ValidateRNN;
  v504 = v503;
  v502 = 0;
  MIL::IROperator::Make((__int128 *)v471, &v470, &v469, (uint64_t)v503, (uint64_t)v501, a3);
  v127 = v502;
  if (v502 == v501)
  {
    v128 = 4;
    v127 = v501;
  }
  else
  {
    if (!v502)
      goto LABEL_130;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_130:
  v129 = v504;
  if (v504 == v503)
  {
    v130 = 4;
    v129 = v503;
    goto LABEL_134;
  }
  if (v504)
  {
    v130 = 5;
LABEL_134:
    (*(void (**)(void))(*v129 + 8 * v130))();
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v469 + 1);
  if (*((_QWORD *)&v469 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v469 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v470 + 1);
  if (*((_QWORD *)&v470 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v470 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  if (SHIBYTE(v472) < 0)
    operator delete(v471[0]);
  v506 = 0;
  v137 = operator new();
  *(_OWORD *)v137 = 0u;
  *(_OWORD *)(v137 + 16) = 0u;
  *(_DWORD *)(v137 + 32) = 1065353216;
  v506 = v137;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar(a1, 3);
  MIL::IRParameter::MakeTypeSet((uint64_t)&Scalar, 1, &v468);
  MIL::IRParameter::Make(&v468, (uint64_t *)&__p);
  v138 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[21],std::unique_ptr<MIL::IRParameter>>((_QWORD *)v137, "minimum_compute_type", (uint64_t *)&__p);
  v139 = __p;
  __p = 0;
  if (v139)
    (*(void (**)(void *))(*(_QWORD *)v139 + 8))(v139);
  v140 = (std::__shared_weak_count *)v468.n128_u64[1];
  if (v468.n128_u64[1])
  {
    v141 = (unint64_t *)(v468.n128_u64[1] + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v138 + 5) + 32))(*((_QWORD *)v138 + 5), 1);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v138 + 5) + 48))(*((_QWORD *)v138 + 5), 1);
  v143 = *a3;
  v144 = v506;
  v466 = v506;
  if (v506)
  {
    v145 = (std::__shared_weak_count *)operator new();
    v145->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F8E8;
    v145->__shared_owners_ = 0;
    v145->__shared_weak_owners_ = 0;
    v145[1].__vftable = (std::__shared_weak_count_vtbl *)v144;
  }
  else
  {
    v145 = 0;
  }
  v467 = v145;
  v506 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v143 + 184))(v143, &v466);
  v146 = v467;
  if (v467)
  {
    p_shared_owners = (unint64_t *)&v467->__shared_owners_;
    do
      v148 = __ldaxr(p_shared_owners);
    while (__stlxr(v148 - 1, p_shared_owners));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  v149 = *a3;
  v499[0] = &off_1EA99FBD8;
  v499[1] = MIL::Operators::Common::ios16::CustomValueTypeInference::ValueTypeInferenceRNN;
  v500 = v499;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v149 + 200))(v149, v499);
  v150 = v500;
  if (v500 == v499)
  {
    v151 = 4;
    v150 = v499;
  }
  else
  {
    if (!v500)
      goto LABEL_167;
    v151 = 5;
  }
  (*(void (**)(void))(*v150 + 8 * v151))();
LABEL_167:
  MIL::Validation::TensorDTypeConstraints::Make(&__p);
  v152 = __p;
  std::string::basic_string[abi:ne180100]<0>(v462, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v462, 0, (uint64_t *)&Scalar);
  v464 = Scalar;
  if (Scalar)
  {
    v153 = (std::__shared_weak_count *)operator new();
    v154 = Scalar;
    v153->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v153->__shared_owners_ = 0;
    v153->__shared_weak_owners_ = 0;
    v153[1].__vftable = v154;
  }
  else
  {
    v153 = 0;
  }
  v465 = v153;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v460, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v152 + 24))(v152, &v464, v460);
  if (v461 < 0)
    operator delete(v460[0]);
  v155 = v465;
  if (v465)
  {
    v156 = (unint64_t *)&v465->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = Scalar;
  Scalar = 0;
  if (v158)
    (*((void (**)(std::__shared_weak_count_vtbl *))v158->~__shared_weak_count + 1))(v158);
  if (v463 < 0)
    operator delete(v462[0]);
  v159 = __p;
  std::string::basic_string[abi:ne180100]<0>(v456, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v456, 0, (uint64_t *)&Scalar);
  v458 = Scalar;
  if (Scalar)
  {
    v160 = (std::__shared_weak_count *)operator new();
    v161 = Scalar;
    v160->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v160->__shared_owners_ = 0;
    v160->__shared_weak_owners_ = 0;
    v160[1].__vftable = v161;
  }
  else
  {
    v160 = 0;
  }
  v459 = v160;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v454, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v159 + 24))(v159, &v458, v454);
  if (v455 < 0)
    operator delete(v454[0]);
  v162 = v459;
  if (v459)
  {
    v163 = (unint64_t *)&v459->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
  }
  v165 = Scalar;
  Scalar = 0;
  if (v165)
    (*((void (**)(std::__shared_weak_count_vtbl *))v165->~__shared_weak_count + 1))(v165);
  if (v457 < 0)
    operator delete(v456[0]);
  v166 = __p;
  std::string::basic_string[abi:ne180100]<0>(v450, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v450, 0, (uint64_t *)&Scalar);
  v452 = Scalar;
  if (Scalar)
  {
    v167 = (std::__shared_weak_count *)operator new();
    v168 = Scalar;
    v167->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v167->__shared_owners_ = 0;
    v167->__shared_weak_owners_ = 0;
    v167[1].__vftable = v168;
  }
  else
  {
    v167 = 0;
  }
  v453 = v167;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v448, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v166 + 24))(v166, &v452, v448);
  if (v449 < 0)
    operator delete(v448[0]);
  v169 = v453;
  if (v453)
  {
    v170 = (unint64_t *)&v453->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  v172 = Scalar;
  Scalar = 0;
  if (v172)
    (*((void (**)(std::__shared_weak_count_vtbl *))v172->~__shared_weak_count + 1))(v172);
  if (v451 < 0)
    operator delete(v450[0]);
  v173 = __p;
  std::string::basic_string[abi:ne180100]<0>(v444, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v444, 0, (uint64_t *)&Scalar);
  v446 = Scalar;
  if (Scalar)
  {
    v174 = (std::__shared_weak_count *)operator new();
    v175 = Scalar;
    v174->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v174->__shared_owners_ = 0;
    v174->__shared_weak_owners_ = 0;
    v174[1].__vftable = v175;
  }
  else
  {
    v174 = 0;
  }
  v447 = v174;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v442, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v173 + 24))(v173, &v446, v442);
  if (v443 < 0)
    operator delete(v442[0]);
  v176 = v447;
  if (v447)
  {
    v177 = (unint64_t *)&v447->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = Scalar;
  Scalar = 0;
  if (v179)
    (*((void (**)(std::__shared_weak_count_vtbl *))v179->~__shared_weak_count + 1))(v179);
  if (v445 < 0)
    operator delete(v444[0]);
  v180 = __p;
  std::string::basic_string[abi:ne180100]<0>(v438, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v438, 1, (uint64_t *)&Scalar);
  v440 = Scalar;
  if (Scalar)
  {
    v181 = (std::__shared_weak_count *)operator new();
    v182 = Scalar;
    v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v181->__shared_owners_ = 0;
    v181->__shared_weak_owners_ = 0;
    v181[1].__vftable = v182;
  }
  else
  {
    v181 = 0;
  }
  v441 = v181;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v436, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v180 + 24))(v180, &v440, v436);
  if (v437 < 0)
    operator delete(v436[0]);
  v183 = v441;
  if (v441)
  {
    v184 = (unint64_t *)&v441->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = Scalar;
  Scalar = 0;
  if (v186)
    (*((void (**)(std::__shared_weak_count_vtbl *))v186->~__shared_weak_count + 1))(v186);
  if (v439 < 0)
    operator delete(v438[0]);
  v187 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v434 = Scalar;
  if (Scalar)
  {
    v188 = (std::__shared_weak_count *)operator new();
    v189 = Scalar;
    v188->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v188->__shared_owners_ = 0;
    v188->__shared_weak_owners_ = 0;
    v188[1].__vftable = v189;
  }
  else
  {
    v188 = 0;
  }
  v435 = v188;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v432, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v187 + 24))(v187, &v434, v432);
  if (v433 < 0)
    operator delete(v432[0]);
  v190 = v435;
  if (v435)
  {
    v191 = (unint64_t *)&v435->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  v193 = Scalar;
  Scalar = 0;
  if (v193)
    (*((void (**)(std::__shared_weak_count_vtbl *))v193->~__shared_weak_count + 1))(v193);
  v194 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v430 = Scalar;
  if (Scalar)
  {
    v195 = (std::__shared_weak_count *)operator new();
    v196 = Scalar;
    v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v195->__shared_owners_ = 0;
    v195->__shared_weak_owners_ = 0;
    v195[1].__vftable = v196;
  }
  else
  {
    v195 = 0;
  }
  v431 = v195;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v428, "T");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, void **))(*(_QWORD *)v194 + 24))(v194, &v430, v428);
  if (v429 < 0)
    operator delete(v428[0]);
  v197 = v431;
  if (v431)
  {
    v198 = (unint64_t *)&v431->__shared_owners_;
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = Scalar;
  Scalar = 0;
  if (v200)
    (*((void (**)(std::__shared_weak_count_vtbl *))v200->~__shared_weak_count + 1))(v200);
  v201 = *a3;
  v426 = __p;
  if (__p)
  {
    v202 = (std::__shared_weak_count *)operator new();
    v203 = (std::__shared_weak_count_vtbl *)__p;
    v202->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA08;
    v202->__shared_owners_ = 0;
    v202->__shared_weak_owners_ = 0;
    v202[1].__vftable = v203;
  }
  else
  {
    v202 = 0;
  }
  v427 = v202;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v201 + 56))(v201, &v426);
  v204 = v427;
  if (v427)
  {
    v205 = (unint64_t *)&v427->__shared_owners_;
    do
      v206 = __ldaxr(v205);
    while (__stlxr(v206 - 1, v205));
    if (!v206)
    {
      ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
      std::__shared_weak_count::__release_weak(v204);
    }
  }
  v207 = __p;
  __p = 0;
  if (v207)
    (*(void (**)(void *))(*(_QWORD *)v207 + 8))(v207);
  MIL::Validation::TensorSymbolicShapeConstraints::Make((uint64_t *)&__p);
  v208 = __p;
  std::string::basic_string[abi:ne180100]<0>(v422, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v422, 0, (uint64_t *)&Scalar);
  v424 = Scalar;
  if (Scalar)
  {
    v209 = (std::__shared_weak_count *)operator new();
    v210 = Scalar;
    v209->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v209->__shared_owners_ = 0;
    v209->__shared_weak_owners_ = 0;
    v209[1].__vftable = v210;
  }
  else
  {
    v209 = 0;
  }
  v425 = v209;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v420, "S");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v208 + 24))(v208, &v424, 0, v420);
  if (v421 < 0)
    operator delete(v420[0]);
  v211 = v425;
  if (v425)
  {
    v212 = (unint64_t *)&v425->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
  v214 = Scalar;
  Scalar = 0;
  if (v214)
    (*((void (**)(std::__shared_weak_count_vtbl *))v214->~__shared_weak_count + 1))(v214);
  if (v423 < 0)
    operator delete(v422[0]);
  v215 = __p;
  std::string::basic_string[abi:ne180100]<0>(v416, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v416, 0, (uint64_t *)&Scalar);
  v418 = Scalar;
  if (Scalar)
  {
    v216 = (std::__shared_weak_count *)operator new();
    v217 = Scalar;
    v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v216->__shared_owners_ = 0;
    v216->__shared_weak_owners_ = 0;
    v216[1].__vftable = v217;
  }
  else
  {
    v216 = 0;
  }
  v419 = v216;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v414, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v215 + 24))(v215, &v418, 1, v414);
  if (v415 < 0)
    operator delete(v414[0]);
  v218 = v419;
  if (v419)
  {
    v219 = (unint64_t *)&v419->__shared_owners_;
    do
      v220 = __ldaxr(v219);
    while (__stlxr(v220 - 1, v219));
    if (!v220)
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
  }
  v221 = Scalar;
  Scalar = 0;
  if (v221)
    (*((void (**)(std::__shared_weak_count_vtbl *))v221->~__shared_weak_count + 1))(v221);
  if (v417 < 0)
    operator delete(v416[0]);
  v222 = __p;
  std::string::basic_string[abi:ne180100]<0>(v410, "x");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v410, 0, (uint64_t *)&Scalar);
  v412 = Scalar;
  if (Scalar)
  {
    v223 = (std::__shared_weak_count *)operator new();
    v224 = Scalar;
    v223->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v223->__shared_owners_ = 0;
    v223->__shared_weak_owners_ = 0;
    v223[1].__vftable = v224;
  }
  else
  {
    v223 = 0;
  }
  v413 = v223;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v408, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v222 + 24))(v222, &v412, 2, v408);
  if (v409 < 0)
    operator delete(v408[0]);
  v225 = v413;
  if (v413)
  {
    v226 = (unint64_t *)&v413->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = Scalar;
  Scalar = 0;
  if (v228)
    (*((void (**)(std::__shared_weak_count_vtbl *))v228->~__shared_weak_count + 1))(v228);
  if (v411 < 0)
    operator delete(v410[0]);
  v229 = __p;
  std::string::basic_string[abi:ne180100]<0>(v404, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v404, 0, (uint64_t *)&Scalar);
  v406 = Scalar;
  if (Scalar)
  {
    v230 = (std::__shared_weak_count *)operator new();
    v231 = Scalar;
    v230->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v230->__shared_owners_ = 0;
    v230->__shared_weak_owners_ = 0;
    v230[1].__vftable = v231;
  }
  else
  {
    v230 = 0;
  }
  v407 = v230;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v402, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v229 + 24))(v229, &v406, 0, v402);
  if (v403 < 0)
    operator delete(v402[0]);
  v232 = v407;
  if (v407)
  {
    v233 = (unint64_t *)&v407->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = Scalar;
  Scalar = 0;
  if (v235)
    (*((void (**)(std::__shared_weak_count_vtbl *))v235->~__shared_weak_count + 1))(v235);
  if (v405 < 0)
    operator delete(v404[0]);
  v236 = __p;
  std::string::basic_string[abi:ne180100]<0>(v398, "initial_h");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v398, 0, (uint64_t *)&Scalar);
  v400 = Scalar;
  if (Scalar)
  {
    v237 = (std::__shared_weak_count *)operator new();
    v238 = Scalar;
    v237->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v237->__shared_owners_ = 0;
    v237->__shared_weak_owners_ = 0;
    v237[1].__vftable = v238;
  }
  else
  {
    v237 = 0;
  }
  v401 = v237;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v396, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v236 + 24))(v236, &v400, 1, v396);
  if (v397 < 0)
    operator delete(v396[0]);
  v239 = v401;
  if (v401)
  {
    v240 = (unint64_t *)&v401->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v242 = Scalar;
  Scalar = 0;
  if (v242)
    (*((void (**)(std::__shared_weak_count_vtbl *))v242->~__shared_weak_count + 1))(v242);
  if (v399 < 0)
    operator delete(v398[0]);
  v243 = __p;
  std::string::basic_string[abi:ne180100]<0>(v392, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v392, 0, (uint64_t *)&Scalar);
  v394 = Scalar;
  if (Scalar)
  {
    v244 = (std::__shared_weak_count *)operator new();
    v245 = Scalar;
    v244->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = v245;
  }
  else
  {
    v244 = 0;
  }
  v395 = v244;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v390, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v243 + 24))(v243, &v394, 0, v390);
  if (v391 < 0)
    operator delete(v390[0]);
  v246 = v395;
  if (v395)
  {
    v247 = (unint64_t *)&v395->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = Scalar;
  Scalar = 0;
  if (v249)
    (*((void (**)(std::__shared_weak_count_vtbl *))v249->~__shared_weak_count + 1))(v249);
  if (v393 < 0)
    operator delete(v392[0]);
  v250 = __p;
  std::string::basic_string[abi:ne180100]<0>(v386, "weight_ih");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v386, 0, (uint64_t *)&Scalar);
  v388 = Scalar;
  if (Scalar)
  {
    v251 = (std::__shared_weak_count *)operator new();
    v252 = Scalar;
    v251->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v251->__shared_owners_ = 0;
    v251->__shared_weak_owners_ = 0;
    v251[1].__vftable = v252;
  }
  else
  {
    v251 = 0;
  }
  v389 = v251;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v384, "I");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v250 + 24))(v250, &v388, 1, v384);
  if (v385 < 0)
    operator delete(v384[0]);
  v253 = v389;
  if (v389)
  {
    v254 = (unint64_t *)&v389->__shared_owners_;
    do
      v255 = __ldaxr(v254);
    while (__stlxr(v255 - 1, v254));
    if (!v255)
    {
      ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
      std::__shared_weak_count::__release_weak(v253);
    }
  }
  v256 = Scalar;
  Scalar = 0;
  if (v256)
    (*((void (**)(std::__shared_weak_count_vtbl *))v256->~__shared_weak_count + 1))(v256);
  if (v387 < 0)
    operator delete(v386[0]);
  v257 = __p;
  std::string::basic_string[abi:ne180100]<0>(v380, "weight_hh");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v380, 0, (uint64_t *)&Scalar);
  v382 = Scalar;
  if (Scalar)
  {
    v258 = (std::__shared_weak_count *)operator new();
    v259 = Scalar;
    v258->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v258->__shared_owners_ = 0;
    v258->__shared_weak_owners_ = 0;
    v258[1].__vftable = v259;
  }
  else
  {
    v258 = 0;
  }
  v383 = v258;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v378, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v257 + 24))(v257, &v382, 1, v378);
  if (v379 < 0)
    operator delete(v378[0]);
  v260 = v383;
  if (v383)
  {
    v261 = (unint64_t *)&v383->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = Scalar;
  Scalar = 0;
  if (v263)
    (*((void (**)(std::__shared_weak_count_vtbl *))v263->~__shared_weak_count + 1))(v263);
  if (v381 < 0)
    operator delete(v380[0]);
  v264 = __p;
  std::string::basic_string[abi:ne180100]<0>(v374, "bias");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v374, 1, (uint64_t *)&Scalar);
  v376 = Scalar;
  if (Scalar)
  {
    v265 = (std::__shared_weak_count *)operator new();
    v266 = Scalar;
    v265->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v265->__shared_owners_ = 0;
    v265->__shared_weak_owners_ = 0;
    v265[1].__vftable = v266;
  }
  else
  {
    v265 = 0;
  }
  v377 = v265;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v372, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v264 + 24))(v264, &v376, 0, v372);
  if (v373 < 0)
    operator delete(v372[0]);
  v267 = v377;
  if (v377)
  {
    v268 = (unint64_t *)&v377->__shared_owners_;
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  v270 = Scalar;
  Scalar = 0;
  if (v270)
    (*((void (**)(std::__shared_weak_count_vtbl *))v270->~__shared_weak_count + 1))(v270);
  if (v375 < 0)
    operator delete(v374[0]);
  v271 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v370 = Scalar;
  if (Scalar)
  {
    v272 = (std::__shared_weak_count *)operator new();
    v273 = Scalar;
    v272->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v272->__shared_owners_ = 0;
    v272->__shared_weak_owners_ = 0;
    v272[1].__vftable = v273;
  }
  else
  {
    v272 = 0;
  }
  v371 = v272;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v368, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v271 + 24))(v271, &v370, 1, v368);
  if (v369 < 0)
    operator delete(v368[0]);
  v274 = v371;
  if (v371)
  {
    v275 = (unint64_t *)&v371->__shared_owners_;
    do
      v276 = __ldaxr(v275);
    while (__stlxr(v276 - 1, v275));
    if (!v276)
    {
      ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
      std::__shared_weak_count::__release_weak(v274);
    }
  }
  v277 = Scalar;
  Scalar = 0;
  if (v277)
    (*((void (**)(std::__shared_weak_count_vtbl *))v277->~__shared_weak_count + 1))(v277);
  v278 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make(0, 0, &Scalar);
  v366 = Scalar;
  if (Scalar)
  {
    v279 = (std::__shared_weak_count *)operator new();
    v280 = Scalar;
    v279->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v279->__shared_owners_ = 0;
    v279->__shared_weak_owners_ = 0;
    v279[1].__vftable = v280;
  }
  else
  {
    v279 = 0;
  }
  v367 = v279;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v364, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v278 + 24))(v278, &v366, 2, v364);
  if (v365 < 0)
    operator delete(v364[0]);
  v281 = v367;
  if (v367)
  {
    v282 = (unint64_t *)&v367->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
  v284 = Scalar;
  Scalar = 0;
  if (v284)
    (*((void (**)(std::__shared_weak_count_vtbl *))v284->~__shared_weak_count + 1))(v284);
  v285 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v362 = Scalar;
  if (Scalar)
  {
    v286 = (std::__shared_weak_count *)operator new();
    v287 = Scalar;
    v286->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v286->__shared_owners_ = 0;
    v286->__shared_weak_owners_ = 0;
    v286[1].__vftable = v287;
  }
  else
  {
    v286 = 0;
  }
  v363 = v286;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v360, "B");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, _QWORD, void **))(*(_QWORD *)v285 + 24))(v285, &v362, 0, v360);
  if (v361 < 0)
    operator delete(v360[0]);
  v288 = v363;
  if (v363)
  {
    v289 = (unint64_t *)&v363->__shared_owners_;
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  v291 = Scalar;
  Scalar = 0;
  if (v291)
    (*((void (**)(std::__shared_weak_count_vtbl *))v291->~__shared_weak_count + 1))(v291);
  v292 = __p;
  MIL::Validation::OpOutputConstraintTarget::Make((MIL::Validation::OpOutputConstraintTarget *)1, 0, &Scalar);
  v358 = Scalar;
  if (Scalar)
  {
    v293 = (std::__shared_weak_count *)operator new();
    v294 = Scalar;
    v293->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99F9A8;
    v293->__shared_owners_ = 0;
    v293->__shared_weak_owners_ = 0;
    v293[1].__vftable = v294;
  }
  else
  {
    v293 = 0;
  }
  v359 = v293;
  Scalar = 0;
  std::string::basic_string[abi:ne180100]<0>(v356, "H");
  (*(void (**)(void *, std::__shared_weak_count_vtbl **, uint64_t, void **))(*(_QWORD *)v292 + 24))(v292, &v358, 1, v356);
  if (v357 < 0)
    operator delete(v356[0]);
  v295 = v359;
  if (v359)
  {
    v296 = (unint64_t *)&v359->__shared_owners_;
    do
      v297 = __ldaxr(v296);
    while (__stlxr(v297 - 1, v296));
    if (!v297)
    {
      ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
      std::__shared_weak_count::__release_weak(v295);
    }
  }
  v298 = Scalar;
  Scalar = 0;
  if (v298)
    (*((void (**)(std::__shared_weak_count_vtbl *))v298->~__shared_weak_count + 1))(v298);
  v299 = *a3;
  v354 = __p;
  if (__p)
  {
    v300 = (std::__shared_weak_count *)operator new();
    v301 = (std::__shared_weak_count_vtbl *)__p;
    v300->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FB78;
    v300->__shared_owners_ = 0;
    v300->__shared_weak_owners_ = 0;
    v300[1].__vftable = v301;
  }
  else
  {
    v300 = 0;
  }
  v355 = v300;
  __p = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v299 + 56))(v299, &v354);
  v302 = v355;
  if (v355)
  {
    v303 = (unint64_t *)&v355->__shared_owners_;
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
  v305 = __p;
  __p = 0;
  if (v305)
    (*(void (**)(void *))(*(_QWORD *)v305 + 8))(v305);
  MIL::Validation::PossibleStringValuesConstraints::Make(&v475);
  v306 = v475;
  std::string::basic_string[abi:ne180100]<0>(v350, "direction");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v350, 0, &v505);
  v352 = v505;
  if (v505)
  {
    v307 = (std::__shared_weak_count *)operator new();
    v308 = v505;
    v307->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v307->__shared_owners_ = 0;
    v307->__shared_weak_owners_ = 0;
    v307[1].__vftable = (std::__shared_weak_count_vtbl *)v308;
  }
  else
  {
    v307 = 0;
  }
  v353 = v307;
  v505 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "forward");
  std::string::basic_string[abi:ne180100]<0>(&v489, "reverse");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 2);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v306 + 24))(v306, &v352, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (i = 0; i != -6; i -= 3)
  {
    if (*(&v491 + i * 8) < 0)
      operator delete((&v489)[i]);
  }
  v310 = v353;
  if (v353)
  {
    v311 = (unint64_t *)&v353->__shared_owners_;
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  v313 = v505;
  v505 = 0;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  if (v351 < 0)
    operator delete(v350[0]);
  v314 = v475;
  std::string::basic_string[abi:ne180100]<0>(v346, "activation");
  MIL::Validation::OpParameterConstraintTarget::Make((uint64_t)v346, 0, &v505);
  v348 = v505;
  if (v505)
  {
    v315 = (std::__shared_weak_count *)operator new();
    v316 = v505;
    v315->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99ED08;
    v315->__shared_owners_ = 0;
    v315->__shared_weak_owners_ = 0;
    v315[1].__vftable = (std::__shared_weak_count_vtbl *)v316;
  }
  else
  {
    v315 = 0;
  }
  v349 = v315;
  v505 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard_sigmoid");
  std::string::basic_string[abi:ne180100]<0>(&v489, "linear");
  std::string::basic_string[abi:ne180100]<0>(v492, "relu");
  std::string::basic_string[abi:ne180100]<0>(v493, "scaled_tanh");
  std::string::basic_string[abi:ne180100]<0>(v494, "sigmoid");
  std::string::basic_string[abi:ne180100]<0>(v495, "tanh");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 6);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, _QWORD))(*(_QWORD *)v314 + 24))(v314, &v348, &Scalar, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v495[j + 2]) < 0)
      operator delete((void *)v495[j]);
  }
  v318 = v349;
  if (v349)
  {
    v319 = (unint64_t *)&v349->__shared_owners_;
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v321 = v505;
  v505 = 0;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  if (v347 < 0)
    operator delete(v346[0]);
  v322 = v475;
  std::string::basic_string[abi:ne180100]<0>(v342, "minimum_compute_type");
  MIL::Validation::OpAttributeConstraintTarget::Make((uint64_t)v342, 1, &v505);
  v344 = v505;
  if (v505)
  {
    v323 = (std::__shared_weak_count *)operator new();
    v324 = v505;
    v323->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9A0D78;
    v323->__shared_owners_ = 0;
    v323->__shared_weak_owners_ = 0;
    v323[1].__vftable = (std::__shared_weak_count_vtbl *)v324;
  }
  else
  {
    v323 = 0;
  }
  v345 = v323;
  v505 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "fp16");
  std::string::basic_string[abi:ne180100]<0>(&v489, "fp32");
  std::string::basic_string[abi:ne180100]<0>(v492, "int32");
  std::string::basic_string[abi:ne180100]<0>(v493, "int8");
  std::string::basic_string[abi:ne180100]<0>(v494, "uint8");
  std::unordered_set<std::string>::unordered_set((uint64_t)&Scalar, (unsigned __int8 *)&__p, 5);
  (*(void (**)(uint64_t, uint64_t *, std::__shared_weak_count_vtbl **, uint64_t))(*(_QWORD *)v322 + 24))(v322, &v344, &Scalar, 1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&Scalar);
  for (k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v494[k + 2]) < 0)
      operator delete((void *)v494[k]);
  }
  v326 = v345;
  if (v345)
  {
    v327 = (unint64_t *)&v345->__shared_owners_;
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  v329 = v505;
  v505 = 0;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  if (v343 < 0)
    operator delete(v342[0]);
  v330 = *a3;
  v340 = v475;
  if (v475)
  {
    v331 = (std::__shared_weak_count *)operator new();
    v332 = v475;
    v331->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA99FA68;
    v331->__shared_owners_ = 0;
    v331->__shared_weak_owners_ = 0;
    v331[1].__vftable = (std::__shared_weak_count_vtbl *)v332;
  }
  else
  {
    v331 = 0;
  }
  v341 = v331;
  v475 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v330 + 56))(v330, &v340);
  v333 = v341;
  if (v341)
  {
    v334 = (unint64_t *)&v341->__shared_owners_;
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
      std::__shared_weak_count::__release_weak(v333);
    }
  }
  v336 = v475;
  v475 = 0;
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
  if (v506)
  {
    v337 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v506);
    MEMORY[0x1E0C023A0](v337, 0x10A0C408EF24B1CLL);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&v476, 0);
  result = (uint64_t)v485;
  if (v485)
  {
    v339 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v485);
    return MEMORY[0x1E0C023A0](v339, 0x10A0C408EF24B1CLL);
  }
  return result;
}

